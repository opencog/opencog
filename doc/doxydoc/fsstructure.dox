/**
\page fsstructure Structure of the package

This page gives some hints about the organisation of the
package in directories and files.

\section sect_main Main directory files

<DL>

<DT>AUTHORS</DT>
<DD>lists persons that contributed to the project</DD>

<DT>CMakeLists.txt</DT>
<DD>control file for CMake build system</DD>

<DT>CMakeLists.txt.user</DT>
<DD>(not part of the distribution) generated by Qt Creator if you're using it</DD>

<DT>HACKING</DT>
<DD>guidelines for editing files; 80 columns max is not enforced in actual code</DD>

<DT>LICENSE</DT>
<DD>Same text as in \ref license page</DD>

<DT>marks.bzr</DT>
<DD>Helper for converting from Bazaar to Git (guess)</DD>

<DT>marks.git</DT>
<DD>Helper for converting from Bazaar to Git (guess)</DD>

<DT>opencog.spec</DT>
<DD>spec file for RPM package opencog</DD>

<DT>README.md</DT>
<DD>A high level overview of the project, various information</DD>

<DT>Vagrantfile</DT>
<DD>Control file for 
<a href="http://wiki.opencog.org/w/Setup_OpenCog_development_environment_VM_using_Vagrant">Vagrant</a>.
This is virtualization thechnology that runs on top of existing programs,
allowing an easy set-up of the development environment.
</DD>
</DL>

\section sect_doc doc directory
Documentation for various components is kept here.

\section sect_examples examples directory
Example code using opencog.

\section sect_include include directory
(hack) has only one sub-directory (win32) with one file: getopt.h

\section sect_lib lib directory
A number of cmake support files and other components (better name, anyone?).

\section sect_opencog opencog directory
Main source directory.
<DL>

<DT>atomspace</DT>
<DD>
has the sources for atomspace library and a 
tester program (atomspace_async target); a separate target 
is provided for opencog_atom_types; see \ref libatomspace "its page"
</DD>

<DT>benchmark</DT>
<DD>this is tool developed by Joel Pitt, in order to 
assess the impact of changes to the AtomSpace API; it produces a 
single target - \b atomspace_bm </DD>

<DT>comboreduct</DT>
<DD>has \b comboreduct library and a host of executables in 
comboreduct/main; see \ref libcomboreduct "its page"</DD>

<DT>cycl-import (stub)</DT>
<DD>has a readme with infos about 
<a href="http://lillybot.wiki.sourceforge.net/">Lillybot</a> - a prototype opencyc-chatbot
</DD>

<DT>cython</DT>
<DD>Python bindings for OpenCog</DD>

<DT>dynamics</DT>
<DD>
all mindagents involved with the dynamic evolution of the OpenCog
system (only attention for now)
</DD>

<DT>embodiment</DT>
<DD>
Embodiment is a system of components for OpenCog that 
are designed to control an avatar.
</DD>

<DT>guile</DT>
<DD>
contains an implementation of the 
<a href="http://en.wikipedia.org/wiki/Scheme_%28programming_language%29">Scheme</a>
shell for the OpenCog server. Scheme is a dialect of 
<a href="http://en.wikipedia.org/wiki/Lisp_%28programming_language%29">Lisp</a>;
the shell allows scheme code to manipulate the contents of 
an OpenCog AtomSpace.  The shell is
implemented in <a href="http://www.gnu.org/software/guile/guile.html">guile</a>.
</DD>

<DT>implication (stub)</DT>
<DD>
The goal of the ideas in this
directory is to provide a more "human-friendly" way to write
ImplicationLinks for many common usage scenarios.
</DD>

<DT>learning</DT>
<DD>
code that relate to learning; contains moses, pleasure
</DD>

<DT>nlp</DT>
<DD>all code related to natural language processing code</DD>

<DT>persist</DT>
<DD>
persistent storage; completed in various degrees for
sql, xml, hypertable
</DD>

<DT>python</DT>
<DD>
a series of Python scripts to be used with the 
Gephi Graph Streaming Plugin
</DD>

<DT>query</DT>
<DD>
Query Processing/Pattern Matching - contains code 
that implements a subgraph isomorphism
algorithm, and then uses this algorithm to support several functions,
including query processing and a first-order-logic forward chainer
</DD>

<DT>reasoning</DT>
various reasoning and inference systems currently 
implemented in OpenCog. Currently this is only 
PLN, but in future this might include NARS and others.
<DD></DD>

<DT>scm</DT>
<DD>
This repository contains assorted routines, 
written in scheme, for manipulating
OpenCog atoms and systems, in various general ways
</DD>

<DT>server</DT>
<DD>
The CogServer provides a simple network shell server interface to the 
various functions in the opencog system.
</DD>

<DT>shell</DT>
<DD>
Basic shell interface and shells for scheme
and Python
</DD>

<DT>spacetime</DT>
<DD>
space & time related code and atoms.
</DD>

<DT>spatial</DT>
<DD>
This module contains several tools for creating and managing a
simplified representation of a given environment. MapTools is a 
tool that allows to "see" what the agent is perceiving in real
time
</DD>

<DT>util</DT>
<DD>Various code relevant to entire project; see \ref libcogutil "its page"</DD>

<DT>visualization</DT>
<DD>Graphics and Visualization Tools including gtk-visualizer,
adapter for tulip, dotty, ubigraph</DD>

<DT>viterbi</DT>
<DD>
This directory contains code pertaining to an experimental Viterbi
parser for the Link Grammar dictionary.
</DD>

<DT>web</DT>
<DD>
The ocweb module implements a HTTP server that provides both a
web GUI for navigating the AtomSpace and a REST API
</DD>

</DL>


\section sect_scripts scripts directory
Support scripts for various tasks.

\section sect_tests tests directory
Source code for tests.

\section sect_vagrant_configs vagrant-configs directory
Contains a single file: vagrant-vm-setup.sh. It is run inside 
<a href="http://wiki.opencog.org/w/Setup_OpenCog_development_environment_VM_using_Vagrant">Vagrant</a>
virtual machine on the first run to install prerequisites and build
the package.

\if MARKER_TREE_START
ignored by doxygen; used as markers for update-links.py;
\endif

<TABLE width="100%" border="0"><TR>
<TD>\ref progMapTools "Previous"</TD>
<TD width="100%"></TD>
<TD>\ref bldtargets "Next"</TD>
</TR></TABLE>
\if MARKER_TREE_END
ignored by doxygen; used as markers for update-links.py;
\endif
*/

