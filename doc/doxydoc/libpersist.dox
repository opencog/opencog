namespace opencog {
/**

\page libpersist Communications and Persistence

The directory <em>opencog/persist</em> groups various libraries that allow
storing atomspaces or part of it to persistent storage devices. These include:
- \ref sect_persist_file "file-based storage"
- experimental \ref sect_persist_hyper "HyperTable" support
- experimental/broken \ref sect_persist_memcached "memcached" support
- \ref sect_persist_sql "sql"
- \ref sect_persist_xml "XML-based file storage"

In this context, it is worth reading 
<a href="http://wiki.opencog.org/w/Distributed_Architecture_RFC">Distributed Architecture RFC</a>.
This page is a high level overview; to dig into the details 
read \ref grp_persist "the comprehensive overview".


\section sect_persist_file  File-based storage

To build it, use:
@code
make savable
@endcode

The library does NOT use the modern BackingStore interface from
\ref libatomspace "atomspace" library.
SavingLoading is the main class for the library. It is able to
\ref SavingLoading::save "save()" and \ref SavingLoading::load "load()"
all atoms from an AtomSpace to a file and uses list of pairs - names and 
SavableRepository instances amendable with 
\ref SavingLoading::addSavableRepository "addSavableRepository()".
Such repositories are TimeServerSavable and SpaceServerSavable.

CompositeRenumber updates all VersionHandles of the versioned TVs in this
object using the HandleMap passed as argument. It makes use
of CoreUtils - the class for including any core-specific common utilities .


\section sect_persist_hyper  HyperTable

To build it, use:
@code
make hypertabledb
@endcode

Dependencies:
- hypertable libraries
- sigar

The library uses the modern BackingStore interface from
\ref libatomspace "atomspace" library to handle IO requests in 
AtomspaceHTabler class. See 
<a href="http://wiki.opencog.org/w/Storing_the_AtomSpace_in_HyperTable">wiki page</a>
for implementation notes.

\section sect_persist_memcached  memcached

The library is not part of the tree generated by cmake and is NOT using the
modern BackingStore interface from \ref libatomspace "atomspace" library.
It is an experimental prototype for opencog persistence, making use
of the memcache API, and the <a href="http://memcachedb.org/">memcachedb</a> 
daemon.

At this time, development in this directory has been abandoned.

\section sect_persist_sql  sql

To build it, use:
@code
make persist
@endcode

Dependencies:
- \ref libsmob "smob"

The library does NOT use the modern BackingStore interface from 
\ref libatomspace "atomspace" library. It has an AtomStorage that makes use of
ODBCConnection and ODBCRecordSet to do its job. PersistModule provides commands
(sql-open, sql-close, sql-load, sql-store) as a Module for interactive use.

The core design defines only a few very simple SQL tables, and some
simple readers and writers to save and restore atoms from an SQL 
database. The current design can save/restore individual atoms, and it can
bulk-save/bulk-restore the entire contents of an AtomTable.

\section sect_persist_xml  xml

To build it, use:
@code
make xml
@endcode

Dependencies:
- expat

The library does NOT use the modern BackingStore interface from 
\ref libatomspace "atomspace" library.

XMLBufferReader is the interface that requires 
\ref XMLBufferReader::open "open()",
\ref XMLBufferReader::open "read()" and
\ref XMLBufferReader::open "close()". StringXMLBufferReader and
FileXMLBufferReader implement this interface.

NMXmlExporter's method \ref NMXmlExporter::toXML "toXML()" 
exports a subset of the AtomSpace to XML. NMXmlParser, on the other hand,
implements an XML parser that reads XML files and inserts the
corresponding structure of nodes and links in the AtomSpace.

\if MARKER_TREE_START
ignored by doxygen; used as markers for update-links.py;
\endif

<TABLE width="100%" border="0"><TR>
<TD>\ref libsmob "Previous"</TD>
<TD width="100%"></TD>
<TD>\ref libcomboreduct "Next"</TD>
</TR></TABLE>
\if MARKER_TREE_END
ignored by doxygen; used as markers for update-links.py;
\endif
*/


/**
\defgroup grp_persist Communications and Persistence

This module <em>opencog/persist</em> groups various libraries that allow
storing atomspaces or part of it to persistent storage devices.
To build it type:
@code
make cachedb
make hypertabledb
make persist
make savable
make xml
@endcode

To read a high level overview of this library head to 
\ref libpersist "dedicated page".
*/
} //~namespace opencog
