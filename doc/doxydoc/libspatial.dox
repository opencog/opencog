namespace opencog {
namespace spatial {
/**

\page libspatial spatial library

This module contains several tools for creating and managing a simplified
representation of a given environment. It has a map structure that stores the
physical elements perceived by the agent. It is useful for reasoning and
decision making proccess that takes into account the current state of the
agent's body and the body of all objects that are located inside the perceived
"world".

The directory (<em>opencog/spatial</em>) contains the sources 
for several libraries and programs: 
\ref sec_spacemap "SpaceMap", 
\ref sec_hpasearch "HPASearch", 
TangentBug, 
AStar,
\ref progMapTools "MapTools".
@code
make SpaceMap
make HPASearch
make TangentBug
make tangentbug_test
make AStar
make astartest
@endcode

@todo TNick: IMHO this is a mess

This page is a high level overview of the library; to dig into the details 
read \ref grp_spatial "the comprehensive overview".


\section sec_spacemap SpaceMap

Dependencies:
- \ref libserver "server"
- boost thread
- ZeroMQ if present
- LearningSpace if embodiment present

Mathematical part of the library provides intuitive classes:
math::Dimension2 and math::Dimension3, 
math::Vector2, math::Vector3 and math::Vector4,
math::Line, math::LineSegment, math::Rectangle, math::Triangle, math::Quaternion, 
math::Plane, math::BoundingBox, math::Face (3D triangle), math::SquareFace

Some linear algebra support via math::Matrix3 and math::Matrix4 is also provided.

@todo TNick: There exists a templated
<a href="http://www.cgal.org/">Computational Geometry Algorithms Library</a>
who's goal is to provide easy access to efficient and reliable geometric 
algorithms in the form of a C++ library. Maybe we shall not reinvent the 
wheel.

All entities inside a virtual world are derived from Entity class. 
It provides methods to query basic properties like:
\ref Entity::getId "id",
\ref Entity::getBoundingBox "bounding box",
\ref Entity::getDimension "dimension",
\ref Entity::getOrientation "orientation",
\ref Entity::getPosition "position",
\ref Entity::getName "name",
\ref Entity::getExpansionRadius "expansion radius",
\ref Entity::getHeight "height",
\ref Entity::getLength "length",
\ref Entity::getWidth "width",
\ref Entity::getDirection "direction".
They also store properties in one of four formats: string, integer, double and boolean
that are managed using 
\ref Entity::setProperty "setProperty()" and
\ref Entity::getBooleanProperty "get<Type>Property()".
Also notice the 
\ref Entity::distanceTo "distanceTo()" and
\ref Entity::computeObjectsLimits "computeObjectsLimits()" methods. When two or more
entities come close to each other they are grouped in a SuperEntity.

Block and StaticEntity are types of non-movable entities,
while MovableEntity extends Entity so it can be
\ref MovableEntity::rotate "rotated",
\ref MovableEntity::setPosition "moved" and
\ref MovableEntity::setOrientation "oriented". 
\ref MovableEntity::getVelocity "Velocity" may also be 
\ref MovableEntity::setVelocity "changed". An Agent in this library
is represented by a MovableEntity that has an
\ref Agent::getEyePosition "eye position". PetAgent and HumanoidAgent
further extend movable entities.

The library has a class for working with a set of 2D object occuring within a
given rectangle of space - LocalSpaceMap2D. It answers queries related to
points, regions and trajectories within this rectangle, based on a
discretization (i.e. finite grid) of the region. To visualise it,
MapExplorerServer is provided. VisibilityMap is a class to keep track of the
already visible areas. When the agent is exploring new areas, the tiles
corresponding to these areas are been marked as visible.

In 3D space the base class is Entity3D. BlockEntity is made of blocks. 
Block3D associates a BlockVector, a BlockMaterial and a AxisAlignedBox to 
a BlockEntity. Octree uses Octree3DMapManager to manage a 3D scene tree and
Pathfinder3D provides (static) methods like:
\ref Pathfinder3D::AStar3DPathFinder "AStar3DPathFinder()",
\ref Pathfinder3D::calculateCostByDistance "calculateCostByDistance()" and
\ref Pathfinder3D::checkNeighbourAccessable "checkNeighbourAccessable()".


\section sec_astar A* search

AStarController and AStar3DController implements the 
<a href="http://en.wikipedia.org/wiki/A*_search_algorithm">A* search algorithm</a> based
on AStarSearch that may use either FixedSizeAllocator or std new and delete for
its memory needs. LSMap2DSearchNode and LSMap3DSearchNode are used as user state classes.

\section sec_hpasearch HPA* search

HPASearch is an implementation of the HPA* algorithm. HPA* builds an abstract
graph by doing a grid partitioning that results on a set of clusters of
original grid cells. Each two sibbling clusters may or may not has entrances.
An entrance is the way to cross from on cluster to another. The pathfinding is
the execution of the A* on the abstract graph. QuadTree subdivides the grid on
a quad tree and builds a graph that represents the free nodes of the tree.


@todo if run_tangent_bug is to stay then it should 
generate output elsewhere

\if MARKER_TREE_START
ignored by doxygen; used as markers for update-links.py;
\endif

<TABLE width="100%" border="0"><TR>
<TD>\ref libserver "Previous"</TD>
<TD width="100%"></TD>
<TD>\ref libspacetime "Next"</TD>
</TR></TABLE>
\if MARKER_TREE_END
ignored by doxygen; used as markers for update-links.py;
\endif
*/

/**
\defgroup grp_spatial spatial library

This library (<em>opencog/spatial</em>) is dealing with spatial data.
To build it type:
@code
make spatial
@endcode

To read a high level overview of this library head to 
\ref libspatial "dedicated page".
*/
} //~namespace spatial
} //~namespace opencog

CMakeLists.txt
run_tangent_bug
README


=== AStar ===
AStarTest.cc
AStarController.cc
AStarController.h
AStar3DController.cc
AStar3DController.h
LSMap2DSearchNode.cc
LSMap2DSearchNode.h
LSMap3DSearchNode.cc
LSMap3DSearchNode.h
stlastar.h
fsa.h

=== MapTools ===
MapTools.cc
MapTools.h
MapExplorerRenderer.cc
MapExplorerSystem.cc
MapExplorer.h

=== HPASearch ===
HPASearch.cc
HPASearch.h
QuadTree.cc
QuadTree.h

=== TangentBug ===
TangentBugCommons.cc
TangentBugCommons.h
TangentBug.cc
TangentBug.h
TB_ASSERT.h
TangentBugTestExec.cc

=== SpaceMap ===
Entity.h
Entity.cc
Block.cc
Block.h
StaticEntity.h
MovableEntity.cc
MovableEntity.h
Agent.h
HumanoidAgent.h
PetAgent.h
SuperEntity.cc
SuperEntity.h
Prerequisites.h
LocalSpaceMap2D.cc
LocalSpaceMap2D.h
LocalSpaceMap2DUtil.cc
LocalSpaceMap2DUtil.h
MapExplorerServer.cc
MapExplorerServer.h
VisibilityMap.cc
VisibilityMap.h

math
	BoundingBox.cc
	BoundingBox.h
	Dimension2.h
	Dimension3.h
	Face.cc
	Face.h
	Line.h
	LineSegment.h
	MathCommon.cc
	Matrix3.cc
	Matrix3.h
	Matrix4.cc
	Matrix4.h
	Plane.cc
	Plane.h
	Quaternion.cc
	Quaternion.h
	Rectangle.cc
	Rectangle.h
	SquareFace.h
	Triangle.h
    Vector2.h
    Vector3.h
	Vector4.h

3DSpaceMap
	Block3D.cc
	Block3D.h
	Block3DMapUtil.cc
	Block3DMapUtil.h
	BlockEntity.cc
	BlockEntity.h
	Entity3D.cc
	Entity3D.h
	Octree3DMapManager.cc
	Octree3DMapManager.h
	Octree.cc
	Octree.h
	Pathfinder3D.cc
	Pathfinder3D.h
	StructGraph.cc


