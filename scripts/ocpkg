#!/bin/bash
#
## @file		ocpkg
## @copyright		OpenCog Foundation (2012,2013,2014)
## @author		David Hart <dhart@opencog.org>
## @section DESCRIPTION	A script to download, build, test, install and package OpenCog
## @section LICENSE	Permission to copy and modify is granted under the GPL
## @section REQUIREMENT	Ubuntu Linux 14.04 "Trusty Tahr". See opencog/ocpkg repo for 12.04 version
## @section SEEALSO	Dockerfile - compile and run OpenCog in a Linux container

# This bash script is organized in sections
# SECTION 1. Global variable setting
# SECTION 2. Command line option handling
# SECTION 3. Error handling & cleanup
# SECTION 4. Function definitions
# SECTION 5. Main program

# Notes
# 5 minute LiveCD creation is possible with a minimum of 4GB RAM, 4GB SWAP, and /tmp on 4GB tmpfs
# test CD/DVD images using:
#   testdrive -u OpenCogLive.iso
#   kvm -cdrom OpenCogLive.iso -boot d -m 2048

# To do
# Debian/Ubuntu packaging abilities http://developer.ubuntu.com/packaging/html/
# incremental builds
# manifest rebuild to LiveCD/DVD

# trap errors
set -e

# SECTION 1: GLOBAL VARIABLES

declare -A PACKAGE_DESCRIPTION=(
  [local]="Local install with no packaging (default)"
   [demo]="LiveCD  ISO image ~700MB with OpenCog Demo (auto-starting)"
    [min]="LiveCD  ISO image ~700MB with OpenCog Server"
    [dev]="LiveDVD ISO image ~900MB with OpenCog Developement Environment"
    [kvm]="TBD Ubuntu KVM image with OpenCog Server"
 [demovm]="TBD Ubuntu VirtualBox image with OpenCog Unity3D proxy for demo"
   [debs]="TBD Ubuntu packages (deb files)"
   [docker]="TBD Docker Images"
)

PATH_PREFIX=/usr/local
CURRENT_DIR=$(pwd)

if [ "$USER" == "root" ] ; then
 HOST_SOURCE_BRANCH=$PATH_PREFIX/src/opencog
 HOST_BUILD_DIR=/tmp/opencog_build
else
 HOST_SOURCE_BRANCH=$CURRENT_DIR/opencog/src
 HOST_BUILD_DIR=$CURRENT_DIR/opencog/build
fi

SLEEP_TIME=0

OUTPUT_ISO_NAME=OpenCogLive.iso
OUTPUT_ISO_LOCATION=$CURRENT_DIR

DEFAULT_PACKAGE_TYPE=local
DEFAULT_ADD_REPOSITORIES=true
DEFAULT_INSTALL_DEPENDENCIES=true
DEFAULT_UPDATE_OPENCOG=true
#DEFAULT_BUILD_OPENCOG=true
#DEFAULT_TEST_OPENCOG=true

# TBD: update for Ubuntu 14.04
UBUNTU_ISO=ubuntu-12.04.2-desktop-amd64.iso
UBUNTU_URL=http://releases.ubuntu.com/12.04/
UBUNTU_MD5SUM=b436b6d4c7de064652f30d783bda5b4e
UBUNTU_ISO_IMAGE=$CURRENT_DIR/$UBUNTU_ISO #default location

SELF_NAME=$(basename $0)
TOOL_NAME=octool

PROCESSORS=$(grep "^processor" /proc/cpuinfo | wc -l)
MAKE_JOBS=$(($PROCESSORS+0))

SQUASHFS_OPTIONS="-noDataCompression -noappend" #faster
SQUASHFS_OPTIONS="-noappend"

LIVE_SOURCE_BRANCH=$HOST_SOURCE_BRANCH
LIVE_BUILD_DIR=$HOST_BUILD_DIR

VERBOSE="-v"				#for mount, umount, rm, etc.
QUIET="" 				#for apt-get

LIVE_DESKTOP_SOURCE="OpenCog Source Code"

REPOSITORIES="
		ppa:opencog-dev/ppa \
		"
		#opencog-dev: cxxtest
		#gandelman: python-flask-restful
#               ppa:chris-lea/zeromq \
#		ppa:chris-lea/python-flask \
#               ppa:chris-lea/python-itsdangerous \
#               ppa:chris-lea/python-simplejson \
#               ppa:gandelman-a/test-catalog \

PACKAGES_TOOLS="
		squashfs-tools \
		genisoimage \
		"
		#aria2 \
		#qemu-kvm \
		#testdrive \

PACKAGES_FETCH="
        python-pip \
		git \
			"
		#bzr-rewrite \

PACKAGES_ADMIN="
		apt-rdepends \
		synaptic \
		gdebi \
		epiphany-browser \
		"

PACKAGES_BUILD="
		build-essential \
		cmake \
		cxxtest \
		rlwrap \
		guile-2.0-dev \
		libiberty-dev \
		libicu-dev \
		libbz2-dev \
		cython \
		python-dev \
		python-zmq \
		python-simplejson \
		libboost-date-time-dev \
		libboost-filesystem-dev \
		libboost-math-dev \
		libboost-program-options-dev \
		libboost-regex-dev \
		libboost-serialization-dev \
		libboost-thread-dev \
		libboost-system-dev \
		libjson-spirit-dev \
		libzmq3-dev \
		libtbb-dev \
		binutils-dev \
		libgsl0-dev \
		unixodbc-dev \
		libxerces-c-dev \
		uuid-dev \
		libprotoc-dev \
		protobuf-compiler \
		libcurl4-gnutls-dev \
		libexpat1-dev \
		libsdl-gfx1.2-dev \
		libssl-dev \
		tcl-dev \
		tcsh \
		libfreetype6-dev \
		libatlas-base-dev \
		gfortran \
		"
		#liblua5.1-0-dev \
		#libxmlrpc-c3-dev \
		#python-flask \
		#python-flask-restful \

PACKAGES_RUNTIME="
		unixodbc \
		odbc-postgresql \
		postgresql-client \
		"

PACKAGES_DOC="
		ubuntu-docs \
		libglib2.0-doc \
		libpango1.0-doc \
		libgtk-3-doc \
		texlive-latex-base-doc \
		python-doc \
		devhelp-common \
		texlive-doc-base \
		doxygen \
 		dot2tex \
		"

PACKAGES_REMOVE="
		ubuntu-desktop \
		example-content \
		software-center \
		app-install-data \
		locales \
		python-twisted-core \
		ubiquity \
		rhythmbox \
		rhythmbox-data \
		empathy \
		empathy-common \
		libtelepathy-glib0 \
		firefox \
		thunderbird \
		libreoffice-core \
		evolution-data-server \
		gnome-games-common \
		gnome-games-data \
		aisleriot \
		deja-dup \
		gwibber \
		oneconf \
		shotwell \
		ubuntuone-client \
		python-ubuntuone-client \
		gnome-orca \
		libgweather-common \
		simple-scan \
		sane-utils \
		printer-driver-hpcups \
		printer-driver-hpijs \
		hplip \
		hplip-data \
		libgutenprint2 \
		foo2zjs \
		colord \
		libsane \
		samba-common \
		gnome-user-guide \
		ure \
		smbclient \
		indicator-messages \
		ubuntuone-client-gnome \
		geoip-database \
		libopencc1 \
		fonts-nanum \
		ttf-indic-fonts-core \
		ttf-wqy-microhei \
		fonts-takao-pgothic \
		libpurple0 \
		brltty \
		liblouis-data \
		"
		#ubuntu-wallpapers \
		#this stuff is for Unity 2D, but Ubuntu fails to login without it
		#libqtgui4 \
		#libqt4-core \
		#libqt4-xmlpatterns \
		#libwebkitgtk-3.0-0 \
		#language-pack-pt-base \
		#language-pack-es-base \
		#language-pack-xh-base \
		#language-pack-zh-hans \
		#language-pack-de-base \
		#language-pack-fr-base \
		#language-pack-ca-base \
		#language-pack-el-base \
		#language-pack-sv-base \
		#language-pack-ru-base \
		#language-pack-gnome-zh-hans-base \
		#language-pack-kde-zh-hans-base \
		# NOTES
		# apps listed first, then libraries that they depend upon which will
		#	also uninstall other stuff
		#	ubiquity - graphical Ubuntu installer that runs on boot
		#  23MB app-install-data (ubuntu software center)
		#  22MB ubuntu-docs (desktop docs)
		#  44MB thunderbird
		#  26MB amarok
		# 200MB libreoffice
		#  45MB smbclient

PACKAGES_EXDEV="
		autoconf automake autotools-dev \
		blt \
		comerr-dev \
		dpkg-dev \
		emacsen-common \
		fakeroot \
		gettext \
		gdb \
		g++-4.6 \
		gcc-4.6 \
		krb5-multidev \
		libc6-dev \
		libdpkg-perl \
		libdpkg-perl \
		libgcrypt11-dev \
		libglade2-0 \
		libgnutls-dev \
		libgpg-error-dev \
		libgssrpc4 \
		libidn11-dev \
		libalgorithm-diff-perl \
		libalgorithm-diff-xs-perl \
		libalgorithm-merge-perl \
		libkadm5clnt-mit8 \
		libkadm5srv-mit8 \
		libkrb5-dev \
		libldap2-dev \
		libltdl-dev \
		libstdc++6-4.6-dev \
		libtasn1-3-dev \
		libtimedate-perl \
		libtool \
		libunistring0 \
		libxss1 \
		make \
		manpages-dev \
		m4 \
		patch \
		python-glade2 \
		python-tk \
		tcl8.5 \
		tk8.5 \
		ttf-lyx \
		zlib1g-dev \
		python-bzrlib \
		linux-headers-generic \
		"

# SECTION 2: Command line option handling

usage() {
if [ "$SELF_NAME" == "setup.sh" ] ; then
  echo "Usage: $SELF_NAME OPTION"
  echo " -r Add software repositories"
  echo " -d Install base build dependencies"
  echo " -p Install python build dependencies"
  echo " -c Install Cogutils"
  echo " -a Install Atomspace"
  echo " -l Install Link Grammar"
  echo " -m Install MOSES"
  echo " -h This help message"
elif [ "$SELF_NAME" == "$TOOL_NAME" ] ; then
  echo "Usage: $SELF_NAME OPTION"
  echo " -a Add software repositories"
  echo " -d Install all build dependencies"
  echo " -u Update OpenCog source at $HOST_SOURCE_BRANCH"
  echo " -b Build OpenCog"
  echo " -t Test OpenCog"
else
  echo "Usage: $SELF_NAME [OPTIONS] [PACKAGE-TYPE]"
  echo "  PACKAGE-TYPES:"
  for key in ${!PACKAGE_DESCRIPTION[@]}; do
    echo "   " ${key} $'\t' "${PACKAGE_DESCRIPTION[$key]}"
  done
  echo "    (Live CD: Ubuntu ISO image ~700MB will be downloaded if none found.)"
  echo "  OPTIONS:"
  echo "    -i [filename]  ISO input  filename"
  echo "    -o [filename]  ISO output filename"
  echo "    -j [jobs]      override number of auto-detected make jobs"
  echo "    -n             supress git updates"
fi
}

if [ $# -eq 0 ] ; then NO_ARGS=true ; fi

if [ "$SELF_NAME" == "setup.sh" ] ; then
  while getopts "adpcrlmh" flag ; do
    case $flag in
      r)	ADD_REPOSITORIES=true ;;
      d)	INSTALL_DEPENDENCIES=true ;; #base development packages
      p)	INSTALL_PYTHON_PACKAGES=true ;;
      c)	INSTALL_COGUTIL=true ;;
      a)	INSTALL_ATOMSPACE=true ;;
      l)	INSTALL_LINK_GRAMMAR=true ;;
      m)	INSTALL_MOSES=true ;;
      h)	usage ;;
      \?)	usage ;;
      *)  UNKNOWN_FLAGS=true ;;
    esac
  done
else
  while getopts ":i:o:j:s:c:l:r:adubtnxrvh" flag ; do
    case $flag in
      i)	INPUT_ISO_NAME="$OPTARG" ;;
      o)	OUTPUT_ISO_NAME="$OPTARG" ;;
      j)	MAKE_JOBS="$OPTARG" ;;			#override auto-detected MAKE_JOBS
      s)	HOST_SOURCE_BRANCH="$OPTARG" ;;
      c)	HOST_BUILD_DIR="$OPTARG" ;;		#local cached build dir
      l)	LIVE_BUILD_DIR="$OPTARG" ;;		#live build directory
      r)	BZR_REVISION="$OPTARG" ;;
      a)	ADD_REPOSITORIES=true ;;
      d)	INSTALL_DEPENDENCIES=true ;;		#ALL, none
      u)	UPDATE_OPENCOG=true ;;			#git pull
      b)	BUILD_OPENCOG=true ;;			#build opencog
      t)	TEST_OPENCOG=true ;;                    #test opencog
      n)	unset DEFAULT_UPDATE_OPENCOG ;;		#suppress git update
      x)	unset DEFAULT_BUILD_OPENCOG ;;		#suppress build
      p)	REINSTALL_PACKAGES=true ;;
      v)	unset QUIET ;;
      h)	usage ;;
      \?)	usage ;;
      *)  UNKNOWN_FLAGS=true ;;
    esac
  done
fi

shift $((OPTIND-1))

message() {
echo -e "\e[1;34m[$SELF_NAME] $MESSAGE\e[0m"
}

PACKAGE_TYPE=$DEFAULT_PACKAGE_TYPE

if [ $1 ] && [ "$SELF_NAME" != "$TOOL_NAME" ] ; then
 case $1 in
   debs)  PACKAGE_TYPE=$1 ;;
   dev)   PACKAGE_TYPE=$1 ;;
   demo)  PACKAGE_TYPE=$1 ;;
   kvm)   PACKAGE_TYPE=$1 ;;
   min)   PACKAGE_TYPE=$1 ;;
   local) PACKAGE_TYPE=$1 ;;
   *)	  MESSAGE="Package type not recognized."; message ; usage ; exit 1 ;;
 esac
 MESSAGE="Package type: $PACKAGE_TYPE : ${PACKAGE_DESCRIPTION[$PACKAGE_TYPE]}" ; message
fi

#echo "[otheropts]==> $@"

# SECTION 3: Error handling & cleanup

debug() {
MESSAGE="Dropping to debugging chroot prompt..." ; message
chroot $LIVE_SQUASH_UNION /bin/bash -l
}

cleanup_squash() {
if [ -n "$LIVE_SQUASH_UNION" ]; then
  MESSAGE="Cleaning up squash temp space..." ; message
  fuser  $VERBOSE --mount $LIVE_SQUASH_UNION -kill
  sleep  $SLEEP_TIME
  umount $VERBOSE $LIVE_SQUASH_UNION/var/lib/apt/lists		|| true
  umount $VERBOSE $LIVE_SQUASH_UNION/var/cache/apt/archives	|| true
  umount $VERBOSE $LIVE_SQUASH_UNION/proc			|| true
  umount $VERBOSE $LIVE_SQUASH_UNION/sys			|| true
  umount $VERBOSE $LIVE_SQUASH_UNION/dev/pts			|| true
  umount $VERBOSE $LIVE_SQUASH_UNION$LIVE_BUILD_DIR		|| true
  umount $VERBOSE $LIVE_SQUASH_UNION$LIVE_SOURCE_BRANCH		|| true
  MESSAGE="Killing processes..." ; message
  fuser  $VERBOSE --mount $LIVE_SQUASH_UNION -kill
  sleep  $SLEEP_TIME
  umount -v -f $VERBOSE $LIVE_SQUASH_UNION			|| true
  rmdir  $VERBOSE $LIVE_SQUASH_UNION				|| true
fi

if [ -n "$LIVE_SQUASH_DELTA" ]; then
  echo " $LIVE_SQUASH_DELTA"
  rm -rf $LIVE_SQUASH_DELTA					|| true
fi

if [ -n "$UBUNTU_SQUASH_FILES" ]; then
  echo " $UBUNTU_SQUASH_FILES"
  umount $VERBOSE $UBUNTU_SQUASH_FILES				|| true
  rmdir  $VERBOSE $UBUNTU_SQUASH_FILES				|| true
fi
}

cleanup_iso() {
if [ -n       "$LIVE_ISO_UNION" ] ; then
  MESSAGE="Cleaning up ISO temp space..." ; message
  echo " $LIVE_ISO_UNION"
  umount $VERBOSE $LIVE_ISO_UNION				|| true
  rmdir  $LIVE_ISO_UNION					|| true
  df -m  $LIVE_ISO_UNION					|| true
fi

if [ -n       "$LIVE_ISO_DELTA" ] ; then
  echo " $LIVE_ISO_DELTA"
  rm -rf $LIVE_ISO_DELTA					|| true
fi

if [ -n "$UBUNTU_ISO_FILES" ] ; then
  echo " $UBUNTU_ISO_FILES"
  umount $VERBOSE $UBUNTU_ISO_FILES				|| true
  rmdir  $UBUNTU_ISO_FILES					|| true
  df -m  $UBUNTU_ISO_FILES					|| true
fi
}

exit_trap() {
if [ "$SELF_NAME" != "$TOOL_NAME" ] ; then
  MESSAGE="Exiting $SELF_NAME normally..." ; message
  cleanup_squash
  cleanup_iso
fi
}

quit_trap() {
if [ "$SELF_NAME" != "$TOOL_NAME" ] ; then
  MESSAGE="Exiting $SELF_NAME by request..." ; message
  cleanup_squash
  cleanup_iso
fi
}

error_trap() {
if [ "$SELF_NAME" != "$TOOL_NAME" ] ; then
  MESSAGE="Error trapped while running $SELF_NAME." ; message

  MESSAGE="Cleanup will run after debug." ; message
  debug
  cleanup_squash
  cleanup_iso
fi
}

trap error_trap ERR
trap exit_trap  EXIT
trap quit_trap  INT HUP QUIT TERM

# SECTION 4: Function Definitions

add_repositories() {
MESSAGE="Adding software repositories..." ; message
for REPO in $REPOSITORIES ; do
  sudo apt-add-repository -y $REPO
done
sudo apt-get $QUIET --assume-yes update
}

install_admin() {
MESSAGE="Installing sysadmin tools...." ; message
if ! sudo apt-get $QUIET --no-upgrade --assume-yes install $PACKAGES_ADMIN ; then
  MESSAGE="Please enable 'universe' repositories and re-run this script."  ; message
  exit 1
fi
}

# Install cogutils
install_cogutil(){
MESSAGE="Installing cogutils...." ; message
cd /tmp/
# cleaning up remnants from previous install failures, if any.
rm -f master.tar.gz*
wget https://github.com/opencog/cogutils/archive/master.tar.gz
tar -xvf master.tar.gz
cd cogutils-master/
mkdir build
cd build/
cmake ..
make -j$(nproc)
sudo make install
cd ../..
rm -rf master.tar.gz cogutils-master/
}

# Install Python Packages
install_python_packages(){
MESSAGE="Installing python packages...." ; message
cd /tmp
# cleaning up remnants from previous install failures, if any.
rm -f requirements.txt*
wget https://raw.githubusercontent.com/opencog/opencog/master/opencog/python/requirements.txt
sudo pip install -U -r /tmp/requirements.txt
rm -f requirements.txt*
}

# Install AtomSpace
install_atomspace(){
MESSAGE="Installing atomspace...." ; message
cd /tmp/
# cleaning up remnants from previous install failures, if any.
rm -f master.tar.gz*
wget https://github.com/opencog/atomspace/archive/master.tar.gz
tar -xvf master.tar.gz
cd atomspace-master/
mkdir build
cd build/
cmake ..
make -j$(nproc)
sudo make install
cd ../..
rm -rf master.tar.gz atomspace-master/
}

# Install MOSES
install_moses(){
MESSAGE="Installing MOSES...." ; message
cd /tmp/
# cleaning up remnants from previous install failures, if any.
rm -f master.tar.gz*
wget https://github.com/opencog/moses/archive/master.tar.gz
tar -xvf master.tar.gz
cd moses-master/
mkdir build
cd build
cmake ..
make -j$(nproc)
make install
ldconfig
cd ../..
rm -rf master.tar.gz moses-master/
}

# Install Link-Grammar
install_link_grammar(){
MESSAGE="Installing Link-Grammar...." ; message
cd /tmp/
# cleaning up remnants from previous install failures, if any.
rm -rf link-grammar-5.*/
wget -r --no-parent -nH --cut-dirs=2 http://www.abisource.com/downloads/link-grammar/current/
tar -zxf current/link-grammar-5*.tar.gz
rm -r current
cd link-grammar-5.*/
mkdir build
cd build
../configure
make -j$(nproc)
make install
ldconfig
cd ../..
rm -rf link-grammar-5.*/
}

install_dependencies() {
MESSAGE="Installing OpenCog build dependencies...." ; message
if ! sudo apt-get $QUIET --no-upgrade --assume-yes install $PACKAGES_BUILD $PACKAGES_RUNTIME $PACKAGES_FETCH; then
  MESSAGE="Please enable 'universe' repositories and re-run this script."  ; message
  exit 1
fi
# test for and fix Ubuntu 14.04 libiberty-dev includefile bug
source /etc/lsb-release
if [ "$DISTRIB_CODENAME" == "trusty" ] ; then
  sudo sed -i s:"ansidecl.h":\<libiberty/ansidecl.h\>:g /usr/include/bfd.h || true
fi
}

update_opencog_source() {
if sudo apt-get --no-upgrade --assume-yes $QUIET install $PACKAGES_FETCH ; then
  echo -n
else
  MESSAGE="Please enable 'universe' repositories and re-run this script."  ; message
exit 1
fi
OPENCOG_SOURCE_DIR=$LIVE_SOURCE_BRANCH
mkdir -p $OPENCOG_SOURCE_DIR || true
if [ ! "$(ls -A $OPENCOG_SOURCE_DIR/.git)" ]; then
  MESSAGE="Fetching OpenCog source at $OPENCOG_SOURCE_DIR..." ; message
  git clone https://github.com/opencog/opencog $OPENCOG_SOURCE_DIR
else
  if [ $UPDATE_OPENCOG ] ; then
    MESSAGE="Updating OpenCog source at $OPENCOG_SOURCE_DIR..." ; message
    cd $OPENCOG_SOURCE_DIR
    git pull
    cd -
  fi
fi
}

build_opencog() {
mkdir -p -v $LIVE_BUILD_DIR || true
cd $LIVE_BUILD_DIR
MESSAGE="cmake $LIVE_SOURCE_BRANCH" ; message
cmake $LIVE_SOURCE_BRANCH
MESSAGE="make -j$MAKE_JOBS" ; message
make -j$MAKE_JOBS

if [ $TEST_OPENCOG ] ; then
  make test
fi

case $PACKAGE_TYPE in
  min)	MESSAGE="Installing OpenCog..." ; message
 	make install; exit 0;;
  demo)	MESSAGE="Installing OpenCog..." ; message
  	make install; exit 0;;
  dev)	exit 0;;
esac

}

locate_live_iso() {
if [ $INPUT_ISO_NAME ]; then
  MESSAGE="Using Ubuntu image specified at $INPUT_ISO_NAME" ; message
  UBUNTU_ISO_IMAGE=$INPUT_ISO_NAME
else
  UBUNTU_LOCATIONS=$(locate --existing --basename "\\$UBUNTU_ISO" | grep $HOME)
  for LOC in $UBUNTU_LOCATIONS ; do
    MESSAGE="Ubuntu image found at $LOC. Checksumming, please wait..." ; message
    LOC_MD5SUM=$(md5sum $LOC | awk '{print $1}')
  if [ "$LOC_MD5SUM" == "$UBUNTU_MD5SUM" ] ; then
    UBUNTU_ISO_IMAGE=$LOC
    MESSAGE="Using image found at $UBUNTU_ISO_IMAGE." ; message
    break
  else
    MESSAGE="...checksum failed." ; message
  fi
done
fi
if [ ! -f $UBUNTU_ISO_IMAGE ] ; then
 #aria2c --seed-time=0 ${UBUNTU_URL}${UBUNTU_ISO}.torrent
 UBUNTU_ISO_IMAGE=${UBUNTU_ISO}
fi
}

remove_packages() {
MESSAGE="$PACKAGE_TYPE install type: Removing unecessary packages..." ; message
chroot $LIVE_SQUASH_UNION apt-get --no-upgrade --assume-yes $QUIET purge $PACKAGES_REMOVE --auto-remove
chroot $LIVE_SQUASH_UNION apt-get --no-upgrade --assume-yes $QUIET autoremove
# stupid stupid stupid hack
chroot $LIVE_SQUASH_UNION service cups stop
}

reinstall_removed() {
MESSAGE="Re-installing removed packages..." ; message
apt-get --no-upgrade --assume-yes $QUIET install $PACKAGES_REMOVE
}

keep_source() {
MESSAGE="$PACKAGE_TYPE install type: Keeping source code..." ; message
chroot $LIVE_SQUASH_UNION chown -R 999 $LIVE_SOURCE_BRANCH $LIVE_BUILD_DIR || true
chroot $LIVE_SQUASH_UNION mkdir -p /home/$LIVE_USERNAME/Desktop/ || true
chroot $LIVE_SQUASH_UNION ln -s "$LIVE_SOURCE_BRANCH" "/home/$LIVE_USERNAME/Desktop/$LIVE_DESKTOP_SOURCE" || true
}

remove_source() {
MESSASGE="$PACKAGE_TYPE install type: Removing source code..." ; message
chroot $LIVE_SQUASH_UNION umount $VERBOSE $LIVE_SOURCE_BRANCH
}

remove_build() {
MESSAGE="$PACKAGE_TYPE install type: Removing build files..." ; message
echo umount $VERBOSE $LIVE_SQUASH_UNION$LIVE_BUILD_DIR
umount $VERBOSE $LIVE_SQUASH_UNION$LIVE_BUILD_DIR || true
rm -rf $LIVE_SQUASH_UNION$LIVE_BUILD_DIR || true
}

remove_dev_debs() {
MESSAGE="$PACKAGE_TYPE install type: Removing development packages..." ; message
chroot $LIVE_SQUASH_UNION apt-get --no-upgrade --assume-yes purge $PACKAGES_BUILD $PACKAGES_EXDEV --auto-remove
chroot $LIVE_SQUASH_UNION apt-get $QUIET autoremove --assume-yes
}

remove_doc_debs() {
MESSAGE="$PACKAGE_TYPE install type: Removing documentation packages..." ; message
chroot $LIVE_SQUASH_UNION apt-get --no-upgrade --assume-yes purge $PACKAGES_DOC --auto-remove
chroot $LIVE_SQUASH_UNION apt-get $QUIET autoremove --assume-yes
}

install_package_tools() {
MESSAGE="Installing packaging tools..." ; message
if sudo apt-get --no-upgrade --assume-yes $QUIET -y install $PACKAGES_TOOLS ; then
 echo -n
else
 MESSAGE="Please enable 'universe' repositories and re-run this script."  ; message
 exit 1
fi
}

mount_live_iso() {
MESSAGE="Mounting Ubuntu ISO image..." ; message

UBUNTU_ISO_FILES=$(mktemp -d --suffix=.UBUNTU_ISO_FILES)
mount $VERBOSE -o ro -o loop -t iso9660 $UBUNTU_ISO_IMAGE $UBUNTU_ISO_FILES

MESSAGE="Mounting Ubuntu compressed filesystem..." ; message

UBUNTU_SQUASH_BLOB="$UBUNTU_ISO_FILES/casper/filesystem.squashfs"

if ! [ -e "$UBUNTU_SQUASH_BLOB" ] ; then
  MESSAGE="Could not find the Ubuntu squashfs at '$UBUNTU_SQUASH_BLOB'." ; message
  umount $VERBOSE $UBUNTU_ISO_FILES || true
  exit 1
fi

LIVE_ISO_DELTA=$(mktemp -d --suffix=.LIVE_ISO_DELTA)
LIVE_ISO_UNION=$(mktemp -d --suffix=.LIVE_ISO_UNION)
mount $VERBOSE -t overlayfs -o upperdir=$LIVE_ISO_DELTA,lowerdir=$UBUNTU_ISO_FILES none $LIVE_ISO_UNION

#MESSAGE="Mounting read-only Ubuntu compressed filesystem..." ; message

UBUNTU_SQUASH_FILES=$(mktemp -d --suffix=.UBUNTU_SQUASH_FILES)
mount $VERBOSE -o loop -t squashfs $UBUNTU_SQUASH_BLOB $UBUNTU_SQUASH_FILES

#MESSAGE="Creating temporary workplace for remastering new compressed files..." ; message

LIVE_SQUASH_DELTA=$(mktemp -d --suffix=.LIVE_SQUASH_DELTA)
LIVE_SQUASH_UNION=$(mktemp -d --suffix=.LIVE_SQUASH_UNION)
mount $VERBOSE -t overlayfs -o upperdir=$LIVE_SQUASH_DELTA,lowerdir=$UBUNTU_SQUASH_FILES none $LIVE_SQUASH_UNION
chmod +rx $LIVE_SQUASH_UNION

MESSAGE="Setting up chroot environment..." ; message

DISTRIB_ID=$(awk '/DISTRIB_ID=/' $LIVE_SQUASH_UNION/etc/lsb-release | sed 's/DISTRIB_ID=//' | tr '[:upper:]' '[:lower:]')
DISTRIB_CODENAME=$(awk '/DISTRIB_CODENAME=/' $LIVE_SQUASH_UNION/etc/lsb-release | sed 's/DISTRIB_CODENAME=//' | tr '[:upper:]' '[:lower:]')
LIVE_USERNAME=$DISTRIB_ID
LIVE_BUILD_DIR=/home/$LIVE_USERNAME/build

cp $LIVE_SQUASH_UNION/etc/resolv.conf      $LIVE_SQUASH_UNION/etc/resolv.conf.bak || true
cp $LIVE_SQUASH_UNION/etc/apt/sources.list $LIVE_SQUASH_UNION/etc/apt/sources.list.bak || true
cp /etc/resolv.conf      $LIVE_SQUASH_UNION/etc
cp /etc/apt/sources.list $LIVE_SQUASH_UNION/etc/apt
if [ -f /etc/apt/apt.conf.d/01apt-cacher-ng-proxy ] ; then
 cp /etc/apt/apt.conf.d/01apt-cacher-ng-proxy  $LIVE_SQUASH_UNION/etc/apt/apt.conf.d/01apt-cacher-ng-proxy
fi

cp $0 $LIVE_SQUASH_UNION$PATH_PREFIX/bin/$SELF_NAME ; chmod ugo+rx $LIVE_SQUASH_UNION$PATH_PREFIX/bin/$SELF_NAME
cd $LIVE_SQUASH_UNION$PATH_PREFIX/bin
ln -s $SELF_NAME $TOOL_NAME
cd $CURRENT_DIR

MESSAGE="Mounting filesystems..." ; message

chroot $LIVE_SQUASH_UNION mount $VERBOSE -t proc none /proc
chroot $LIVE_SQUASH_UNION mount $VERBOSE -t sysfs none /sys
chroot $LIVE_SQUASH_UNION mount $VERBOSE -t devpts none /dev/pts

mkdir -p $LIVE_SQUASH_UNION/var/cache/apt/archives
mkdir -p $LIVE_SQUASH_UNION/var/lib/apt/lists
mkdir -p $HOST_SOURCE_BRANCH
mkdir -p $LIVE_SQUASH_UNION/$LIVE_SOURCE_BRANCH

mount $VERBOSE -o bind /var/cache/apt/archives $LIVE_SQUASH_UNION/var/cache/apt/archives
mount $VERBOSE -o bind /var/lib/apt/lists $LIVE_SQUASH_UNION/var/lib/apt/lists
mount $VERBOSE -o bind $HOST_SOURCE_BRANCH $LIVE_SQUASH_UNION/$LIVE_SOURCE_BRANCH
}

prepare_live_iso() {

fuser  $VERBOSE --mount $LIVE_SQUASH_UNION -kill
sleep  $SLEEP_TIME
umount $VERBOSE $LIVE_SQUASH_UNION/proc || true
umount $VERBOSE $LIVE_SQUASH_UNION/sys || true
umount $VERBOSE $LIVE_SQUASH_UNION/dev/pts|| true
umount $VERBOSE $LIVE_SQUASH_UNION/var/lib/apt/lists || true
umount $VERBOSE $LIVE_SQUASH_UNION/var/cache/apt/archives || true

#replace original config files
cp $LIVE_SQUASH_UNION/etc/resolv.conf.bak      $LIVE_SQUASH_UNION/etc/resolv.conf || true
cp $LIVE_SQUASH_UNION/etc/apt/sources.list.bak $LIVE_SQUASH_UNION/etc/apt/sources.list || true

if [ -f  $LIVE_SQUASH_UNION/etc/apt/apt.conf.d/01apt-cacher-ng-proxy ]; then
  rm $LIVE_SQUASH_UNION/etc/apt/apt.conf.d/01apt-cacher-ng-proxy
fi
}

write_live_media() {
MESSAGE="Creating new compressed filesystem..." ; message
mksquashfs $LIVE_SQUASH_UNION $LIVE_ISO_UNION/casper/filesystem.squashfs $SQUASHFS_OPTIONS
printf $(sudo du -sx --block-size=1 $LIVE_SQUASH_UNION | cut -f1) > $LIVE_ISO_UNION/casper/filesystem.size
MESSAGE="Creating new bootable ISO image..." ; message
mkisofs -D -r -V $OUTPUT_ISO_LOCATION/$OUTPUT_ISO_NAME -cache-inodes -J -l -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -o "$OUTPUT_ISO_LOCATION/$OUTPUT_ISO_NAME" $LIVE_ISO_UNION
MESSAGE="Wrote $(du -sm $OUTPUT_ISO_LOCATION/$OUTPUT_ISO_NAME)MB ..." ; message
chown $VERBOSE $SUDO_USER $OUTPUT_ISO_LOCATION/$OUTPUT_ISO_NAME
cleanup_squash
cleanup_iso
}

# SECTION 5: Main Program (MAIN main)

# This is mainly for configuring workspaces depending on the type
# of project being worked on.
if [ "$SELF_NAME" == "setup.sh" ] ; then
    if [ $ADD_REPOSITORIES ] ; then add_repositories ; fi
    if [ $INSTALL_DEPENDENCIES ] ; then install_dependencies ; fi
    if [ $INSTALL_PYTHON_PACKAGES ] ; then install_python_packages ; fi
    if [ $INSTALL_COGUTIL ] ; then install_cogutil ; fi
    if [ $INSTALL_ATOMSPACE ] ; then install_atomspace ; fi
    if [ $INSTALL_LINK_GRAMMAR ] ; then install_link_grammar ; fi
    if [ $INSTALL_MOSES ] ; then install_moses ; fi
    if [ $UNKNOWN_FLAGS ] ; then usage ; fi
    if [ $NO_ARGS ] ; then usage ; fi
exit 0
fi

if [ "$SELF_NAME" == "install-dependencies-trusty" ] ; then
  add_repositories
  install_dependencies
  install_python_packages
  install_link_grammar
  install_cogutil
  install_atomspace
  exit 0
fi

if [ "$SELF_NAME" == "$TOOL_NAME" ] ; then
 if [ $ADD_REPOSITORIES ] ; then add_repositories ; fi
 if [ $INSTALL_DEPENDENCIES ] ; then install_dependencies ; fi
 if [ $UPDATE_OPENCOG ] ; then update_opencog_source ; fi
 if [ $BUILD_OPENCOG ] ; then build_opencog ; fi
 if [ $REINSTALL_PACKAGES ] ; then reinstall_removed ; fi
 if [ $UNKNOWN_FLAGS ] ; then usage ; fi
 if [ $NO_ARGS ] ; then usage ; fi
 exit 0
fi

# option flag conditionals are finished, so set defaults

if [ ! $ADD_REPOSITORIES ] ; then ADD_REPOSITORIES=$DEFAULT_ADD_REPOSITORIES; fi
if [ ! $INSTALL_DEPENDENCIES ] ; then INSTALL_DEPENDENCIES=$DEFAULT_INSTALL_DEPENDENCIES; fi
if [ ! $UPDATE_OPENCOG ] ; then UPDATE_OPENCOG=$DEFAULT_UPDATE_OPENCOG; fi
if [ ! $BUILD_OPENCOG ] ; then BUILD_OPENCOG=$DEFAULT_BUILD_OPENCOG; fi
if [ ! $TEST_OPENCOG ] ; then TEST_OPENCOG=$DEFAULT_TEST_OPENCOG; fi

# package type selected when invoked as 'ocpkg'

case $PACKAGE_TYPE in
  demo)	install_package_tools; locate_live_iso ; mount_live_iso ; remove_packages ;;
  min)	install_package_tools; locate_live_iso ; mount_live_iso ; remove_packages ;;
  dev)	install_package_tools; locate_live_iso ; mount_live_iso
      	MESSAGE="$PACKAGE_TYPE install type: Keeping all Ubuntu packages..." ; message ;;
esac

case $PACKAGE_TYPE in
  local) add_repositories ; install_dependencies ;;
  demo)  chroot $LIVE_SQUASH_UNION $PATH_PREFIX/bin/$TOOL_NAME $VERBOSE -a -d ;;
  min)   chroot $LIVE_SQUASH_UNION $PATH_PREFIX/bin/$TOOL_NAME $VERBOSE -a -d ;;
  dev)   chroot $LIVE_SQUASH_UNION $PATH_PREFIX/bin/$TOOL_NAME $VERBOSE -a -d ;;
esac

case $PACKAGE_TYPE in
  local) if [ $UPDATE_OPENCOG ] ; then update_opencog_source ; fi ;;
  demo)  if [ $UPDATE_OPENCOG ] ; then chroot $LIVE_SQUASH_UNION $PATH_PREFIX/bin/$TOOL_NAME $VERBOSE -u ; fi ;;
  min)   if [ $UPDATE_OPENCOG ] ; then chroot $LIVE_SQUASH_UNION $PATH_PREFIX/bin/$TOOL_NAME $VERBOSE -u ; fi ;;
  dev)   if [ $UPDATE_OPENCOG ] ; then chroot $LIVE_SQUASH_UNION $PATH_PREFIX/bin/$TOOL_NAME $VERBOSE -u ; fi ;;
esac

case $PACKAGE_TYPE in
  local) if [ $BUILD_OPENCOG ] ; then build_opencog ; fi ;;
  demo)  if [ $BUILD_OPENCOG ] ; then chroot $LIVE_SQUASH_UNION $PATH_PREFIX/bin/$TOOL_NAME $VERBOSE -b ; fi ;;
  min)   if [ $BUILD_OPENCOG ] ; then chroot $LIVE_SQUASH_UNION $PATH_PREFIX/bin/$TOOL_NAME $VERBOSE -b ; fi ;;
  dev)   if [ $BUILD_OPENCOG ] ; then chroot $LIVE_SQUASH_UNION $PATH_PREFIX/bin/$TOOL_NAME $VERBOSE -b ; fi ;;
esac

case $PACKAGE_TYPE in
  min)	remove_dev_debs ; remove_doc_debs ; remove_source ; remove_build ;;
  demo)	remove_dev_debs ; remove_doc_debs ; remove_source ; remove_build ;;
  dev)	keep_source  ;;
esac

case $PACKAGE_TYPE in
  min)  prepare_live_iso ; write_live_media ;;
  demo) prepare_live_iso ; write_live_media ;;
  dev)  prepare_live_iso ; write_live_media ;;
esac
