#!/usr/bin/env tclsh

# Usage:
# make_distribution [<bin dir> [<tag name>] [<type of distribution = "dev" or "user">]]
# <bin dir> is the directory where the script will try to find the compiled executables, 
#           relative to petaverse base dir. Default is "bin", Ie, it will try to find binaries
#           under {petaverse base dir}/bin
# <tag name> is a tag it will use to name the distribution. Default is <svn revision number>.
# <type of distribution> select the type of config file that will be copied.
# 
# This script will copy all the relevant files into {petaverse base dir}/dist/<tag name>

#pdh stands for "Project Directory from Here"
set pdh "../.."

# binDir is misnamed, its the build directory, not the binaries directory.
set binDir "build" 
set tag "embodiment"

# typedist = dev | user
set type_dist "dev"

# get command line arguments
if {[llength $argv] > 0} {
    set binDir [lindex $argv 0] 
    if {[llength $argv] > 1} {
        set tag [lindex $argv 1]
    }
    if {[llength $argv] > 2} {
        set type_dist [lindex $argv 2]
    }
} 

set binDirH $pdh/$binDir

puts "Project Directory from here = $pdh"
puts "Build Directory = $binDirH"

set flist [list  \
$binDirH/opencog/embodiment/Control/MessagingSystem/router \
$binDirH/opencog/embodiment/Control/MessagingSystem/spawner \
$binDirH/opencog/embodiment/Control/MessagingSystem/libMessagingSystem.so \
$binDirH/opencog/embodiment/Control/OperationalAvatarController/oac \
$binDirH/opencog/embodiment/Control/OperationalAvatarController/opcHcTester \
$binDirH/opencog/embodiment/Control/Procedure/combo_shell \
$binDirH/opencog/embodiment/Control/Procedure/combo_shell_stdio \
$binDirH/opencog/embodiment/Learning/LearningServer/learningServer \
$binDirH/opencog/query/libquery.so \
$binDirH/opencog/server/libbuiltinreqs.so \
$binDirH/opencog/shell/libscheme-shell.so \
$binDirH/opencog/persist/sql/libpersist.so \
./cleanup.sh \
./stop_embodiment.sh \
./start_embodiment.sh \
./pvp_interface.sh \
./run_opc_hc_test.sh \
./stdlib.combo \
./multiverse_action_schema.combo \
./unity_action_schema.combo \
$pdh/opencog/embodiment/psi_util.scm \
$pdh/opencog/embodiment/rules_core.scm \
$pdh/opencog/embodiment/multiverse_rules.scm \
$pdh/opencog/embodiment/unity_rules.scm \
$pdh/opencog/embodiment/dialog_system.scm \
$pdh/opencog/embodiment/multiverse_speech_act_schema.scm \
$pdh/opencog/embodiment/unity_speech_act_schema.scm \
$pdh/opencog/embodiment/action_selection.scm \
$pdh/opencog/embodiment/feeling_updaters.scm \
$pdh/opencog/embodiment/demand_updaters.scm \
$pdh/opencog/embodiment/modulator_updaters.scm \
$pdh/opencog/embodiment/stimulus_updaters.scm \
$pdh/opencog/embodiment/unity_stimulus_rules.scm \
$pdh/opencog/embodiment/unity_attitude_processor.scm \
./SPCTools.py \
$pdh/opencog/embodiment/frames2relex.rules \
$pdh/opencog/embodiment/frames.list \
$pdh/opencog/embodiment/framesInheritance.list \
]

# Python module might not be built if cython is not installed
if  [file exists $binDirH/opencog/cython/libPythonModule.so] then {
   lappend flist $binDirH/opencog/cython/libPythonModule.so
}

set schemeOpencogFiles [list \
$pdh/opencog/scm/utilities.scm \
$pdh/opencog/scm/file-utils.scm \
$pdh/opencog/scm/persistence.scm \
$pdh/opencog/scm/debug.scm \
$pdh/build/opencog/atomspace/core_types.scm \
$pdh/build/opencog/nlp/types/nlp_types.scm \
$pdh/build/opencog/spacetime/spacetime_types.scm \
$pdh/build/opencog/dynamics/attention/attention_types.scm \
$pdh/build/opencog/embodiment/AtomSpaceExtensions/embodiment_types.scm \
]

set schemeEmbodimentFiles [list \
$pdh/opencog/embodiment/scm/predicates-frames.scm \
$pdh/opencog/embodiment/scm/language-comprehension.scm \
$pdh/opencog/embodiment/scm/reference-resolution-rules.scm \
$pdh/opencog/embodiment/scm/command-resolution-rules.scm \
$pdh/opencog/embodiment/scm/question-answering.scm \
]

if {$type_dist == "dev"} {
    # embodiment config - use default file if it doesn't exist
    set embodimentConf $pdh/opencog/embodiment/dev_embodiment.conf
    if { [file exists $embodimentConf] != 1 } {
        set embodimentConf $pdh/opencog/embodiment/dev_embodiment.conf.default
    }
    set flistconfig [list \
    $binDirH/opencog/embodiment/AutomatedSystemTest/pbTest \
    $pdh/opencog/embodiment/AutomatedSystemTest/GoldenStandardFiles/gsfile_0.txt \
    $pdh/opencog/embodiment/AutomatedSystemTest/GoldenStandardFiles/gsfile_1.txt \
    $pdh/opencog/embodiment/AutomatedSystemTest/GoldenStandardFiles/gsfile_2.txt \
    $pdh/opencog/embodiment/AutomatedSystemTest/test.conf \
    run_system_test.sh \
    ]
} elseif {$type_dist == "user"} {
    # embodiment config - use default file if it doesn't exist
    set embodimentConf $pdh/opencog/embodiment/embodiment.conf
    if { [file exists $embodimentConf] != 1 } {
        set embodimentConf $pdh/opencog/embodiment/embodiment.conf.default
    }
}

if {$tag == ""} {
    set tag [lindex [split [exec svn update] " ."] end-1]
}

# Must not copy files to any location in the source tree; only
# copies to the build tree are allowed ...
# set distDir [format "$pdh/dist/%s" $tag]
set distDir [format "$binDirH/dist/%s" $tag]
puts "Putting distribution files into $distDir"

exec mkdir -p $distDir
exec mkdir -p $distDir/data

foreach file $flist {
    exec cp -rf $file $distDir
}

foreach file $flistconfig {
    exec cp -r $file $distDir
}
puts "Using config file $embodimentConf"
exec cp -r $embodimentConf $distDir/embodiment.conf


# copy scheme sripts
exec mkdir -p $distDir/scm
exec mkdir -p $distDir/scm/embodiment

foreach file $schemeOpencogFiles {
    exec cp $file $distDir/scm/
}

foreach file $schemeEmbodimentFiles {
    exec cp $file $distDir/scm/embodiment/
}

# copy python scripts of the monitor
exec cp -R $pdh/opencog/embodiment/Monitor $distDir

