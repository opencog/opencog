#############################################
###########   HELPER FUNCTIONS    ###########
#############################################

randbool(0) := 0<(+(rand -0.5))

# $1 < $2
less_than(2) := 0<(+($2 *(-1 $1)))

# $1 > $2
greater_than(2) := 0<(+($1 *(-1 $2)))

# $1 == $2
equal_to(2) := and(not(less_than($1 $2)) not(greater_than($1 $2)))

# There is no '-' operator, it is the default type of an unrecognized string
neg(1) := *(-1 $1)

# Return absolute value
abs(1) := contin_if( greater_than($1 0)  $1 neg($1) ) 

# Return the minimum value given two values
min(2) := contin_if( less_than($1 $2) $1 $2 )

# Return the maximum value given two values          
max(2) := contin_if( greater_than($1 $2) $1 $2 )

# Return the normalized value ( falls in [0, 1] ) of $1, given min ($2) and max ($3) values           
normalize(3) := /( +( $1 neg($2) )
                   +( $3 neg($2) )
                 )           

# Return the clipped value ( fallss in [$2, $3] ) of $1, given min ($2) and max ($3) values
clip_within(3) := contin_if( less_than($1 $2)
                             $2
                             
                             contin_if( greater_than($1 $3) $3 $1 )
                           )
 
# Return the power of $1, $2
# Note: Since the power function is not defined in combo, it is a hacky way to achieve this. 
#       The base ($1) should be greater than zero, otherwise it will be set to a tiny positive value automatically
#       [By Zhenhua Cai, on 2011-02-08]
power(2) := exp( *($2
                   log( max($1 0.000001)
                      )
                  )
               )

# Return random number given min/max value
rand_within(2) := +( $1 
                     *( +( $2 neg($1) )
                        rand 
                      ) 
                   )          

# Return the probability of $1 (x) equals to $2 (t, the target number)
# fuzzy_equal(x,t,a) = 1/(1+a(x-b)^2)
# a is the parameter, the bigger a, the closer to crisp set
# After plotting via gnuplot for a while, it seems for t falls in [0,1], a=100 is a good choice 
fuzzy_equal(3) := /( 1
                     +( 1
                        *( $3
                           *( +( $1 neg($2) )
                              +( $1 neg($2) )
                            )  
                         ) 
                      )
                   )        

# Ruturn the probability x ($1) falls in [min, max] ( i.e. [$2, $3] )
# $4 is the parameter, the bigger a, the closer to crisp set
# For x falls in [0,1], a=100 ( i.e. $4=100 ) seems a good choice
fuzzy_within(4) := contin_if( less_than($1 $2)
                              fuzzy_equal($1 $2 $4)
                              contin_if( greater_than($1 $3)
                                         fuzzy_equal($1 $3 $4)
                                         1
                                       )
                            )

# Ruturn the probability x ($1) is smaller than t ($2), 
# a ($4) is the parameter, the bigger a, the closer to crisp set
fuzzy_less_than(3) := contin_if( greater_than($1 $2)
                                 fuzzy_equal($1 $2 $3)
                                 1 
                               )                   

fuzzy_low(3) := fuzzy_less_than($1 $2 $3)                      

# Ruturn the probability x ($1) is greater than t ($2), 
# a ($4) is the parameter, the bigger a, the closer to crisp set
fuzzy_greater_than(3) := contin_if( less_than($1 $2)
                                    fuzzy_equal($1 $2 $3)
                                    1
                                  )

fuzzy_high(3) := fuzzy_greater_than($1 $2 $3)                         

# ----------------------- Constants -----------------------
pee_threshold(0) := 0.5

poo_threshold(0) := 0.5

hunger_threshold(0) := 0.5

thirst_threshold(0) := 0.5

energy_threshold(0) := 0.5

fitness_threshold(0) := 0.5

true_threshold(0) := 0.5

go_away_from_threshold(0) := 0.5

# ----------------------- Helper functions -----------------------
at_home(1) :=
       	near($1 pet_home)  
	 
is_hungry(1) := 
	greater_than(get_hunger($1) hunger_threshold)

is_thirsty(1) :=
	greater_than(get_thirst($1) thirst_threshold)

has_energy(1) :=
	greater_than(get_energy($1) energy_threshold)

is_fit(1) :=
	greater_than(get_fitness($1) fitness_threshold)

needs_pee(1) :=
	greater_than(get_pee_urgency($1) pee_threshold)

needs_poo(1) :=
	greater_than(get_poo_urgency($1) poo_threshold)

is_moderately_next(2) :=
        is_proportional_next($1 $2 4 go_away_from_threshold)

# ----------------------- Traits helper functions ----------------
is_aggressive(1) :=
    greater_than(get_aggressiveness($1) true_threshold)

is_curious(1) :=
    greater_than(get_curiosity($1) true_threshold)

is_playful(1) :=
    greater_than(get_playfulness($1) true_threshold)

is_friendly(1) :=
    greater_than(get_friendliness($1) true_threshold)

is_fearful(1) :=
    greater_than(get_fearfulness($1) true_threshold)

is_appreciative(1) :=
    greater_than(get_appreciativeness($1) true_threshold)

is_excitable(1) := 
    greater_than(get_excitability($1) true_threshold)


# ----------------------- Emo Feelings helper functions ----------
is_happy(1) :=
    greater_than(get_happiness($1) true_threshold)

is_fear(1) :=
    greater_than(get_fear($1) true_threshold)

is_proud(1) :=
    greater_than(get_pride($1) true_threshold)

is_lovely(1) :=
    greater_than(get_love($1) true_threshold)

is_hateful(1) :=
    greater_than(get_hate($1) true_threshold)

is_angry(1) :=
    greater_than(get_anger($1) true_threshold)

is_grateful(1) := 
    greater_than(get_gratitude($1) true_threshold)

is_excited(1) :=
    greater_than(get_excitability($1) true_threshold)

# ---------------------- random action helper functions ------------

#choose uniformely between 2 actions
rand_action_2(2) := action_boolean_if(randbool $1 $2)

#choose uniformely between 3 actions
rand_action_3(3) := action_boolean_if(greater_than(rand /(1 3))
                                      rand_action_2($1 $2)
                                      $3)

#choose uniformely between 4 actions
rand_action_4(4) := action_boolean_if(randbool
                                      rand_action_2($1 $2)
                                      rand_action_2($3 $4))

#choose uniformely between 5 actions
rand_action_5(5) := action_boolean_if(greater_than(rand /(1 5))
                                      rand_action_4($1 $2 $3 $4)
                                      $5)


#choose uniformely between 6 actions
rand_action_6(6) := action_boolean_if(randbool
                                      rand_action_3($1 $2 $3)
                                      rand_action_3($4 $5 $6))

