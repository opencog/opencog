###
# Seek food locally, and whines if no food is around:
###
seek_food_locally(0) := 
action_boolean_if(exists_edible
		  and_seq(goto_obj(random_edible 2)
			  eat(nearest_edible))
		  whine)

###
# Sniff butt if available (preferably pet-butt, otherwise avatar-butt):
###
sniff_butt(0) := 
action_boolean_if(exists_pet
		  and_seq(goto_obj(random_pet 2)
		          sniff_pet_part(nearest_pet 
					 BUTT))
		  action_boolean_if(exists_avatar
			    	    and_seq(goto_obj(random_avatar 2)
 				            sniff_avatar_part(nearest_avatar 
							      BUTT))
				    action_success))

###
# Chase pets or avatars (which one is chosen by a coin-flip):
###
randbool(0) := 0<(+(rand -0.5))
#bad typed so disactivated, should use inefinite_object_if instead but has not been implemented yet
#rand_pet_or_avatar(0) := 
#boolean_if(exists_pet
#           boolean_if(exists_avatar
#	              boolean_if(randbool
#				 random_avatar
#		                 random_pet)
#		      random_pet)
#	   random_avatar)
#chase_helper(1) :=
#boolean_while(not(is_null($1))
#	      and_seq(bark
#		      goto_obj($1 2)
#		      growl))
#chase(0) := chase_helper(rand_pet_or_avatar)

###
# Pick up something, carry it a while, then put it down:
###
random_step(0) := 
and_seq(action_boolean_if(randbool
		          rotate_left
		          rotate_right)
	action_boolean_if(randbool
		          step_forward
		          step_backward))
pickup_carry_put_down(0) :=
and_seq(goto_obj(random_pickupable 2)
	grab(nearest_pickupable)
	random_step
	random_step
	random_step
        drop)

###
# Nudge something around (uses random_step defined above):
###
#nudge_forward does not exist anymore so that procedure is disactivated
#nudge_around(0) :=
#and_seq(goto_obj(random_movable 2)
#	nudge_to(nearest_movable random_object)
#	random_step
#	goto_obj(nearest_movable 2)
#	nudge_to(nearest_movable random_object)
#	random_step
#	goto_obj(nearest_movable 2)
#	nudge_forward(nearest_movable random_object))

### 
# No functional language code sample is complete without a ridiculously
# inefficient implementation of factorial
###
factorial(1) := contin_if(0<($1) *($1 factorial(+($1 -1))) 1)

###
# And an even less efficient implementation of fibonacci
###
fibonacci(1) := 
contin_if(0<($1)
           contin_if(0<(+($1 -1))
	              +(fibonacci(+($1 -1)) 
        	        fibonacci(+($1 -2)))
	              1)
          0)

###
# Go to object and bring it to owner, if the object is null then return action
# failure
###
bring_to_owner_helper(1) :=
    action_boolean_if(not(is_null($1))
                      and_seq(goto_obj($1 2)
                              grab($1)
                              action_boolean_if(exists(owner)
                                                and_seq(goto_obj(owner 2) drop)
                                                drop))
                      action_failure)

bring_to_owner(0) :=
    action_boolean_if(exists_pickupable
        bring_to_owner_helper(nearest_pickupable)
        action_failure)

###
# If object isn't null bark to owner, go to object and then bark at owner again.
# Otherwise action_failure.
###
lead_owner_to(1) :=
    action_boolean_if(not(is_null($1))
                      and_seq(bark_at(owner)
                              goto_obj($1 2)
                              bark_at(owner))
                      action_failure)

###
# If nearest avatar is non-friend growl, bare_teeth and bark at it. If there is
# no avatar near, just sit.
###
#bark_non_friend_helper(1) :=
#    action_boolean_if(near($1 self) and not(is_friendly($1))
#            and_seq(growl_at($1) 
#                    bare_teeth($1)
#                    bark_at($1))
#            and_seq(goto_obj($1 2) wag jump_up))
#
#bark_non_friend_avatar(0) :=
#    action_boolean_if(exists_avatar
#                bark_non_friend_helper(nearest_avatar)
#                sit)

###
# If nearest pet is non-friend growl, bare_teeth and bark at it. If there is
# no pet near, just sit. Use bark_non_friendly defined above.
###
#bark_non_friend_avatar(0) :=
#    action_boolean_if(exists_pet
#                bark_non_friend_helper(nearest_pet)
#                sit)

###
# Get the closest avatar and, if friendly lick him. If no avatar is present or
# the closest avatar isn't friendly stay.
###
#lick_friendly_helper(1) :=
#     action_boolean_if(is_friendly($1)
#            and_seq(goto_obj($1 2)
#                    lick_at($1))
#            stay)

#lick_friendly_avatar(0) := 
#    action_boolean_if(exists_avatar
#            lick_friendly_helper(nearest_avatar)
#            stay)

###
# Greet a friendly avatar jumping on it
###
#greet_avatar_with_jump_helper(1) :=
#     action_boolean_if(is_friendly($1)
#            and_seq(goto_obj($1 2)
#                    jump_towards($1))
#            stay)


#greet_avatar_with_jump(0) :=
#     action_boolean_if(exists_avatar
#            greet_avatar_with_jump_helper(nearest_avatar)
#            stay)

###
# If owner is visible go to it, lie down and sleep. Otherwise just whine,
# calling the owner
###
sleep_near_owner(0) :=
    action_boolean_if(exists(owner)
            and_seq(goto_obj(owner 2)
                    lie_down
                    sleep)
            whine)

###
# If the owner is visible got to it, sit and stay
###
sit_near_owner_and_stay(0) :=
    action_boolean_if(exists(owner)
            and_seq(goto_obj(owner 2)
                    sit
                    action_success)
            action_failure)
