#
# OpenPsi Rules preconditions scriptst
#
# Copyright(c) 2002-2008 VettaLabs Ltda
#
# Updated: by Zhenhua Cai <czhedu@gmail.com>
# 
# Date:    2011-01-07 
#
# Note:    OpenPsi Rules Preconditions  are obtained by reorganizing and modifying 
#          original Rules Preconditions used in RuleEngine.  
#

# -------- Preconditions for Relation Goal Rules ------------------------------

# Know
relateKnowPrecondition(1) :=
    or(is_last_agent_action($1 give_food_action)
       is_last_agent_action($1 kick_action self)
      )

# Enemy
relateEnemyWhenSeekedPrecondition(1) := 
	and(is_fear(self)
		not(is_pet($1))
		not(is_avatar($1))
		is_moving($1)
		is_moving_toward(self $1)
		is_proportional_next(self $1 4 0.6)
       )

relateEnemyWhenAttackedPrecondition(1) :=
	is_last_agent_action($1 kick_action self)   

# CuriousAbout
relateCuriousAboutPrecondition(1) :=
	and(has_novelty(self)
        is_curious(self)
        not(is_there_relation(know self $1))
       )

# Friend
# Only avatar of pet can become friend
is_pet_or_avatar(1) :=
    or(is_pet($1)
       is_avatar($1)
      )

relateFriendWhenReceiveFoodPrecondition(1) :=
	is_last_agent_action($1 give_food_action)   

# Anger
relateAngerPrecondition(1) :=
	and(is_angry(self)
		and(or(next(self $1)
			   near(self $1)
              )
			near(self nearest_edible)
           )
       )

relateAngerEnemyPrecondition(1) :=
	and(is_aggressive(self)
		next(self $1)
       )

relateAngerFoodThreatenPrecondition(1) :=
	and(is_aggressive(self)
		near(self nearest_edible)
		next(self $1)
       )

# -------- Preconditions for EnergyDemandGoal Rules ---------------------------

# Food

getFoodPrecondition(1) :=
	and(is_edible($1)
		near(self $1)
       )

begFoodPrecondition(0) :=
	not(near(self nearest_edible))  

searchForFoodPrecondition(0) :=
	not(near(self nearest_edible))

sitToGetFoodPrecondition(1) :=
	and(not(is_excited(self))
		not(near(self nearest_edible))
		is_avatar($1)
		near(self $1)
       ) 		

barkToProtectFoodPrecondition(1) :=
	and(near(self nearest_edible)	
		is_angry(self)
		is_proportional_next(self $1 4 0.6)
		or(is_pet($1)
		   is_avatar($1)
          )
       )

biteToProtectFoodPrecondition(1) :=
	and(near(self nearest_edible)
		is_aggressive(self)
		is_angry(self)
        near(self $1)
		is_avatar($1)
       )

# -------- Preconditions for WaterDemandGoal Rules ---------------------------

getWaterPrecondition(1) :=
    and(is_drinkable($1)
        near(self $1)    
       )

searchForWaterPrecondition(0) :=
    not(near(self nearest_drinkable))

# -------- Preconditions for IntegrityDemandGoal Rules ------------------------

# Flee

fleeWhenAttackedPrecondition(1) :=
    and(or(is_fear(self)
           not(is_angry(self))
          )
	    next(self $1)
	    is_last_agent_action($1 kick_action self)
		not(near(self owner))
	   ) 

fleeWhenChasedByAMovingObjectPrecondition(1) :=
	and(is_fear(self)
		not(is_pet($1))
		not(is_avatar($1))
		is_moving($1)
		is_moving_toward(self $1)
		is_proportional_next(self $1 4 0.6)
       )

# -------- Preconditions for AffiliationDemandGoal Rules ------------------------

lookForCompanyPrecondition(1) :=
	and(is_fearful(self)
		is_owner($1 self)
       	greater_than(get_current_action_repetition 3)
       )

followOwnerPrecondition(0) :=
	and(not(near(self owner))
		is_fearful(self)
        greater_than(get_current_action_repetition 2)
       )

playPrecondition(0) :=
	and(is_happy(self)
		is_playful(self)
		not(is_angry(self))
		is_excited(self)
		has_energy(self)
		not(is_hungry(self))
		near(self _*_)
		is_there_relation(friend self _*_))

# -------- Preconditions for CertaintyDemandGoal Rules ------------------------

approachUnknownAvatarToInspectPrecondition(1) :=
	and(near(self owner)
		is_fear(self)
		next(self $1)
		not(near(self $1))
		is_avatar($1)
		not(is_owner($1 self))
		not(is_there_relation(friend self $1))
		not(is_there_relation(enemy self $1))
       )
		
approachToInspectPrecondition(1) :=
	and(not(is_fear(self))
	    not(near(self $1))
	    not(is_there_relation(friend self $1))
	    not(is_there_relation(enemy self $1))
       )

lickToInspectPrecondition(1) :=
	near(self $1)

sniffToInspectPrecondition(1) :=
    and(or(not(is_fear(self))
           next(self owner)
          )
        near(self $1)
       )

moveObjectToPlayPrecondition(0) :=
        and(not(is_holding_something(self))
            exists_pet
            exists_pickupable)

chaseMovingObjectPrecondition(0) :=
	and(not(is_fear(self))
            is_curious(self)
            inside_pet_fov(self _*_)
            next(self _*_)
            is_moving(_*_)
            is_object(_*_))

# -------- Preconditions for CompetenceDemandGoal Rules ------------------------

approachToAttackPrecondition(1) :=
	and(is_aggressive(self)
	    is_angry(self)
	    not(is_there_relation(friend self $1))
	    not(near(self $1))
       )

lookForThingsToDestroyPrecondition(0) :=
	and(is_fearful(self)
		is_angry(self)
		not(has_novelty(self))
	    greater_than(get_current_action_repetition 3)
       )

# -------- Preconditions for Learning Rules -----------------------------------

approachToLearnPrecondition(0) :=
	and(is_learning(self)
		not(next(self exemplar_avatar))
       )
		
# TODO resolve isNotExemplarInProgress()
# "isPetLearning( ) and isNotNext( getTeacherId( ) ) and isNotExemplarInProgress( )",

learningModePrecondition(0) :=
	and(is_learning(self)
		not(avatar_asked_to_try(self))
       )

tryRunSchemaPrecondition(0) :=
	and(is_learning(self)
		avatar_asked_to_try(self)
       )

executeRequestedActionPrecondition(0) :=
    has_requested_schema(self)

saySomethingPrecondition(0) :=
    has_something_to_say(self)

# -----------------------------------------------------------------------------
# 
# Preconditions below are not used in OpenPsi currently.
# While they might be useful in near future. 
#

# ----------------------- Beg Preconditions ----------------------
begCompanyPrecondition(0) := 
	and(is_fearful(self)
		not(next(self owner))
		not(is_excited(self)))

	
begMercyPrecondition(0) :=
	and(not(is_aggressive(self))
		not(is_angry(self))
		is_last_agent_action(_*_ kick_action self))

# ----------------------- Eat Preconditions ----------------------

eatAlonePrecondition(0) :=
	and(is_hungry(self)
		not(near(self nearest_avatar))
		is_edible(_*_)
		near(self _*_))

# ----------------------- Drink Preconditions ----------------------

drinkAlonePrecondition(0) :=
	and(is_thirsty(self)
		less_than(get_energy(self) 0.3)
		not(near(self nearest_avatar))
		is_drinkable(_*_)
		near(self _*_))


# ----------------------- Poo Preconditions ----------------------
wanderToFindPooPlacePrecondition(0) :=
	and(needs_poo(self)
		not(near(self nearest_poo_place)))

pooPrecondition(0) :=
	and(needs_poo(self)
		is_poo_place(_*_)
		near(self _*_))

# ----------------------- Pee Preconditions ----------------------
peeToMarkTerritoryPrecondition(0) :=
	and(not(is_fearful(self))
		is_excited(self)
		is_proud(self)
		not(near(self nearest_avatar))
		less_than(get_pee_urgency(self) 0.3)
		is_pee_place(_*_)
		near(self _*_))

peePrecondition(0) :=
	and(needs_pee(self)
		is_pee_place(_*_)
		near(sef _*_))


wanderToFindPeePlacePrecondition(0) :=
	and(greater_than(get_pee_urgency(self) 0.2)
		not(near(self nearest_pee_place)))

# ----------------------- Nap Preconditions ----------------------
takeANapNearFriendPrecondition(0) :=
	and(less_than(get_energy(self) 0.4)
		is_there_relation(friend self _*_)
		near(self _*_))
		
takeANapAtHomePrecondition(0) :=
	and(less_than(get_energy(self) 0.4)
		at_home(self))

veryTiredNapPrecondition(0) :=
	or(less_than(get_energy(self) 0.2)
	   and(less_than(get_energy(self) 0.2)
	   	   is_last_pet_schema(sleep_action action_success)))	

#veryTiredNapPrecondition(0) :=
#	or(less_than(get_energy(self) 0.2)
#           is_last_pet_schema(sleep_action action_success))

napBeforeStarvationPrecondition(0) :=
	greater_than(get_hunger(self) 0.8)

# ----------------------- Sit Preconditions ----------------------

sitToRestPrecondition(0) :=
	and(not(is_excited(self))
		not(near(self nearest_avatar))
		or(is_hungry(self) 
		   less_than(get_energy(self) 0.5))
		not(is_playful(self)))

# ----------------------- Approach Preconditions ----------------------
hideWhenUnknownAvatarIsCommingPrecondition(0) :=
	and(not(next(self owner))
		is_fear(self)
		next(self _*_)
		is_avatar(_*_)
		not(is_there_relation(friend self _*_))
		not(is_there_relation(enemy self _*_))			
		not(is_owner(_*_ self)))
		
#
# the last and construction represents current_action_repetition == 2
#
approachToDistractOwnerPrecondition(0) :=
	and(not(near(self owner))
	    has_learned_tricks(self)
	    equal_to(get_current_action_repetition 2))

# ----------------------- Bark Preconditions ----------------------
barkToFrightenPrecondition(0) :=
	and(is_angry(self)
		next(self _*_)
		or(is_pet(_*_)
		   is_avatar(_*_))		
		is_there_relation(anger self _*_))

barkFearPrecondition(0) :=
	and(is_fearful(self)
		has_novelty(self)
		not(near(self owner))		
		is_there_relation(curious_about self _*_)		
		not(is_there_relation(friend self _*_)))

barkWhenPlayPrecondition(0) :=
	and(not(is_aggressive(self))
		is_playful(self)
		is_happy(self)
		is_excited(self)
		has_energy(self)
		not(near(self owner))
		near(self _*_)
		not(is_there_relation(enemy self _*_))
		not(is_last_pet_schema(bark_action action_success))
		not(is_last_pet_schema(bark_to_target_action action_success _*_)))

barkAfterDetectANewObjectPrecondition(0) :=
	and(is_curious(self)
		not(is_fear(self))
		has_novelty(self)
		not(is_there_relation(curious_about self _*_))
		not(is_there_relation(friend self _*_)))

# ----------------------- Bite Preconditions ----------------------
biteEnemyPrecondition(0) :=
	and(is_aggressive(self)
		near(self _*_)
		is_there_relation(anger self _*_)
		is_there_relation(enemy self _*_))

biteWhenAttackedButCalmPrecondition(0) :=
	and(is_aggressive(self)
		not(is_angry(self))
		near(self _*_)
		is_last_agent_action(_*_ kick_action self))

biteWhenAttackedPrecondition(0) :=
	and(is_aggressive(self)
		is_angry(self)
		near(self _*_)
		is_last_agent_action(_*_ kick_action self))
		
biteEnemyWhenAngryPrecondition(0) :=
	and(not(is_fear(self))
		is_angry(self)
		near(self _*_)
		is_there_relation(enemy self _*_))

# ----------------------- Lick Preconditions ----------------------
lickForGratitudePrecondition(0) :=
	and(near(self _*_)
		is_there_relation(gratitude self _*_))
		
lickForLovePrecondition(0) :=
	and(not(is_aggressive(self))
	    is_excited(self)
	    near(self _*_)
	    is_avatar(_*_)
	    is_there_relation(love self _*_)
	    not(is_there_relation(enemy self _*_)))

# ----------------------- Sniff Preconditions ----------------------

nearPrecondition(0) := near(self _*_)

curiousPrecondition(0) := is_there_relation(curious_about self _*_)

sniffJealousyPrecondition(0) :=
        and(is_fearful(self)
            near(self _*_)
            is_there_relation(love self _*_)
            not(is_there_relation(enemy self _*_)))

# ----------------------- Jump Preconditions ----------------------
jumpJoyPrecondition(0) :=
	and(not(near(self owner))
		not(is_hungry(self))
		is_playful(self)
		is_happy(self)
		is_excited(self)
		near(self _*_)
		is_there_relation(friend self _*_))

jumpPlayPrecondition(0) :=
	and(not(is_aggressive(self))
		or(is_happy(self)
		   is_grateful(self))
		is_playful(self)
		is_excited(self)
		has_energy(self)
		not(is_hungry(self))
		is_there_relation(friend self _*_))
		
# ----------------------- Play Preconditions ----------------------

playWithOwnerPrecondition(0) :=
	and(is_playful(self)
		is_happy(self)
		near(self owner)
		greater_than(get_energy(self) 0.3)
		less_than(get_hunger(self) 0.78))

playWhenAvatarBecomeFriendPrecondition(0) :=
	and(has_novelty(self)
		is_happy(self)
		next(self _*_)
		is_avatar(_*_)
		is_there_relation(friend self _*_))

# ----------- Bring random object to a friend precondition -----------

bringRandomObjectToPetFriendPrecondition(0) :=
        and(is_there_relation(friend self _*_)
            is_pet(_*_)
            exists_pickupable
            not(is_hungry(self))
            not(is_angry(self)))

bringRandomObjectToOwnerPrecondition(0) :=
        and(is_there_relation(friend self owner)
            exists_pickupable
            not(is_hungry(self))
            not(is_angry(self)))

# ----------------------- Wander Preconditions ----------------------

lookForNewThingsPrecondition(0) :=
	and(is_curious(self)
		not(is_fear(self))
		or(not(is_excited(self))
		   not(has_novelty(self))))		 

lookForNearThingsWhenFearfulPrecondition(0) :=
	and(near(self owner)
		is_curious(self)
		is_fear(self)
		not(has_novelty(self))		
		not(is_excited(self)))

# ----------------------- Chase Preconditions ----------------------

chasePetHoldingSomethingPrecondition(0) :=
        and(not(is_fear(self))
            inside_pet_fov(self _*_)
            is_pet(_*_)
            is_holding_something(_*_))

# ----------------------- Feelings Preconditions ----------------------
feelHatePrecondition(0) :=
	and(is_aggressive(self)
		is_there_relation(anger self _*_)
		not(is_there_relation(friend self _*_)))

feelAngerNaturallyPrecondition(0) :=
	and(is_aggressive(self)
		not(is_angry(self))) 
      
feelFearWhenUnknownAvatarIsCommingPrecondition(0) :=
	and(not(near(self owner))
		is_fear(self)
		next(self _*_)
		is_avatar(_*_)
		not(is_owner(_*_ self))
		not(is_there_relation(friend self _*_))
		not(is_there_relation(enemy self _*_)))

feelFearWhenAttackedPrecondition(0) :=
	and(is_fearful(self)
		not(is_owner(_*_ self))
		is_last_agent_action(_*_ bark_to_target_action self)) 

feelFearNaturallyPrecondition(0) :=
	and(is_fearful(self)
		not(is_fear(self))) 

feelPridePrecondition(0) :=
	and(is_excited(self)
	   	has_novelty(self)) 

feelExcitementPrecondition(0) :=
	and(is_aggressive(self)
		not(is_happy(self))
		not(is_angry(self))) 

feelAngerWhenBoredPrecondition(0) :=
	and(is_aggressive(self)
		not(is_excited(self))) 

feelAngerWhenAttackedPrecondition(0) :=
	and(is_aggressive(self)
		is_last_agent_action(_*_ kick_action self))	 

feelComfortableAfterBarkPrecondition(0) :=
	and(is_aggressive(self)
		is_angry(self)
		or(is_last_pet_schema(bark_action action_success)
		   is_last_pet_schema(bark_to_target_action action_success _*_))) 

feelHappinessWhenNearFriendPrecondition(0) :=
	and(not(is_aggressive(self))
		near(self owner)
		near(self _*_)
		is_object(_*_)
		is_there_relation(friend self _*_))		

# TODO resolve isPetInGroupingMode - postponed
#feelHappinessWhenBelongsToAGroupPrecondition(0) :=
#	and(next(self _*_)
#		is_pet(_*_))) 
# 		 
# "isPetInGroupingMode( ) and isNext( '*' ) and isPet( '*' )",


feelGratitudeWhenReceiveFoodPrecondition(0) :=
	and(is_appreciative(self)
		is_last_agent_action(_*_ give_food_action)) 

feelHappinessPrecondition(0) :=
	or(is_last_pet_schema(drop_n_eat_action action_success _*_)
	   is_last_agent_action(_*_ give_food_action))
	   
# TODO resolve near object names	   
# "isLastPetAction('drop_n_eat') or isLastAgentAction('give_food', '*') or isNear('ball') or isNear('stick')",

feelExcitementAfterEatPrecondition(0) :=
	and(is_excited(self)
		is_last_pet_schema(drop_n_eat_action action_success _*_)) 

feelExcitementeWhenNoveltyPrecondition(0) :=
	and(has_novelty(self)
		is_excitable(self)) 

feelExcitementWhenBringObjectToOwnerPrecondition(0) :=
	and(near(self owner)
		near(self _*_)
		is_object(_*_)
        	less_than(get_current_action_repetition 5))
		
feelLovePrecondition(0) := 
	and(near(self _*_)
		is_there_relation(friend self _*_))

feelAngerPrecondition(0) :=
	is_there_relation(anger self _*_) 

feelGratitudePrecondition(0) :=
	is_there_relation(gratitude self _*_)	 

feelFearPrecondition(0) := 
	is_there_relation(fear self _*_)

# ----------------------- Group Preconditions ----------------------
#goBehindPetToInspectItPrecondition(0) :=
#      "isPet( '*' ) and isInsidePetFov( '*' ) and ( not_fear( ) or next_owner( ) ) and isNext('*') and isNotNear('*') and isThereRelation('*', 'curious_about') and isNotThereRelation('*', 'friend' ) and isNotThereRelation('*', 'enemy' )",

#goBehindFriendlyPetWhenNearPrecondition(0) :=
#      "isPet( '*' ) and isInsidePetFov( '*' ) and ( not_fear( ) or next_owner( ) ) and isNext('*') and isNotNear( '*' ) and isThereRelation('*', 'friend' )",

#requestGroupingPrecondition(0) :=
#      "isNotPetInGroupingMode( ) and not_fear( ) and isPet( '*' ) and isNext( '*' ) and not_excitement( ) and isNotNovelty( ) and isNotLastAgentAction( 'group_command', '*', 'request_grouping' )",

#joinOwnGroupPrecondition(0) :=
#      "isNotPetInGroupingMode( ) and isLastAgentAction( 'group_command', '*', 'join_group', self )",

#reJoinGroupPrecondition(0) :=
#      "isPetInGroupingMode( ) and isLastAgentAction( 'group_command', getGroupLeaderId( ), 'request_grouping' )",

#joinGroupPrecondition(0) :=
#      "isNotPetInGroupingMode( ) and not_happiness( ) and not_fear( ) and isLastAgentAction( 'group_command', '*', 'request_grouping' ) and isNotLastPetAction( 'group_command', 'request_grouping' )",

#followGroupLeaderPrecondition(0) :=
#      "isPetInGroupingMode( ) and getGroupLeaderId( ) ~= self",

#abandonGroupPrecondition(0) :=
#      "isPetInGroupingMode( ) and not_excitement( ) and not_happiness( ) and getGroupLeaderId( ) ~= self",

#executeGroupLeaderCommandPrecondition(0) :=
#      "isPetInGroupingMode( ) and isLastAgentAction( 'group_command', '*', 'execute_leader_command' )",

# ----------------------- Default Preconditions ----------------------
defaultActionPrecondition(0) := 
	or(not(is_aggressive(self))
	   not(is_curious(self))
	   not(is_playful(self)))

defaultAggressiveActionPrecondition(0) :=
	is_aggressive(self)

selectLearnedTrickPrecondition(0) :=
	and(has_learned_tricks(self)
		near(self owner)
        greater_than(get_current_action_repetition 3))
		
#---------------------------------------------------------------------
#------------- Pet-to-pet Social Behavior Preconditions --------------
#---------------------------------------------------------------------

#--------------- ACTIONS ----------------

#------------- Approaches -------------

#approachCuriousPetPrecondition(0) :=
#	and(inside_pet_fov(self _*_)
#	    is_pet(_*_)
#	    is_there_relation(curious_about self _*_)
#	    not(is_angry(_*_))
#	    not(is_fearful(_*_))
#	)

approachCuriousPetPrecondition(0) :=
	and(inside_pet_fov(self _*_)
	    is_pet(_*_)
	    is_there_relation(curious_about self _*_)
	)

goAwayFearfulPetPrecondition(0) :=
	and(inside_pet_fov(self _*_)
	    is_pet(_*_)
	    is_fear(self)
	    is_moderately_next(self _*_)
	    not(is_there_relation(friend self _*_))
	)

approachAngryPetPrecondition(0) :=
	and(inside_pet_fov(self _*_)
	    is_pet(_*_)
	    is_angry(self)
	)

#------------- Reactions -------------

beenGrowledPetPrecondition(0) :=
	and(is_pet(_*_)
	    is_last_agent_action(_*_ growl_action)
	)

beenBittenPetPrecondition(0) :=
	and(is_pet(_*_)
	    is_last_agent_action(_*_ bite_action)
	)

beenSniffedPetPrecondition(0) :=
	and(is_pet(_*_)
	    is_last_agent_action(_*_ sniff_action)
	)

defendFriendFromBitePrecondition(0) :=
        and(is_pet(_*_)
            is_last_agent_action(_*_ bite_action)
        )

#--------------- FEELINGS ----------------

feelLessAngryAfterGotoGrowlOrBitePrecondition(0) :=
	and(is_pet(_*_)
	    is_last_pet_schema(goto_growl_or_bite_action action_success _*_)
	)

### SCAVENGER HUNT RULES ###

# Basic actions
callOtherAgentsToPlayPrecondition(0) :=
	is_agent_state(1)

answerCallToPlayPrecondition(0) :=
	is_agent_state(2)

waitForOtherAgentsAnswersPrecondition(0) :=
	is_agent_state(11)

gotoTeamBasePrecondition(0) :=
	is_agent_state(1301)

waitForGameStartPrecondition(0) :=
	is_agent_state(1304)

gotoTreasurePrecondition(0) :=
	is_agent_state(1305)

grabTreasurePrecondition(0) :=
	is_agent_state(1306)

bringTreasureToBasePrecondition(0) :=
	is_agent_state(1308)
	    
dropTreasurePrecondition(0) :=
	is_agent_state(1311)

exploreObstaclePrecondition(0) :=
	is_agent_state(1307)

lookAtTileDirectionPrecondition(0) :=
	is_agent_state(1309)

sendExploredAreaNotificationPrecondition(0) :=
	is_agent_state(1314)

chooseAnAreaToExplorePrecondition(0) :=
	is_agent_state(1302)

waitForOtherAgentsChosenAreaConfirmationPrecondition(0) :=
	is_agent_state(1303)

lookAtAreaCenterPrecondition(0) :=
	is_agent_state(1315)

gotoVisibleTilePrecondition(0) :=
	is_agent_state(1313)

gotoBaseToComputePointsPrecondition(0) :=
	is_agent_state(1310)

sendGameStartedMessagePrecondition(0) :=
	is_agent_state(1316)

followTargetPrecondition(0) :=
	is_agent_state(1319)

waitingForCommandPrecondition(0) :=
	is_agent_state(1320)

lookForTargetPrecondition(0) :=
	is_agent_state(1322)

# 1317 is being used to main game control

# debug preconditions

truePrecondition(0) := true
