#
# Demand updaters
#
# @author Zhenhua Cai czhedu@gmail.com
# @date   2011-02-23
#
# Note: Some tricks about combo scripts
#     1. There cannot be any whitespaces between operator and (
#     2. There is no '-' operator, it is the default type of an unrecognized string.
#        So for -x you must write *(-1 x). 
#        But if you want you could define a procedure neg(1) := *(-1 $1) under
#        scripts/embodiment/stdlib.combo
#     3. The best doc about Combo is doc/comboreduct/ComboReduct.pdf in the OpenCog project
#     4. You should avoid infinitely great number in Combo
#     5. Refer to the function builtin_str_to_vertex in file 
#        'opencog/comboreduct/combo/vertex.h' you will get the lexicon of the 
#        built-in combo operators.
#     6. Never use '_' as the start of function name. 
#

# FuzzyWithin is used to evaluate the truth value of a PredicateNode for DemandGoal 
# given min/max acceptable values and its current level 
# $1 x, $2 min, $3 max
FuzzyWithin(3) := contin_if( less_than($1 $2) 
                             fuzzy_greater_than($1 $2 1000)
                             contin_if( greater_than($1 $3)
                                        rand_within(0.95 1)
                                        rand_within(0.70 1) 
                                      )
                           )

# The script below is only for test. 
#
# For real OpenPsi, it would be much more complex. Such as the example provided by Nil:
#
#     EnergyDemandSchema = (FoodIntake - MovementAmount) + EnergyDemandValue * 0.9
#
# Where EnergyDemandValue is obviously the value of EnergyDemandSchema 
# calculated at the previous cycle

EnergyDemandUpdater(0) :=
    rand_within(0 1)
#    exp( +( *( log(get_energy_demand) 0.999)
#            neg(0.001)
#          )  
#       )

WaterDemandUpdater(0) :=
    rand_within(0 1)
#    exp( +( *( log(get_water_demand) 0.999)
#            neg(0.001)
#          )  
#       )

IntegrityDemandUpdater(0) :=
    rand_within(0 1)
#    exp( +( *( log(get_integrity_demand) 0.999)
#            neg(0.001)
#          )  
#       )

AffiliationDemandUpdater(0) :=
    rand_within(0 1)
#    exp( +( *( log(get_affiliation_demand) 0.999)
#            neg(0.001)
#          )  
#       )


CertaintyDemandUpdater(0) :=
    rand_within(0 1)
#    exp( +( *( log(get_certainty_demand) 0.999)
#            neg(0.001)
#          )  
#       )

CompetenceDemandUpdater(0) :=
    rand_within(0 1)
#    exp( +( *( log(get_competence_demand) 0.999)
#            neg(0.001)
#          )  
#       )

# TODO: TestEnergy is only used for debugging. Remove it once finished. 
TestEnergyDemandUpdater(0) :=
    +( *( get_energy_demand rand )
       60
     )

