#
# Modulator updaters
#
# @author Zhenhua Cai czhedu@gmail.com
# @date   2011-02-08
#
# Note: Some tricks about combo scripts
#     1. There cannot be any whitespaces between operator and (
#     2. There is no '-' operator, it is the default type of an unrecognized string.
#        So for -x you must write *(-1 x). 
#        But if you want you could define a procedure neg(1) := *(-1 $1) under
#        scripts/embodiment/stdlib.combo
#     3. The best doc about Combo is doc/comboreduct/ComboReduct.pdf in the OpenCog project
#     4. You should avoid infinitely great number in Combo
#     5. Refer to the function 'builtin_str_to_vertex' in file 'opencog/comboreduct/combo/vertex.h', 
#         you will get the lexicon of the built-in combo operators
#

# I borrow a few equations from the paper below
# Psi and MicroPsi A Novel Approach to Modeling Emotion and Cognition in a Cognitive Architecture, 
# Joscha Bach, Dietrich DÃ¶rner, Ronnie Vuine
#

# Activation controls the agent's readiness for action. 
# The higher the activation, the pressing it has become to react to the situation at hand,
# and faster decisions are sought. 
# A higher activation would lead to few details and less schematic depth. 
ActivationModulatorUpdater(0) := 
    *( get_certainty_demand_goal_truth_value
            
       +( 1
          neg( power(get_competence_demand_goal_truth_value 0.5)
             ) 
        ) 
     )

# Resolution level affects perception. 
# The range of resolution level is [0, 1]
# A low resolution level tends to miss differences, then the agent would get a better overview
ResolutionModulatorUpdater(0) :=
    +( 1 
       neg( power(get_activation_modulator 0.5)
          ) 
     )

# The frequency of the securing behavior is inversily determined by SecuringThreshold.
# The range of securing threshold is [0, 1]
# The value of securing threshold is proportional to the strength of the current motive, 
# i.e. in the face of urgency, there will be less orientation. 
# It also depends on the uncertainty in the current context.
# An undetermined environment requires more orientation, i.e. lower securing threshold. 
SecuringThresholdModulatorUpdater(0) :=
    normalize( /( +(get_certainty_demand_goal_truth_value 1)

                  +(get_current_demand_goal_truth_value 1)
                )
                0.5
                2
             )

# SelectionThreshold is a bias added to the strength of the currently selected motive (Demand Goal). 
# The range of SelectionThreshold is [0, 1]
# A higher selection threshold leads to "stubbornness", makes it harder to switch motives (Demand Goals), 
# then oscillations can be avoided.
# While a lower one results in opportunism/flexibility, or even motive fluttering. 
SelectionThresholdModulatorUpdater(0) :=
    clip_within( *( get_selection_threshold_modulator
                    +(get_activation_modulator 0.5)     
                  )
                 0.001
                 1
               )
