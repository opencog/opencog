#
# Rules preconditions scriptst
#
# Copyright(c) 2002-2008 VettaLabs Ltda
#

is_food_available(0) := near(self nearest_edible)

is_water_available(0) := near(self nearest_drinkable)

is_pee_place_available(0) := near(self nearest_pee_place)

is_poo_place_available(0) := near(self nearest_poo_place)

# debug preconditions
truePrecondition(0) := true

# ----------------------- Beg Preconditions ----------------------
begCompanyPrecondition(0) := 
	and(is_fearful(self)
		not(next(self owner))
		not(is_excited(self)))

begFoodPrecondition(0) :=
	and(greater_than(get_hunger(self) 0.85)
		not(near(self nearest_edible)))  
	
begMercyPrecondition(0) :=
	and(not(is_aggressive(self))
		not(is_angry(self))
		is_last_agent_action(_*_ kick_action self))

# ----------------------- Eat Preconditions ----------------------

#searchForFoodPrecondition(0) :=
#	and(is_hungry(self)
#		not(near(self nearest_edible))
#		has_energy(self))

# ----------------------- Drink Preconditions ----------------------

#searchForWaterPrecondition(0) :=
#	and(is_thirsty(self)
#		not(near(self nearest_drinkable))
#		greater_than(get_energy(self) 0.3))

# ----------------------- Poo Preconditions ----------------------
wanderToFindPooPlacePrecondition(0) :=
	and(needs_poo(self)
		not(near(self nearest_poo_place)))

pooPrecondition(0) :=
	and(needs_poo(self)
		is_poo_place(_*_)
		near(self _*_))

# ----------------------- Pee Preconditions ----------------------
peeToMarkTerritoryPrecondition(0) :=
	and(not(is_fearful(self))
		is_excited(self)
		is_proud(self)
		not(near(self nearest_avatar))
		less_than(get_pee_urgency(self) 0.3)
		is_pee_place(_*_)
		near(self _*_))

peePrecondition(0) :=
	and(needs_pee(self)
		is_pee_place(_*_)
		near(sef _*_))


wanderToFindPeePlacePrecondition(0) :=
	and(greater_than(get_pee_urgency(self) 0.2)
		not(near(self nearest_pee_place)))

# ----------------------- Nap Preconditions ----------------------
takeANapNearFriendPrecondition(0) :=
	and(less_than(get_energy(self) 0.4)
		is_there_relation(friend self _*_)
		near(self _*_))
		
takeANapAtHomePrecondition(0) :=
	and(less_than(get_energy(self) 0.4)
		at_home(self))

veryTiredNapPrecondition(0) :=
	or(less_than(get_energy(self) 0.2)
	   and(less_than(get_energy(self) 0.2)
	   	   is_last_pet_schema(sleep_action action_success)))	

#veryTiredNapPrecondition(0) :=
#	or(less_than(get_energy(self) 0.2)
#           is_last_pet_schema(sleep_action action_success))

napBeforeStarvationPrecondition(0) :=
	greater_than(get_hunger(self) 0.8)

# ----------------------- Sit Preconditions ----------------------
sitToGetFoodPrecondition(0) :=
	and(not(is_excited(self))
		not(near(self nearest_edible))
		less_than(get_energy(self) 0.4)
		is_avatar(_*_)
		near(self _*_)
		is_there_relation(friend self _*_ )) 		


sitToRestPrecondition(0) :=
	and(not(is_excited(self))
		not(near(self nearest_avatar))
		or(is_hungry(self) 
		   less_than(get_energy(self) 0.5))
		not(is_playful(self)))

# ----------------------- Approach Preconditions ----------------------
hideWhenUnknownAvatarIsCommingPrecondition(0) :=
	and(not(next(self owner))
		is_fear(self)
		next(self _*_)
		is_avatar(_*_)
		not(is_there_relation(friend self _*_))
		not(is_there_relation(enemy self _*_))			
		not(is_owner(_*_ self)))
		
approachUnknownAvatarToInspectPrecondition(0) :=
	and(near(self owner)
		is_fear(self)
		next(self _*_)
		not(near(self _*_))
		is_avatar(_*_)
		not(is_owner(_*_ self))
		not(is_there_relation(friend self _*_))
		not(is_there_relation(enemy self _*_))
		is_there_relation(curious_about self _*_))
		
approachFriendWhenTiredPrecondition(0) :=
	and(less_than(get_energy(self) 0.25)
		is_there_relation(friend self _*_))

approachToInspectPrecondition(0) :=
	and(not(is_fear(self))
	    not(near(self _*_))
	    is_there_relation(curious_about self _*_)
	    not(is_there_relation(friend self _*_))
	    not(is_there_relation(enemy self _*_)))
		
approachToAttackPrecondition(0) :=
	and(is_aggressive(self)
	    has_energy(self)
	    is_angry(self)
	    not(is_there_relation(friend self _*_))
	    not(near(self _*_))
	)

#
# the last and construction represents current_action_repetition == 2
#
approachToDistractOwnerPrecondition(0) :=
	and(not(near(self owner))
	    has_learned_tricks(self)
	    equal_to(get_current_action_repetition 2))

# ----------------------- Bark Preconditions ----------------------
barkToFrightenPrecondition(0) :=
	and(is_angry(self)
		next(self _*_)
		or(is_pet(_*_)
		   is_avatar(_*_))		
		is_there_relation(anger self _*_))

barkToProtectFoodPrecondition(0) :=
	and(near(self nearest_edible)	
		is_angry(self)
		is_proportional_next(self _*_ 4 0.6)
		or(is_pet(_*_)
		   is_avatar(_*_)))

barkFearPrecondition(0) :=
	and(is_fearful(self)
		has_novelty(self)
		not(near(self owner))		
		is_there_relation(curious_about self _*_)		
		not(is_there_relation(friend self _*_)))

barkWhenPlayPrecondition(0) :=
	and(not(is_aggressive(self))
		is_playful(self)
		is_happy(self)
		is_excited(self)
		has_energy(self)
		not(near(self owner))
		near(self _*_)
		not(is_there_relation(enemy self _*_))
		not(is_last_pet_schema(bark_action action_success))
		not(is_last_pet_schema(bark_to_target_action action_success _*_)))

barkAfterDetectANewObjectPrecondition(0) :=
	and(is_curious(self)
		not(is_fear(self))
		has_novelty(self)
		not(is_there_relation(curious_about self _*_))
		not(is_there_relation(friend self _*_)))

# ----------------------- Bite Preconditions ----------------------
biteEnemyPrecondition(0) :=
	and(is_aggressive(self)
		near(self _*_)
		is_there_relation(anger self _*_)
		is_there_relation(enemy self _*_))

biteWhenAttackedButCalmPrecondition(0) :=
	and(is_aggressive(self)
		not(is_angry(self))
		near(self _*_)
		is_last_agent_action(_*_ kick_action self))

biteWhenAttackedPrecondition(0) :=
	and(is_aggressive(self)
		is_angry(self)
		near(self _*_)
		is_last_agent_action(_*_ kick_action self))

biteToProtectFoodPrecondition(0) :=
	and(near(self nearest_edible)
		is_aggressive(self)
		is_angry(self)
        near(self _*_)
		is_avatar(_*_))
		
biteEnemyWhenAngryPrecondition(0) :=
	and(not(is_fear(self))
		is_angry(self)
		near(self _*_)
		is_there_relation(enemy self _*_))

# ----------------------- Flee Preconditions ----------------------
#fleeWhenAttackedPrecondition(0) :=
#	and( or(is_fear(self)
#			and(not(is_angry(self))
#				less_than(get_energy(self) 0.25)
#			   )
#		    )
#		 next(self _*_)
#		 is_last_agent_action(_*_ kick_action self)
#		 not(near(self owner))
#	   ) 
#
#fleeWhenChasedByAMovingObjectPrecondition(0) :=
#	and(is_fear(self)
#		not(is_pet(_*_))
#		not(is_avatar(_*_))
#		is_moving(_*_)
#		is_moving_toward(self _*_)
#		is_proportional_next(self _*_ 4 0.6))

fleePrecondition(0) :=
    or( and( next(self _*_)
             is_last_agent_action(_*_ kick_action self)
             not(near(self owner))
           )

         and( not(is_pet(_*_))
              not(is_avatar(_*_))
              is_moving_toward(self _*_)
              is_proportional_next(self _*_ 4 0.6)
            )
      )

# ----------------------- Lick Preconditions ----------------------
lickForGratitudePrecondition(0) :=
	and(near(self _*_)
		is_there_relation(gratitude self _*_))
		
lickToInspectPrecondition(0) :=
	and(near(self _*_)
            is_there_relation(curious_about self _*_)
            is_there_relation(familiar_with self _*_))

lickForLovePrecondition(0) :=
	and(not(is_aggressive(self))
	    is_excited(self)
	    near(self _*_)
	    is_avatar(_*_)
	    is_there_relation(love self _*_)
	    not(is_there_relation(enemy self _*_)))

# ----------------------- Sniff Preconditions ----------------------
sniffToInspectPrecondition(0) :=
        and(or(not(is_fear(self))
            next(self owner))
            near(self _*_)
            is_there_relation(curious_about self _*_))

nearPrecondition(0) := near(self _*_)

curiousPrecondition(0) := is_there_relation(curious_about self _*_)

sniffJealousyPrecondition(0) :=
        and(is_fearful(self)
            near(self _*_)
            is_there_relation(love self _*_)
            not(is_there_relation(enemy self _*_)))


# ----------------------- Jump Preconditions ----------------------
jumpJoyPrecondition(0) :=
	and(not(near(self owner))
		not(is_hungry(self))
		is_playful(self)
		is_happy(self)
		is_excited(self)
		near(self _*_)
		is_there_relation(friend self _*_))

jumpPlayPrecondition(0) :=
	and(not(is_aggressive(self))
		or(is_happy(self)
		   is_grateful(self))
		is_playful(self)
		is_excited(self)
		has_energy(self)
		not(is_hungry(self))
		is_there_relation(friend self _*_))

		
# ----------------------- Play Preconditions ----------------------
#playPrecondition(0) :=
#	and(is_happy(self)
#		is_playful(self)
#		not(is_angry(self))
#		is_excited(self)
#		has_energy(self)
#		not(is_hungry(self))
#		near(self _*_)
#		is_there_relation(friend self _*_))

playWithOwnerPrecondition(0) :=
	and(is_playful(self)
		is_happy(self)
		near(self owner)
		greater_than(get_energy(self) 0.3)
		less_than(get_hunger(self) 0.78))

playWhenAvatarBecomeFriendPrecondition(0) :=
	and(has_novelty(self)
		is_happy(self)
		next(self _*_)
		is_avatar(_*_)
		is_there_relation(friend self _*_))

# ----------- Bring random object to a friend precondition -----------

bringRandomObjectToPetFriendPrecondition(0) :=
        and(is_there_relation(friend self _*_)
            is_pet(_*_)
            exists_pickupable
            not(is_hungry(self))
            not(is_angry(self)))

moveObjectToPlayPrecondition(0) :=
        and(not(is_holding_something(self))
            exists_pet
            exists_pickupable)

bringRandomObjectToOwnerPrecondition(0) :=
        and(is_there_relation(friend self owner)
            exists_pickupable
            not(is_hungry(self))
            not(is_angry(self)))

# ----------------------- Wander Preconditions ----------------------
lookForThingsToDestroyPrecondition(0) :=
	and(is_fearful(self)
		is_angry(self)
		not(has_novelty(self))
	        greater_than(get_current_action_repetition 3)
		or(is_last_pet_schema(bark_action action_success)
		   is_last_pet_schema(bark_to_target_action action_success _*_)))

lookForNewThingsPrecondition(0) :=
	and(is_curious(self)
		not(is_fear(self))
		or(not(is_excited(self))
		   not(has_novelty(self))))		 

lookForNearThingsWhenFearfulPrecondition(0) :=
	and(near(self owner)
		is_curious(self)
		is_fear(self)
		not(has_novelty(self))		
		not(is_excited(self)))

lookForCompanyPrecondition(0) :=
	and(is_fearful(self)
		is_owner(_*_ self)
        	greater_than(get_current_action_repetition 3)
		is_last_pet_schema(beg_to_target_action action_success _*_))

# ----------------------- Chase Preconditions ----------------------
chaseMovingObjectPrecondition(0) :=
	and(not(is_fear(self))
            is_curious(self)
            inside_pet_fov(self _*_)
            next(self _*_)
            is_moving(_*_)
            is_object(_*_))

chasePetHoldingSomethingPrecondition(0) :=
        and(not(is_fear(self))
            inside_pet_fov(self _*_)
            is_pet(_*_)
            is_holding_something(_*_))

# ----------------------- Follow Preconditions ----------------------
followOwnerPrecondition(0) :=
	and(not(near(self owner))
		is_fearful(self)
	        greater_than(get_current_action_repetition 2))

# ----------------------- Feelings Preconditions ----------------------
feelHatePrecondition(0) :=
	and(is_aggressive(self)
		is_there_relation(anger self _*_)
		not(is_there_relation(friend self _*_)))

feelAngerNaturallyPrecondition(0) :=
	and(is_aggressive(self)
		not(is_angry(self))) 
      
feelFearWhenUnknownAvatarIsCommingPrecondition(0) :=
	and(not(near(self owner))
		is_fear(self)
		next(self _*_)
		is_avatar(_*_)
		not(is_owner(_*_ self))
		not(is_there_relation(friend self _*_))
		not(is_there_relation(enemy self _*_)))

feelFearWhenAttackedPrecondition(0) :=
	and(is_fearful(self)
		not(is_owner(_*_ self))
		is_last_agent_action(_*_ bark_to_target_action self)) 

feelFearNaturallyPrecondition(0) :=
	and(is_fearful(self)
		not(is_fear(self))) 

feelPridePrecondition(0) :=
	and(is_excited(self)
	   	has_novelty(self)) 

feelExcitementPrecondition(0) :=
	and(is_aggressive(self)
		not(is_happy(self))
		not(is_angry(self))) 

feelAngerWhenBoredPrecondition(0) :=
	and(is_aggressive(self)
		not(is_excited(self))) 

feelAngerWhenAttackedPrecondition(0) :=
	and(is_aggressive(self)
		is_last_agent_action(_*_ kick_action self))	 

feelComfortableAfterBarkPrecondition(0) :=
	and(is_aggressive(self)
		is_angry(self)
		or(is_last_pet_schema(bark_action action_success)
		   is_last_pet_schema(bark_to_target_action action_success _*_))) 

feelHappinessWhenNearFriendPrecondition(0) :=
	and(not(is_aggressive(self))
		near(self owner)
		near(self _*_)
		is_object(_*_)
		is_there_relation(friend self _*_))		

# TODO resolve isPetInGroupingMode - postponed
#feelHappinessWhenBelongsToAGroupPrecondition(0) :=
#	and(next(self _*_)
#		is_pet(_*_))) 
# 		 
# "isPetInGroupingMode( ) and isNext( '*' ) and isPet( '*' )",


feelGratitudeWhenReceiveFoodPrecondition(0) :=
	and(is_appreciative(self)
		is_last_agent_action(_*_ give_food_action)) 

feelHappinessPrecondition(0) :=
	or(is_last_pet_schema(drop_n_eat_action action_success _*_)
	   is_last_agent_action(_*_ give_food_action))
	   
# TODO resolve near object names	   
# "isLastPetAction('drop_n_eat') or isLastAgentAction('give_food', '*') or isNear('ball') or isNear('stick')",

feelExcitementAfterEatPrecondition(0) :=
	and(is_excited(self)
		is_last_pet_schema(drop_n_eat_action action_success _*_)) 

feelExcitementeWhenNoveltyPrecondition(0) :=
	and(has_novelty(self)
		is_excitable(self)) 

feelExcitementWhenBringObjectToOwnerPrecondition(0) :=
	and(near(self owner)
		near(self _*_)
		is_object(_*_)
        	less_than(get_current_action_repetition 5))
		
feelLovePrecondition(0) := 
	and(near(self _*_)
		is_there_relation(friend self _*_))

feelAngerPrecondition(0) :=
	is_there_relation(anger self _*_) 

feelGratitudePrecondition(0) :=
	is_there_relation(gratitude self _*_)	 

feelFearPrecondition(0) := 
	is_there_relation(fear self _*_)

# ----------------------- Relations Preconditions ----------------------

does_last_pet_schema_contain_sniff_at(1) :=
        or(is_last_pet_schema(drop_n_sniff_action action_success $1)
           is_last_pet_schema(gobehind_n_sniff_butt_action action_success $1)
           is_last_pet_schema(goto_sniff_action action_success $1)
        )

#relateCuriousAboutPrecondition(0) :=
#	and(has_novelty(self)
#            is_curious(self)
#            not(is_there_relation(know self _*_))
#	    not(is_there_relation(curious_about self _*_))) 

#relateFamiliarWithPrecondition(0) :=
#        and(not(is_there_relation(know self _*_))
#            is_there_relation(curious_about self _*_)
#            does_last_pet_schema_contain_sniff_at(_*_))

familiarWithPrecondition(0) :=
    does_last_pet_schema_contain_sniff_at(_*_)

#relateKnowPrecondition(0) :=
#        and(not(is_there_relation(know self _*_))
#	    or(is_last_pet_schema(drop_n_lick_action action_success _*_)
#	       is_last_agent_action(_*_ give_food_action)
#               is_last_agent_action(_*_ kick_action self)
#              )
#           )

knowPrecondition(0) :=
    or( is_last_pet_schema(drop_n_lick_action action_success _*_)
 	is_last_agent_action(_*_ give_food_action)
        is_last_agent_action(_*_ kick_action self)
      )

#relateEnemyWhenSeekedPrecondition(0) := 
#	and(is_fear(self)
#		not(is_pet(_*_))
#		not(is_avatar(_*_))
#		is_moving(_*_)
#		is_moving_toward(self _*_)
#		is_proportional_next(self _*_ 4 0.6))

enemyPrecondition(0) := 
    and( not(is_pet(_*_))
         not(is_avatar(_*_))
	 is_moving(_*_)
	 is_moving_toward(self _*_)
	 is_proportional_next(self _*_ 4 0.6)
       )

#only avatar of pet can become friend

#relateFriendPrecondition(0) :=
#	and(is_last_pet_schema(drop_n_lick_action action_success _*_)
#            or(is_pet(_*_) is_avatar(_*_))
#	    is_there_relation(curious_about self _*_))

#relateFriendWhenReceiveFoodPrecondition(0) :=
#	is_last_agent_action(_*_ give_food_action)   

friendPrecondition(0) :=
    and( or(is_pet(_*_) is_avatar(_*_))
         is_last_agent_action(_*_ give_food_action) 
       )

#relateAngerPrecondition(0) :=
#	and(is_angry(self)
#		and(or(next(self _*_)
#			   near(self _*_))
#			near(self nearest_edible)))
#
#relateAngerFoodThreatenPrecondition(0) :=
#	and(is_aggressive(self)
#		near(self nearest_edible)
#		next(self _*_))   

angerForFoodThreatenPrecondition(0) :=
    and( near(self nearest_edible)
         next(self _*_)
         is_pet(_*_)
       )   

#relateAngerEnemyPrecondition(0) :=
#	and(is_aggressive(self)
#		next(self _*_)
#		is_there_relation(enemy self _*_))

angerForEnemyPrecondition(0) :=
    and( is_there_relation(enemy self _*_)
         next(self _*_)
       )

#relateAngerWhenAttackedPrecondition(0) :=
#	is_last_agent_action(_*_ kick_action self)   

angerWhenAttackedPrecondition(0) :=
    is_last_agent_action(_*_ kick_action self)   

# ----------------------- Learning Mode Preconditions ----------------------
approachToLearnPrecondition(0) :=
	and(is_learning(self)
		not(next(self exemplar_avatar)))
		
# TODO resolve isNotExemplarInProgress()
# "isPetLearning( ) and isNotNext( getTeacherId( ) ) and isNotExemplarInProgress( )",

learningModePrecondition(0) :=
	and(is_learning(self)
		not(avatar_asked_to_try(self)))

tryRunSchemaPrecondition(0) :=
	and(is_learning(self)
		avatar_asked_to_try(self))

executeRequestedActionPrecondition(0) :=
      has_requested_schema(self)

saySomethingPrecondition(0) :=
      has_something_to_say(self)

# ----------------------- Group Preconditions ----------------------
#goBehindPetToInspectItPrecondition(0) :=
#      "isPet( '*' ) and isInsidePetFov( '*' ) and ( not_fear( ) or next_owner( ) ) and isNext('*') and isNotNear('*') and isThereRelation('*', 'curious_about') and isNotThereRelation('*', 'friend' ) and isNotThereRelation('*', 'enemy' )",

#goBehindFriendlyPetWhenNearPrecondition(0) :=
#      "isPet( '*' ) and isInsidePetFov( '*' ) and ( not_fear( ) or next_owner( ) ) and isNext('*') and isNotNear( '*' ) and isThereRelation('*', 'friend' )",

#requestGroupingPrecondition(0) :=
#      "isNotPetInGroupingMode( ) and not_fear( ) and isPet( '*' ) and isNext( '*' ) and not_excitement( ) and isNotNovelty( ) and isNotLastAgentAction( 'group_command', '*', 'request_grouping' )",

#joinOwnGroupPrecondition(0) :=
#      "isNotPetInGroupingMode( ) and isLastAgentAction( 'group_command', '*', 'join_group', self )",

#reJoinGroupPrecondition(0) :=
#      "isPetInGroupingMode( ) and isLastAgentAction( 'group_command', getGroupLeaderId( ), 'request_grouping' )",

#joinGroupPrecondition(0) :=
#      "isNotPetInGroupingMode( ) and not_happiness( ) and not_fear( ) and isLastAgentAction( 'group_command', '*', 'request_grouping' ) and isNotLastPetAction( 'group_command', 'request_grouping' )",

#followGroupLeaderPrecondition(0) :=
#      "isPetInGroupingMode( ) and getGroupLeaderId( ) ~= self",

#abandonGroupPrecondition(0) :=
#      "isPetInGroupingMode( ) and not_excitement( ) and not_happiness( ) and getGroupLeaderId( ) ~= self",

#executeGroupLeaderCommandPrecondition(0) :=
#      "isPetInGroupingMode( ) and isLastAgentAction( 'group_command', '*', 'execute_leader_command' )",

# ----------------------- Default Preconditions ----------------------
defaultActionPrecondition(0) := 
	or(not(is_aggressive(self))
	   not(is_curious(self))
	   not(is_playful(self)))

defaultAggressiveActionPrecondition(0) :=
	is_aggressive(self)

selectLearnedTrickPrecondition(0) :=
	and(has_learned_tricks(self)
		near(self owner)
        greater_than(get_current_action_repetition 3))
		
#---------------------------------------------------------------------
#------------- Pet-to-pet Social Behavior Preconditions --------------
#---------------------------------------------------------------------

#--------------- ACTIONS ----------------

#------------- Approaches -------------

#approachCuriousPetPrecondition(0) :=
#	and(inside_pet_fov(self _*_)
#	    is_pet(_*_)
#	    is_there_relation(curious_about self _*_)
#	    not(is_angry(_*_))
#	    not(is_fearful(_*_))
#	)

approachCuriousPetPrecondition(0) :=
	and(inside_pet_fov(self _*_)
	    is_pet(_*_)
	    is_there_relation(curious_about self _*_)
	)

goAwayFearfulPetPrecondition(0) :=
	and(inside_pet_fov(self _*_)
	    is_pet(_*_)
	    is_fear(self)
	    is_moderately_next(self _*_)
	    not(is_there_relation(friend self _*_))
	)

approachAngryPetPrecondition(0) :=
	and(inside_pet_fov(self _*_)
	    is_pet(_*_)
	    is_angry(self)
	)

#------------- Reactions -------------

beenGrowledPetPrecondition(0) :=
	and(is_pet(_*_)
	    is_last_agent_action(_*_ growl_action)
	)

beenBittenPetPrecondition(0) :=
	and(is_pet(_*_)
	    is_last_agent_action(_*_ bite_action)
	)

beenSniffedPetPrecondition(0) :=
	and(is_pet(_*_)
	    is_last_agent_action(_*_ sniff_action)
	)

defendFriendFromBitePrecondition(0) :=
        and(is_pet(_*_)
            is_last_agent_action(_*_ bite_action)
        )

#--------------- FEELINGS ----------------

feelLessAngryAfterGotoGrowlOrBitePrecondition(0) :=
	and(is_pet(_*_)
	    is_last_pet_schema(goto_growl_or_bite_action action_success _*_)
	)

### SCAVENGER HUNT RULES ###


# Basic actions
callOtherAgentsToPlayPrecondition(0) :=
	is_agent_state(1)

answerCallToPlayPrecondition(0) :=
	is_agent_state(2)

waitForOtherAgentsAnswersPrecondition(0) :=
	is_agent_state(11)

gotoTeamBasePrecondition(0) :=
	is_agent_state(1301)

waitForGameStartPrecondition(0) :=
	is_agent_state(1304)

gotoTreasurePrecondition(0) :=
	is_agent_state(1305)

grabTreasurePrecondition(0) :=
	is_agent_state(1306)

bringTreasureToBasePrecondition(0) :=
	is_agent_state(1308)
	    
dropTreasurePrecondition(0) :=
	is_agent_state(1311)



exploreObstaclePrecondition(0) :=
	is_agent_state(1307)

lookAtTileDirectionPrecondition(0) :=
	is_agent_state(1309)

sendExploredAreaNotificationPrecondition(0) :=
	is_agent_state(1314)

chooseAnAreaToExplorePrecondition(0) :=
	is_agent_state(1302)

waitForOtherAgentsChosenAreaConfirmationPrecondition(0) :=
	is_agent_state(1303)

lookAtAreaCenterPrecondition(0) :=
	is_agent_state(1315)

gotoVisibleTilePrecondition(0) :=
	is_agent_state(1313)

gotoBaseToComputePointsPrecondition(0) :=
	is_agent_state(1310)

sendGameStartedMessagePrecondition(0) :=
	is_agent_state(1316)

followTargetPrecondition(0) :=
	is_agent_state(1319)

waitingForCommandPrecondition(0) :=
	is_agent_state(1320)

lookForTargetPrecondition(0) :=
	is_agent_state(1322)

# 1317 is being used to main game control


