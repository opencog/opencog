#
# This file contains all the combo action schemas. However, it is neither used 
# by multiverse nor unity. It only serves as an example of using buit-in or 
# creating your own combo action schema. 
# 
# @date 2011-06-23
#

# Built-in Actions directly mapped to a schema
#################

beg(0) := beg
sit(0) := sit
bark(0) := bark
sleep(0) := sleep
jump_up(0) := jump_up

# 1:target 2:speed
goto_obj(2) := goto_obj($1 $2)

# 1:target 2:speed
gonear_obj(1) := gonear_obj($1 2)
gonear_obj2(2) := gonear_obj($1 $2)

# 1:target 2:speed
gobehind_obj(1) := gobehind_obj($1 2)
gobehind_obj2(2) := gobehind_obj($1 $2)

# 1:target 2:duration 3:speed
follow(3) := follow($1 $2 $3)
run_follow(1) := follow($1 10 6)

drop(0) := drop
turn_to_face(1) := turn_to_face($1)

say(2) := say($1 $2)

# Low level functions
######################

say_n_bark(2) := and_seq( say($1 $2) bark )

drop_n_eat(1) := and_seq( drop eat($1) )
drop_n_drink(1) := and_seq( drop drink($1) )
drop_n_bite(1) := and_seq( drop bite($1) )
drop_n_lick(1) := and_seq( drop lick_at($1) )
drop_n_sniff(1) := and_seq( drop sniff_at($1) )
drop_n_poo(0) := and_seq( drop poo )
drop_n_pee(0) := and_seq( drop pee )
drop_n_play(0) := and_seq( drop play )
drop_n_celebrate(0) := and_seq( drop back_flip run_in_circle bark )

pee_at(1) := and_seq( goto_obj($1 2) pee )
poo_at(1) := and_seq( goto_obj($1 2) poo )

grab_nearest_pickupable(0) :=
    action_boolean_if( near(self nearest_pickupable)
                       and_seq( drop grab(nearest_pickupable) )
	                   action_failure
                     )

walkto_obj(1) := goto_obj($1 2.5)
trotto_obj(1) := goto_obj($1 4)
runto_obj(1) := goto_obj($1 5)
doubletrotto_obj(1) := and_seq(trotto_obj($1) trotto_obj($1))

# Exemplar / owner function
# ##########################
goto_owner(0) := goto_obj(owner 2)
beg_to_owner(0) := beg_to_target(owner)
gonear_exemplar_avatar(0) := gonear_obj(exemplar_avatar 2)
#pay_attention_exemplar_avatar(0) := pay_attention(exemplar_avatar)

#walk random, but more forward 
random_step_lib(0) := 
	and_seq( 
		action_boolean_if(greater_than(rand 0.5)
        	                  action_boolean_if(greater_than(rand 0.5)
          		                            rotate_left rotate_right)
        	                  step_forward)
                action_boolean_if(greater_than(rand 0.3)
	                          step_forward
        	                  step_backward)
	       )

#walk random, but more forward and more right and does not rotate every time
random_step_searching(0) := 
    and_seq( action_boolean_if(greater_than(rand 0.5) 
                               action_boolean_if(greater_than(rand 0.6)
          	                                     rotate_left
                                                 rotate_right
                                                )
                               step_forward
                              )

             action_boolean_if(greater_than(rand 0.3)
                               step_forward
                               step_backward
                              )
           )

#wander(0) := random_step_searching

random_search(0) := random_step_searching

#play_with_grab_and_drop(1) := and_seq( goto_obj($1 2) grab($1) drop )

play_without_grab_and_drop(1) := and_seq( goto_obj($1 2) 
                                          sniff_at($1) 
#                                          bite($1) 
                                          lick_at($1)
#                                          kick($1) 
                                        )

random_simple_action(0) := and_seq( sit bark sleep jump_up 
                                    step_forward step_backward 
                                    rotate_left rotate_right
                                  ) 

#############################################
########### RULE ENGINE FUNCTIONS ###########
#############################################


# Wandering functions 
######################

#Looking for food. If does not exist, random_step_searching until find food
#wander_searching_food(0) :=
#	and_seq(
#    	boolean_while(not(exists_edible) random_step_searching)
#        goto_obj(nearest_edible 3) drop wag eat(nearest_edible)
#    )
    
eat_food(1) :=
    and_seq( goto_obj($1 2)
             drop
             wag
             eat($1)
             wander
           )

search_for_food(0) :=
    and_seq( boolean_while(not(exists_edible) random_step_searching)
             goto_obj(nearest_edible 3) 
           )

#Looking for water. If does not exist, random_step_searching until find water
#wander_searching_water(0) :=
#    and_seq(
#    	boolean_while(not(exists_drinkable) random_step_searching)
#        and_seq(goto_obj(nearest_drinkable 3) drop wag drink(nearest_drinkable))
#    )

drink_water(1) :=  
    and_seq( goto_obj($1 2)
             drop 
             wag 
             drink($1)
             wander
           )

search_for_water(0) := 
    and_seq( boolean_while(not(exists_drinkable) random_step_searching)
             goto_obj(nearest_drinkable 3)
           )

#Looking for pee place. If does not exist, random_step_searching until find one
search_for_pee_place(0) := 
    and_seq(
    	boolean_while(not(exists_pee_place) random_step_searching)
        and_seq(goto_obj(nearest_pee_place 3) wag) 
    )


#wander_searching_pee_place(0) :=
#    and_seq(
#    	boolean_while(not(exists_pee_place) random_step_searching)
#        and_seq(goto_obj(nearest_pee_place 3) wag pee)
#    )

#Looking for poo place. If does not exist, random_step_searching until find one
search_for_poo_place(0) :=
    and_seq(
    	boolean_while(not(exists_poo_place) random_step_searching)
        and_seq(goto_obj(nearest_poo_place 3) wag)
    )

#wander_searching_poo_place(0) :=
#    and_seq(
#    	boolean_while(not(exists_poo_place) random_step_searching)
#        and_seq(goto_obj(nearest_poo_place 3) wag poo)
#    )


# Behavior functions
#################

# Look at target and sit
pay_attention(1) :=
    action_boolean_if(not(is_null($1))
                      and_seq(turn_to_face($1) sit)
                      sit)

#Follows the owner whenever he is
follow_owner(0) := goto_obj(owner 4)


flee(0) := and_seq( beg random_step_lib random_step_lib )

play(0) := and_seq( bark wag wag wag wag bark
                    random_step_searching
        		  )

#action_boolean_if( near(self nearest_pickupable)
#                   and_seq( drop grab(nearest_pickupable) )
#                   and_seq( random_step_searching drop bark )
#                 )


# schema used by SchemaRunner when the pet does'n know(not found) to perform the requested trick
full_of_doubts(0) := and_seq( sit bark bark );


# Go target functions
######################

goto_random_pickupable(0) :=
        action_boolean_if(exists_pickupable
                          goto_obj(random_pickupable 2)
                          goto_obj(random_object 2))

goto_random_edible(0) := action_boolean_if(exists_edible goto_obj(random_edible 2) action_failure)
goto_random_object(0) := goto_obj(random_object 2)
goto_random_drinkable(0) := action_boolean_if(exists_drinkable goto_obj(random_drinkable 2) action_failure)
goto_random_avatar(0) := action_boolean_if(exists_avatar goto_obj(random_avatar 2) action_failure)
goto_random_pet(0) := action_boolean_if(exists_pet goto_obj(random_pet 2) action_failure)
goto_random_small(0) := action_boolean_if(exists_small goto_obj(random_small 2) action_failure)
goto_random_poo_place(0) := action_boolean_if(exists_poo_place goto_obj(random_poo_place 2) action_failure)
goto_random_pee_place(0) := action_boolean_if(exists_pee_place goto_obj(random_pee_place 2) action_failure)

goto_nearest_pickupable(0) := action_boolean_if(exists_pickupable goto_obj(nearest_pickupable 2) action_failure)
goto_nearest_edible(0) := action_boolean_if(exists_edible goto_obj(nearest_edible 2) action_failure)
goto_nearest_object(0) := goto_obj(nearest_object 2)
goto_nearest_drinkable(0) := action_boolean_if(exists_drinkable goto_obj(nearest_drinkable 2) action_failure)
goto_nearest_avatar(0) := action_boolean_if(exists_avatar goto_obj(nearest_avatar 2) action_failure)
goto_nearest_pet(0) := action_boolean_if(exists_pet goto_obj(nearest_pet 2) action_failure)
goto_nearest_small(0) := action_boolean_if(exists_small goto_obj(nearest_small 2) action_failure)
goto_nearest_poo_place(0) := action_boolean_if(exists_poo_place goto_obj(nearest_poo_place 2) action_failure)
goto_nearest_pee_place(0) := action_boolean_if(exists_pee_place goto_obj(nearest_pee_place 2) action_failure)

goto_object_and_grabit(1) := and_seq(goto_obj($1 2) drop grab($1))

#goto_random_pickupable_and_grabit(0) :=
#        and_seq(goto_random_pickupable
#                drop
#                grab(nearest_pickupable))

goto_random_pickupable_and_grabit(0) :=
        goto_object_and_grabit(random_pickupable)

# to change for sniff function, note that there is an ambiguity
# about sniff builtin_action and sniff function, that's not good
gobehind_n_sniff_butt(1) := and_seq( gobehind_obj($1 2) sniff_at($1) )

bark_to_target(1) := and_seq( turn_to_face($1) bark )
beg_to_target(1) := and_seq( turn_to_face($1) beg )
goto_pet_home(0) := goto_obj(pet_home 3)

# Grouping functions
#######################

group_command_2(2) := group_command($1 $2)
group_command_3(3) := group_command($1 $2 $3)
group_command_4(4) := group_command($1 $2 $3 $4)

receive_latest_group_commands(0) := receive_latest_group_commands

# Social behavior procedures
############################

stay(0) := action_success

#### TEST ####

dummy(1) := turn_to_face($1)

# defend friend from bite

goto_bark_to_target(1) := and_seq(goto_obj($1 2) bark_to_target($1))

# approach schemata

goto_sniff(1) := and_seq(goto_obj($1 2) sniff_at($1))

#TODO: this does not work again the problem is that random_object is
#evaluated eager instead of lazy
#go_away_from(1) := boolean_while(is_moderately_next(self $1)
#                                 goto_obj(random_object 4))

#this version should be replaced by the above once indefinite_object
#are evaluated lazily
go_away_from(1) := action_boolean_if(is_moderately_next(self $1)
                                     goto_obj(random_object 4)
                                     goto_obj(random_object 4))

goto_growl_or_bite(1) := and_seq(goto_obj($1 2)
                                 rand_action_2(bite($1) growl_at($1)))

# reaction schemata

react_from_growl(1) :=
        action_boolean_if(and(is_happy(self) is_excited(self))
                          bark_at($1)
                          action_boolean_if(or(randbool is_fear(self))
                                            go_away_from($1)
		                            action_boolean_if(or(is_hateful(self) is_angry(self))
                                                              bite($1)
                                                              growl_at($1))))

react_from_bite(1) :=
        action_boolean_if(is_fear(self)
                          and_seq(go_away_from($1) pee)
                          rand_action_5(bite($1)
                                        growl_at($1)
                                        bark_at($1)
                                        whine_at($1)
                                        and_seq(go_away_from($1) pee)))

react_from_sniff(1) :=
        action_boolean_if(and(is_aggressive(self) randbool)
                          growl_at($1)
	                  rand_action_3(sniff_at($1) sniff_pet_part($1 BUTT) go_away_from($1)))

turn_around(0) := and_seq( turn_to_face(custom_position) 
			   turn_to_face(custom_position) )

# playful schemata

bringRandomObject(1) := and_seq(goto_random_pickupable_and_grabit
                                goto_obj($1 2)
                                drop)

# that long schema while be replaced by a shorted version
# once eager vs lazily control is implemented
# because random_object would always be the same using a loop operator
moveObjectToPlay(0) := and_seq(goto_random_pickupable_and_grabit
                               goto_obj(random_object 2)
                               action_boolean_if(near(self nearest_pet)
                                                 rand_action_2(run_in_circle shake_head)
                                                 look_up_turn_head)
                               goto_obj(random_object 2)
                               action_boolean_if(near(self nearest_pet)
                                                 rand_action_2(run_in_circle shake_head)
                                                 look_up_turn_head)
                               goto_obj(random_object 2)
                               action_boolean_if(near(self nearest_pet)
                                                 rand_action_2(run_in_circle shake_head)
                                                 look_up_turn_head)
                               goto_obj(random_object 2)
                               action_boolean_if(near(self nearest_pet)
                                                 rand_action_2(run_in_circle shake_head)
                                                 look_up_turn_head)
                               goto_obj(random_object 2)
                               action_boolean_if(near(self nearest_pet)
                                                 rand_action_2(run_in_circle shake_head)
                                                 look_up_turn_head)
                               goto_obj(random_object 2)
                               action_boolean_if(near(self nearest_pet)
                                                 rand_action_2(run_in_circle shake_head)
                                                 look_up_turn_head)
                               goto_obj(random_object 2)
                               action_boolean_if(near(self nearest_pet)
                                                 rand_action_2(run_in_circle shake_head)
                                                 look_up_turn_head)
                               goto_obj(random_object 2)
                               action_boolean_if(near(self nearest_pet)
                                                 rand_action_2(run_in_circle shake_head)
                                                 look_up_turn_head)
                               goto_obj(random_object 2)
                               drop)

goto_back_flip(1) := and_seq(trotto_obj($1) back_flip)

# that long schema while be replaced by a shorted version
# once eager vs lazily control is implemented
# because rand would always be the same value using a loop operator
chasePetHoldingSomething(1) :=
        and_seq(trotto_obj($1)
                runto_obj($1)
                action_boolean_if(near(self $1)
                                  shake_head
                                  runto_obj($1))
                trotto_obj($1)
                runto_obj($1)
                action_boolean_if(near(self $1)
                                  bark
                                  runto_obj($1))
                trotto_obj($1)
                runto_obj($1)
                action_boolean_if(near(self $1)
                                  run_in_circle
                                  runto_obj($1))
                trotto_obj($1)
                runto_obj($1)
                action_boolean_if(near(self $1)
                                  shake_head
                                  runto_obj($1))
                trotto_obj($1)
                runto_obj($1)
                action_boolean_if(near(self $1)
                                  bark
                                  runto_obj($1))
                trotto_obj($1)
                runto_obj($1)
                action_boolean_if(near(self $1)
                                  rand_action_3(run_in_circle shake_head bark)
                                  runto_obj($1)))


################################
####### chainAllActions ########
################################

#chainAllActions(0) := and_seq(goto_obj(random_object 1)
                              #goto_obj(random_object 2)
                              #goto_obj(random_object 3)
                              #goto_obj(random_object 4)
                              #gonear_obj(random_object 2)
                              #gobehind_obj(random_object 2)
                              #follow(random_object 10 2)
                              #step_towards(random_object TOWARDS)
                              #step_backward
                              #step_forward
                              #random_step
                              #rotate_left
                              #rotate_right
                              #heel
                              #jump_up
                              #jump_towards(random_object)
                              #turn_to_face(random_object)
                              #go_behind(random_object random_object 2)
                              #grab(random_object)
                              #nudge_to(random_object random_object)
                              #drop
                              #sniff
                              #sniff_at(random_object)
                              #sniff_pet_part(random_object BUTT)
                              #sniff_avatar_part(random_object BUTT)
                              #eat(random_object)
                              #drink(random_object)
                              #chew(random_object)
                              #beg
                              #hide_face
                              #look_up_turn_head
                              #sit
                              #stretch
                              #run_in_circle
                              #scratch_self(BUTT)
                              #scratch_ground_back_legs
                              #scratch_other(random_object)
                              #lie_down
                              #trick_for_food
                              #pee
                              #poo
                              #speak
                              #bark
                              #bark_at(random_object)
                              #lick
                              #lick_at(random_object)
                              #belch
                              #move_head(1 2 -1)
                              #growl
                              #growl_at(random_object)
                              #whine
                              #whine_at(random_object)
                              #fearful_posture
                              #clean
                              #tap_dance
                              #bare_teeth
                              #bare_teeth_at(random_object)
                              #play_dead
                              #vomit
                              #lean_rock_dance
                              #anticipate_play
                              #back_flip
                              #move_left_ear(TOWARDS)
                              #move_right_ear(TOWARDS)
                              #widen_eyes
                              #shake_head
                              #sleep
                              #dream
                              #wag
                              #tail_flex(1)
                              #bite(random_object)
                              #pet(random_object)
                              #kick(random_object)
                              #kick_left
                              #kick_right
                             #)

# for debugging

debugSchema(0) := and_seq(goto_obj(owner 2.5) boolean_while(near(self owner)
and_seq(action_success)) drop grab(owner) boolean_while(near(self owner)
and_seq(boolean_while(near(self owner) and_seq(action_success))
goto_obj(owner 2.5))))
