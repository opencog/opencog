//
// Script for automatic "atom type" generation. For more information,
// consult the opencog/atomspace/README file.
//
// Please note: some of the types below are used only via the scheme
// bindings. Thus, just because you can comment some of these out, and
// the code still compiles, that does not mean that these types are
// unused!  Be sure to grep for the CamelCase names, to see if they
// show up elsewhere!
//
// Some of them are used by Python PLN code (which also uses the
// CamelCase names).
//
// Special type designating that no atom type has been assigned.
NOTYPE

// Base of hierarchy
ATOM
NODE <- ATOM
LINK <- ATOM

CONCEPT_NODE <- NODE
NUMBER_NODE <- NODE

// Basic Links
ORDERED_LINK <- LINK
UNORDERED_LINK <- LINK

// Basic sets
SET_LINK <- UNORDERED_LINK
LIST_LINK <- ORDERED_LINK
MEMBER_LINK <- ORDERED_LINK

// SUBSET_LINK is semantically equivalent to EXTENSIONAL_INHERITANCE_LINK.
// Therefore the later has been disabled.
SUBSET_LINK <- ORDERED_LINK

// Boolean set operations, logical constants
// The ordered version of AND_LINK is SEQUENTIAL_AND_LINK, below.
AND_LINK <- UNORDERED_LINK
OR_LINK <- UNORDERED_LINK
NOT_LINK <- UNORDERED_LINK
SEQUENTIAL_AND_LINK <- ORDERED_LINK

// The 'intuitionist logic' version of NOT_LINK is ABSENT_LINK.
// In 'intuitionist logic', the opposite of "true" is not "false",
// the opposite is "don't know".  ABSENT_LINK is the effective
// don't-know link.  Currently, it is used during pattern matching
// to find clauses that may or may not be present: clauses that are
// optionally present.
ABSENT_LINK <- UNORDERED_LINK

// ====================================================================
// Herbrand/First-order-logic/lambda-calc/model-theory style links
// and nodes.  This are used to implement the pattern matcher, and
// everything built from the pattern matcher, including the query
// engine, the atomspace indexes, and the graph rewrite rules.
//
// Not all of these are in active use: e.g. SCHOLEM_LINK is not used ATM.

// Universe of discourse
CONTEXT_LINK <- ORDERED_LINK

// Basic first-order logic ungrounded terms and term types
VARIABLE_NODE <- NODE
VARIABLE_TYPE_NODE <- NODE
TYPED_VARIABLE_LINK <- ORDERED_LINK

// Everything under a QuoteLink is interpreted literally.
QUOTE_LINK <- ORDERED_LINK

// Function constructor (predicate and schema)
LAMBDA_LINK <- ORDERED_LINK

// Scoping and Logical quantifiers
BIND_LINK <- LAMBDA_LINK
FORALL_LINK <- LAMBDA_LINK "ForAllLink"
EXISTS_LINK <- LAMBDA_LINK
AVERAGE_LINK <- FORALL_LINK

// Convert predicate into concept
SATISFYING_SET_LINK <- UNORDERED_LINK

SCHOLEM_LINK <- ORDERED_LINK

// Basic first-order logic operations
// The inherit from ForAll becuase if these contain variables, then
// those variables are implicitly scoped to this link (i.e. are not
// free, but are bound to this link.) Truth-value wise, these behave
// like AVERAGE_LINK, averaging over the for-all universe that they
// apply to.
IMPLICATION_LINK <- AVERAGE_LINK
EQUIVALENCE_LINK <- AVERAGE_LINK

// To be used with PredicateNode
EVALUATION_LINK <- ORDERED_LINK

// Generic association
ASSOCIATIVE_LINK <- ORDERED_LINK

// Inheritence and association links
INHERITANCE_LINK <- ORDERED_LINK
SIMILARITY_LINK <- UNORDERED_LINK
ATTRACTION_LINK <- ORDERED_LINK

// Procedure, schema and predicate nodes.
// These are used to define functions and predicates (relations)
PROCEDURE_NODE <- NODE
GROUNDED_PROCEDURE_NODE <- PROCEDURE_NODE

SCHEMA_NODE <- PROCEDURE_NODE
GROUNDED_SCHEMA_NODE <- SCHEMA_NODE,GROUNDED_PROCEDURE_NODE

PREDICATE_NODE <- SCHEMA_NODE
GROUNDED_PREDICATE_NODE <- PREDICATE_NODE,GROUNDED_PROCEDURE_NODE
DEFINED_RELATIONSHIP_NODE <- PREDICATE_NODE // Generic relations

SCHEMA_EXECUTION_LINK <- INHERITANCE_LINK
SCHEMA_EVALUATION_LINK <- SCHEMA_EXECUTION_LINK

EXECUTION_LINK <- ORDERED_LINK
EXECUTION_OUTPUT_LINK <- ORDERED_LINK

// ====================================================================
// Synchronization primitive, used to mark stages of a processing
// pipeline; used as a fence or guard barrier, make sure that earlier
// stages have completed processing before later ones start.
// Basically, hypergraphs may be attached to the anchor, with a
// ListLink, to indicate that they are either done, or awaiting
// processing.
ANCHOR_NODE <- NODE

// ====================================================================
// Link for mathematics. (???) Huh? What is this? What does it do?
QUANTITY_LINK <- ORDERED_LINK

// Basic arithmetic operators
PLUS_LINK <- UNORDERED_LINK
TIMES_LINK <- UNORDERED_LINK
GREATER_THAN_LINK <- ORDERED_LINK
