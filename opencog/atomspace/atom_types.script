//
// Script for automatic "atom type" generation. For more more information,
// consult  the documentation in the opencog/atomspace/README file.
//
// Please note: some of the types below are used only via the scheme bindings.
// Thus, just because you can comment some of these out, and the code still
// compiles, that does not mean that these types are unused!  Be sure to grep
// for the CamelCase names, to see if they show up elsewhere!
//
// Special type designating that no atom type has been assigned
NOTYPE

// Base of hierarchy
ATOM
NODE <- ATOM
LINK <- ATOM

CONCEPT_NODE <- NODE
NUMBER_NODE <- NODE

// Basic Links
ORDERED_LINK <- LINK
UNORDERED_LINK <- LINK

// Basic sets
SET_LINK <- UNORDERED_LINK
LIST_LINK <- ORDERED_LINK
MEMBER_LINK <- ORDERED_LINK

// SUBSET_LINK is semantically equivalent to EXTENSIONAL_INHERITANCE_LINK.
// Therefore the later has been disabled.
SUBSET_LINK <- ORDERED_LINK

// Boolean set operations, logical constants
// The ordered version of AND_LINK is SEQUENTIAL_AND_LINK, below.
AND_LINK <- UNORDERED_LINK
OR_LINK <- UNORDERED_LINK
NOT_LINK <- UNORDERED_LINK
FALSE_LINK <- ORDERED_LINK
TRUE_LINK <- ORDERED_LINK

// ====================================================================
// Herbrand/First-order-logic/lambda-calc/model-theory style links
// and nodes.  This are used to implement the pattern matcher, and
// everything built from the pattern matcher, including the query
// engine, the atomspace indexes, and the graph rewrite rules.
//
// Not all of these are in active use: e.g. SCHOLEM_LINK is not used ATM.

// Universe of discourse
CONTEXT_LINK <- ORDERED_LINK

// Basic first-order logic ungrounded terms and term types
VARIABLE_NODE <- NODE
VARIABLE_TYPE_NODE <- NODE
TYPED_VARIABLE_LINK <- ORDERED_LINK

// Scoping and Logical quantifiers
BIND_LINK <- ORDERED_LINK
FORALL_LINK <- BIND_LINK "ForAllLink"
EXISTS_LINK <- BIND_LINK
AVERAGE_LINK <- BIND_LINK
SCHOLEM_LINK <- ORDERED_LINK

// Basic first-order logic operations
IMPLICATION_LINK <- ORDERED_LINK

// To be used with PredicateNode
EVALUATION_LINK <- ORDERED_LINK

// ??? symbol link not used anywhere. What is it's semantics?
// SYMBOL_LINK <- ORDERED_LINK

// Generic association
ASSOCIATIVE_LINK <- ORDERED_LINK

// Inheritence and association links
INHERITANCE_LINK <- ORDERED_LINK
SIMILARITY_LINK <- UNORDERED_LINK


// ====================================================================
// XXX its not clear which of these are in current use ... !?
// Or who is using these?  Some of these are dead.
//
// ExtInh is redundant with SUBSET_LINK and officially disabled
// EXTENSIONAL_INHERITANCE_LINK <- ORDERED_LINK
EXTENSIONAL_SIMILARITY_LINK <- ORDERED_LINK
INTENSIONAL_INHERITANCE_LINK <- ORDERED_LINK
INTENSIONAL_SIMILARITY_LINK <- ORDERED_LINK

// Procedure, schema and predicate nodes.
PROCEDURE_NODE <- NODE
GROUNDED_PROCEDURE_NODE <- PROCEDURE_NODE

SCHEMA_NODE <- PROCEDURE_NODE
GROUNDED_SCHEMA_NODE <- SCHEMA_NODE,GROUNDED_PROCEDURE_NODE

PREDICATE_NODE <- SCHEMA_NODE
GROUNDED_PREDICATE_NODE <- PREDICATE_NODE,GROUNDED_PROCEDURE_NODE

SATISFYING_SET_LINK <- ORDERED_LINK

SCHEMA_EXECUTION_LINK <- INHERITANCE_LINK
SCHEMA_EVALUATION_LINK <- SCHEMA_EXECUTION_LINK

EXECUTION_LINK <- ORDERED_LINK
EXECUTION_OUTPUT_LINK <- ORDERED_LINK

// ====================================================================
// Synchronization primitive, used to mark stages of a processing
// pipeline; used as a fence or guard barrier, make sure that earlier
// stages have completed processing before later ones start.
// Basically, hypergraphs may be attached to the anchor, with a 
// ListLink, to indicate that they are either done, or awaiting
// processing.
ANCHOR_NODE <- NODE

// Holder of statistical truth values. 
// XXX not clear if this is used anywhere ... maybe should remove this.
COUNT_LINK <- ORDERED_LINK

