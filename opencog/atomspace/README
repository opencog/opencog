
                   AtomSpace README
                   ----------------

The README contains miscellaneous notes about the atomspace. 


----------------------------------------------------------------------
Adding atom types
----------------------------------------------------------------------

The ClassServer provides a primitive extension mechanism so that
modules/agents/libraries may add new atom types to the default type
hierarchy. In order to ease the task of third-parties wishing to extend
the ClassServer, we provide a cmake macro that generates a set of
files with c++ code that can be used by the module/library.

The macro uses a 'type script' file as input which uses the following
format:

<TYPE> [<- <PARENT_TYPE1>[,<PARENT_TYPE2>,<PARENT_TYPE3>,...]] ["<TYPE_NAME>"]

Where

    TYPE is an identifier that will be used in your code to reference
    the type's numeric code. Usually, it is defined using capital
    letters and underscores as its semantics is close to that of C/C++
    constant.

    PARENT_TYPE1, PARENT_TYPE1, PARENT_TYPE2 are optional identifiers of
    the parent types of the defined type. When more than one parent type
    is specified, they must be separated by commas.

    TYPE_NAME is a string that will be used to identify the type. If
    none is supplied, the cmake macro will generate one based on the
    type's identifer using camel-casing patterns (for instance,
    CUSTOM_NODE would be named "CustomNode").

Above is a short snippet of valid script entries. For more examples,
check the atom_types.script file.

ATOM
NODE <- ATOM
LINK <- ATOM
WORD_NODE <- NODE
CONCEPT_NODE <- NODE "OddlyNamedNode"
ASSOCIATIVE_LINK <- LINK "AssocL"
EVALUATION_LINK <- LINK "EvalLink"
MULTIPARENT_LINK <- ASSOCIATIVE_LINK_LINK,EVALUATION_LINK "MPLink"

-----
To process the 'atom types' script file, one must add the macro
OPENCOG_ADD_ATOM_TYPES to the CMakeLists.txt and the header file to the
list of source files:

# CMakeList.txt
OPENCOG_ADD_ATOM_TYPES(atom_types.script atom_types.h atom_types.definitions atom_types.inheritance)

ADD_LIBRARY(sample SHARED
    atom_types.h
    Sample1.cc
    Sample2.cc
    ...
)

The macro OPENCOG_ADD_ATOM_TYPES expects 4 parameters:

    1. the filename of the script file that will be used as input
    2. the filename of the header file that will be generated with
       the identifiers of the new atom types. 
    3. the filename of the definitions file that will be generated with
       the instantiations of the variables that will store the new atom
       types. 
    4. the filename of the inheritance file that will be generated with
       the set of method invocations that will build the type hierarchy
       inside the ClassServer.

To properly *use* the generated files, the following conventions should be
followed:

  * include the definitions file right after the standard '#include'
    statement of the file with the code that initializes your module/agent/library.

  * include the inheritance file *inside the body* of the routine
    initializing the module/agent/library.

  * include the header file by any files that references the identifier
    of the a new atom type.

For instance:

// MyModule.cc
#include "MyModule.h"
#include "AnotherHeader.h"
#include "atom_types.definitions"
MyModule::MyModule() {}
...
static __attribute__ ((constructor)) void _init(void)
{
    #include "atom_types.inheritance"
}


// AnotherFile.cc
#include "AnotherFile.h"
#include "atom_types.h"
#include "YetAnotherFile.h"

void AnotherFile::someMethod() {
    ...
    std::string name = opencog::ClassServer::getTypeName(opencog::MYNODE);
    ...
}

-----
For a fully functional example, check the ''examples/atomtypes/' directory.


======================================================================
======================================================================
======================================================================

                       Index Design
                       ------------

The AtomTable holds indexes for a number of commonly needed abilities,
so as to allow for fast searches.  This includes searches for atoms by
type, by outgoing set and by incoming set.

Some of the indexes offer an iterator design, while others return 
temporary copies of UnorderedHandeSets.  The iterator interface is used
whenever the number of returned items is potentially large, as in such
a case, using the temporaries would require too much RAM.  In particular,
the TypeIndex uses an iterator.

Note: Currently, the iterators are not safe against concurrent atom
insertion or removal.  In particular, they are not thread-safe. 
This needs to be fixed at some point... XXX TODO.


======================================================================
======================================================================
======================================================================

                   Garbage Collection Design
                   -------------------------

Without garbage collection (or smart pointers) it becomes unsafe to use
bare pointers in a multi-threaded environment.  With garbage collection
(or smart pointers), and a reasonably good design and coding style, the
use of bare pointers in a multi-threaded environment becomes safe. In
what follows, smart poiners will not be considered because they are 
(1) generally slower (2) use more RAM, (3) are harder to design with,
as compared to garbage collection.

There is one big stumbling block to garbage collection, and that is 
the need to maintain the incoming set for atoms, and the need to perform
a Handle to Atom* lookup.  Both of these introduce circular references,
and can thus stump the garbage collector.  The fix for this issue is
two-fold:  (a) The IncomingIndex must still hold Handle, not Atom*
(b) the TLB must NOT inherit from the garbage collector, and/or must
disguise pointers, e.g. by using XOR.  Finally, the Atom destructor
must be responsible for removing atoms from the TLB.  Aside from 
these issues, it should be completely safe to convert all other uses
of Handles to Atom* (with certain exceptions, e.g. in object the 
persistance code, etc.)

The primary motivation for raw pointer access is speed.  See the
numbers reported in opencog/benchmark/diary.txt -- in many cases,
raw pointer access is two orders of magnitude faster than using
the 'safe', Handle-oriented AtomSpace interface.

TODO:
-- conditionally add boehm GC
-- convert outgoing set to hold Atom*
-- Add locks to TypeIndex iterator, etc.
-- add threading to benchmark
-- benchmark scheme API



======================================================================
======================================================================
======================================================================

                   Foreach Iterators
                   -----------------
XXX The below is strongly deprecated. There are now adequate foreach
iterators, as well as anonymous functions, in both C++11 and in Boost.
The stuff described below should someday be replaced by the std foreach
constructs.  Below is for historical reference only, to aid in making
the port. XXX

What follows is a propsoal for a set of "for-each" iterators that call a
callback for every atom, link, or subhypergraph of some given simple
form. The callback paradigm provides many powerful benefits, but it also
has a significant drawback: it inverts the order of control. Many
programmers are simply not comfortable with control inversion. Thus, the
discussion below, and its implementation, should be supplemented with an
implementation of iterators using the standard C++ iterator interfaces.
Currently, ony the callback-style is implemented. From the abstract
point of view, C++ iterators are best understood as "continuations",
and so, the return to the control section of a loop is a just a 
call-with-current-continuation into the iterator.

When iterating over the incoming and outgoing sets of an atom,
please make use of the "foreach" iterators to do so.  The "foreach"
mechanism has multiple, strong, advantages over the raw access to
the incoming linked list, or the outgoing vector array. It is important
to understand these.

A) The details of the Atom.h incoming and outgoing sets are abstracted.
   Thus, while the outgoing set uses std:vector, the incoming set uses
   a simple linked list. This detail is immaterial to the "foreach" user,
   as both look the same. This makes code easier to structure.

B) The foreach abstraction makes multi-threaded implementation,
   including mutex locking, much easier. In particular, the semantics
   of atomic locking of a foreach traversal is much simpler than complexity
   of trying to lock a naked linked list for read-only traversal, or
   read-write editing.

C) The foreach abstraction can (and will) have performance that is
   equal to a for-loop iteration over an array or linked list. This
   is because, when the set to be iterated over is a simple list or
   array, the foreach iterator can be implemented as an inline function.
   Modern compilers are able to inline such functions correctly,
   and optimize the result, providing performance equivalent to
   a raw for-loop iteration.

D) The foreach abstraction allows complex iterators to be implemented.
   Thus, the foreach abstraction eliminates the data copying associated
   with naive "filters", and thus can offer superior space *and* time
   performance over filters. For example, consider a long linked list
   consisting of many types of atoms, and one wants to perform a certain
   operation only on a specific type of atom. Traditional "filters"
   would make a copy of the list, including only the desired atom
   types in the copied list. This requires significant overhead:
   nodes must be copied, iterated over, and then freed.  The foreach
   abstraction allows a zero-copy filter to be implemented: the
   callback is invoked only for those nodes that match the filter
   criteria.

The "foreach" abstraction is commonly used in GUI programming, where
it is sometimes called "event-driven programming". This is because,
in GUI programming, the algorithm leading up to a given "event" or
"callback" can be extremely complicated, and not easily boiled down
to a simple loop. This is essentially the idea of point D) above.

The "foreach" abstraction is a cornerstone of kernel and device
driver programming, which is an inherently multi-threaded environment,
with full-blown locking and serialization concerns.

The "foreach" abstraction is also one of the "secret weapons" of
LISP and Scheme programming (and is one reason why LISP is traditional
popular in AI programming).  These languages simply do not have the
concept of a "for loop" the way that C/C++ do.  Eliminating this
concept allows "closures", and for algorithms to be defined so that
they operate independently of the data.  The C++ and Java community
attempted to emulate the success of closures by introducing templates
and virtual methods and interface classes; however, even so, these
still lack the flexibility and ease of use of real closures.  The
foreach construct can be understood as a basic implementation of
a closure for the most common, most popular case: a task that needs
to be repeatedly performed on a sequence of hunks of data.

XXX Please note: most of the goals above could be accomplished by
writing proper C++ iterators for that properly filter handles. This
has yet to be done. XXX

Example code
------------
Old-style, raw access to naked array (don't do this):

   MyClass::do_something(Handle handle)
   {
      Atom *atom = TLB::getAtom(handle);
      const std::vector<Handle> &vect = atom->getOutgoingSet();
      for (size_t i=0; i<vect.size(); i++)
      {
         Handle h = vect[i];
         MyClass::per_element(h);
      }
   }

Foreach-style callback iterator (do code like this):

   MyClass::do_something(Handle handle)
   {
      foreach_outgoing_handle(handle, &MyClass::per_element, this);
   }

Foreach-style C++ iterator (do code like this, except that these 
haven't been implemented yet!):

   MyClass::do_something(Handle handle)
   {
      OutgoingHandleIterator i = AtomSpace::getOutgoingIterator(handle);
      for (; i< i.end(); i++)
      {
         Handle h = *i;
         MyClass::per_element(h);
      }
   }



Not only does this require fewer lines of code, but it hides the
fact that the outgoing set is a vector. This allows the implementation
of the outgoing set to change in the future, if needed. (Another
example might be that of replacing hash tables by red-black trees,
without disturbing users of the code).

In addition, the "foreach_outgoing_handle" routine provides a single,
centralized place for mutex locking to be implemented, and a single
place for the correctness of that code to be reviewed, as opposed to
locking code being scattered haphazardly all over the application.

In the C++ iterator design, the mutex locking could be accomplished
in the operator++() method on the iterator. 

(The current implementation does not have the mutex lock in place,
this is a bigger task, because, unfortunately, there are already
a number of users of the raw access methods).


======================================================================
======================================================================
======================================================================
 Design Review Notes/Issues
 --------------------------
Linas made the following observations/posted the following questions
during review of the opencog internals, in April 2008. Some of these
may already be fixed.

5) class Atom has a AtomTable pointer that seems to be of little 
   utility -- it seems to be used in only two places: by AtomTable
   itself, and in SavingLoading. The first check is of little 
   utility, since the check could be performed in other ways, and 
   there is no need to have this check be computationally efficient.
   The use in SavingLoading could probably be avoided as well.
   Avoiding this pointer would provide a space-savings. 


FIXED ISSUES:
-------------
1) typeIndex and atom->setNext() -- these seem to be trying to 
   maintain an unusual linked list of atoms based on type. 
   (unusual because it uses handles instead of pointers).
   It seems to me that it would be more efficient to have the 
   AtomTable maintain its own std::map of these indicies, instead
   of using a linked list.
 
   Similar comments apply to targetTypes, importanceIndex, etc.
   See in particular point 1a) below.

   Status: fixed in 2008 sometime.

2) AtomTable::add(Atom *) uses AtomTable::getHandle() to see if
   the indicated atom aleady exists in the atom table. The 
   implementation of AtomTable::getHandle() is incredibly 
   inefficient. It would be much speedier if std::map was used
   instead, as the linear searches and filterings would be 
   replaced by O(log N) search.

   Status: fixed in 2008 sometime.

3) There are many uses of 
   ClassServer::isAssignableFrom(NODE, atom->getType()) 
   it would be more computationally efficient to replace these with
   (NULL != dynamic_cast<Node *>(atom);

   Status: fixed in 2008 sometime.

4) AtomTable::Add() computes a getNameHash() for all atoms, even
   when they are not of type Node. It would be more effcient to skip
   this for Nodes. 

   Status: fixed in 2008 sometime.

7) Class HandleEntry is implemented as a linked list. It implements
   many O(N) and O(N^2) algorithms, such as set intersection, etc.
   Performance will almost certainly be improved by using
   std:map instead of linked lists.

   In fact, all usage of HandleEntry should be completely eliminated.
   The whole things is a boondoggle.  Its already partly eliminated
   for many of the simpler functions, circa 2013.  The big nasties
   remain... Finished March 2013

8) AtomTable::makeSet() and AtomTable::buildSet() and
   the various flavors of getHandleSet() all create 
   linked lists. Presumably, some user will use these lists, 
   and then delete them. It would be much more computationally 
   efficient if the creation and destruction of the lists were
   skipped completely, and, instead, a foreach loop was used,
   to call the user's callback. This would avoid the cost of 
   malloc and free of the list, and un-needed data copying.

   Status: these functions were nuked sometime before 2011

9) AtomTable::AtomHashSet uses up memory to store atoms, but is not
   really needed, since everything it does is already done by the
   indexes.  It should be removed to save space.

   Status: removed, March 2013
