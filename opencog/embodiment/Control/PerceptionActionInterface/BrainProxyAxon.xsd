<?xml version="1.0" encoding="UTF-8"?>

<!-- WARNING THIS SCHEMA IS OUT OF DATE 

    It was somewhat inconsistent already, but since the xml messages
    are never checked against this XSD, this was never noticed.

    Given how long it takes to write XML Schema properly (xml is too verbose)
    and the fact we want to eventually move to a non-xml message format,
    we'll leave it unaltered but obsolete for now.

    19 July 2011 - Joel Pitt

     --> 

<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            targetNamespace="http://www.opencog.org/brain"
            xmlns:oc="http://www.opencog.org/brain"
            xmlns:common="http://www.opencog.org/metadata/common"
            xmlns:action="http://www.opencog.org/metadata/action"
            elementFormDefault="unqualified"
            attributeFormDefault="unqualified">

    <xsd:import namespace="http://www.opencog.org/metadata/common"
                schemaLocation="CommonMetadata.xsd"/>

    <xsd:import namespace="http://www.opencog.org/metadata/action"
                schemaLocation="AvatarActionMetadata.xsd"/>    

    <xsd:element name="embodiment-msg" type="oc:EmbodimentMsgType"/>

    <xsd:complexType name="EmbodimentMsgType">
        <xsd:sequence>
            <xsd:choice minOccurs="0" maxOccurs="unbounded">
                <xsd:element name="map-info" type="oc:MapInfoType" minOccurs="1" maxOccurs="1"/>
                <xsd:element name="agent-sensor-info" type="oc:AgentSensorInfoType" minOccurs="1" maxOccurs="1"/>
                <xsd:element name="agent-signal" type="oc:AgentSignalType" minOccurs="1" maxOccurs="1"/>
                <xsd:element name="avatar-signal" type="oc:AvatarSignalType" minOccurs="1" maxOccurs="1"/>
                <xsd:element name="instruction" type="oc:AvatarInstructionType" minOccurs="1" maxOccurs="1"/>
                <xsd:element name="communication" type="oc:CommunicationType" minOccurs="1" maxOccurs="1"/>
                <xsd:element name="terrain-info" type="oc:TerrainInfoType" minOccurs="1" maxOccurs="1"/>
                <xsd:element name="state-info" type="oc:StateInfoType" minOccurs="1" maxOccurs="1"/>
                <xsd:element name="block-structure-signal" type="oc:BlockStructureSignalType" minOccurs="1" maxOccurs="1"/>
                <xsd:element name="finished-first-time-percept-terrian-signal" type="oc:FinishedFirstTimePerceptTerrianSignalType" minOccurs="1" maxOccurs="1"/>
            </xsd:choice>
        </xsd:sequence>
        <xsd:attribute name="request-id" type="xsd:string" use="optional"/>
    </xsd:complexType>

    <!-- avatar-signal -->
    <xsd:element name="avatar-signal" type="oc:AvatarSignalType"/>

    <xsd:annotation>
        <xsd:documentation>
            Signals from agents, pertaining to agent specific actions.

            Physical signals may be processed simultaneously or as a result of one
            another, as such they bear an uncanny resemblance to an action plan, but
            may occur with or without the prompting of an action plan from OpenCog and
            will be returned individually rather than in batch.  At one point I had
            considered using a session id, but the Proxy can use a session id
            internally to send signals in the appropriate order to the Brain.
        </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType name="AvatarSignalType">
        <xsd:complexContent>
            <xsd:extension base="oc:BaseSignalType">
                <xsd:sequence/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>


    <!-- agent-signal -->
    <xsd:element name="agent-signal" type="oc:AgentSignalType"/>
    
    <xsd:annotation>
        <xsd:documentation>
            signals from avatars, pertaining to avatar specific actions
        </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType name="AgentSignalType">
        <xsd:complexContent>
            <xsd:extension base="oc:BaseSignalType">
                <xsd:sequence/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
    <xsd:complexType name="BaseSignalType" abstract="true">
        <xsd:sequence>
            <xsd:element name="action" type="oc:ActionSignalType" minOccurs="0" maxOccurs="unbounded"/>
            <xsd:element name="physiology-level" type="oc:PhysiologyType" minOccurs="0" maxOccurs="unbounded"/>
            <xsd:element name="action-availability" type="oc:ActionAvailabilityType" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
        <xsd:attribute name="id" type="xsd:string" use="required"/>
        <xsd:attribute name="timestamp" type="xsd:dateTime" use="required"/>
        <xsd:attribute name="type" type="xsd:string" use="optional"/>
    </xsd:complexType>

    <xsd:complexType name="ActionSignalType">
        <xsd:sequence>
            <xsd:element name="param" type="oc:ParamType" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
        <xsd:attribute name="name" type="xsd:string" use="required"/>      
        <xsd:attribute name="action-instance-name" type="xsd:string" use="optional"/> 
        <xsd:attribute name="result-state" type="xsd:boolean" use="optional"/> 
        <xsd:attribute name="target" type="xsd:string" use="optional"/>
        <xsd:attribute name="target-type" type="xsd:string" use="optional"/>  
        <xsd:attribute name="plan-id" type="xsd:string" use="optional"/>
        <xsd:attribute name="sequence" type="xsd:positiveInteger" use="optional"/>
        <xsd:attribute name="status" type="oc:StatusType" use="optional" default="done"/>
    </xsd:complexType>

    <xsd:complexType name="PhysiologyType">
        <xsd:sequence/>
        <xsd:attribute name="name" type="xsd:string" use="required"/>        
        <xsd:attribute name="value" type="xsd:float" use="required"/>
    </xsd:complexType>

    <xsd:complexType name="ActionAvailabilityType">
        <xsd:sequence/>
        <xsd:attribute name="name" type="xsd:string" use="required"/>        
        <xsd:attribute name="target" type="xsd:string" use="optional"/>
        <xsd:attribute name="target-type" type="xsd:string" use="optional"/>  
        <xsd:attribute name="available" type="xsd:boolean" use="required"/>
    </xsd:complexType>

    <xsd:element name="instruction"/>

    <xsd:annotation>
        <xsd:documentation>
            The text of an instruction can be plain, parsed or any other kind of format.
            However it must contains a parameter called length to indicate the sized of the
            given text. e.g.
            suppose that tag instruction is of type PetInstructionTextType
            &lt;instruction length="22"&gt;go fetch the blue ball&lt;/instruction&gt;
        </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType name="PetInstructionTextType">
        <xsd:simpleContent>
            <xsd:extension base="xsd:string">
                <xsd:attribute name="length" type="xsd:int"/>
            </xsd:extension>
        </xsd:simpleContent>
    </xsd:complexType>    

    <xsd:annotation>
        <xsd:documentation>
            Instruction to pets will be sent as raw text strings. At some point the 
            PetBrain will be able to correlate these instructions (and variants)
            to an action plan template, which remains to be defined.  Since we would
            like pets to respond to commands issued by people other than just their
            owners, we'll give owners dog whistles (transferrable) that allow them to 
            instruct their pet or designate someone else to instruct them.
        </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType name="AvatarInstructionType">
        <xsd:sequence>
            <xsd:element name="sentence" type="oc:PetInstructionTextType" minOccurs="1" maxOccurs="1"/>
            <xsd:element name="parsed-sentence" type="oc:PetInstructionTextType" minOccurs="0" maxOccurs="1"/>
        </xsd:sequence>
        <xsd:attribute name="avatar-id" type="xsd:string" use="required"/>   
        <xsd:attribute name="from-id" type="xsd:string" use="required"/>       
        <xsd:attribute name="timestamp" type="xsd:dateTime" use="required"/>
        <!-- describes what kind is that instruction: SPECIFIC_COMMAND, QUESTION, etc.-->
        <xsd:attribute name="content-type" type="xsd:string" use="required"/> 
        <!-- this instruction is destinated for what agent operation mode? PLAYING, LEARNING, ANY, etc.-->
        <xsd:attribute name="target-mode" type="xsd:string" use="required"/>
    </xsd:complexType>

    <xsd:element name="agent-sensor-info" type="oc:AgentSensorInfoType"/>

    <xsd:annotation>
        <xsd:documentation>
            This type of message is required to provide informations about the agents sensory.
            Sensors like vision and hearing can exchange it's data to OAC via this message type
        </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType name="AgentSensorInfoType">
        <xsd:sequence>            
            <xsd:annotation>
                <xsd:documentation>
                    Several perceptions may be exchanged in just one agent sensor info.
                    A perception is the signal generated by a specific sensor.
                </xsd:documentation>
            </xsd:annotation>
            <xsd:element name="perception" type="oc:SensorPerceptionType" minOccurs="1" maxOccurs="unbounded"/>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:annotation>
        <xsd:documentation>
            A perception is a data generated by a specific sensor. The subject is a classifier
            of the sensor signal. The signal is the raw data of the sensor's perception
        </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType name="SensorPerceptionType">
        <xsd:attribute name="sensor" type="xsd:string" use="required"/>
        <xsd:attribute name="subject" type="xsd:string" use="optional" default=""/>
        <xsd:attribute name="signal" type="xsd:string" use="required"/>
    </xsd:complexType>

    <xsd:element name="map-info" type="oc:MapInfoType"/>

    <xsd:annotation>
        <xsd:documentation>
            An aggregate of all map data from virtual world which consists of "blips".
        </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType name="MapInfoType">
        <xsd:sequence>
            <xsd:annotation>
                <xsd:documentation>
                    The map data behaves much like a radar screen, a grid with a
                    series of blips that represent nearby entities.
                </xsd:documentation>
            </xsd:annotation>
            <xsd:element name="blip" type="oc:BlipType" minOccurs="0" maxOccurs="unbounded"/>
            <xsd:element name="map-data" type="oc:MapDataType" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
        <xsd:attribute name="map-name" type="xsd:string" use="optional"/>
        <xsd:attribute name="global-position-x" type="xsd:int" use="required"/>
        <xsd:attribute name="global-position-y" type="xsd:int" use="required"/> 
        <xsd:attribute name="global-position-z" type="xsd:int" use="optional"/>              
        <xsd:attribute name="global-position-offset" type="xsd:int" use="optional"/>
        <xsd:attribute name="global-position-offset-x" type="xsd:int" use="optional"/>
        <xsd:attribute name="global-position-offset-y" type="xsd:int" use="optional"/>
        <xsd:attribute name="global-position-offset-z" type="xsd:int" use="optional"/>
        <xsd:attribute name="global-floor-height" type="xsd:int" use="optional"/>
        <xsd:attribute name="gridParcel" type="xsd:string" use="optional"/>
        <xsd:attribute name="is-first-time-percept-world" type="xsd:boolean" use="required"/>
        <xsd:attribute name="timestamp" type="xsd:string" use="required"/>
    </xsd:complexType>

    <xsd:complexType name="MapDataType">
        <xsd:simpleContent>
            <xsd:extension base="xsd:string">
            </xsd:extension>
        </xsd:simpleContent>
    </xsd:complexType>

    <xsd:element name="terrain-info" type="oc:TerrainInfoType"/>

    <xsd:annotation>
        <xsd:documentation>
            An aggregate of all terrain data from virtual world which consists of "payload".
        </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType name="TerrainInfoType">
        <xsd:sequence>
            <xsd:annotation>
                <xsd:documentation>
                    The map data behaves much like a radar screen, a grid with a
                    series of blips that represent nearby entities.
                </xsd:documentation>
            </xsd:annotation>
            <xsd:element name="terrain-data" type="oc:TerrainDataType" minOccurs="1" maxOccurs="unbounded"/>
        </xsd:sequence>
        <xsd:attribute name="map-name" type="xsd:string" use="optional"/>
        <xsd:attribute name="global-position-x" type="xsd:int" use="required"/>
        <xsd:attribute name="global-position-y" type="xsd:int" use="required"/> 
        <xsd:attribute name="global-position-z" type="xsd:int" use="optional"/>              
        <xsd:attribute name="global-position-offset" type="xsd:int" use="optional"/>
        <xsd:attribute name="global-position-offset-x" type="xsd:int" use="optional"/>
        <xsd:attribute name="global-position-offset-y" type="xsd:int" use="optional"/>
        <xsd:attribute name="global-position-offset-z" type="xsd:int" use="optional"/>
        <xsd:attribute name="global-floor-height" type="xsd:int" use="optional"/>
        <xsd:attribute name="gridParcel" type="xsd:string" use="optional"/>
        <xsd:attribute name="is-first-time-percept-world" type="xsd:boolean" use="required"/>
        <xsd:attribute name="timestamp" type="xsd:string" use="required"/>
    </xsd:complexType>

    <xsd:complexType name="TerrainDataType">
        <xsd:simpleContent>
            <xsd:extension base="xsd:string">
            </xsd:extension>
        </xsd:simpleContent>
    </xsd:complexType>

    
    <xsd:annotation>
        <xsd:documentation>
            Blips on the radar that indicate an entity, its position and the time
            that it was spotted at that location.
        </xsd:documentation>
    </xsd:annotation>

    <xsd:complexType name="BlipType">
        <xsd:sequence>
            <xsd:element name="entity" type="oc:EntityType" minOccurs="1" maxOccurs="1"/>
            <xsd:element name="position" type="common:VectorDataType" minOccurs="1" maxOccurs="1"/>
            <xsd:element name="rotation" type="common:RotationDataType" minOccurs="1" maxOccurs="1"/>
            <xsd:element name="velocity" type="common:VectorDataType" minOccurs="1" maxOccurs="1"/>
            <xsd:element name="dimension" type="common:VectorDataType" minOccurs="0" maxOccurs="1"/>
            <xsd:element name="properties" type="oc:PropertiesType" minOccurs="0" maxOccurs="1"/>
        </xsd:sequence>
        
        <xsd:attribute name="timestamp" type="xsd:dateTime" use="required"/>
    </xsd:complexType>

    <xsd:complexType name="PropertiesType">
        <xsd:sequence>
            <xsd:element name="property" type="oc:PropertyType" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="PropertyType">
        <xsd:attribute name="name" type="xsd:string" use="required"/>
        <xsd:attribute name="value" type="xsd:string" use="required"/>
    </xsd:complexType>      


    <xsd:annotation>
        <xsd:documentation>
            The entity id and type will allow for reasonably simple differentiation of 
            agents, objects, avatars, and static structures. Owner-id may not be necessary,
            but it could potentially be useful.
        </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType name="EntityType">
        <xsd:complexContent>
            <xsd:extension base="common:BaseEntityType">
                <xsd:sequence>
                    <xsd:element name="metadata" type="oc:ParamType"
                                 minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
                <xsd:attribute name="name" type="xsd:string" use="optional"/>
                <xsd:attribute name="owner-id" type="xsd:string" use="optional"/>
                <xsd:attribute name="owner-name" type="xsd:string" use="optional"/>
                <xsd:attribute name="session-id" type="xsd:string" use="optional"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:annotation>
        <xsd:documentation><![CDATA[
        All agents are be able to perform various actions. For example, the action
        may be navigation, a simple head-tilt, or ear wiggle. To enable complicated
        movements, the specification of the action sequence is flexible.
        <action-plan id="#unique-id#" pet-id"1138">
        <action name="walk" sequence="1">                  
        <param name="destination" type="vector">
        <vector x="209.1" y="10.0" z="21.4"/>
        </param>
        <param name="speed" type="int" value="30"/>
        </action>
        <action name="fly" sequence="2">
        <!-- fly approximately 50 meters -->
        <param name="destination" type="vector">
        <vector x="259.1" y="20.0" z="31.4"/>
        </param>
        <!-- instead of flying in a diagonal line, we -->
        <!-- make the flight an arc through space. -->
        <param name="arc" type="rotation">
        <rotation yaw="5" pitch="10" roll="0"/>
        </param>
        <!-- speed is in meters/second -->
        <param name="speed" type="int" value="60"/>
        </action>
        </action-plan>
        ]]>
        </xsd:documentation>
    </xsd:annotation>
    <xsd:element name="action-plan" type="oc:ActionPlanType"/>
    
    <xsd:complexType name="ActionPlanType">
        <xsd:sequence>
            <xsd:choice minOccurs="1" maxOccurs="unbounded">
                <xsd:element name="parallel" type="oc:ParallelActionType" minOccurs="1" maxOccurs="1"/>
                <xsd:element name="action" type="oc:SequencedActionType" minOccurs="1" maxOccurs="1"/>
            </xsd:choice>           
        </xsd:sequence>
        <xsd:attribute name="id" type="xsd:string" use="required"/>
        <xsd:attribute name="entity-id" type="xsd:string" use="required"/>
        <xsd:attribute name="entity-type" type="common:EntityDataType" use="optional" default="pet"/>
    </xsd:complexType>

    <xsd:complexType name="ParamType">
        <xsd:complexContent>
            <xsd:extension base="common:BaseParameterType">
                <xsd:sequence>
                    <xsd:choice minOccurs="0" maxOccurs="1">
                        <xsd:element name="vector" type="common:VectorDataType" minOccurs="1" maxOccurs="1"/>
                        <xsd:element name="rotation" type="common:RotationDataType" minOccurs="1" maxOccurs="1"/>
                        <xsd:element name="entity" type="oc:EntityType" minOccurs="1" maxOccurs="1"/>
                        <xsd:element name="list" type="common:ListDataType" minOccurs="1" maxOccurs="1"/>
                        <xsd:element name="value" type="xsd:string" minOccurs="1" maxOccurs="1"/>
                    </xsd:choice>
                </xsd:sequence>
                <xsd:attribute name="value" type="xsd:string" use="optional"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="ActionType">
        <xsd:complexContent>
            <xsd:extension base="common:BaseActionType">
                <xsd:sequence>
                    <xsd:element name="param" type="oc:ParamType" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="SequencedActionType">
        <xsd:complexContent>
            <xsd:extension base="oc:ActionType">
                <xsd:sequence/>
                <xsd:attribute name="sequence" type="xsd:positiveInteger" use="required"/>
                <xsd:attribute name="reportable" type="xsd:boolean" use="optional" default="true"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="ParallelActionType">
        <xsd:sequence>
            <xsd:element name="action" type="oc:SequencedActionType" minOccurs="2" maxOccurs="unbounded"/>
        </xsd:sequence>
    </xsd:complexType>    
    
    <xsd:simpleType name="StatusType">
        <xsd:restriction base="xsd:string">
            <xsd:enumeration value="done"/>
            <xsd:enumeration value="error"/>
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:annotation>
        <xsd:documentation>
            An Entity Metadata element represents a set of attributes that
            describe the entity identified in the "id" field.  The idea
            is to allow attributes to be modified over time, but have a
            document such as this one which will allow others to view that
            metadata as they see fit. Clients of these elements include:
            web portals and the AI router.  These documents may be used to
            describe updates to metadata as well.
        </xsd:documentation>
    </xsd:annotation>
    <xsd:element name="entity-metadata" type="oc:EntityMetadataType"/>

    <xsd:complexType name="EntityMetadataType">
        <xsd:sequence>
            <xsd:element name="name" type="xsd:string"
                         minOccurs="0" maxOccurs="1"/>
            <xsd:element name="attribute" type="oc:SimpleAttribute"/>
        </xsd:sequence>
        <xsd:attribute name="id" type="xsd:string" use="required"/>
        <xsd:attribute name="type" type="common:EntityDataType" use="required"/>
    </xsd:complexType>

    <xsd:complexType name="SimpleAttribute">
        <xsd:simpleContent>
            <xsd:extension base="xsd:string">
                <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:extension>
        </xsd:simpleContent>
    </xsd:complexType>

    <xsd:complexType name="CommunicationType">
        <xsd:simpleContent>
            <xsd:extension base="xsd:string">
                <xsd:attribute name="source-id" type="xsd:string" use="required"/>
                <xsd:attribute name="type" type="xsd:string" use="optional"/>
                <xsd:attribute name="timestamp" type="xsd:string" use="required"/>
            </xsd:extension>
        </xsd:simpleContent>
    </xsd:complexType>


    <!-- state-info -->
    <xsd:element name="state-info" type="oc:StateInfoType"/>

    <xsd:annotation>
        <xsd:documentation>
            Save the existing states of objects in the virtual world when oac is loaded.
        </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType name="StateInfoType">
        <xsd:sequence>
            <xsd:element name="state-value" type="oc:ParamType" minOccurs="1" maxOccurs="1"/> 
        </xsd:sequence>
        <xsd:attribute name="object-id" type="xsd:string" use="required"/>  
        <xsd:attribute name="object-type" type="common:EntityDataType" use="required"/>
        <xsd:attribute name="state-name" type="xsd:string" use="required"/>  
        <xsd:attribute name="timestamp" type="xsd:string" use="required"/>
    </xsd:complexType>

    <!-- block-structure-signal -->
    <xsd:element name="block-structure-signal" type="oc:BlockStructureSignalType"/>

    <xsd:annotation>
        <xsd:documentation>
            Deal with the block structures.
        </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType name="BlockStructureSignalType">
        <xsd:attribute name="recognize-structure" type="xsd:boolean" use="optional"/> 
        <xsd:attribute name="startblock-x" type="xsd:int" use="optional"/>      
        <xsd:attribute name="startblock-y" type="xsd:int" use="optional"/>
        <xsd:attribute name="startblock-z" type="xsd:int" use="optional"/>
        <xsd:attribute name="timestamp" type="xsd:string" use="required"/>
    </xsd:complexType>

    <!-- finished-first-time-percept-terrian-signal -->
    <xsd:element name="finished-first-time-percept-terrian-signal" type="oc:FinishedFirstTimePerceptTerrianSignalType"/>

    <xsd:annotation>
        <xsd:documentation>
            Notification of finishing the first time percept terrian
        </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType name="FinishedFirstTimePerceptTerrianSignalType">
        <xsd:attribute name="timestamp" type="xsd:string" use="required"/>
    </xsd:complexType>


</xsd:schema>
