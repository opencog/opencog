<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            targetNamespace="http://www.opencog.org/metadata/common"
            xmlns:common="http://www.opencog.org/metadata/common"
            elementFormDefault="unqualified"
            attributeFormDefault="unqualified">

    <xsd:complexType name="BaseEntityType" abstract="true">
        <xsd:sequence/>
        <xsd:attribute name="type" type="common:EntityDataType" use="required"/>
        <xsd:attribute name="id" type="xsd:string" use="optional" default="-1"/>
    </xsd:complexType>

    <xsd:annotation>
        <xsd:documentation>
            There are quite a few options available for defining an Entity's Class
            type, but the six categories below represent fundemental classifications
            that may be embellished at a later date.
        </xsd:documentation>
    </xsd:annotation>
    <xsd:simpleType name="EntityDataType">
        <xsd:restriction base="xsd:string">
            <xsd:enumeration value="pet"/>
            <xsd:enumeration value="humanoid"/>
            <xsd:enumeration value="structure"/>
            <xsd:enumeration value="avatar"/>
            <xsd:enumeration value="accessory"/>
            <xsd:enumeration value="object"/>
            <xsd:enumeration value="unknown"/>
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:annotation>
        <xsd:documentation>
            list of acceptable data types
        </xsd:documentation>
    </xsd:annotation>
    <xsd:simpleType name="DataTypeType">
        <xsd:restriction base="xsd:string">
            <xsd:enumeration value="boolean"/>
            <xsd:enumeration value="int"/>
            <xsd:enumeration value="float"/>
            <xsd:enumeration value="string"/>
            <xsd:enumeration value="vector"/>
            <xsd:enumeration value="rotation"/>
            <xsd:enumeration value="list"/>
            <xsd:enumeration value="entity"/>
            <xsd:enumeration value="nil"/>
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:simpleType name="ListElemType">
        <xsd:restriction base="xsd:string">
            <xsd:enumeration value="boolean"/>
            <xsd:enumeration value="int"/>
            <xsd:enumeration value="float"/>
            <xsd:enumeration value="string"/>
            <xsd:enumeration value="vector"/>
            <xsd:enumeration value="rotation"/>
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:annotation>
        <xsd:documentation>
            The SpeciesID, GenusID, LocaleID, and WorldID are used to specify
            and constrain inputs in any files that contain content that may be
            modified to meet the needs of a genus, species, world, or locale.

            TODO: Need to populate the various SpeciesID or use the set of breed 
            ids from the database via JAXB extensions.
        </xsd:documentation>
    </xsd:annotation>
    <xsd:simpleType name="SpeciesID">
        <xsd:restriction base="xsd:string">
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:simpleType name="LocaleID">
        <xsd:restriction base="xsd:string">
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:simpleType name="WorldID">
        <xsd:restriction base="xsd:string">
            <xsd:enumeration value="Second Life"/>
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:simpleType name="GenusID">
        <xsd:restriction base="xsd:string">
            <xsd:enumeration value="dog"/>
            <xsd:enumeration value="cat"/>
            <xsd:enumeration value="gargoyle"/>
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:simpleType name="AvatarActionEnumType">
        <xsd:restriction base="xsd:string"/>
    </xsd:simpleType>

    <xsd:annotation>
        <xsd:documentation>
            Simple x,y,z coordinate, also designated as a special type since a vector
            coordinate isn't a default Java data type, but it is an LSL type.
        </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType name="VectorDataType">
        <xsd:sequence/>
        <xsd:attribute name="x" type="xsd:double" use="required"/>
        <xsd:attribute name="y" type="xsd:double" use="required"/>
        <xsd:attribute name="z" type="xsd:double" use="required"/>
    </xsd:complexType>

    <xsd:annotation>
        <xsd:documentation>
            Another special type for LSL but in this case the attributes
            are specifically 0 to 360 degrees since we're trying to define
            a rotation about an fixed point. We're using Euclidian rotation
            representations rather than Quarternions since they're conceptually
            easier to work with.

            pitch corresponds to rotations about the x-axis
            roll corresponds to rotations about the y-axis
            yaw corresponds to rotations about the z-axis
        </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType name="RotationDataType">
        <xsd:sequence/>
        <xsd:attribute name="roll" type="xsd:double" use="required"/>
        <xsd:attribute name="pitch" type="xsd:double" use="required"/>
        <xsd:attribute name="yaw" type="xsd:double" use="required"/>
    </xsd:complexType>

    <xsd:complexType name="ListDataType">
        <xsd:sequence>
            <xsd:choice minOccurs="1" maxOccurs="unbounded">
                <xsd:element name="vector" type="common:VectorDataType" minOccurs="1" maxOccurs="1"/>
                <xsd:element name="rotation" type="common:RotationDataType" minOccurs="1" maxOccurs="1"/>
                <xsd:element name="value" type="xsd:string" minOccurs="1" maxOccurs="1"/>
            </xsd:choice>
        </xsd:sequence>
        <xsd:attribute name="elementType" type="common:ListElemType" use="required"/>
    </xsd:complexType>

    <xsd:complexType name="BaseActionType" abstract="true">
        <xsd:sequence>
            <!--<xsd:element name="param" type="common:BaseParameterType"
                minOccurs="0" maxOccurs="unbounded"/>-->
        </xsd:sequence>
        <xsd:attribute name="name" type="xsd:string" use="required"/>
    </xsd:complexType>

    <xsd:annotation>
        <xsd:documentation>
            The only problem with the param types as they exist currently is that
            they don't allow the end user to specify arrays of the various data types.
            While arrays are generally useful, I'm not convinced they'll be specifically
            useful for this project. I'm open to allowing arrays when it becomes
            clear that they'll be necessary.  Also, I've made the parameter value
            specification quite loose, which will mean that the Proxy will have to do
            more validation of the inputs than is ideal, but it does allow for quite
            a lot of flexibility.
        </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType name="BaseParameterType">
        <xsd:sequence/>
        <xsd:attribute name="type" type="common:DataTypeType" use="required"/>
        <xsd:attribute name="name" type="xsd:string" use="optional"/>
    </xsd:complexType>
    
</xsd:schema>
