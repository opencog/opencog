/*
 * opencog/nlp/learn/ParseSentence.cc
 *
 * Copyright (C) 2017 by OpenCog Foundation
 * All Rights Reserved
 *
 * Written by Curtis Faith
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <iostream>
#include <fstream>
#include <iomanip>
#include <string>
#include <list>
#include <ctime>

#include <sys/sysinfo.h>

#include "unicode/unistr.h"
#include "unicode/locid.h"
#include "unicode/brkiter.h"

#include <opencog/nlp/types/atom_types.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/atoms/base/Atom.h>
#include <opencog/atoms/base/Node.h>
#include <opencog/atoms/base/Link.h>
#include <opencog/truthvalue/CountTruthValue.h>
#include <opencog/util/random.h>

#include "ObserveSentence.h"
#include "ParseSentence.h"

using namespace opencog;

#define NO_EDGE SIZE_MAX
#define NO_WEIGHT (-999.9)
#define DEFAULT_PAIR_DISTANCE 6
#define NO_PAIR_DISTANCE 0
#define DONT_PRINT_PARSE_RESULTS false

void eat_my_parameters(...) {}

// #define DEBUG_PARSE
// #define DEEP_DEBUG

#ifdef DEBUG_PARSE
    #define DEBUG_PRINT printf
#else
    #define DEBUG_PRINT if (false) eat_my_parameters
#endif

//#define DEBUG_RECURSION
#ifdef DEBUG_RECURSION
    #define RECURSION_PRINT printf
#else
    #define RECURSION_PRINT if (false) eat_my_parameters
#endif


namespace opencog {

void load_pair_weights( AtomSpace*          as,
                        const HandleSeq&    word_handles,
                        int                 pair_distance,
                        WeightMatrix&       pair_weights)
{
    size_t total_words = word_handles.size();
    if (total_words <= 0)
        return;

    Handle predicate = as->add_node(PREDICATE_NODE, "*-Sentence Word Pair-*");
    Handle mi_key = as->add_node(PREDICATE_NODE, "*-Mutual Info Key-*");

    double fmi;
    for (size_t left = 0; left < total_words - 1; left++)
    {
        // Compute the last word accounting for our pair distance limits.
        size_t last_word;
        if (pair_distance)
        {
            last_word = left + 1 + pair_distance;
            if (total_words < last_word)
                last_word = total_words;
        }
        else
        {
            last_word = total_words;
        }

        // Get and cache the value for this pair...
        for (size_t right = left + 1; right < last_word; right++)
        {
            // Get the valuation for the mutual information key.
            Handle pair = as->add_link(LIST_LINK, word_handles[left], word_handles[right]);
            Handle evaluation = as->add_link(EVALUATION_LINK, predicate, pair);
            try
            {
                ProtoAtomPtr proto = evaluation->getValue(mi_key);
                fmi = FloatValueCast(proto)->value()[1];
            }
            catch (...)
            {
                fmi = NO_WEIGHT;

                // Check the count to see if this valuation was skipped
                // in the mutual information computation or not observed.
                TruthValuePtr tv = evaluation->getTruthValue();
                count_t count = 0;
                if (COUNT_TRUTH_VALUE == tv->getType())
                    count = tv->getCount();
                if (count < 1)
                {
                    std::cerr << "Missing *-Sentence Word Pair-* for <"  <<
                            word_handles[left]->getName().c_str() << "," <<
                            word_handles[right]->getName().c_str() << ">" << std::endl;
                }
            }
            pair_weights[left][right] = fmi;
        }
    }
}

static int parse_recursion = 0;
static int recursion_count = 0;

void add_parse( ParseVector&    parse_result,
                double          weight,
                int             left,
                int             right)
{
#ifdef DEEP_DEBUG
    DEBUG_PRINT("Adding parse pair [%d][%d]\n", left, right);
#endif
    parse_result.push_back(WordPair(weight, left, right));
}

double connect_range(   std::string&            indent,
                        WeightMatrix&           pair_weights,
                        const WordVector&       words,
                        size_t                  start,
                        size_t                  end,
                        bool                    save_parse,
                        ParseVector&            parse_result)
{
    double connected_weight;
    size_t left = start - 1;
    size_t right = end + 1;

    // Bump the indent.
    parse_recursion++;
    indent += " >";

    // If this is a single...
    if ( start == end )
    {
        DEBUG_PRINT("%s connect single [%d] %-10s\n",
                indent.c_str(),  (int) start, words[start].c_str());
    }
    else
    {
        DEBUG_PRINT("%s connect range [%d] %-10s to [%d] %-10s\n",
                indent.c_str(),  (int) start, words[start].c_str(),
                (int) end, words[end].c_str());
    }

    // Get the left connected weight.
    double left_weight = pair_weights[left][start];
    DEBUG_PRINT("%s   left  [%d] %-10s [%d] %-10s = %4.02f\n",
            indent.c_str(),  (int) left, words[left].c_str(), 
            (int) start, words[start].c_str(), left_weight);

    // And right connected weight.
    double right_weight = pair_weights[end][right];
    DEBUG_PRINT("%s   right [%d] %-10s [%d] %-10s = %4.02f\n",
            indent.c_str(),  (int) end, words[end].c_str(), 
            (int) right, words[right].c_str(), right_weight);

    // Return the larger weight.
    if (left_weight > right_weight)
    {
        DEBUG_PRINT("%s   connect left\n", indent.c_str());
        connected_weight = left_weight;

        // Remember the parse.
        if (save_parse)
            add_parse(parse_result, connected_weight, left, start);
    }
    else
    {
        DEBUG_PRINT("%s   connect right\n", indent.c_str());
        connected_weight = right_weight;
        
        // Remember the parse.
        if (save_parse)
            add_parse(parse_result, connected_weight, end, right);
    }

    parse_recursion--;
    indent.resize(indent.size() - 2);

    return connected_weight;
}

void find_max_pair_index(   std::string&        indent,
                            WeightMatrix&       pair_weights,
                            const WordVector&   words,
                            int                 pair_distance,
                            size_t              left,
                            size_t              end,
                            size_t&             max_pair_index,
                            double&             max_pair_weight)
{
    // Find the maximum pair weight for the left word.
    max_pair_index = 0;
    max_pair_weight = NO_WEIGHT;

    // Constrain to the pair distance limit.
    size_t last_right = left + pair_distance;
    if (end < last_right)
        last_right = end;
    for (size_t right = left + 1; right <= end; right++)
    {
        double pair_weight = pair_weights[left][right];
        if (pair_weight > max_pair_weight)
        {
            max_pair_index = right;
            max_pair_weight = pair_weight;
        }
    }

#ifdef DEEP_DEBUG
    DEBUG_PRINT("%s max for [%d] %-10s to [%d] is [%d] = %4.02f\n",
            indent.c_str(),  (int) left, words[left].c_str(),
            (int) end, (int) max_pair_index, max_pair_weight);
#endif
}

bool potential_cross(   std::string&                indent,
                        const std::vector<size_t>&  max_pair_indices,
                        const WordVector&           words,
                        size_t                      fragment_start,
                        size_t                      current_left,
                        size_t                      current_max_right,
                        size_t&                     cross)
{
    // Check for potential crosses from right to left since
    // if we find a cross and the cross has a greater weighted
    // tree we will be lowering the maximum in the pair_weights
    // matrix so that future parses do not have to do this check
    // again. Since there may be more than one potential cross
    // we will miss some potential high weight pairs if we move
    // the current search too far left in one go.
    // 
    // By searching from right to left, we will find the
    // rightmost potential cross first. We will eliminate it and
    // search again for a cross below.
    for (int left = current_max_right - 1; left >= (int) current_left; left--)
    {
        size_t left_index = left - fragment_start;
        size_t left_max = max_pair_indices[left_index];

#ifdef DEEP_DEBUG
        DEBUG_PRINT("%s checking cross for left [%d] %-10s against [%d] with [%d] index %d\n",
                indent.c_str(), left, words[left].c_str(),
                (int) current_max_right, (int) left_max, (int) left_index);
#endif
        // If this pair is to the right of the check then
        // we have a potential crossed pair.
        if (left_max > current_max_right)
        {
#ifdef DEEP_DEBUG
            DEBUG_PRINT("%s found cross, left [%d] %-10s crosses [%d] with [%d]\n",
                    indent.c_str(), left, words[left].c_str(),
                    (int) current_max_right, (int) left_max);
#endif
            cross = left;
            return true;
        }
    }

    return false;
}

#define DONT_CHECK_CROSSES false
#define SAVE_PARSE true
#define DONT_SAVE_PARSE false

double parse_fragment(  std::string&            indent,
                        WeightMatrix&           pair_weights,
                        const WordVector&       words,
                        int                     pair_distance,
                        size_t                  start,
                        size_t                  end,
                        bool                    save_parse,
                        ParseVector&            parse_result,
                        bool                    check_crosses = true)
{
    size_t fragment_size = end - start + 1;
    std::vector<size_t> max_pair_indices(fragment_size);
    std::vector<double> max_pair_weights(fragment_size);
    size_t max_pair_index;
    double max_pair_weight;

    parse_recursion++;
    recursion_count++;
    if (parse_recursion > (int) words.size())
    {
        std::cerr << "ERROR: Parse recursion exceeds sentence length."  << std::endl;
        throw (RuntimeException(TRACE_INFO, "Parse recursion exceeds sentence length."));
        exit(1);
    }

    // Bump the indent.
    size_t indent_size_on_entry = indent.size();
    indent += " >";

    DEBUG_PRINT("%s parsing %d word fragment [%d] %-10s to [%d] %-10s\n", 
            indent.c_str(), (int) fragment_size, (int) start, words[start].c_str(),
            (int) end, words[end].c_str());

    RECURSION_PRINT("%s %6d[%2d]-[%2d]\n", indent.c_str(), recursion_count, (int) start, (int) end );

    // Determine the maximum weight pairs. NOTE: This is where the
    // pair distance is checked. That keeps the code in the sections below 
    // simpler as it doesn't have to account for pair distances limits if
    // the max_pair_index already accounts for this limit. 
    size_t left_cache_index;
    for (size_t left = start; left < end; left++)
    {
        // Save the maximum pair index and weight.
        find_max_pair_index(indent, pair_weights, words, pair_distance,
                    left, end, max_pair_index, max_pair_weight);
        left_cache_index = left - start;
        max_pair_indices[left_cache_index] = max_pair_index;
        max_pair_weights[left_cache_index] = max_pair_weight;
#ifdef DEEP_DEBUG
        printf("%s   max for [%d] %-10s [%d] %-10s = %4.02f\n",
                indent.c_str(),  (int) left, words[left].c_str(), 
                (int) max_pair_index, words[max_pair_index].c_str(), max_pair_weight);
#endif
    }

    // Now that we've computed the maximum weight pairs for each
    // word in the fragment, we will proceed from left to right
    // determining how to connect these parts.
    //
    // Here we check for crossing maximums, i.e. any pairs that would
    // cross this maximum. There are three cases here:
    //
    // 1) The maximum edge for left is at index: left + 1. A cross
    //    cannot exist, so we'll skip checking the maximum for
    //    left + 1 and start at the next index instead.
    // 
    // 2) All the maximums for potential crossing pairs are
    //    for pairs with an index lower than the maximum weighted
    //    word for the left pair.
    //
    // 3) At least one word with an index between the left word
    //    and the left word's maximum has it's maximum at a pair
    //    that crosses the left word's maximum, i.e. the index
    //    for this crossing pair is greater than the index for the 
    //    left word's maximum. 
    //
    // For case 1), no edge crossing is possible, for case 2), no
    // cross is indicated, so in both these cases we can add the
    // maximum to the parse results. In case two, we also update
    // the right boundary, and recompute the maximum and index for
    // this word.
    //
    // In case 3), we must determine which of the conflicting edges 
    // results in a greater total spanning tree weight. 
    //
    // Consider the sentence, "Note that this crosses the left's
    // maximum to end." with the following maximum edges:
    //
    // Max MI Edge Table
    // -----------------
    //          Note that this crosses the left's maximum to end
    // Note                                          5
    // that                 2  
    // this                                                   3
    // crosses                          1
    // the                                    1
    // left's                                        2
    // maximum                                                2
    // to                                                 2
    // end
    //
    // This represents a directed graph from the first column to
    // the corresponding edge column. As can be seen, there is
    // a conflict between the edge from "Note" to "maximum" and
    // "this" to "end" because these maxima cross and this cross
    // must be eliminated.
    // 
    //                  /-----------------------------\       '
    //        /-------------------------------         \      '
    //       /        /                       \         \     '
    //    Note that this crosses the left's maximum to end.
    //    1     2    3      4     5    6       7     8  9
    // 
    // The word "this" at position 3, has a maximum edge that will 
    // cross to word "end" at position 9, since "Note" at position 1
    // has a maximum edge at position 7.
    // 
    double fragment_weight = 0;
    size_t left = start;
    while (left < end)
    {
        indent.resize(indent_size_on_entry);
        DEBUG_PRINT("%s parsing left [%d] %-10s\n",
                indent.c_str(),  (int) left, words[left].c_str());
        indent += "  ";

        // Get the maximum pair and weight from our cached list.
        left_cache_index = left - start;
        max_pair_index = max_pair_indices[left_cache_index];
        max_pair_weight = max_pair_weights[left_cache_index];

        // If the left has a maximum that is not the next pair...
        size_t subfragment_start = left + 1;
        int cross_count = false;
        if (max_pair_index > subfragment_start)
        {
            bool saving_parse_on_entry = save_parse;
            save_parse = false;
            
            if (check_crosses)
            {
                // We must check and eliminate potential crosses first...
                size_t cross;
                while (potential_cross(indent, max_pair_indices, words, start,
                        left, max_pair_index, cross))
                {
                    size_t cross_cache_index = cross - start;
                    size_t cross_right_index = max_pair_indices[cross_cache_index];
                    double cross_weight = max_pair_weights[cross_cache_index];
                    DEBUG_PRINT("%s edge [%d]__[%d] crosses edge [%d]__[%d]\n",
                            indent.c_str(),  (int) left, (int) max_pair_index,
                            (int) cross, (int) cross_right_index);
                    DEBUG_PRINT("%s start %d, cross %d, cache index %d\n",
                            indent.c_str(), (int) start, (int) cross,
                            (int) cross_cache_index);
                    indent += " |";

                    // If we get here, we have at least one cross.
                    cross_count++;

                    // Sanity check for infinite loops
                    if (cross_count > (int) fragment_size)
                    {
                        std::cerr << "Fatal parse! Cannot fix cross for :"  << std::endl;
                        for (auto & word : words)
                            std::cerr << " " << word;
                        std::cerr << std::endl;
                        throw (RuntimeException(TRACE_INFO, "Fatal parse."));
                        exit(1);
                    }

                    // First some terms:
                    // 
                    // left_left_parse_weight - the weight of the parse from left to it's max_pair_index
                    // left_right_parse_weight - the weight of the parse from the left's max_pair_index to 
                    //                           the cross's max_pair index
                    //
                    // right_left_parse_weight - the weight of the parse to the cross
                    // right_right_parse_weight - the weight of the parse from the cross to it's max_pair_index
                    //
                    
                    // Determine the parse weight if the left wins...
                    double left_left_parse_weight = parse_fragment(indent, pair_weights, words,
                            pair_distance, left, max_pair_index, save_parse,
                            parse_result, check_crosses);
                    double left_right_parse_weight = parse_fragment(indent, pair_weights, words,
                            pair_distance, max_pair_index + 1, cross_right_index,
                            save_parse, parse_result, check_crosses);
                    double left_parse_weight = left_left_parse_weight + 
                            left_right_parse_weight + max_pair_weight;

                    // Determine the parse weight if the right wins...
                    double right_left_parse_weight = parse_fragment(indent, pair_weights, words,
                            pair_distance, left, cross, save_parse,
                            parse_result, check_crosses);
                    double right_right_parse_weight = parse_fragment(indent, pair_weights, words,
                            pair_distance, cross + 1, cross_right_index, save_parse,
                            parse_result, check_crosses);
                    double right_parse_weight = right_left_parse_weight +
                            right_right_parse_weight + cross_weight;

                    // The parse with the greatest total fragment weight wins.

                    // If the left cross wins...
                    if (left_parse_weight > right_parse_weight)
                    {
                        DEBUG_PRINT("%s removing right crossing edge [%d]__[%d] %0.2f > %0.2f\n",
                                indent.c_str(),  (int) cross, (int) cross_right_index,
                                left_parse_weight, right_parse_weight);

                        // Remove the cross by constricting the range of the maximum pair for the
                        // right so it cannot cross the winning left pair.
                        size_t new_cross_limit = max_pair_index;
                        find_max_pair_index(indent, pair_weights, words, pair_distance,
                                cross, max_pair_index, cross_right_index, cross_weight);
                        max_pair_indices[cross_cache_index] = cross_right_index;
                        max_pair_weights[cross_cache_index] = cross_weight;

                        DEBUG_PRINT("%s found new max pair for [%d] %-10s up to [%d] at [%d] = %4.02f\n",
                                indent.c_str(),  (int) cross, words[left].c_str(),
                                (int) new_cross_limit, (int) max_pair_index, max_pair_weight);
                    }
                    // otherwise, the right cross wins...
                    else
                    {
                        DEBUG_PRINT("%s removing left crossing edge [%d]__[%d] %0.2f < %0.2f\n",
                                indent.c_str(),  (int) left, (int) max_pair_index,
                                left_parse_weight, right_parse_weight);

                        // Remove the left cross by constricting the range of its maximum
                        // pair so it cannot cross the winning rightcross pair.
                        find_max_pair_index(indent, pair_weights, words, pair_distance, 
                                left, cross, max_pair_index, max_pair_weight);
                        max_pair_indices[left_cache_index] = max_pair_index;
                        max_pair_weights[left_cache_index] = max_pair_weight;

                        DEBUG_PRINT("%s found new max pair for [%d] %-10s up to [%d] at [%d] = %4.02f\n",
                                indent.c_str(),  (int) left, words[left].c_str(),
                                (int) cross, (int) max_pair_index, max_pair_weight);
                    }

                    indent.resize(indent.size() - 2);

                } // while (checking potential crosses)
            }

            // Restore the saving parse flag...
            save_parse = saving_parse_on_entry;
        }

        if (check_crosses && cross_count)
        {
            DEBUG_PRINT("%s %d crosses eliminated for left [%d].\n", indent.c_str(),
                    cross_count, (int) left);
        }

        // At this point, any potential crosses will have been eliminated by adjusting the
        // max_pair_indexes to remove the conflicting crosses so that only the edge that
        // builds the maximum subfragment parse will remain.

        // So now we handle subparsing and connection of subparsing without worrying about
        // crosses.
        if (max_pair_index > subfragment_start)
        {
            // The fragment starts out with the weight for this pair.
            fragment_weight = max_pair_weight;

            // Remember the parse.
            if (save_parse)
                add_parse( parse_result, max_pair_weight, left, max_pair_index);

            // Parse the contained fragment and connect it one
            // to the left or right.
            size_t subfragment_end = max_pair_index - 1;
            if (subfragment_end > subfragment_start)
            {
                DEBUG_PRINT("%s parsing subfragment of [%d] %-10s [%d] %-10s = %4.02f\n",
                        indent.c_str(),  (int) left, words[left].c_str(), 
                        (int) max_pair_index, words[max_pair_index].c_str(), max_pair_weight);

                // Now parse and connect the subfragment.
                size_t range_start = left + 1;
                size_t range_end = max_pair_index - 1;
                double subfragment_weight = parse_fragment(indent, pair_weights, words,
                        pair_distance, range_start, range_end, save_parse, parse_result);
                double connection_weight = connect_range(indent, pair_weights, words, 
                        range_start, range_end, save_parse, parse_result);
                fragment_weight += subfragment_weight + connection_weight;
            }
            else
            {
                DEBUG_PRINT("%s connecting single of [%d] %-10s [%d] %-10s = %4.02f\n",
                        indent.c_str(),  (int) left, words[left].c_str(), 
                        (int) max_pair_index, words[max_pair_index].c_str(), max_pair_weight);
                fragment_weight += connect_range(indent, pair_weights, words,
                        subfragment_start, subfragment_start, save_parse, parse_result);
            }

            // We already parsed the left as a contained parse. So we can
            // skip ahead to the next position.
            left = max_pair_index;
        }
        else
        {
            DEBUG_PRINT("%s max at +1   [%d] %-10s [%d] %-10s = %4.02f\n",
                    indent.c_str(),  (int) left, words[left].c_str(), 
                    (int) max_pair_index, words[max_pair_index].c_str(), max_pair_weight);
            fragment_weight += max_pair_weight;

            // Remember the parse.
            if (save_parse)
                add_parse(parse_result, max_pair_weight, left, max_pair_index);

            // Check the next left.
            left++;
        }
    }

    parse_recursion--;
    indent.resize(indent_size_on_entry);
    return fragment_weight;
}



bool check_parse_pairs( AtomSpace*          as,
                        const WordVector&   words,
                        int                 pair_distance_limit)
{
    if (words.size() <= 0)
        return true;

    // Cache the word nodes.
    HandleSeq word_handles;
    size_t total_words = words.size();
    for (size_t index = 0; index < total_words; index++)
        word_handles.push_back(as->add_node(WORD_NODE, words[index]));

    Handle predicate = as->add_node(PREDICATE_NODE, "*-Sentence Word Pair-*");

    for (size_t left = 0; left < total_words - 1; left++)
    {
        // Compute the last word accounting for our pair distance limits.
        size_t last_word;
        if (pair_distance_limit)
        {
            last_word = left + 1 + pair_distance_limit;
            if (total_words < last_word)
                last_word = total_words;
        }
        else
        {
            last_word = total_words;
        }

        // Get and cache the value for this pair...
        for (size_t right = left + 1; right < last_word; right++)
        {
            // Get the valuation for the mutual information key.
            Handle pair = as->add_link(LIST_LINK, word_handles[left], word_handles[right]);
            Handle evaluation = as->add_link(EVALUATION_LINK, predicate, pair);
            try
            {
                // Check the count to see if this valuation was skipped
                // in the mutual information computation or not observed.
                TruthValuePtr tv = evaluation->getTruthValue();
                count_t count = 0;
                if (COUNT_TRUTH_VALUE == tv->getType())
                    count = tv->getCount();
                if (count < 1)
                {
                    std::cerr << "Missing *-Sentence Word Pair-* for <"  <<
                            word_handles[left]->getName().c_str() << "," <<
                            word_handles[right]->getName().c_str() << ">" << std::endl;
                    return false;
                }
            }
            catch (...)
            {
                std::cerr << "Exception checking *-Sentence Word Pair-* for <"  <<
                        word_handles[left]->getName().c_str() << "," <<
                        word_handles[right]->getName().c_str() << ">" << std::endl;
                return false;
            }
        }
    }

    // If we get here, then all the pairs were found.
    return true;
}

/*

parse_words - builds a parse vector for the words. A parse vector is 
an ordered list of word pairs spanning the highest non-crossing
mutual information tree. 

*/
void parse_words(   AtomSpace*          atomspace,
                    const WordVector&   words,
                    int                 pair_distance,
                    ParseVector&        parse_result)
{
    if (words.size() <= 0)
        return;

    // Reset the recursion count.
    recursion_count = 0;

    // Cache the word nodes.
    HandleSeq word_handles;
    size_t total_words = words.size();
    for (size_t index = 0; index < total_words; index++)
        word_handles.push_back(atomspace->add_node(WORD_NODE, words[index]));

    // Cache the pair weights since we will need to examine each pair as part
    // of the parsing anyway,  this will allow us to not load compare pairs more
    // than once since we can just use the computed weight cache.
    WeightMatrix pair_weights(total_words, std::vector<double>(total_words, NO_WEIGHT));
    load_pair_weights(atomspace, word_handles, pair_distance, pair_weights);

    // Now that we have setup the word handles and pair weights cache we can
    // do our recursive fragment parsing, passing in indexes for the whole sentence.
    std::string indent = "";
    double parse_weight = parse_fragment(indent, pair_weights, words, pair_distance,
            0, total_words - 1, SAVE_PARSE, parse_result);
    DEBUG_PRINT("Parse total weight = %.2f.\n", parse_weight);
}

void parse_sentence(    AtomSpace*      atomspace,
                        std::string&    sentence,
                        int             pair_distance,
                        ParseVector&    parse_results)
{
    WordVector words;

    // Break the sentence up into words.
    break_sentence_into_words(sentence, words);

    // Parse the words.
    parse_words(atomspace, words, pair_distance, parse_results);
}

size_t max_length(const WordVector& words)
{
    size_t total_words = words.size();
    size_t max_word_length = 0;
    for (size_t word_index = 0; word_index < total_words; word_index++)
    {
        size_t word_length = words[word_index].size();
        if (word_length > max_word_length)
            max_word_length = word_length;
    }
    return max_word_length;
}

void print_pair_weights(AtomSpace*          as,
                        std::ostream&       out_stream,
                        const WordVector&   words,
                        size_t              pair_distance)
{
    // Create all the word nodes.
    size_t total_words = words.size();
    HandleSeq word_handles;
    for (size_t index = 0; index < total_words; index++)
        word_handles.push_back(as->add_node(WORD_NODE, words[index]));

    // Load the pair weights.
    WeightMatrix pair_weights(total_words, std::vector<double>(total_words, NO_WEIGHT));
    load_pair_weights(as, word_handles, pair_distance, pair_weights);

    size_t max_word_length = max_length(words);

    // Now add a column header for each word doing a row per character.
    //
    //       t        w
    //       h        a
    //       i        y
    //       s        
    //                |
    //       |        |
    //     0.5       0.3
    // 
    // NOTE: we intentionally go two past the end of the array since we
    // want a '|' down for every word.
    out_stream << std::right << std::endl;
    for (size_t row = 0; row < max_word_length + 2; row++)
    {
        // Open the line.
        out_stream << "/*                      ";

        // Output the single characters for this row.
        for (size_t column = 0; column < total_words; column++)
        {
            if (row < words[column].size())
                out_stream << std::setw(7) << words[column][row];
            else if (row < words[column].size() + 1)
                out_stream << std::setw(7) << " ";
            else
                out_stream << std::setw(7) << "|";
        }

        // Close the line.
        out_stream << "   */" << std::endl;
    }

    // Now add a row for each word. This one iterates over words.
    for (size_t row = 0; row < total_words; row++)
    {
        out_stream << "/* " << std::setw(20) << std::left << words[row] << "*/ {";

        // Write out the comma-delimited weights for this word.
        for (size_t column = 0; column < total_words; column++)
        {
            // Add the delimiter.
            if (column > 0)
                out_stream << ",";

            // Set floating point output right justtified, width at 6, precision 2 e.g. "  0.02".
            out_stream << std::right << std::fixed << std::setw(6) << std::setprecision(2);

            // Write the weight (output NO_WEIGHT as 0.0)
            double fmi = pair_weights[row][column];
            if (fmi == NO_WEIGHT)
                fmi = 0.0;
            out_stream << fmi;
        }

        // Close the line.
        out_stream << " }," << std::endl;
    }
    out_stream << std::endl;
}

bool dump_pair_weights( AtomSpace*          as,
                        std::string&        file_name,
                        std::string&        sentence,
                        int                 pair_distance,
                        std::string&        error)
{
    WordVector      words;

    DEBUG_PRINT("dump_pair_weights - file: %s\nsentence: %s\npair distance: %d\n", 
            file_name.c_str(), sentence.c_str(), pair_distance);

    // Break the sentence up into words.
    break_sentence_into_words(sentence, words);

    // If there are no words, just return.
    size_t total_words = words.size();
    if (total_words <= 0)
        return true;

    DEBUG_PRINT("found %d words\n", (int) total_words);

    // Open the file.

    DEBUG_PRINT("setting stream exceptions\n");

    // Set exceptions to be thrown on failure...
    std::ofstream file_stream;
    file_stream.exceptions(std::ifstream::failbit | std::ifstream::badbit);

    DEBUG_PRINT("opening file\n");

    // Now do the actual open.
    try
    {
        file_stream.open(file_name);

    } catch (std::system_error& e) {
        error = e.code().message();
        file_stream.close();
        return false;
    } catch (...) {
        error = "Error opening dump file";
        file_stream.close();
        return false;
    }

    DEBUG_PRINT("successfully opened file stream\n");

    // Write the sentence for which we are dumping weights.
    file_stream << "test_sentence = \"" << sentence << "\";" << std::endl << std::endl;

    // Write the header for the array.
    file_stream << "double test_5_weights[" << total_words << "][" <<
                total_words << "] =" << std::endl << "{" << std::endl;

    // Print the pair weights to the file stream.
    print_pair_weights(as, file_stream, words, pair_distance);

    // Close out the array definition.
    file_stream << "};" << std::endl;

    // Close the file.
    file_stream.close();

    // Return true since if we get here there was no error.
    return true;
}


} // namespace opencog



#ifdef TEST_MAIN

void test_parse_sentence(   AtomSpace*      as,
                            std::string&    sentence,
                            int             pair_distance,
                            bool            print_parse_results)
{
    ParseVector     parse_results;
    WordVector      words;

    // Break the sentence up into words.
    break_sentence_into_words(sentence, words);

    // Parse the words.
    parse_words(as, words, pair_distance, parse_results);

    // Print out the parse results.
    if (print_parse_results)
    {
#ifdef TEST_MAIN
    print_pair_weights(as, std::cout, words, pair_distance);
#endif

        size_t max_word_length = max_length(words);
        std::cout << std::endl;
        for (auto & pair : parse_results)
        {
            std::cout << "MI = " << std::right << std::fixed << std::setw(6) << std::setprecision(2);
            std::cout << pair.edge_weight << " [";
            std::cout << std::right << std::fixed << std::setw(3) << pair.left_index << "] ";
            std::cout << std::left << std::setw(max_word_length + 1) << words[pair.left_index] << "[";
            std::cout << std::right << std::fixed << std::setw(3) << pair.right_index << "] ";
            std::cout << std::left << std::setw(max_word_length + 1) << words[pair.right_index];
            std::cout << std::endl;
        }
        std::cout << std::endl;
    }
}

void add_test_word_atoms(AtomSpace*    as,
                         std::string&  sentence)
{
    WordVector words;
    ParseVector parse;

    // Break the sentence up into words.
    break_sentence_into_words(sentence, words);

    // Create all the word nodes.
    HandleSeq word_handles;
    size_t total_words = words.size();
    for (size_t index = 0; index < total_words; index++)
        word_handles.push_back(as->add_node(WORD_NODE, words[index]));

    // Create the pair atoms so our timings don't include atom creation times as
    // they will be loaded for actual parsing.
    WeightMatrix pair_weights(total_words, std::vector<double>(total_words, NO_WEIGHT));
    load_pair_weights(as, word_handles, NO_PAIR_DISTANCE, pair_weights);
}

void add_test_word_weights( AtomSpace*      as,
                            std::string&    sentence,
                            void*           weights)
{
    WordVector words;
    ParseVector parse;
    // Create the predicate and schema nodes only once.
    Handle predicate = as->add_node(PREDICATE_NODE, "*-Sentence Word Pair-*");
    Handle mi_key = as->add_node(PREDICATE_NODE, "*-Mutual Info Key-*");

    // Break the sentence up into words.
    break_sentence_into_words(sentence, words);
    if (words.size() <= 0)
        return;

    // Loop over all the words adding the pair weights.
    int total_words = words.size();
    for (int left = 0; left < total_words - 1; left++)
    {
        // Yes, this is ugly but we need to be able to handle any arbitrary matrix of words
        // and C++ does not know how to determine the size of the arrays at runtime if 
        // we don't tell it at compile time.
        double* weight_row = ((double*) weights + (left * total_words));
        for (int right = left + 1; right < total_words; right++)
        {
            // Create the pair atoms.
            Handle left_word = as->add_node(WORD_NODE, words[left]);
            Handle right_word = as->add_node(WORD_NODE, words[right]);
            Handle pair = as->add_link(LIST_LINK, left_word, right_word);
            Handle evaluation = as->add_link(EVALUATION_LINK, predicate, pair);

            // Set the mutual information weight.
            double weight = weight_row[right];
            std::vector<double> float_list = { (double) 0.0, weight };
            ProtoAtomPtr proto = createFloatValue( float_list );
            evaluation->setValue(mi_key, proto);
        }
    }
}

void print_atomspace(AtomSpace* as)
{
    HandleSeq handles;
    as->get_handles_by_type(back_inserter(handles), ATOM, true);
    for (const Handle& h : handles) {
        std::cout << h->toString() << std::endl;
    }
 
}

void do_one_test(   AtomSpace*      as,
                    std::string&    sentence,
                    void*           weights,
                    int             pair_distance,
                    bool            print_parse_results = true)
{
    std::clock_t    start;
    double          elapsed;

    add_test_word_weights(as, sentence, weights);

    if (print_parse_results)
        printf("Parsing sentence: %s\n", sentence.c_str());
    start = std::clock();
    test_parse_sentence(as, sentence, pair_distance, print_parse_results);
    elapsed = ( std::clock() - start ) / (double) CLOCKS_PER_SEC;
    printf("Sentence parsed in %0.6f seconds\n\n", elapsed);
}

int main(int argc, char *argv[])
{
    AtomSpace       atomspace;
    AtomSpace*      as = &atomspace;
    std::string     test_sentence("The dog barked.");

    double          test_0_weights[3][3] = {
                    // The   dog barked
                       {0.0, 0.5, 0.1} , // The
                       {0.0, 0.0, 1.2} , // dog
                       {0.0, 0.0, 0.0} , // barked
                    };
    do_one_test(as, test_sentence, test_0_weights, DEFAULT_PAIR_DISTANCE);

    test_sentence = "The big dog did eat the little dog";
    double          test_1_weights[8][8] = {
                    // The   big  dog  did  eat  the  little  dog
                       {0.0, 0.3, 0.5, 0.2, 0.1, 1.0,    0.5, 0.5} , // The
                       {0.0, 0.0, 1.2, 0.1, 0.1, 0.1,    0.2, 1.2} , // big
                       {0.0, 0.0, 0.0, 0.5, 1.0, 0.5,    0.3, 0.2} , // dog
                       {0.0, 0.0, 0.0, 0.0, 1.4, 0.5,    0.3, 0.2} , // did
                       {0.0, 0.0, 0.0, 0.0, 0.0, 0.5,    0.6, 0.7} , // eat
                       {0.0, 0.0, 0.0, 0.0, 0.0, 0.0,    1.1, 1.7} , // the
                       {0.0, 0.0, 0.0, 0.0, 0.0, 0.0,    0.0, 1.0} , // little
                       {0.0, 0.0, 0.0, 0.0, 0.0, 0.0,    0.0, 0.0} , // dog
                    };
    do_one_test(as, test_sentence, test_1_weights, DEFAULT_PAIR_DISTANCE);

    double          test_2_weights[8][8] = {
                    // The   big  dog  did  eat  the  little  dog
                       {0.0, 1.0, 0.5, 0.2, 0.1, 0.1,    1.0, 0.5} , // The
                       {0.0, 0.0, 1.2, 0.1, 0.1, 0.1,    0.2, 1.2} , // big
                       {0.0, 0.0, 0.0, 0.5, 1.0, 0.5,    0.3, 0.2} , // dog
                       {0.0, 0.0, 0.0, 0.0, 1.4, 0.5,    0.3, 0.2} , // did
                       {0.0, 0.0, 0.0, 0.0, 0.0, 0.5,    0.6, 0.7} , // eat
                       {0.0, 0.0, 0.0, 0.0, 0.0, 0.0,    1.0, 1.7} , // the
                       {0.0, 0.0, 0.0, 0.0, 0.0, 0.0,    0.0, 1.0} , // little
                       {0.0, 0.0, 0.0, 0.0, 0.0, 0.0,    0.0, 0.0} , // dog
                    };
    do_one_test(as, test_sentence, test_2_weights, DEFAULT_PAIR_DISTANCE);

    double          test_3_weights[8][8] = {
                    // The   big  dog  did  eat  the  little  dog
                       {0.0, 0.3, 0.5, 0.2, 0.1, 0.1,    1.5, 0.5} , // The
                       {0.0, 0.0, 1.2, 0.1, 0.1, 0.1,    0.2, 1.2} , // big
                       {0.0, 0.0, 0.0, 0.5, 1.0, 0.5,    0.3, 0.2} , // dog
                       {0.0, 0.0, 0.0, 0.0, 1.4, 0.5,    0.3, 0.2} , // did
                       {0.0, 0.0, 0.0, 0.0, 0.0, 0.5,    0.6, 0.7} , // eat
                       {0.0, 0.0, 0.0, 0.0, 0.0, 0.0,    1.1, 1.7} , // the
                       {0.0, 0.0, 0.0, 0.0, 0.0, 0.0,    0.0, 1.0} , // little
                       {0.0, 0.0, 0.0, 0.0, 0.0, 0.0,    0.0, 0.0} , // dog
                    };
    do_one_test(as, test_sentence, test_3_weights, DEFAULT_PAIR_DISTANCE);

#define TEST_BIG_PARSES
#ifdef TEST_BIG_PARSES

    test_sentence = "It is a truth universally acknowledged, that a single man in possession of a good fortune, must be in want of a wife.";

    double test_4_weights[23][23] =
    {
    /*                            I      i      a      t      u      a      t      a      s      m      i      p      o      a      g      f      m      b      i      w      o      a      w    */
    /*                            t      s             r      n      c      h             i      a      n      o      f             o      o      u      e      n      a      f             i    */
    /*                                          |      u      i      k      a      |      n      n             s             |      o      r      s                    n             |      f    */
    /*                            |      |      |      t      v      n      t      |      g             |      s      |      |      d      t      t      |      |      t      |      |      e    */
    /*                            |      |      |      h      e      o             |      l      |      |      e      |      |             u             |      |             |      |           */
    /*                            |      |      |             r      w      |      |      e      |      |      s      |      |      |      n      |      |      |      |      |      |      |    */
    /*                            |      |      |      |      s      l      |      |             |      |      s      |      |      |      e      |      |      |      |      |      |      |    */
    /*                            |      |      |      |      a      e      |      |      |      |      |      i      |      |      |             |      |      |      |      |      |      |    */
    /*                            |      |      |      |      l      d      |      |      |      |      |      o      |      |      |      |      |      |      |      |      |      |      |    */
    /*                            |      |      |      |      l      g      |      |      |      |      |      n      |      |      |      |      |      |      |      |      |      |      |    */
    /*                            |      |      |      |      y      e      |      |      |      |      |             |      |      |      |      |      |      |      |      |      |      |    */
    /*                            |      |      |      |             d      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |    */
    /*                            |      |      |      |      |             |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |    */
    /*                            |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |    */
    /* It                  */ {  0.00, -4.55, -1.56,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00},
    /* is                  */ {  0.00,  0.00, -1.93, -1.41,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00},
    /* a                   */ {  0.00,  0.00,  0.00, -0.22, -4.36,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00},
    /* truth               */ {  0.00,  0.00,  0.00,  0.00, -9.85, -7.18,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00},
    /* universally         */ {  0.00,  0.00,  0.00,  0.00,  0.00,-10.54, -4.27,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00},
    /* acknowledged        */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -3.02, -0.67,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00},
    /* that                */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  1.15, -1.87,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00},
    /* a                   */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -3.88, -3.62,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00},
    /* single              */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -6.46, -1.82,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00},
    /* man                 */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -1.61, -5.66,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00},
    /* in                  */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -4.18,  0.33,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00},
    /* possession          */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -3.62, -2.75,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00},
    /* of                  */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -0.39, -0.61,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00},
    /* a                   */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -2.83, -1.28,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00},
    /* good                */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -4.72, -0.30,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00},
    /* fortune             */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -2.66, -0.48,  0.00,  0.00,  0.00,  0.00,  0.00},
    /* must                */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -3.78,  0.43,  0.00,  0.00,  0.00,  0.00},
    /* be                  */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -1.23, -1.25,  0.00,  0.00,  0.00},
    /* in                  */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -0.67,  0.33,  0.00,  0.00},
    /* want                */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -3.13, -0.54,  0.00},
    /* of                  */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -0.39, -1.18},
    /* a                   */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -1.83},
    /* wife                */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00},
    };
    do_one_test(as, test_sentence, test_4_weights, DEFAULT_PAIR_DISTANCE);

#endif

#ifdef TEST_HUGE_PARSES
    test_sentence = "“The disagreement subsisting between yourself and my late honoured father always gave me much uneasiness, and since I have had the misfortune to lose him, I have frequently wished to heal the breach; but for some time I was kept back by my own doubts, fearing lest it might seem disrespectful to his memory for me to be on good terms with anyone with whom it had always pleased him to be at variance.--‘There, Mrs. Bennet.’--My mind, however, is now made up on the subject, for having received ordination at Easter, I have been so fortunate as to be distinguished by the patronage of the Right Honourable Lady Catherine de Bourgh, widow of Sir Lewis de Bourgh, whose bounty and beneficence has preferred me to the valuable rectory of this parish, where it shall be my earnest endeavour to demean myself with grateful respect towards her ladyship, and be ever ready to perform those rites and ceremonies which are instituted by the Church of England.";

    double test_5_weights[167][167] =
    {

    /*                            T      d      s      b      y      a      m      l      h      f      a      g      m      m      u      a      s      I      h      h      t      m      t      l      h      I      h      f      w      t      h      t      b      b      f      s      t      I      w      k      b      b      m      o      d      f      l      i      m      s      d      t      h      m      f      m      t      b      o      g      t      w      a      w      w      i      h      a      p      h      t      b      a      v      T      M      B      M      m      h      i      n      m      u      o      t      s      f      h      r      o      a      E      I      h      b      s      f      a      t      b      d      b      t      p      o      t      R      H      L      C      d      B      w      o      S      L      d      B      w      b      a      b      h      p      m      t      t      v      r      o      t      p      w      i      s      b      m      e      e      t      d      m      w      g      r      t      h      l      a      b      e      r      t      p      t      r      a      c      w      a      i      b      t      C      o      E   */
    /*                            h      i      u      e      o      n      y      a      o      a      l      a      e      u      n      n      i             a      a      h      i      o      o      i             a      r      i      o      e      h      r      u      o      o      i             a      e      a      y      y      w      o      e      e      t      i      e      i      o      i      e      o      e      o      e      n      o      e      i      n      i      h      t      a      l      l      i      o      e      t      a      h      r      e      y      i      o      s      o      a      p      n      h      u      o      a      e      r      t      a             a      e      o      o      s      o      e      i      y      h      a      f      h      i      o      a      a      e      o      i      f      i      e      e      o      h      o      n      e      a      r      e      o      h      a      e      f      h      a      h      t      h      e      y      a      n      o      e      y      i      r      e      o      e      a      n      e      v      e      o      e      h      i      n      e      h      r      n      y      h      h      f      n   */
    /*                            e      s      b      t      u      d             t      n      t      w      v             c      e      d      n      |      v      d      e      s             s      m      |      v      e      s             a      e      e      t      r      m      m      |      s      p      c                    n      u      a      s             g      e      s             s      m      r                                  o      r      t      y      t      o             d      w      e      m                           r      e      s      n             n      w             w      d                    e      b      r      v      c      d             s      |      v      e             r                           s             e      t             e      g      n      d      t             u      d             r      w             u      o      u      d      n      s      e                    e      l      c             i      r      e             a                    r      d             m      s      t      a      s      w      r      d      d             e      a             r      o      t      d      r      i      e      s             e      u             g   */
    /*                                   a      s      w      r             |      e      o      h      a      e      |      h      a             c      |      e                    f      |      e             |      e      q      h      |      l             a                    e      e      |             t      k      |      |             b      r      t      |      h      m      r      |             o             |      |      |      |      d      m      h      o      h      m      |             a      a             |      |      |      i      r             n      |      d      e      |             e      |      |             j             i      e      i      |      t      |      e      n      |      t      |      |      |      t      |             r      |             h      o      y      h      |      r      o      |             i      |      r      s      n             e             f      |      |             u      t      |      s      i      r      |      l      |      |      n      e      |      e      e      h      t      p      a             y             |      r      d      |      f      s      e             e      c             t      |             r      |      l   */
    /*                            |      g      i      e      s      |      |             u      e      y             |             s      |      e      |             |      |      o      |             |      |             u      e      |             |      c      |      |                    |      |                    |      |      |      t      i             |      t             e      |      |      r      |      |      |      |      |             s             n                    |      |      y      s      |      |      |      |      a      e      |      e      |             v      |      |             |      |      |      e      |      n      i      n      |      e      |                    |      u      |      |      |      i      |      |      o      |      |      t      u             e      |      g      w      |      |      s      |      g      e      t      |      f      |      e      |      |      |      a      o      |             s      e      |      l      |      |      e      a      |      a      l             e      e      r      |      s      |      |             y      |      o      e      s      |      m      h      |      i      |      |      c      |      a   */
    /*                            |      r      s      e      e      |      |      |      r      r      s      |      |      |      i      |             |      |      |      |      r      |      |      |      |      |      e      d      |      |      |      h      |      |      |      |      |      |      |      |      |      |      |      s      n      |      |             |      s      |      |      y      |      |      |      |      |      |             |      e      |      |      |      |      s      e      |      |      |      |      n             |      t      |      |      e      |      |      |      |      |      |      c      |      g      v      a      |      r      |      |      |      |      n      |      |      |      n      |      |      n      |      |             r      |      r      |      h             |      |             |      h             y      |      i      |      r      |      |      |      b      r      |      |      h             |             |      |      s      v      |      n      f      |      f      c      d      |      h      |      |      |             |      r                    |      o             |      t      |      |      h      |      n   */
    /*                            |      e      t      n      l      |      |      |      e                    |      |      |      n      |      |      |      |      |      |      t      |      |      |      |      |      n             |      |      |             |      |      |      |      |      |      |      |      |      |      |             g      |      |      |      |      p      |      |             |      |      |      |      |      |      |      |             |      |      |      |             d      |      |      |      |      c      |      |             |      |      r      |      |      |      |      |      |      t      |             e      t      |             |      |      |      |      a      |      |      |      g      |      |      a      |      |      |      a      |      i      |             |      |      |      |      |             |             |      c      |      r      |      |      |      l      y      |      |             |      |      |      |      |      t      o      |                    |      u      t      s      |      i      |      |      |      |      |      m      |      |      |      n      |      |      u      |      |             |      d   */
    /*                            |      e      i             f      |      |      |      d      |      |      |      |      |      e      |      |      |      |      |      |      u      |      |      |      |      |      t      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |             |      |      |      |      e      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |             |      |      |      |      e      |      |      |      |      |             |      |      |      |      |      |             |      |      d      i      |      |      |      |      |      |      t      |      |      |      u      |      |      g      |      |      |      b      |      n      |      |      |      |      |      |      |      |      |      |      |      e      |      e      |      |      |      e             |      |      |      |      |      |      |      |             u      |      |      |      |      l                    |      p      |      |      |      |      |             |      |      |      i      |      |      t      |      |      |      |          */
    /*                            |      m      n      |             |      |      |             |      |      |      |      |      s      |      |      |      |      |      |      n      |      |      |      |      |      l      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      c      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |             |      |      |      |      |      |      |      |      |      |      |      |      |      |      |             o      |      |      |      |      |      |      e      |      |      |      i      |      |      e      |      |      |      l      |      e      |      |      |      |      |      |      |      |      |      |      |      n      |      d      |      |      |             |      |      |      |      |      |      |      |      |      |      r      |      |      |      |             |      |      |             |      |      |      |      |      |      |      |      |      e      |      |      e      |      |      |      |      |   */
    /*                            |      e      g      |      |      |      |      |      |      |      |      |      |      |      s      |      |      |      |      |      |      e      |      |      |      |      |      y      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      t      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      n      |      |      |      |      |      |             |      |      |      s      |      |             |      |      |      e      |             |      |      |      |      |      |      |      |      |      |      |      c      |             |      |      |      |      |      |      |      |      |      |      |      |      |      |             |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      s      |      |      d      |      |      |      |      |   */
    /*                            |      n             |      |      |      |      |      |      |      |      |      |      |             |      |      |      |      |      |             |      |      |      |      |             |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      f      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |             |      |      |      |      |      |      |      |      |      |      h      |      |      |      |      |      |             |      |      |      |      |      |      |      |      |      |      |      |      |      e      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |             |      |             |      |      |      |      |   */
    /*                            |      t      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      u      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      e      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |             |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |   */
    /*                            |             |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      l      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      d      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |   */
    /*                            |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |             |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |             |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |   */
    /*                            |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |   */
    /* The                 */ {  0.00, -8.10, -2.89, -0.60,  1.32, -0.12,  0.63, -1.22, -0.68, -0.81,  0.19, -0.84,  1.38,  0.07, -1.46, -0.12, -0.70,  1.01,  0.33, -0.18, -0.11, -1.81,  0.34, -0.18,  0.39,  1.01,  0.33, -0.23, -0.59,  0.34, -3.19, -0.11, -1.47,  0.48,  0.50,  0.18, -0.36,  1.01, -0.75,  0.29, -1.34, -0.26,  0.63,  0.71, -2.24, -1.23, -2.08,  0.23,  0.52, -0.50, -2.46,  0.34, -0.13, -1.16,  0.50,  1.38,  0.34,  0.21, -0.17,  0.05,  1.00,  0.12,  0.54,  0.12,  0.93,  0.23, -0.18,  0.19, -1.13,  0.39,  0.34,  0.21,  0.01, -1.91, -1.69, -0.44, -0.16, -1.83,  0.03, -1.30,  0.05, -1.06, -0.22, -0.16, -0.17, -0.11, -0.28,  0.50, -0.59, -0.44, -1.61,  0.01, -1.18,  1.01,  0.33,  0.04,  0.26, -0.75,  0.19,  0.34,  0.21, -0.11, -0.26, -0.11, -0.54, -0.37, -0.11, -1.36, -1.34,  0.02,  0.14,  0.35,  0.30, -1.97, -0.37, -0.11, -0.58,  0.35,  0.30,  0.16, -1.19, -0.12, -1.17, -0.16, -0.76,  1.38,  0.34, -0.11, -1.35, -1.09, -0.37, -0.70, -1.03, -0.38,  0.23,  0.40,  0.21,  0.63, -1.10, -0.25,  0.34, -0.96,  2.44,  0.12,  0.33, -0.68, -0.29,  0.55, -0.21, -0.12,  0.21,  1.11,  0.58,  0.34, -0.47, -0.54, -0.81, -0.12, -0.80, -0.23,  0.15, -0.77, -0.26, -0.11, -0.74, -0.37, -0.37 },
    /* disagreement        */ {  0.00,  0.00, -8.34, -3.24, -4.12,  0.12, -2.31, -5.08, -6.13, -2.93, -3.67, -3.48, -2.84, -1.21, -6.90,  0.12, -3.56, -1.44, -1.61, -0.31, -0.08, -6.26, -0.52, -5.63, -0.70, -1.44, -1.61, -4.67, -4.04, -0.52, -8.64, -0.08, -6.92, -0.33, -0.98, -1.56, -1.63, -1.44,  1.13, -5.16, -4.20, -1.53, -2.31, -1.73, -7.69, -6.67, -6.52, -0.78, -1.34, -5.95, -7.90, -0.52,  0.98, -6.60, -0.98, -2.84, -0.52, -1.49, -0.97, -2.07, -4.45, -0.94, -4.91, -0.94, -2.52, -0.78, -0.31, -3.67, -4.25, -0.70, -0.52, -1.49, -0.82, -7.36, -7.14, -1.72, -2.02, -7.28, -3.41, -3.57, -0.69, -2.11, -2.50, -2.43, -0.97, -0.08, -2.92, -0.98, -2.87, -3.56, -7.05, -0.82, -6.63, -1.44, -1.61, -0.45, -0.27, -5.20,  0.87, -0.52, -1.49, -5.56, -1.53, -0.08, -5.99,  0.54, -0.08, -6.80, -6.79, -2.62, -2.98, -4.51, -4.56, -6.42,  0.54, -3.97, -6.03, -4.51, -4.56, -2.96, -6.64,  0.12, -6.61, -2.29, -6.21, -2.84, -0.52, -0.08, -5.21, -6.53,  0.54, -1.50, -5.47, -2.82, -0.78, -2.72, -1.49, -2.31, -4.96, -4.70, -0.52, -6.41, -3.00, -0.94, -5.12, -4.54, -2.93,  1.79, -4.66,  0.12, -1.49, -2.34, -4.86, -0.52, -5.92, -3.17, -6.26,  0.12, -6.24, -0.06, -1.83, -6.21, -1.53, -0.08, -6.19,  0.54, -5.82 },
    /* subsisting          */ {  0.00,  0.00,  0.00, -4.22, -4.11,  0.14, -2.29, -5.06, -6.11, -2.91, -3.65, -3.46, -2.82, -1.19, -6.88,  0.14, -3.54, -1.42, -1.59, -0.29, -0.25, -6.24, -0.50, -5.61, -0.68, -1.42, -1.59, -4.66, -4.02, -0.50, -8.62, -0.25, -6.90, -0.31, -0.96, -1.55, -1.61, -1.42,  1.15, -5.14, -4.19, -1.51, -2.29, -1.72, -7.67, -6.66, -6.51, -0.76, -1.32, -5.93, -7.88, -0.50,  0.99, -6.59, -0.96, -2.82, -0.50, -1.47, -0.95, -2.06, -4.43, -0.92, -4.89, -0.92, -2.50, -0.76, -0.29, -3.65, -4.24, -0.68, -0.50, -1.47, -0.80, -7.34, -7.12, -1.70, -2.01, -7.26, -3.39, -3.55, -0.67, -2.10, -2.48, -2.42, -0.95, -0.25, -2.90, -0.96, -2.85, -3.55, -7.04, -0.80, -6.61, -1.42, -1.59, -0.43, -0.26, -5.18,  0.89, -0.50, -1.47, -5.54, -1.51, -0.25, -5.97,  0.56, -0.25, -6.79, -6.77, -2.60, -2.96, -4.49, -4.54, -6.40,  0.56, -3.95, -6.01, -4.49, -4.54, -2.95, -6.62,  0.14, -6.60, -2.27, -6.19, -2.82, -0.50, -0.25, -5.20, -6.52,  0.56, -1.49, -5.46, -2.80, -0.76, -2.71, -1.47, -2.29, -4.95, -4.68, -0.50, -6.39, -2.98, -0.92, -5.10, -4.52, -2.91,  1.81, -4.64,  0.14, -1.47, -2.32, -4.84, -0.50, -5.90, -3.16, -6.24,  0.14, -6.22, -0.05, -1.82, -6.20, -1.51, -0.25, -6.17,  0.56, -5.80 },
    /* between             */ {  0.00,  0.00,  0.00,  0.00, -1.28, -0.57,  0.53, -3.83, -3.29, -1.09, -1.41, -0.64, -0.41, -0.37, -4.06, -0.57, -0.72,  0.60,  0.81,  0.21, -0.56, -3.42, -0.21, -2.79,  0.14,  0.60,  0.81, -1.83, -1.19, -0.21, -5.80, -0.56, -4.08,  0.19, -0.36,  0.28, -0.79,  0.60, -0.20, -2.32, -1.36, -0.43,  0.53, -0.48, -4.85, -3.83, -3.68, -0.16, -0.08, -3.10, -5.06, -0.21, -0.51, -3.76, -0.36, -0.41, -0.21, -0.41,  0.06, -0.82, -1.61,  0.17, -2.07,  0.17, -1.26, -0.16,  0.21, -1.41, -1.41,  0.14, -0.21, -0.41, -0.30, -4.51, -4.30, -1.69, -0.77, -4.44, -1.57, -0.73, -0.17, -1.59,  0.34, -0.59,  0.06, -0.56, -1.08, -0.36, -0.03, -2.31, -4.21, -0.30, -3.79,  0.60,  0.81,  0.80,  0.57, -3.36,  0.39, -0.21, -0.41, -2.72, -0.43, -0.56, -3.15,  0.58, -0.56, -3.96, -3.95, -0.78, -1.14, -2.67, -2.30, -3.58,  0.58, -1.13, -3.19, -2.67, -2.30, -2.12, -3.80, -0.57, -3.77, -1.03, -3.36, -0.41, -0.21, -0.56, -2.37, -3.69,  0.58,  0.34, -2.63, -0.98, -0.16,  0.12, -0.41,  0.53, -2.12, -1.86, -0.21, -3.56, -0.16,  0.17, -2.28, -1.70, -0.09,  0.04, -1.82, -0.57, -0.41,  0.51, -2.02, -0.21, -3.08, -1.33, -3.42, -0.57, -3.40,  0.19, -0.99, -3.37, -0.43, -0.56, -3.35,  0.58, -2.98 },
    /* yourself            */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.15, -1.78, -3.13, -4.18, -0.98, -2.72, -1.53, -1.89, -0.26, -4.95,  0.15, -1.61, -0.81, -0.40,  1.06,  0.43, -4.31, -0.31, -3.68, -0.56, -0.81, -0.40, -2.73, -2.09, -0.31, -6.69,  0.43, -4.97,  0.62, -0.25,  0.39, -0.68, -0.81,  3.08, -3.21, -2.25, -1.00, -1.78, -1.37, -5.74, -4.73, -4.57,  0.17,  0.61, -4.00, -5.95, -0.31,  0.34, -4.65, -0.25, -1.89, -0.31, -0.54, -0.02, -0.13, -2.50,  0.27, -4.54,  0.27, -1.57,  0.17,  1.06, -2.72, -2.30, -0.56, -0.31, -0.54, -0.19, -5.41, -5.19, -1.36, -2.08, -5.33, -1.46, -1.62, -1.06, -1.16, -0.55, -1.48, -0.02,  0.43, -1.97, -0.25, -0.92, -1.61, -5.10, -0.19, -4.68, -0.81, -0.40,  0.50, -1.13, -3.25,  0.50, -0.31, -0.54, -3.61, -1.00,  0.43, -4.04, -0.09,  0.43, -4.85, -4.84, -0.67, -1.03, -2.56, -2.61, -4.47, -0.09, -2.02, -4.08, -2.56, -2.61, -1.01, -4.69,  0.15, -4.67, -0.34, -4.26, -1.89, -0.31,  0.43, -3.27, -4.59, -0.09, -1.56, -3.52, -0.87,  0.17, -2.36, -0.54, -1.78, -3.02, -3.75, -0.31, -4.46, -2.05,  0.27, -4.17, -2.59, -1.98,  1.41, -2.71,  0.15, -0.54, -2.39, -2.91, -0.31, -3.97, -1.23, -4.31,  0.15, -4.29, -0.44, -1.47, -4.27, -1.00,  0.43, -4.24, -0.09, -3.87 },
    /* and                 */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.56,  0.03, -0.37,  0.21, -0.12, -0.53,  0.46,  0.08,  0.08,  0.31,  0.15,  0.10,  0.15, -0.07, -0.12,  0.72,  0.01,  0.13,  0.14,  0.10,  0.15, -0.11, -0.17,  0.01, -1.07, -0.12, -0.35,  0.51,  0.14, -0.05,  0.01,  0.10, -0.12,  0.24, -0.39, -0.04,  0.56,  0.03, -0.12, -0.91,  0.05,  0.16,  0.04,  0.30, -0.33,  0.01, -0.03, -0.03,  0.14,  0.46,  0.01,  0.20,  0.10, -0.12,  0.21, -0.13,  0.66, -0.13, -0.04,  0.16, -0.07, -0.12, -0.27,  0.14,  0.01,  0.20, -0.12,  0.21,  0.43, -0.46,  0.10,  0.29, -0.24,  0.54,  0.54,  0.21, -0.04, -0.09,  0.10, -0.12,  0.33,  0.14,  0.03, -0.12,  0.52, -0.12,  0.36,  0.10,  0.15,  0.19,  0.04,  0.37, -0.11,  0.01,  0.20,  0.20, -0.04, -0.12,  0.26,  0.03, -0.12,  0.76,  0.78, -0.09,  0.16, -0.11, -0.12,  0.57,  0.03, -0.26, -0.05, -0.11, -0.12, -0.50,  0.93,  0.31,  0.37,  0.42,  0.36,  0.46,  0.01, -0.12,  0.18,  0.45,  0.03,  0.71,  0.77, -0.09,  0.16, -0.01,  0.20,  0.56, -0.10, -0.38,  0.01,  0.58,  0.36, -0.13, -0.46,  0.70, -0.29, -0.15, -0.26,  0.31,  0.20,  0.06,  0.12,  0.01,  0.65,  0.15,  0.31,  0.31,  0.01,  0.04,  0.16,  0.03, -0.04, -0.12,  0.06,  0.03,  0.43 },
    /* my                  */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -0.41, -2.04, -1.65, -0.45,  0.61, -1.46, -0.18, -1.23,  0.25,  0.11, -1.64, -0.40,  1.08,  0.57, -1.59,  0.05, -1.54,  0.22, -1.64, -0.40,  1.00,  0.05,  0.05, -2.97,  0.57, -1.24, -0.01,  0.05,  0.94, -0.05, -1.64,  1.16, -0.48, -0.53,  0.11, -1.70, -1.65, -3.60, -2.00, -1.85, -0.01,  1.16, -1.86, -3.23,  0.05,  1.48, -2.51,  0.05, -1.46,  0.05, -0.34,  0.15, -0.40,  0.23,  0.28, -1.56,  0.28,  1.16, -0.01,  1.08, -0.45, -0.58,  0.22,  0.05, -0.34,  0.40, -2.68, -2.46,  0.25, -0.16, -2.61, -0.06,  0.10, -1.27, -0.25,  0.01, -0.35,  0.15,  0.57,  0.43,  0.05, -0.78, -0.21, -2.38,  0.40, -1.95, -1.64, -0.40,  0.09, -0.36, -0.53,  0.12,  0.05, -0.34, -0.88,  0.11,  0.57, -2.32,  0.27,  0.57, -2.13, -2.12,  0.47,  0.11, -0.84, -0.89, -1.74,  0.27, -0.62, -1.36, -0.84, -0.89,  0.39, -1.97,  0.25, -1.94, -1.07, -1.53, -1.46,  0.05,  0.57, -1.54, -1.86,  0.27, -0.64, -0.80,  0.04, -0.01, -1.44, -0.34, -1.70, -0.88, -1.02,  0.05, -2.32, -1.50,  0.28, -1.03, -0.45, -0.42,  1.63, -1.57,  0.25, -0.34, -0.57, -1.19,  0.05, -2.24, -0.31, -2.17,  0.25, -2.15,  0.75, -1.72, -2.13,  0.11,  0.57, -2.10,  0.27, -2.14 },
    /* late                */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -4.78, -1.59, -2.32, -2.14, -2.72, -0.86, -5.56,  0.21, -2.21, -0.90, -0.68, -0.77, -0.17, -4.92, -0.25, -4.28, -0.67, -0.90, -0.68, -3.33, -2.69, -0.25, -7.29, -0.17, -5.57,  0.02,  0.37, -1.22, -1.29, -0.90,  0.89, -3.81, -2.86, -1.41, -0.38, -1.97, -6.34, -5.33, -5.18, -0.65, -1.58, -4.60, -6.56, -0.25, -0.68, -5.26,  0.37, -2.72, -0.25, -1.41, -0.95, -0.73, -3.10, -0.59, -3.56, -0.59, -1.17, -0.65, -0.77, -2.32, -2.91, -0.67, -0.25, -1.41, -0.47, -6.01, -5.79, -0.38, -0.68, -5.93, -2.07, -2.23,  0.65, -2.35, -1.15, -2.09, -0.95, -0.17, -1.58,  0.37, -1.53, -2.22, -5.71, -0.47, -5.28, -0.90, -0.68, -0.69,  1.07, -3.86,  1.22, -0.25, -1.41, -4.21, -1.41, -0.17, -4.65,  0.56, -0.17, -5.46, -5.45, -1.27, -1.64, -3.17, -3.21, -5.07,  0.56, -2.63, -4.68, -3.17, -3.21, -1.62, -5.29,  0.21, -5.27, -1.94, -4.86, -2.72, -0.25, -0.17, -3.87, -5.19,  0.56, -1.16, -4.13, -1.48, -0.65, -1.38, -1.41, -0.38, -3.62, -3.35, -0.25, -5.06, -1.66, -0.59, -3.77, -3.20, -1.58,  0.81, -3.31,  0.21, -1.41, -2.58, -3.52, -0.25, -4.57, -1.83, -4.92,  0.21, -4.90,  1.28, -1.49, -4.87, -1.41, -0.17, -4.84,  0.56, -4.47 },
    /* honoured            */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -2.78, -2.51, -2.33, -2.10, -0.05, -5.75,  0.43, -2.41, -1.45, -1.20,  0.26, -0.29, -5.11, -0.10, -5.47, -0.54, -1.45, -1.20, -3.52, -2.88, -0.10, -7.48, -0.29, -5.76,  0.83, -1.24, -1.41, -0.48, -1.45,  1.28, -4.00, -3.05, -0.79, -1.57, -0.58, -6.53, -5.52, -5.37,  0.38, -1.19, -4.79, -6.75, -0.10,  1.13, -5.45, -1.24, -2.10, -0.10, -0.82, -0.40, -0.92, -3.29, -1.20, -3.76, -1.20, -1.36,  0.38,  0.26, -2.51, -3.10, -0.54, -0.10, -0.82,  0.34, -6.20, -5.98, -0.57, -0.87, -6.12, -2.26, -4.00, -1.12, -0.96, -1.34, -1.28, -0.40, -0.29, -1.77, -1.24, -1.72, -2.41, -5.90,  0.34, -5.47, -1.45, -1.20, -0.30, -0.12, -4.05, -0.56, -0.10, -0.82, -4.40, -0.79, -0.29, -4.84,  0.37, -0.29, -5.65, -5.64, -1.46, -1.83, -3.36, -3.40, -5.26,  0.37, -2.82, -4.88, -3.36, -3.40, -1.81, -5.48,  0.43, -5.46, -1.13, -5.05, -2.10, -0.10, -0.29, -4.06, -5.38,  0.37, -1.35, -4.32, -1.67,  0.38, -1.57, -0.82, -1.57, -3.81, -3.54, -0.10, -5.25, -2.85, -1.20, -3.97, -3.39, -1.77,  0.36, -4.51,  0.43, -0.82, -2.18, -3.71, -0.10, -4.76, -2.02, -5.11,  0.43, -5.09, -0.49, -0.68, -5.06, -0.79, -0.29, -5.03,  0.37, -4.66 },
    /* father              */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -1.96, -0.97, -0.91, -0.02, -3.39, -0.21, -1.05, -0.39, -0.32, -0.55, -0.03, -2.75, -0.12, -2.12, -0.71, -0.39, -0.32, -1.16, -0.53, -0.12, -5.13, -0.03, -3.41,  0.01,  0.21, -0.05,  0.29, -0.39,  0.05, -3.23, -1.69,  0.39, -0.02, -0.22, -4.18, -3.16, -4.01, -0.07, -0.64, -2.43, -4.39, -0.12, -0.42, -3.09,  0.21, -0.91, -0.12, -0.79,  0.37, -1.15, -1.94,  0.07, -1.40,  0.07, -0.59, -0.07, -0.55, -1.96, -0.74, -0.71, -0.12, -0.79, -0.21, -3.85, -3.63,  0.79, -0.10, -3.77, -0.90, -2.06, -0.35,  0.40,  1.01, -1.51,  0.37, -0.03,  0.59,  0.21, -0.36, -1.05, -3.54, -0.21, -3.12, -0.39, -0.32, -0.11, -0.35, -1.69,  0.58, -0.12, -0.79, -2.05,  0.39, -0.03, -3.48,  0.22, -0.03, -3.29, -3.28,  0.89,  0.53, -1.00, -1.05, -2.91,  0.22, -0.46, -2.52, -1.00, -1.05, -2.04, -3.13, -0.21, -3.10, -0.78, -2.70, -0.91, -0.12, -0.03, -2.70, -3.02,  0.22,  0.01, -1.96, -0.31, -0.07, -0.21, -0.79, -0.02, -1.45, -1.19, -0.12, -2.90, -1.08,  0.07, -1.61, -1.03, -0.42,  0.44, -1.15, -0.21, -0.79, -0.83, -1.35, -0.12, -2.41,  0.34, -2.75, -0.21, -2.73, -0.01, -0.32, -2.70,  0.39, -0.03, -2.68,  0.22, -2.31 },
    /* always              */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.24, -0.85,  0.19, -3.18, -0.06,  0.17, -0.17, -0.21,  0.25,  0.03, -2.54, -0.18, -1.90, -0.73, -0.17, -0.21, -0.95, -1.31, -0.18, -4.91,  0.03, -4.19, -0.06, -0.19, -0.16,  2.09, -0.17,  0.21, -2.43, -0.48, -0.03, -0.00, -1.01, -3.96, -2.95, -2.80, -0.17,  0.80, -2.22, -4.18, -0.18, -0.00, -2.88, -0.19, -0.85, -0.18, -0.57,  0.29, -1.52, -1.72,  0.20, -1.18,  0.20, -0.38, -0.17,  0.25, -1.75, -2.11, -0.73, -0.18, -0.57, -0.18, -4.63, -4.41,  0.00,  0.70, -4.55, -1.69, -1.43, -0.29, -1.39, -1.09, -1.29,  0.29,  0.03, -1.52, -0.19, -0.15, -0.84, -4.33, -0.18, -3.90, -0.17, -0.21,  0.10, -0.14, -2.48,  0.43, -0.18, -0.57, -2.83, -0.03,  0.03, -3.27,  0.08,  0.03, -4.08, -4.07,  0.11, -0.26, -2.11, -2.16, -3.69,  0.08, -1.25, -3.30, -2.11, -2.16, -0.82, -3.91, -0.06, -3.89, -0.88, -3.48, -0.85, -0.18,  0.03, -2.49, -3.81,  0.08,  0.64, -3.33, -0.10, -0.17, -0.00, -0.57, -0.00, -2.24, -1.97, -0.18, -3.68, -0.28,  0.20, -2.98, -2.40, -1.20,  0.51, -1.93, -0.06, -0.57, -0.93, -2.14, -0.18, -3.19, -1.45, -3.54, -0.06, -3.52, -0.04, -1.28, -3.49, -0.03,  0.03, -3.46,  0.08, -3.09 },
    /* gave                */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -0.84,  0.20, -3.90,  0.32, -1.56,  0.98,  0.97,  0.23, -0.32, -3.26, -0.28, -2.63, -0.02,  0.98,  0.97, -1.68, -2.62, -0.28, -5.64, -0.32, -3.92,  0.09, -0.09, -0.89, -0.96,  0.98,  0.13, -2.16, -1.21, -0.41,  0.69,  1.26, -4.69, -3.68, -3.52, -0.19,  0.66, -2.95, -4.90, -0.28, -0.42, -3.60, -0.09, -0.84, -0.28,  0.02,  0.22,  0.92, -1.45,  0.32, -1.91,  0.32,  0.48, -0.19,  0.23,  0.33, -2.25, -0.02, -0.28,  0.02, -0.52, -4.36, -4.14,  1.28,  0.97, -4.28, -0.41, -0.57,  1.31,  0.88, -1.08, -1.02,  0.22, -0.32,  0.08, -0.09, -0.87, -1.57, -4.06, -0.52, -3.63,  0.98,  0.97,  0.55, -0.45, -2.20, -0.45, -0.28,  0.02, -2.56, -0.41, -0.32, -2.99, -0.22, -0.32, -3.81, -3.79,  0.38,  0.02, -1.51, -1.56, -3.42, -0.22, -0.97, -3.03, -1.51, -1.56, -0.97, -3.64,  0.32, -3.62,  0.71, -3.21, -0.84, -0.28, -0.32, -2.22, -3.54, -0.22, -0.09, -2.48, -0.82, -0.19,  0.27,  0.02,  0.69, -1.97, -1.70, -0.28, -3.41, -1.00,  0.32, -2.12, -1.54,  0.07, -0.57, -1.66,  0.32,  0.02, -0.34, -1.86, -0.28, -2.92, -0.18, -3.26,  0.32, -3.24, -0.65,  1.16, -3.22, -0.41, -0.32, -3.19, -0.22, -2.82 },
    /* me                  */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -0.43, -1.88,  0.25,  0.46, -1.64, -0.86,  1.55,  0.34, -1.24, -0.33, -1.60,  0.12, -1.64, -0.86,  0.35,  0.99, -0.33, -3.62,  0.34, -1.89, -0.11, -0.69,  0.29,  0.07, -1.64,  1.11, -1.13,  0.82, -0.01, -2.06, -0.17, -2.66, -1.65, -1.50, -0.25,  0.36, -0.92, -2.88, -0.33,  0.91, -1.58, -0.69, -1.36, -0.33, -0.27, -0.34, -0.37, -1.42,  0.50, -0.89,  0.50,  0.92, -0.25,  1.55, -0.23, -0.81,  0.12, -0.33, -0.27,  0.21, -3.33, -3.11,  0.30,  0.41, -3.26,  0.03, -1.36, -0.95, -0.55,  0.94,  0.00, -0.34,  0.34, -0.70, -0.69, -0.85,  0.46, -3.03,  0.21, -2.60, -1.64, -0.86,  0.40, -0.57, -1.76,  0.01, -0.33, -0.27, -1.53, -0.01,  0.34, -1.97,  0.24,  0.34, -2.78, -2.77, -0.76, -0.77, -1.07, -0.86, -2.39,  0.24,  0.05, -2.01, -1.07, -0.86,  0.06, -2.62,  0.25, -2.59, -0.07, -2.18, -1.36, -0.33,  0.34, -2.19, -3.10,  0.24, -1.13, -2.04,  0.62, -0.25, -2.02, -0.27, -2.06, -1.53, -1.67, -0.33, -2.97, -1.56,  0.50, -1.68, -2.52, -0.23,  2.06, -1.22,  0.25, -0.27, -0.63, -1.42, -0.33, -3.21, -0.47, -2.82,  0.25, -2.80,  0.15, -0.81, -2.78, -0.01,  0.34, -2.75,  0.24, -2.38 },
    /* much                */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -2.04,  0.09, -1.28, -0.25,  0.08,  0.23, -0.01, -1.40, -0.12, -0.76, -0.12, -0.25,  0.08,  0.19, -0.17, -0.12, -3.78, -0.01, -2.05, -0.32, -0.51, -0.51, -0.23, -0.25,  0.26, -1.30, -0.34, -0.25,  0.14, -0.46, -2.83, -1.81, -1.66, -0.08,  0.35, -1.08, -3.04, -0.12, -0.47, -1.74, -0.51, -0.30, -0.12, -0.26,  0.14, -0.38,  0.41, -0.19, -1.05, -0.19,  0.76, -0.08,  0.23, -0.39, -1.98, -0.12, -0.12, -0.26, -0.13, -2.49, -2.27, -0.18,  0.25, -2.42,  0.45, -0.30,  0.17,  0.75, -0.44,  0.43,  0.14, -0.01, -0.38, -0.51, -0.33,  0.30, -2.19, -0.13, -1.76, -0.25,  0.08,  0.50,  0.68, -0.34, -0.95, -0.12, -0.26, -0.69, -0.25, -0.01, -1.13, -0.02, -0.01, -1.94, -1.93, -0.08,  0.88, -0.24, -0.28, -1.55, -0.02, -1.69, -2.17, -0.24, -0.28,  0.90, -1.78,  0.09, -1.75, -0.75, -1.34, -0.30, -0.12, -0.01, -0.35, -1.67, -0.02,  0.04, -1.61,  0.04, -0.08, -0.86, -0.26,  0.14, -1.10, -0.83, -0.12, -1.54, -0.14, -0.19, -0.26,  0.32, -0.65,  0.22, -1.80,  0.09, -0.26, -1.06, -0.00, -0.12, -1.05,  1.69, -1.40,  0.09, -1.38,  0.41, -0.43, -1.35, -0.25, -0.01, -1.33, -0.02, -0.96 },
    /* uneasiness          */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.75, -2.93, -0.81, -0.98, -1.49,  0.03, -5.63, -0.53, -5.00, -1.07, -0.81, -0.98, -4.05, -3.41, -0.53, -8.01,  0.03, -6.29,  0.30, -0.35, -0.93, -2.00, -0.81,  0.17, -4.53, -3.57, -1.32, -1.68, -2.69, -7.06, -6.05, -5.89, -0.56, -0.71, -5.32, -7.27, -0.53,  1.60, -5.97, -0.35, -1.63, -0.53, -1.35, -1.34, -1.45, -3.82, -1.05, -4.28, -1.05, -2.89, -0.56, -1.49, -2.04, -3.62, -1.07, -0.53, -1.35, -0.19, -6.73, -6.51, -2.09, -1.40, -6.65, -2.78, -2.94, -0.06, -1.49, -1.87, -1.81, -1.34,  0.03, -2.29, -0.35, -2.24, -3.94, -6.43, -0.19, -6.00, -0.81, -0.98, -0.82,  0.35, -4.57,  0.50, -0.53, -1.35, -4.93, -1.32,  0.03, -5.36,  0.36,  0.03, -6.18, -6.16, -1.99, -2.35, -3.88, -3.93, -5.79,  0.36, -3.34, -5.40, -3.88, -3.93, -2.33, -6.01,  0.75, -5.99, -1.66, -5.58, -1.63, -0.53,  0.03, -4.59, -5.91,  0.36, -1.88, -4.85, -2.19, -0.56, -2.10, -1.35, -1.68, -4.34, -4.07, -0.53, -5.78, -2.37, -1.05, -4.49, -3.91, -3.30,  0.42, -4.03,  0.75, -1.35, -1.71, -4.23, -0.53, -5.29, -2.55, -5.63,  0.75, -5.61, -1.02, -1.21, -5.59, -1.32,  0.03, -5.56,  0.36, -5.19 },
    /* and                 */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.15,  0.10,  0.15, -0.07, -0.12,  0.72,  0.01,  0.13,  0.14,  0.10,  0.15, -0.11, -0.17,  0.01, -1.07, -0.12, -0.35,  0.51,  0.14, -0.05,  0.01,  0.10, -0.12,  0.24, -0.39, -0.04,  0.56,  0.03, -0.12, -0.91,  0.05,  0.16,  0.04,  0.30, -0.33,  0.01, -0.03, -0.03,  0.14,  0.46,  0.01,  0.20,  0.10, -0.12,  0.21, -0.13,  0.66, -0.13, -0.04,  0.16, -0.07, -0.12, -0.27,  0.14,  0.01,  0.20, -0.12,  0.21,  0.43, -0.46,  0.10,  0.29, -0.24,  0.54,  0.54,  0.21, -0.04, -0.09,  0.10, -0.12,  0.33,  0.14,  0.03, -0.12,  0.52, -0.12,  0.36,  0.10,  0.15,  0.19,  0.04,  0.37, -0.11,  0.01,  0.20,  0.20, -0.04, -0.12,  0.26,  0.03, -0.12,  0.76,  0.78, -0.09,  0.16, -0.11, -0.12,  0.57,  0.03, -0.26, -0.05, -0.11, -0.12, -0.50,  0.93,  0.31,  0.37,  0.42,  0.36,  0.46,  0.01, -0.12,  0.18,  0.45,  0.03,  0.71,  0.77, -0.09,  0.16, -0.01,  0.20,  0.56, -0.10, -0.38,  0.01,  0.58,  0.36, -0.13, -0.46,  0.70, -0.29, -0.15, -0.26,  0.31,  0.20,  0.06,  0.12,  0.01,  0.65,  0.15,  0.31,  0.31,  0.01,  0.04,  0.16,  0.03, -0.04, -0.12,  0.06,  0.03,  0.43 },
    /* since               */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -1.22, -0.81, -0.85, -0.01, -3.72,  0.29, -3.08,  0.52, -1.22, -0.81, -2.13, -1.49,  0.29, -6.10, -0.01, -4.37, -0.11,  1.57, -0.02, -0.09, -1.22, -0.03, -2.62, -1.66,  0.01, -0.18, -0.19, -5.15, -4.13, -3.98, -0.35, -0.80, -3.40, -5.36,  0.29,  1.20, -4.06,  1.57,  0.29,  0.29, -0.63, -0.24,  0.47, -2.90, -0.51, -2.37, -0.51,  0.03, -0.35, -0.85, -0.13, -1.71,  0.52,  0.29, -0.63,  0.72, -4.81, -4.59, -0.76, -1.07, -4.74, -1.87, -1.03, -0.73, -1.16, -0.95,  0.11, -0.24, -0.01, -0.38,  1.57, -0.33, -2.02, -4.51,  0.72, -4.08, -1.22, -0.81, -1.23, -0.05, -2.66,  0.24,  0.29, -0.63, -3.01,  0.01, -0.01, -3.45, -0.16, -0.01, -4.26, -4.25, -0.08, -0.44, -1.97, -2.02, -3.87, -0.16, -1.43, -3.49, -1.97, -2.02, -2.01, -4.10,  0.60, -4.07, -1.33, -3.66,  0.29,  0.29, -0.01, -2.67, -3.99, -0.16, -0.96, -2.93, -1.28, -0.35, -1.18, -0.63, -0.18, -2.42, -2.15,  0.29, -3.86, -0.46, -0.51, -2.58, -2.00, -0.39, -0.43, -2.12,  0.60, -0.63, -0.79, -2.32,  0.29, -3.37, -2.22, -3.72,  0.60, -3.70, -0.11, -0.88, -3.67,  0.01, -0.01, -3.65, -0.16, -3.28 },
    /* I                   */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -1.43,  0.72,  0.56,  0.22,  0.04, -1.14, -0.05, -1.47, -1.43,  1.81, -0.14,  0.04, -2.16,  0.56, -1.02, -0.22, -0.07,  0.33,  0.49, -1.47,  0.91, -0.26, -0.81,  0.42, -1.71,  0.32, -1.79, -0.78, -1.04, -0.56,  0.21, -0.79, -2.00,  0.04,  1.15, -1.44, -0.07, -0.74,  0.04, -0.33,  0.26, -0.45,  0.23,  0.28, -1.13,  0.28,  0.80, -0.56,  0.72, -0.47,  0.23, -0.05,  0.04, -0.33,  0.27, -1.46, -1.65,  0.63,  0.93, -1.38,  0.07,  0.10, -0.92, -0.76,  0.40,  0.00,  0.26,  0.56,  0.56, -0.07, -0.03,  0.33, -1.16,  0.27, -0.73, -1.47, -1.43,  0.20, -0.25, -0.53,  0.12,  0.04, -0.33, -0.07,  0.42,  0.56, -0.51,  0.37,  0.56, -1.32, -1.31,  0.22,  0.41,  0.16,  0.22, -1.26,  0.37, -0.40, -0.55,  0.16,  0.22,  1.71, -1.16,  0.70, -1.13, -0.85, -1.31, -0.74,  0.04,  0.56, -0.73, -1.05,  0.37, -0.55, -0.31,  0.85, -0.56, -2.43, -0.33, -1.71, -0.29, -0.38,  0.04, -0.92, -2.22,  0.28, -0.44, -0.65,  1.09,  1.29, -0.18,  0.70, -0.33, -0.90, -0.38,  0.04, -0.76,  0.31, -0.78,  0.70, -0.76,  1.03, -0.98, -0.73,  0.42,  0.56, -0.71,  0.37, -0.34 },
    /* have                */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.33,  0.16, -1.74, -0.02, -1.53, -0.12, -0.74, -0.35,  0.43,  1.06, -0.02, -3.54,  0.16, -1.82, -0.57, -0.00, -0.37, -0.34, -0.74,  1.10, -0.64, -0.91, -0.06, -1.12, -0.28, -2.59, -1.57, -1.42, -0.30,  1.06, -0.85, -2.80, -0.02,  0.60, -1.50, -0.00, -0.94, -0.02,  0.29,  0.04,  0.02,  0.07,  0.29, -1.39,  0.29,  0.26, -0.30,  0.33, -0.38, -0.47, -0.12, -0.02,  0.29,  0.42, -2.26, -2.04,  0.29,  0.91, -2.18, -0.63,  0.21, -0.08, -0.92, -0.64,  0.50,  0.04,  0.16,  0.37, -0.00,  0.64, -1.16, -1.95,  0.42, -1.53, -0.74, -0.35, -1.94, -0.20, -1.10,  0.03, -0.02,  0.29, -1.04, -0.06,  0.16, -1.89,  0.20,  0.16, -2.29, -2.28, -0.10, -0.34, -0.73, -0.78, -1.90,  0.20, -0.46, -1.51, -0.73, -0.78, -0.18, -2.12,  0.45, -2.10, -0.71, -1.69, -0.94, -0.02,  0.16, -1.70, -2.02,  0.20, -0.80, -0.96,  0.47, -0.30, -1.02,  0.29, -1.12, -0.45, -0.18, -0.02, -1.89, -1.07,  0.29, -1.60, -1.25, -0.15,  0.47, -0.14,  0.45,  0.29, -0.56, -0.76, -0.02, -1.40, -0.24, -1.74,  0.45, -1.73,  0.48, -0.49, -1.70, -0.06,  0.16, -1.67,  0.20, -1.30 },
    /* had                 */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.02, -1.08,  0.05,  0.55, -0.34,  1.22,  0.21, -0.67, -0.56,  0.05, -1.46,  0.02, -1.32, -0.27, -0.04, -0.29, -0.16,  1.22, -0.10, -1.15,  0.39, -0.12,  1.64, -0.20, -0.51, -1.08,  0.65,  0.15,  0.03,  0.23, -0.72,  0.05, -0.29, -0.43, -0.04,  1.84,  0.05,  0.46,  0.02,  0.40, -0.08,  0.00,  0.68,  0.00, -0.38,  0.15, -0.53, -0.74, -0.08, -0.34,  0.05,  0.46, -0.12, -1.18, -0.96,  0.06,  0.25, -1.10,  0.06,  1.61,  2.68, -0.52, -0.64, -0.34,  0.02,  0.02,  0.17, -0.04,  0.14, -1.09, -0.88, -0.12, -0.45,  1.22,  0.21, -1.92,  0.01, -1.19,  0.22,  0.05,  0.46, -0.70, -0.12,  0.02, -0.81, -0.02,  0.02, -0.63, -0.61,  0.10,  0.11,  0.86,  0.81, -0.24, -0.02,  0.40, -0.44,  0.86,  0.81, -0.11, -0.46,  0.04, -0.44,  2.57, -0.61,  1.84,  0.05,  0.02,  0.96, -0.36, -0.02,  0.42,  0.12, -0.55,  0.15,  3.45,  0.46,  1.64, -0.11,  0.16,  0.05, -0.23,  0.72,  0.00,  0.06, -1.07, -0.34, -0.18,  0.52,  0.04,  0.46, -0.55,  0.73,  0.05,  0.26, -0.08, -0.08,  0.04, -0.06,  0.06,  3.34, -0.04, -0.12,  0.02, -0.01, -0.02,  0.36 },
    /* the                 */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -0.06,  0.19,  0.36,  0.37,  0.52,  0.34,  0.21,  0.36,  0.19,  0.15, -0.14,  0.29,  0.22,  0.25, -0.16, -0.41,  0.52, -0.06,  0.17,  0.50,  0.30,  0.49,  0.41, -0.48, -0.69, -0.06,  0.25, -0.03,  1.26, -0.11,  0.19,  0.10, -0.13,  0.25,  0.64,  0.19,  0.37, -0.02,  0.27, -0.56,  0.04,  1.88,  0.04, -0.43,  0.25,  0.02,  0.48,  0.29,  0.37,  0.19,  0.37,  0.10,  0.43,  0.65, -0.20,  0.17,  0.51,  0.06,  0.22,  0.73,  0.25,  0.03, -0.18, -0.02, -0.14, -0.75,  0.25,  0.04, -0.33,  0.15,  0.10,  0.16,  0.52,  0.34,  0.35,  0.37,  0.13,  0.31,  0.19,  0.37, -0.09,  0.30, -0.14, -0.20, -0.41, -0.14, -0.34, -0.32, -0.08, -0.10, -0.31, -0.29, -0.43, -0.41, -0.09, -0.41, -0.31, -0.29, -0.17, -0.17, -0.10, -0.15,  0.31, -0.22,  0.64,  0.19, -0.14,  0.12, -0.33, -0.41,  0.41, -0.59, -0.39,  0.25,  0.94,  0.37,  0.49, -0.76,  0.19,  0.19, -0.20,  0.58,  0.04,  0.09,  0.25,  0.22,  0.13,  0.67, -0.10,  0.37, -0.02, -0.46,  0.19,  0.07, -0.19, -0.06, -0.10, -0.04, -0.43,  0.48, -0.01,  0.30, -0.14, -0.21, -0.41, -0.20 },
    /* misfortune          */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -0.51, -5.33, -0.98, -1.14, -0.73, -4.38, -3.74, -0.51, -8.34,  0.03, -6.62, -0.03, -0.68, -1.26, -1.33, -1.14,  1.43, -4.86, -3.90, -1.65, -1.43, -1.43, -7.39, -6.38, -6.22, -0.48, -1.04, -5.65, -7.60, -0.51,  1.27, -6.30, -0.68, -1.95, -0.51, -1.68, -0.67, -1.78, -4.15, -1.38, -4.61, -1.38, -2.22, -0.48, -0.01, -2.37, -3.95, -0.98, -0.51, -1.68, -0.52, -7.06, -6.84, -1.42, -1.72, -6.98, -4.11, -3.27, -1.39, -1.81, -2.20, -2.13, -0.67,  0.03, -2.62, -0.68, -2.57, -3.26, -6.75, -0.52, -6.33, -1.14, -0.73, -1.15,  0.02, -4.90,  0.17, -0.51, -1.68, -5.26, -1.65,  0.03, -5.69, -0.33,  0.03, -6.50, -6.49, -2.32, -2.68, -4.21, -4.26, -6.12, -0.33, -3.67, -5.73, -4.21, -4.26, -2.66, -6.34,  0.75, -6.32, -1.99, -5.91, -1.95, -0.51,  0.03, -4.92, -6.23, -0.33, -2.21, -5.17, -2.52, -0.48, -2.43, -1.68, -1.43, -4.66, -4.40, -0.51, -6.11, -2.70, -1.38, -4.82, -4.24, -2.63,  2.09, -4.36,  0.75, -1.68, -2.04, -4.56, -0.51, -5.62, -2.88, -5.96,  0.75, -5.94,  0.24, -1.54, -5.92, -1.65,  0.03, -5.89, -0.33, -5.52 },
    /* to                  */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -0.69, -0.20,  0.24,  0.09, -0.04, -0.26,  0.12, -1.00, -0.12, -0.60,  0.10, -0.07, -0.00,  0.06,  0.24,  0.20, -0.52,  0.11,  0.02, -0.12, -0.13, -0.64,  0.38, -0.21, -0.07, -0.04,  0.37, -0.27,  0.12, -0.17, -0.29, -0.07, -0.28,  0.12, -0.54, -0.05,  0.20,  0.19, -0.07, -0.52, -0.07, -0.32, -0.07,  0.30, -0.03,  0.13, -0.20,  0.12, -0.54, -0.02, -1.04, -0.82, -0.05, -0.10, -0.97,  0.52,  0.60,  0.57,  0.08, -0.11,  0.01, -0.05, -0.12, -0.37, -0.07,  0.12,  0.55, -0.74, -0.02, -0.31,  0.24,  0.09,  0.31,  0.11, -0.37,  0.01,  0.12, -0.54, -0.51,  0.02, -0.12, -0.36,  0.03, -0.12, -0.75, -0.74, -0.36, -0.39, -0.40, -0.38, -0.59,  0.03, -0.34, -0.39, -0.40, -0.38, -0.03, -0.59, -0.01, -0.56,  0.20, -0.38, -0.28,  0.12, -0.12, -0.67, -0.71,  0.03,  0.21, -0.42, -0.16, -0.07,  0.03, -0.54, -0.12,  0.09, -0.06,  0.12, -0.77, -0.27, -0.07, -0.39,  0.09,  0.22, -0.22, -0.11, -0.01, -0.54,  0.60, -0.23,  0.12, -0.87, -0.21, -0.79, -0.01, -0.78, -0.06,  0.28, -0.75,  0.02, -0.12, -0.72,  0.03, -0.35 },
    /* lose                */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -0.77, -0.51, -0.52, -4.16, -3.53, -0.30, -8.13, -0.22, -6.41, -0.82, -0.88, -1.05, -2.12, -0.51,  1.64, -4.65, -3.69, -1.44, -1.21, -1.22, -7.18, -6.16, -6.01, -1.00, -0.83, -5.43, -7.39, -0.30,  0.49, -6.09, -0.88, -1.74, -0.30, -1.24, -0.46, -1.56, -3.94, -0.84, -4.40, -0.84, -2.01, -1.00,  1.20, -2.16, -3.74, -0.77, -0.30, -1.24, -0.89, -6.85, -6.63, -1.21, -1.51, -6.77, -2.90, -3.06, -2.18, -1.60, -1.99, -1.92, -0.46, -0.22, -2.41, -0.88, -2.36, -3.05, -6.54, -0.89, -6.12, -0.51, -0.52,  0.06,  0.24, -4.69,  1.38, -0.30, -1.24, -5.05, -1.44, -0.22, -5.48,  0.24, -0.22, -6.29, -6.28, -2.11, -2.47, -4.00, -4.05, -5.91,  0.24, -3.46, -5.52, -4.00, -4.05, -2.45, -6.13,  0.63, -6.10, -1.78, -5.70, -1.74, -0.30, -0.22, -4.70, -6.02,  0.24, -0.99, -4.96, -2.31, -1.00, -2.21, -1.24, -1.21, -4.45, -4.19, -0.30, -5.90, -2.49, -0.84, -4.61, -4.03, -2.42,  1.30, -4.15,  0.63, -1.24, -1.83, -4.35, -0.30, -5.41, -2.66, -5.75,  0.63, -5.73, -0.55, -1.32, -5.70, -1.44, -0.22, -5.68,  0.24, -5.31 },
    /* him                 */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.39,  0.05, -1.21, -0.31, -0.15, -2.59,  0.01, -0.86, -0.46,  0.25,  0.32, -0.22,  0.39, -0.01,  0.89,  1.85, -0.20,  0.63, -0.00, -1.64, -0.62, -0.47,  0.13, -0.09,  0.11, -1.85, -0.15, -0.77, -1.55,  0.25,  0.63, -0.15,  0.17,  0.20, -0.34, -1.20, -0.34, -0.44, -0.34,  0.08,  0.13, -0.10, -0.08, -0.52, -0.46, -0.15,  0.17, -0.41, -2.30, -2.67,  0.42,  0.12, -2.23, -0.68,  0.16,  0.78, -0.92, -0.35, -0.29,  0.20,  0.01,  0.81,  0.25, -0.14,  0.17, -2.00, -0.41, -1.57,  0.39,  0.05,  0.05, -0.18, -0.73, -0.17, -0.15,  0.17, -1.09, -0.20,  0.01, -0.94,  0.13,  0.01, -1.75, -1.74, -0.37, -0.10, -0.63, -0.68, -1.36,  0.13, -0.24, -0.98, -0.63, -0.68,  0.09, -1.59, -0.19, -1.56, -0.14, -1.15,  0.63, -0.15,  0.01, -1.16, -1.48,  0.13,  0.23, -1.01, -0.58,  0.13,  1.74,  0.17,  0.63,  0.09, -0.64, -0.15, -1.35,  0.05, -0.34, -0.65, -0.49,  0.12,  0.35, -0.19, -0.19,  0.17, -0.28, -0.81, -0.15, -0.86, -0.71, -1.21, -0.19, -1.19,  0.23,  2.22, -1.16, -0.20,  0.01, -1.14,  0.13, -0.77 },
    /* I                   */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -1.43,  1.81, -0.14,  0.04, -2.16,  0.56, -1.02, -0.22, -0.07,  0.33,  0.49, -1.47,  0.91, -0.26, -0.81,  0.42, -1.71,  0.32, -1.79, -0.78, -1.04, -0.56,  0.21, -0.79, -2.00,  0.04,  1.15, -1.44, -0.07, -0.74,  0.04, -0.33,  0.26, -0.45,  0.23,  0.28, -1.13,  0.28,  0.80, -0.56,  0.72, -0.47,  0.23, -0.05,  0.04, -0.33,  0.27, -1.46, -1.65,  0.63,  0.93, -1.38,  0.07,  0.10, -0.92, -0.76,  0.40,  0.00,  0.26,  0.56,  0.56, -0.07, -0.03,  0.33, -1.16,  0.27, -0.73, -1.47, -1.43,  0.20, -0.25, -0.53,  0.12,  0.04, -0.33, -0.07,  0.42,  0.56, -0.51,  0.37,  0.56, -1.32, -1.31,  0.22,  0.41,  0.16,  0.22, -1.26,  0.37, -0.40, -0.55,  0.16,  0.22,  1.71, -1.16,  0.70, -1.13, -0.85, -1.31, -0.74,  0.04,  0.56, -0.73, -1.05,  0.37, -0.55, -0.31,  0.85, -0.56, -2.43, -0.33, -1.71, -0.29, -0.38,  0.04, -0.92, -2.22,  0.28, -0.44, -0.65,  1.09,  1.29, -0.18,  0.70, -0.33, -0.90, -0.38,  0.04, -0.76,  0.31, -0.78,  0.70, -0.76,  1.03, -0.98, -0.73,  0.42,  0.56, -0.71,  0.37, -0.34 },
    /* have                */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.43,  1.06, -0.02, -3.54,  0.16, -1.82, -0.57, -0.00, -0.37, -0.34, -0.74,  1.10, -0.64, -0.91, -0.06, -1.12, -0.28, -2.59, -1.57, -1.42, -0.30,  1.06, -0.85, -2.80, -0.02,  0.60, -1.50, -0.00, -0.94, -0.02,  0.29,  0.04,  0.02,  0.07,  0.29, -1.39,  0.29,  0.26, -0.30,  0.33, -0.38, -0.47, -0.12, -0.02,  0.29,  0.42, -2.26, -2.04,  0.29,  0.91, -2.18, -0.63,  0.21, -0.08, -0.92, -0.64,  0.50,  0.04,  0.16,  0.37, -0.00,  0.64, -1.16, -1.95,  0.42, -1.53, -0.74, -0.35, -1.94, -0.20, -1.10,  0.03, -0.02,  0.29, -1.04, -0.06,  0.16, -1.89,  0.20,  0.16, -2.29, -2.28, -0.10, -0.34, -0.73, -0.78, -1.90,  0.20, -0.46, -1.51, -0.73, -0.78, -0.18, -2.12,  0.45, -2.10, -0.71, -1.69, -0.94, -0.02,  0.16, -1.70, -2.02,  0.20, -0.80, -0.96,  0.47, -0.30, -1.02,  0.29, -1.12, -0.45, -0.18, -0.02, -1.89, -1.07,  0.29, -1.60, -1.25, -0.15,  0.47, -0.14,  0.45,  0.29, -0.56, -0.76, -0.02, -1.40, -0.24, -1.74,  0.45, -1.73,  0.48, -0.49, -1.70, -0.06,  0.16, -1.67,  0.20, -1.30 },
    /* frequently          */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -3.32, -0.03, -6.93,  0.27, -5.21, -0.61, -0.00, -1.44,  0.08,  1.27, -0.48, -3.45, -2.49, -1.56, -0.01, -1.02, -5.98, -4.96, -4.81,  0.20,  0.37, -4.23, -6.19, -0.03,  1.10, -4.89, -0.00, -0.54, -0.03, -0.46, -0.58, -1.36, -2.74, -1.10, -3.20, -1.10, -1.81,  0.20,  1.40, -3.28, -2.54,  0.01, -0.03, -0.46, -0.43, -5.64, -5.43, -0.01, -0.31, -5.57, -1.70, -1.86,  1.02, -0.40, -0.79, -1.72, -0.58,  0.27, -1.21, -0.00, -1.16, -1.85, -5.34, -0.43, -4.92,  1.27,  1.68,  0.26, -0.89, -3.49,  0.58, -0.03, -0.46, -3.85, -1.56,  0.27, -4.28,  0.17,  0.27, -5.09, -5.08, -2.49, -2.86, -2.80, -2.85, -4.71,  0.17, -2.26, -4.32, -2.80, -2.85, -2.84, -4.93, -0.01, -4.90, -0.58, -4.49, -0.54, -0.03,  0.27, -3.50, -4.82,  0.17, -1.38, -3.76, -2.70,  0.20, -1.01, -0.46, -0.01, -3.25, -3.99, -0.03, -4.70, -1.29, -1.10, -3.41, -2.83, -1.22, -0.09, -2.95, -0.01, -0.46, -0.63, -3.15, -0.03, -4.21, -1.46, -4.55, -0.01, -4.53, -0.35, -0.12, -4.50, -1.56,  0.27, -4.48,  0.17, -4.11 },
    /* wished              */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -0.60, -6.36,  0.36, -4.64, -0.05, -1.02, -0.29,  0.64,  0.84,  0.23, -2.88, -1.93, -0.67, -0.04, -0.46, -5.41, -4.40, -4.25, -1.31, -1.07, -3.67, -5.63, -0.60, -0.66, -4.33, -1.02,  0.02, -0.60, -0.80, -0.50, -0.80, -2.17, -0.25, -2.63, -0.25, -0.24, -1.31, -0.03, -0.39, -1.98, -0.88, -0.60, -0.80,  0.13, -5.08, -4.86, -0.45, -1.34, -5.00, -1.14, -2.30,  1.58,  0.16, -0.22, -0.16, -0.50,  0.36, -0.65, -1.02, -0.60, -1.29, -4.78,  0.13, -4.35,  0.84,  0.66, -0.50, -0.00, -3.93, -0.18, -0.60, -0.80, -3.28, -0.67,  0.36, -3.72, -0.04,  0.36, -4.53, -4.52, -1.34, -0.71, -3.24, -3.28, -4.14, -0.04, -1.70, -3.76, -3.24, -3.28, -1.69, -4.36,  0.26, -4.34, -0.01, -3.93,  0.02, -0.60,  0.36, -2.94, -4.26, -0.04, -0.23, -3.20, -0.55, -1.31, -0.45, -0.80, -0.04, -2.69, -2.42, -0.60, -4.13, -0.73, -0.25, -2.84, -2.27, -0.65,  0.74, -2.39,  0.26, -0.80, -1.06, -3.59, -0.60, -3.64, -0.90, -3.99,  0.26, -3.97, -0.11,  0.44, -3.94, -0.67,  0.36, -3.91, -0.04, -3.54 },
    /* to                  */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -1.00, -0.12, -0.60,  0.10, -0.07, -0.00,  0.06,  0.24,  0.20, -0.52,  0.11,  0.02, -0.12, -0.13, -0.64,  0.38, -0.21, -0.07, -0.04,  0.37, -0.27,  0.12, -0.17, -0.29, -0.07, -0.28,  0.12, -0.54, -0.05,  0.20,  0.19, -0.07, -0.52, -0.07, -0.32, -0.07,  0.30, -0.03,  0.13, -0.20,  0.12, -0.54, -0.02, -1.04, -0.82, -0.05, -0.10, -0.97,  0.52,  0.60,  0.57,  0.08, -0.11,  0.01, -0.05, -0.12, -0.37, -0.07,  0.12,  0.55, -0.74, -0.02, -0.31,  0.24,  0.09,  0.31,  0.11, -0.37,  0.01,  0.12, -0.54, -0.51,  0.02, -0.12, -0.36,  0.03, -0.12, -0.75, -0.74, -0.36, -0.39, -0.40, -0.38, -0.59,  0.03, -0.34, -0.39, -0.40, -0.38, -0.03, -0.59, -0.01, -0.56,  0.20, -0.38, -0.28,  0.12, -0.12, -0.67, -0.71,  0.03,  0.21, -0.42, -0.16, -0.07,  0.03, -0.54, -0.12,  0.09, -0.06,  0.12, -0.77, -0.27, -0.07, -0.39,  0.09,  0.22, -0.22, -0.11, -0.01, -0.54,  0.60, -0.23,  0.12, -0.87, -0.21, -0.79, -0.01, -0.78, -0.06,  0.28, -0.75,  0.02, -0.12, -0.72,  0.03, -0.35 },
    /* heal                */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -0.14, -7.19, -0.60, -1.25, -1.84, -1.91, -0.72,  0.85, -5.44, -4.48, -1.81, -2.00, -2.01, -7.97, -6.95, -6.80, -1.05, -1.62, -6.22, -8.18, -0.44,  0.70, -6.88, -1.25, -2.53, -0.44, -1.77, -1.25, -2.35, -4.73, -1.22, -5.19, -1.22, -2.80, -1.05,  0.41, -2.95, -4.53,  0.02, -0.44, -1.77, -1.10, -7.63, -7.41, -2.00, -2.30, -7.56, -3.69, -3.85, -0.97, -2.39, -2.77, -2.71, -1.25, -0.14, -3.20, -1.25, -3.15, -3.84, -7.33, -1.10, -6.91, -0.72, -0.31, -0.73, -0.55, -5.48,  0.59, -0.44, -1.77, -5.84, -1.81, -0.14, -6.27,  0.26, -0.14, -7.08, -7.07, -2.90, -3.26, -4.79, -4.84, -6.69,  0.26, -4.25, -6.31, -4.79, -4.84, -3.24, -6.92,  0.58, -6.89, -2.57, -6.48, -2.53, -0.44, -0.14, -5.49, -6.81,  0.26, -1.78, -5.75, -3.10, -1.05, -3.00, -1.77, -2.00, -5.24, -4.98, -0.44, -6.68, -3.28, -1.22, -5.40, -4.82, -3.21,  1.51, -4.94,  0.58, -1.77, -2.61, -5.14, -0.44, -6.19, -3.45, -6.54,  0.58, -6.52, -0.34, -2.11, -6.49, -1.81, -0.14, -6.47,  0.26, -6.10 },
    /* the                 */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.29,  0.22,  0.25, -0.16, -0.41,  0.52, -0.06,  0.17,  0.50,  0.30,  0.49,  0.41, -0.48, -0.69, -0.06,  0.25, -0.03,  1.26, -0.11,  0.19,  0.10, -0.13,  0.25,  0.64,  0.19,  0.37, -0.02,  0.27, -0.56,  0.04,  1.88,  0.04, -0.43,  0.25,  0.02,  0.48,  0.29,  0.37,  0.19,  0.37,  0.10,  0.43,  0.65, -0.20,  0.17,  0.51,  0.06,  0.22,  0.73,  0.25,  0.03, -0.18, -0.02, -0.14, -0.75,  0.25,  0.04, -0.33,  0.15,  0.10,  0.16,  0.52,  0.34,  0.35,  0.37,  0.13,  0.31,  0.19,  0.37, -0.09,  0.30, -0.14, -0.20, -0.41, -0.14, -0.34, -0.32, -0.08, -0.10, -0.31, -0.29, -0.43, -0.41, -0.09, -0.41, -0.31, -0.29, -0.17, -0.17, -0.10, -0.15,  0.31, -0.22,  0.64,  0.19, -0.14,  0.12, -0.33, -0.41,  0.41, -0.59, -0.39,  0.25,  0.94,  0.37,  0.49, -0.76,  0.19,  0.19, -0.20,  0.58,  0.04,  0.09,  0.25,  0.22,  0.13,  0.67, -0.10,  0.37, -0.02, -0.46,  0.19,  0.07, -0.19, -0.06, -0.10, -0.04, -0.43,  0.48, -0.01,  0.30, -0.14, -0.21, -0.41, -0.20 },
    /* breach              */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -0.32, -1.38, -1.55, -1.62, -1.01,  0.14, -5.15, -4.19, -1.52, -1.72, -2.72, -7.68, -6.67, -6.51, -0.77, -1.33, -5.94, -7.89, -0.51, -0.02, -6.59, -1.38, -2.25, -0.51, -1.48, -0.96, -2.07, -4.44, -0.93, -4.90, -0.93, -2.51, -0.77,  0.70, -2.66, -4.24,  0.31, -0.51, -1.48, -0.81, -7.35, -7.13, -1.71, -2.02, -7.27, -3.40, -3.56, -0.68, -2.10, -2.49, -2.42, -0.96, -0.07, -3.91, -1.38, -2.86, -3.55, -7.04, -0.81, -6.62, -1.01, -1.02, -0.44, -1.27, -5.19,  0.88, -0.51, -1.48, -5.55, -1.52, -0.07, -5.98, -0.26, -0.07, -6.79, -6.78, -2.61, -2.97, -4.50, -4.55, -6.41, -0.26, -3.96, -6.02, -4.50, -4.55, -2.95, -6.63,  0.46, -6.61, -2.28, -6.20, -2.25, -0.51, -0.07, -5.21, -6.53, -0.26, -1.50, -5.46, -2.81, -0.77, -2.72, -1.48, -1.72, -4.96, -4.69, -0.51, -6.40, -2.99, -0.93, -5.11, -4.53, -2.92,  0.80, -4.65,  0.46, -1.48, -2.33, -4.85, -0.51, -5.91, -3.17, -6.25,  0.46, -6.23, -1.05, -1.83, -6.21, -1.52, -0.07, -6.18, -0.26, -5.81 },
    /* but                 */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -0.10,  0.17, -0.46, -0.62, -0.30, -1.22,  0.05,  0.04,  0.24,  0.06, -1.43, -0.42, -1.27, -0.44,  0.39,  0.31, -1.65,  0.13, -0.13, -1.35, -0.10,  0.00,  0.13, -0.11,  0.26,  0.09, -0.78,  0.05, -0.24,  0.05,  0.04, -0.44,  0.03, -0.94, -0.32,  0.05,  0.13, -0.11,  0.01, -1.10, -0.88, -0.67, -0.52, -1.02,  0.04, -0.64, -0.32, -0.50,  0.17,  0.12,  0.26,  0.16, -0.75, -0.10,  0.21,  0.69, -0.80,  0.01, -0.37, -0.62, -0.04,  0.38,  0.12, -0.53,  0.04,  0.13, -0.11, -0.89,  0.04,  0.16, -0.74,  0.12,  0.16, -0.55, -0.53, -0.27,  0.10, -0.06,  0.11, -0.16,  0.12, -0.52, -0.77, -0.06,  0.11,  0.29, -0.38,  0.13, -0.36,  0.27,  0.05,  0.00,  0.13,  0.16,  0.04, -0.28,  0.12, -0.06,  0.78,  0.11, -0.44,  0.07, -0.11,  0.24, -0.29,  1.56,  0.13, -0.15,  0.45,  0.05, -0.45, -0.29,  0.52,  0.08, -0.40,  0.13, -0.11,  0.92, -0.19,  0.13, -0.66, -0.09, -0.00,  0.13,  0.01,  0.46, -0.44,  0.04,  0.04,  0.16,  0.07,  0.12,  0.44 },
    /* for                 */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -0.22, -0.46, -0.03,  0.08,  0.51, -0.54,  0.15, -0.42, -0.24, -1.02, -0.01,  0.14, -0.16,  0.12,  0.72, -1.24,  0.08, -0.24,  0.06,  0.16, -0.08,  0.08,  0.20,  0.17, -0.05, -0.59,  0.09, -1.24,  0.09, -0.37, -0.16,  0.23, -0.32, -0.59, -0.24,  0.08,  0.20,  0.13, -1.69, -1.47,  0.19,  0.12, -1.61,  0.25, -0.23, -0.20, -0.03,  0.08, -0.02,  0.17, -0.12,  0.29,  0.16, -0.91, -0.90, -1.97,  0.13, -1.96, -0.03,  0.07,  0.31,  0.11, -0.12,  0.05,  0.08,  0.20, -0.89,  0.15, -0.12, -0.91,  0.05, -0.12, -1.72, -1.71,  0.35,  0.51, -0.31, -0.35, -1.34,  0.05,  0.69, -0.95, -0.31, -0.35, -0.20, -1.56,  0.01, -1.53, -0.27, -1.12, -0.08,  0.08, -0.12, -0.55, -1.45,  0.05, -0.05, -1.39,  0.04, -0.16,  0.48,  0.20, -0.42, -0.30, -0.84,  0.08, -1.33, -0.42,  0.09, -0.45,  0.12, -0.07, -0.28, -0.32,  0.01,  0.20, -0.37,  0.22,  0.08, -0.84, -0.60, -1.18,  0.01, -1.16,  0.11, -0.17, -1.13,  0.15, -0.12, -1.11,  0.05, -0.74 },
    /* some                */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -2.01,  0.30,  0.12, -0.78, -0.82, -0.15,  0.48,  0.06, -3.31, -3.30, -3.14,  0.33, -0.13, -1.57, -3.52,  0.03,  0.40, -2.22,  0.34,  1.13,  0.03, -0.07, -0.68, -0.02, -0.07,  0.03, -0.53,  0.03, -0.46,  0.33,  0.21,  0.71,  0.13,  0.78,  0.03, -0.07, -0.44, -2.98, -2.76,  0.07,  0.77, -2.90, -0.03, -1.19,  0.88, -0.32, -0.12, -0.64, -0.68, -0.26,  0.46,  0.34, -0.81, -1.51, -2.67, -0.44, -3.25,  0.30,  0.89,  0.61,  1.10, -1.82,  1.08,  0.03, -0.07, -3.18, -0.15, -0.26, -1.61, -0.32, -0.26, -2.42, -2.41,  0.18,  0.40, -0.72, -0.76, -2.04, -0.32, -0.59, -1.65, -0.72, -0.76, -0.17, -2.26,  0.01, -2.24, -0.49, -1.83,  1.13,  0.03, -0.26, -0.84, -2.15, -0.32,  0.29, -1.09, -0.03,  0.33,  0.07, -0.07,  0.48, -0.58, -1.90,  0.03, -2.03,  0.38,  0.03, -0.74, -0.16, -0.13,  0.24, -1.28,  0.01, -0.07,  2.04, -0.48,  0.03, -1.54, -1.60, -1.88,  0.01, -1.86, -0.27,  0.22, -1.84, -0.15, -0.26, -1.81, -0.32, -1.44 },
    /* time                */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -0.15, -0.16, -1.86, -1.50, -0.18, -0.34, -0.44, -3.39, -2.38, -2.23, -0.03, -0.37, -1.65, -3.61, -0.12,  0.18, -2.31, -0.46,  0.45, -0.12, -0.43, -0.07,  1.22, -0.15, -0.27, -1.62, -0.27,  1.78, -0.03, -0.18, -0.38, -0.96,  0.07, -0.12, -0.43, -0.61, -3.06, -2.84, -0.24, -0.54, -2.99, -0.12, -1.28,  0.14, -0.99,  0.21,  1.86, -0.07, -0.02, -0.63, -0.46, -1.58, -0.86, -2.76, -0.61, -2.33, -0.15, -0.06, -0.16, -0.30, -1.91,  0.31, -0.12, -0.43, -2.26, -0.18, -0.02, -1.70,  0.07, -0.02, -2.51, -2.50,  1.68,  1.31, -0.22, -0.27, -2.12,  0.07, -0.68, -1.74, -0.22, -0.27, -0.26, -2.35,  0.05, -2.32,  2.01, -1.91,  0.45, -0.12, -0.02, -1.92, -2.24,  0.07,  0.47, -2.18, -0.11, -0.03, -1.43, -0.43, -0.34, -0.67, -0.40, -0.12, -2.11, -1.03, -0.27, -0.83, -0.25,  1.36,  0.30, -0.37,  0.05, -0.43, -0.37, -0.57, -0.12, -1.62, -0.88, -1.97,  0.05, -1.95, -0.23,  0.46, -1.92, -0.18, -0.02, -1.90,  0.07, -1.52 },
    /* I                   */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.91, -0.26, -0.81,  0.42, -1.71,  0.32, -1.79, -0.78, -1.04, -0.56,  0.21, -0.79, -2.00,  0.04,  1.15, -1.44, -0.07, -0.74,  0.04, -0.33,  0.26, -0.45,  0.23,  0.28, -1.13,  0.28,  0.80, -0.56,  0.72, -0.47,  0.23, -0.05,  0.04, -0.33,  0.27, -1.46, -1.65,  0.63,  0.93, -1.38,  0.07,  0.10, -0.92, -0.76,  0.40,  0.00,  0.26,  0.56,  0.56, -0.07, -0.03,  0.33, -1.16,  0.27, -0.73, -1.47, -1.43,  0.20, -0.25, -0.53,  0.12,  0.04, -0.33, -0.07,  0.42,  0.56, -0.51,  0.37,  0.56, -1.32, -1.31,  0.22,  0.41,  0.16,  0.22, -1.26,  0.37, -0.40, -0.55,  0.16,  0.22,  1.71, -1.16,  0.70, -1.13, -0.85, -1.31, -0.74,  0.04,  0.56, -0.73, -1.05,  0.37, -0.55, -0.31,  0.85, -0.56, -2.43, -0.33, -1.71, -0.29, -0.38,  0.04, -0.92, -2.22,  0.28, -0.44, -0.65,  1.09,  1.29, -0.18,  0.70, -0.33, -0.90, -0.38,  0.04, -0.76,  0.31, -0.78,  0.70, -0.76,  1.03, -0.98, -0.73,  0.42,  0.56, -0.71,  0.37, -0.34 },
    /* was                 */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -0.40,  0.23, -0.48,  1.06,  0.12,  0.07,  0.08, -0.35,  0.25,  0.15,  1.81, -0.14, -0.19, -0.04, -0.84, -0.01,  1.30, -0.19,  0.23, -0.08, -0.04,  0.31, -0.06,  0.53, -0.06, -0.15,  0.25, -0.07,  0.09, -1.40,  0.02, -0.19,  0.23, -0.09,  0.40,  0.62, -0.28, -0.15,  0.48,  0.03, -0.72,  2.54, -0.62, -0.23,  0.37, -0.08, -0.08, -0.16, -0.01, -0.02, -0.20,  0.71, -0.09, -0.45,  1.17,  0.56,  0.47, -0.17,  0.97,  0.14, -0.19,  0.23, -0.12, -0.48, -0.08,  0.18,  0.00, -0.08,  0.96,  0.97,  0.01,  0.53,  0.08,  0.39, -0.24,  0.00, -0.53,  0.15,  0.08,  0.39,  0.27,  1.12, -0.13,  1.15,  2.67,  1.55,  1.30, -0.19, -0.08,  0.22,  1.23,  0.00,  0.76,  0.70,  0.48,  0.25,  3.03,  0.23,  1.06,  0.21,  1.48, -0.19,  1.35,  1.17, -0.06, -0.53,  0.63,  0.44, -0.16,  1.10, -0.13,  0.23,  0.18, -0.80, -0.19,  0.84,  0.26,  1.50, -0.13,  1.52,  0.14,  2.47,  1.55, -0.48, -0.08,  1.57,  0.00,  1.94 },
    /* kept                */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -3.79, -1.54, -0.32, -0.32, -6.28, -5.27, -5.11, -0.59,  0.07, -4.54, -6.49, -0.03, -0.42, -5.19, -0.57, -1.43, -0.03, -0.34, -1.15, -2.25, -4.04, -0.94, -3.50, -0.94, -2.11, -0.59, -0.22, -1.26, -2.84, -0.29, -0.03, -0.34, -0.73, -5.95, -5.73, -1.31, -0.62, -5.87, -2.00, -2.16,  0.72, -0.70, -1.09, -2.02, -1.15, -0.03, -2.51, -0.57, -1.46, -2.16, -5.64, -0.73, -5.22,  0.97,  1.38, -0.04,  1.13, -3.79, -0.04, -0.03, -0.34, -4.15, -1.54, -0.03, -4.58,  0.78, -0.03, -5.40, -5.38, -1.21, -1.57, -3.69, -3.73, -5.01,  0.78, -2.56, -4.62, -3.69, -3.73, -1.55, -5.23, -0.05, -5.21, -0.88, -4.80, -1.43, -0.03, -0.03, -3.81, -5.13,  0.78, -0.10, -4.07, -1.41, -0.59, -1.32, -0.34, -0.32, -3.56, -4.29, -0.03, -5.00, -2.59, -0.94, -3.71, -3.13, -1.52, -0.50, -3.25, -0.05, -0.34, -1.93, -3.45, -0.03, -4.51, -1.77, -4.85, -0.05, -4.83, -0.24, -0.43, -4.81, -1.54, -0.03, -4.78,  0.78, -4.41 },
    /* back                */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -0.76,  0.05,  0.04, -5.91, -4.90, -4.75, -0.58, -0.56, -4.17, -6.13, -0.03,  0.43, -4.83,  0.39, -0.48, -0.03, -0.56, -1.00, -1.30, -2.67, -1.38, -3.13, -1.38, -0.74, -0.58, -0.12, -0.89, -3.48, -0.24, -0.03, -0.56,  0.96, -5.58, -5.36, -1.53, -0.25, -5.50, -2.64, -1.80,  1.08, -0.34, -1.72, -0.66, -1.00, -0.35, -1.14,  0.39, -2.10, -1.79, -5.28,  0.96, -4.85,  0.34,  0.75, -0.26, -0.50, -3.43,  0.06, -0.03, -0.56, -3.78, -0.76, -0.35, -4.21,  0.62, -0.35, -5.03, -5.01, -1.84, -1.21, -2.74, -2.78, -4.64,  0.62, -3.78, -4.25, -2.74, -2.78, -1.19, -4.86, -0.48, -4.84, -0.51, -4.43, -0.48, -0.03, -0.35, -3.44, -4.76,  0.62, -0.73, -3.70, -1.05, -0.58, -0.95, -0.56,  0.05, -3.19, -2.92, -0.03, -4.63, -1.23, -1.38, -3.34, -2.77, -2.15, -0.02, -3.88, -0.48, -0.56, -0.56, -3.09, -0.03, -4.14, -1.40, -4.48, -0.48, -4.47,  0.71, -0.06, -4.44, -0.76, -0.35, -4.41,  0.62, -4.04 },
    /* by                  */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -0.29, -0.30, -1.61, -0.60, -0.45,  0.53, -0.17,  0.13, -1.83,  0.12, -0.42, -0.53,  0.13,  0.50,  0.12,  0.64, -0.09,  0.42, -0.69, -0.03, -0.42, -0.03, -0.53,  0.53, -0.10,  0.82,  0.82,  0.04,  0.12,  0.64,  0.19, -1.28, -1.06, -0.50,  0.73, -1.20, -0.14,  0.18,  1.21,  0.26,  0.58,  0.32, -0.09, -0.23, -0.02,  0.13, -0.26, -0.07, -0.98,  0.19, -0.55,  0.71,  0.56,  0.04, -0.11, -0.71,  0.49,  0.12,  0.64, -0.48, -0.30, -0.23, -0.92, -0.16, -0.23, -1.73, -1.72, -0.45, -0.91, -0.24, -0.29, -1.34, -0.16, -1.48, -1.54, -0.24, -0.29, -0.47, -1.56, -0.18, -1.54,  1.20, -1.72,  0.50,  0.12, -0.23, -0.72, -1.46, -0.16, -0.29, -0.40,  0.67,  0.53, -0.23,  0.64, -0.29, -0.47, -1.21,  0.12, -1.33,  0.07, -0.03, -0.04,  0.53,  0.56, -0.22, -0.17, -0.18,  0.64,  0.74,  0.21,  0.12, -0.84,  0.09, -1.18, -0.18, -1.17, -0.33,  0.54, -1.14, -0.30, -0.23, -1.70, -0.16, -1.74 },
    /* my                  */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -1.65, -3.60, -2.00, -1.85, -0.01,  1.16, -1.86, -3.23,  0.05,  1.48, -2.51,  0.05, -1.46,  0.05, -0.34,  0.15, -0.40,  0.23,  0.28, -1.56,  0.28,  1.16, -0.01,  1.08, -0.45, -0.58,  0.22,  0.05, -0.34,  0.40, -2.68, -2.46,  0.25, -0.16, -2.61, -0.06,  0.10, -1.27, -0.25,  0.01, -0.35,  0.15,  0.57,  0.43,  0.05, -0.78, -0.21, -2.38,  0.40, -1.95, -1.64, -0.40,  0.09, -0.36, -0.53,  0.12,  0.05, -0.34, -0.88,  0.11,  0.57, -2.32,  0.27,  0.57, -2.13, -2.12,  0.47,  0.11, -0.84, -0.89, -1.74,  0.27, -0.62, -1.36, -0.84, -0.89,  0.39, -1.97,  0.25, -1.94, -1.07, -1.53, -1.46,  0.05,  0.57, -1.54, -1.86,  0.27, -0.64, -0.80,  0.04, -0.01, -1.44, -0.34, -1.70, -0.88, -1.02,  0.05, -2.32, -1.50,  0.28, -1.03, -0.45, -0.42,  1.63, -1.57,  0.25, -0.34, -0.57, -1.19,  0.05, -2.24, -0.31, -2.17,  0.25, -2.15,  0.75, -1.72, -2.13,  0.11,  0.57, -2.10,  0.27, -2.14 },
    /* own                 */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -3.76, -2.74, -3.59, -0.12,  0.27, -2.01, -3.97,  0.11,  0.15, -2.67,  0.29, -0.13,  0.11,  0.01, -0.04, -0.14, -0.52,  0.41, -0.98,  0.41, -1.17, -0.12, -0.33,  0.26, -0.32, -0.47,  0.11,  0.01,  0.94, -3.42, -3.21,  0.21,  1.91, -3.35, -1.07, -1.96,  0.07,  0.23, -0.89, -0.09, -0.04,  0.43, -0.57,  0.29, -0.53,  0.37, -3.12,  0.94, -2.70, -0.64, -0.95, -0.33, -0.04, -1.27, -0.10,  0.11,  0.01, -1.63, -0.02,  0.43, -2.06,  0.10,  0.43, -2.87, -2.86,  1.31,  0.95, -0.58, -0.63, -2.49,  0.10, -0.04, -2.10, -0.58, -0.63, -0.62, -2.71, -0.07, -2.68,  0.06, -2.27, -0.13,  0.11,  0.43, -1.28, -2.60,  0.10,  0.43, -3.13, -0.48, -0.12, -0.38,  0.01,  0.04, -1.03, -0.77,  0.11, -2.47, -0.07,  0.41, -1.19, -0.61, -0.58,  0.19, -0.73, -0.07,  0.01, -0.41, -0.93,  0.11, -1.99, -0.83, -2.33, -0.07, -2.31,  0.28, -0.49, -2.28, -0.02,  0.43, -2.26,  0.10, -1.89 },
    /* doubts              */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -7.11, -6.96, -1.21, -1.78, -6.38, -8.34, -0.59,  0.54, -7.04, -0.83, -2.69, -0.59, -1.93, -1.41, -2.51, -4.88, -1.37, -5.34, -1.37, -2.95, -1.21,  0.26, -3.10, -4.69, -0.13, -0.59, -1.93, -1.25, -7.79, -7.57, -2.16, -2.46, -7.71, -3.85, -4.01, -1.13, -2.55, -2.93, -2.87, -1.41, -0.03, -3.36, -0.83, -3.31, -4.00, -7.49, -1.25, -7.06,  0.13, -0.46, -0.89, -0.71, -5.64,  0.44, -0.59, -1.93, -5.99, -1.38, -0.03, -6.43,  0.11, -0.03, -7.24, -7.23, -3.05, -3.42, -4.95, -4.99, -6.85,  0.11, -4.41, -6.46, -4.95, -4.99, -3.40, -7.07,  0.43, -7.05, -2.72, -6.64, -2.69, -0.59, -0.03, -5.65, -6.97,  0.11, -1.94, -5.91, -3.26, -1.21, -3.16, -1.93, -1.16, -5.40, -5.13, -0.59, -6.84, -3.44, -1.37, -5.55, -4.98, -3.36,  1.35, -5.09,  0.43, -1.93, -2.77, -5.30, -0.59, -6.35, -3.61, -6.70,  0.43, -6.68, -0.50, -2.27, -6.65, -1.38, -0.03, -6.62,  0.11, -6.25 },
    /* fearing             */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -6.71, -0.96, -1.53, -6.13, -8.09, -0.54, -0.21, -6.79, -0.58, -2.44, -0.54, -1.68, -1.16, -2.26, -4.63, -1.12, -5.09, -1.12, -2.70, -0.96, -0.49, -2.85, -4.44,  0.12, -0.54, -1.68, -1.59, -7.54, -7.32, -1.91, -2.21, -7.46, -3.60, -3.76, -0.88, -2.30, -2.68, -2.62, -1.16, -0.04, -3.11, -0.58, -3.06, -3.75, -7.24, -1.59, -6.81,  0.38, -0.21, -0.64, -0.46, -5.39,  0.69, -0.54, -1.68, -5.74, -1.13, -0.04, -6.18,  0.36, -0.04, -6.99, -6.98, -2.80, -3.17, -4.70, -4.74, -6.60,  0.36, -4.16, -6.22, -4.70, -4.74, -3.15, -6.82,  0.68, -6.80, -2.47, -6.39, -2.44, -0.54, -0.04, -5.40, -6.72,  0.36, -1.69, -5.66, -3.01, -0.96, -2.91, -1.68, -0.91, -5.15, -4.88, -0.54, -6.59, -3.19, -1.12, -5.31, -4.73, -3.11,  1.60, -4.85,  0.68, -1.68, -2.52, -5.05, -0.54, -6.10, -3.36, -6.45,  0.68, -6.43, -0.25, -2.02, -6.40, -1.13, -0.04, -6.37,  0.36, -6.00 },
    /* lest                */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -0.45, -2.60, -5.62, -7.57, -0.19,  0.30, -6.28, -0.06, -1.93, -0.19, -1.84, -0.64, -1.75, -4.12, -0.61, -4.58, -0.61, -2.19, -0.45, -0.56, -2.34, -3.93,  0.63, -0.19, -1.84, -1.08, -7.03, -6.81, -1.39, -1.70, -6.95, -3.08, -3.24, -0.36, -1.79, -2.17, -2.11, -0.64, -0.53, -2.59, -0.06, -2.54, -3.24, -6.73, -1.08, -6.30,  0.89, -0.70, -1.71,  0.05, -4.87,  1.20, -0.19, -1.84, -5.23, -0.62, -0.53, -5.66, -0.13, -0.53, -6.48, -6.46, -2.29, -2.65, -4.18, -4.23, -6.09, -0.13, -3.64, -5.70, -4.18, -4.23, -2.64, -6.31,  0.45, -6.29, -1.96, -5.88, -1.93, -0.19, -0.53, -4.89, -6.21, -0.13, -1.18, -5.15, -2.49, -0.45, -2.40, -1.84, -0.40, -4.64, -4.37, -0.19, -6.08, -2.67, -0.61, -4.79, -4.22, -2.60,  0.11, -4.33,  0.45, -1.84, -2.01, -4.53, -0.19, -5.59, -2.85, -5.93,  0.45, -5.91,  0.26, -1.51, -5.89, -0.62, -0.53, -5.86, -0.13, -5.49 },
    /* it                  */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -0.19, -1.53, -1.17, -0.20,  0.28,  0.13, -0.29, -0.40, -0.20, -0.88, -0.01,  0.20,  0.70,  0.20, -0.76,  0.20, -0.24, -0.13,  0.32,  0.16, -0.33,  0.14, -0.20, -0.88,  0.44, -1.62, -1.40,  0.21,  0.19, -1.54,  0.51, -0.54, -1.52, -0.24, -0.15,  0.39, -0.01,  0.17,  0.01, -0.29,  0.16,  0.58, -1.32,  0.44, -1.48, -0.17, -0.01, -0.14, -0.14, -0.47, -0.10, -0.20, -0.88, -0.82, -0.07,  0.17, -0.26,  0.21,  0.17, -1.07, -1.06,  0.21,  0.17, -0.10,  0.01, -0.68,  0.21, -0.41, -0.30, -0.10,  0.01,  0.77, -0.90,  0.25, -0.88, -0.41, -0.47, -0.40, -0.20,  0.17, -0.07, -0.80,  0.21, -0.02, -0.33, -0.09, -0.13, -0.38, -0.88, -0.14,  0.18, -0.77, -0.20, -1.26, -0.79,  0.20, -0.71, -0.39, -0.28,  0.24, -0.25,  0.25, -0.88,  0.01, -0.94, -0.20, -0.77, -0.14, -1.11,  0.25, -1.09,  0.09, -0.27, -1.07, -0.07,  0.17, -1.04,  0.21, -0.67 },
    /* might               */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -2.62, -3.58,  0.04, -0.35, -2.28,  0.18, -0.93,  0.04, -1.49,  0.10,  0.25, -1.12,  0.16, -0.59,  0.16,  0.22, -0.04,  0.11, -0.67,  0.07, -0.28,  0.04, -1.49, -0.20, -3.03, -2.81,  1.60,  2.30, -2.96, -1.67, -0.83,  1.05, -0.11, -0.17,  0.89,  0.10,  0.10,  1.40,  0.18,  0.45, -0.83, -2.73, -0.20, -2.30,  0.49, -1.73, -0.94, -0.04, -1.88, -0.30,  0.04, -1.49, -1.23, -0.43,  0.10, -1.67,  0.06,  0.10, -2.48, -2.47, -0.29, -0.24, -0.19, -0.24, -2.09,  0.06,  0.35, -1.71, -0.19, -0.24, -0.64, -2.32,  0.26, -2.29,  1.04, -1.88, -0.93,  0.04,  0.10, -2.48, -2.21,  0.06,  0.50, -1.15, -0.50, -0.04,  0.01, -1.49, -0.21, -0.64, -1.96,  0.04, -2.08, -0.26,  0.16, -0.80, -0.22,  1.40,  0.09, -0.34,  0.26, -1.49, -0.01, -0.54,  0.04, -1.59, -0.85, -1.94,  0.26, -1.92,  0.80,  1.49, -1.89, -0.43,  0.10, -1.86,  0.06, -1.49 },
    /* seem                */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -6.80, -0.57, -0.51, -5.51, -0.61, -1.16, -0.57, -0.66, -0.46, -0.98, -3.35, -0.26, -3.81, -0.26, -1.42, -0.41, -0.21, -1.57, -3.16,  1.40, -0.57, -0.66, -0.72, -6.26, -6.04, -0.62, -0.93, -6.18, -2.31, -3.47, -1.18, -1.02, -1.40, -1.34, -0.46,  0.37, -1.82, -0.61, -3.36, -2.47, -5.96, -0.72, -5.53, -0.34, -0.51, -0.35, -1.50, -4.10, -1.03, -0.57, -0.66, -4.46, -0.43,  0.37, -4.89, -0.06,  0.37, -5.71, -5.69, -1.52, -1.88, -3.41, -3.46, -5.32, -0.06, -2.87, -4.93, -3.41, -3.46, -1.87, -5.54,  0.37, -5.52, -1.19, -5.11, -1.16, -0.57,  0.37, -4.12, -5.44, -0.06, -0.41, -4.38, -1.72, -0.41, -1.63, -0.66,  0.37, -3.87, -3.60, -0.57, -5.31, -1.90, -0.26, -4.02, -3.45, -1.83,  0.30, -3.56,  0.37, -0.66, -1.24, -3.76, -0.57, -4.82, -2.08, -5.16,  0.37, -5.14,  0.03, -0.74, -5.12, -0.43,  0.37, -5.09, -0.06, -4.72 },
    /* disrespectful       */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -0.67,  0.47, -7.11, -0.90, -2.76, -0.67, -2.00, -1.48, -2.58, -4.96, -1.45, -5.42, -1.45, -3.02, -0.70,  0.19, -3.18, -4.76, -0.20, -0.67, -2.00, -1.33, -7.86, -7.64, -2.23, -2.53, -7.79, -3.92, -4.08, -1.20, -2.62, -3.00, -2.94, -1.48, -0.10, -3.43, -0.90, -3.38, -4.07, -7.56, -1.33, -7.13,  0.05, -0.54, -0.96, -0.78, -5.71,  0.36, -0.67, -2.00, -6.06, -1.45, -0.10, -6.50,  0.03, -0.10, -7.31, -7.30, -3.13, -3.49, -5.02, -5.07, -6.92,  0.03, -4.48, -6.54, -5.02, -5.07, -3.47, -7.15,  0.35, -7.12, -2.79, -6.71, -2.76, -0.67, -0.10, -5.72, -7.04,  0.03, -2.01, -5.98, -3.33, -0.70, -3.23, -2.00, -1.23, -5.47, -5.20, -0.67, -6.91, -3.51, -1.45, -5.63, -5.05, -3.44,  1.28, -5.17,  0.35, -2.00, -2.84, -5.37, -0.67, -6.42, -3.68, -6.77,  0.35, -6.75, -0.57, -2.34, -6.72, -1.45, -0.10, -6.70,  0.03, -6.33 },
    /* to                  */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -0.17, -0.29, -0.07, -0.28,  0.12, -0.54, -0.05,  0.20,  0.19, -0.07, -0.52, -0.07, -0.32, -0.07,  0.30, -0.03,  0.13, -0.20,  0.12, -0.54, -0.02, -1.04, -0.82, -0.05, -0.10, -0.97,  0.52,  0.60,  0.57,  0.08, -0.11,  0.01, -0.05, -0.12, -0.37, -0.07,  0.12,  0.55, -0.74, -0.02, -0.31,  0.24,  0.09,  0.31,  0.11, -0.37,  0.01,  0.12, -0.54, -0.51,  0.02, -0.12, -0.36,  0.03, -0.12, -0.75, -0.74, -0.36, -0.39, -0.40, -0.38, -0.59,  0.03, -0.34, -0.39, -0.40, -0.38, -0.03, -0.59, -0.01, -0.56,  0.20, -0.38, -0.28,  0.12, -0.12, -0.67, -0.71,  0.03,  0.21, -0.42, -0.16, -0.07,  0.03, -0.54, -0.12,  0.09, -0.06,  0.12, -0.77, -0.27, -0.07, -0.39,  0.09,  0.22, -0.22, -0.11, -0.01, -0.54,  0.60, -0.23,  0.12, -0.87, -0.21, -0.79, -0.01, -0.78, -0.06,  0.28, -0.75,  0.02, -0.12, -0.72,  0.03, -0.35 },
    /* his                 */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -1.96,  0.11,  0.58,  0.06,  0.37,  0.19, -0.20, -0.29,  0.03,  2.05,  0.03, -0.08,  0.02, -0.48,  0.05, -0.75, -0.67,  0.06,  0.37, -0.03, -0.39, -0.17, -0.04,  0.13, -0.31, -0.62,  0.22,  0.63, -0.24, -0.34,  0.95,  0.19,  0.19,  0.46,  0.11, -1.33, -0.85, -0.09, -0.03,  0.34,  1.30,  0.14, -0.36,  0.02,  0.76, -0.10,  0.06,  0.37,  1.41, -0.15,  0.19, -0.03,  0.12,  0.19,  0.16,  0.17, -0.05,  0.08, -0.55, -0.59,  0.55,  0.12, -0.47, -0.65, -0.55, -0.59,  0.54,  0.33, -0.12,  0.35,  0.28,  0.76,  0.58,  0.06,  0.19, -1.42,  0.43,  0.12,  1.00, -1.10,  0.68,  0.02,  1.24,  0.37,  2.07,  1.00, -0.32,  0.06,  0.56,  0.96,  0.03,  0.84, -0.58, -0.49,  0.32, -0.02, -0.12,  0.37,  0.63,  0.52,  0.06,  1.05,  0.47,  0.70, -0.12,  0.72, -0.04,  0.88,  0.75, -0.15,  0.19,  0.78,  0.12,  1.15 },
    /* memory              */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -0.71, -1.99, -0.26, -1.23, -1.29, -1.81, -4.18, -1.09, -4.65, -1.09, -2.25, -0.51,  0.96, -2.40, -3.99,  0.57, -0.26, -1.23, -1.14, -7.09, -6.87, -1.46, -1.76, -7.02, -3.15, -3.31, -2.01, -1.85, -2.23, -2.17, -1.29, -0.01, -2.66, -0.71, -2.61, -3.30, -6.79, -1.14, -6.36,  0.83,  0.24, -0.19, -1.01, -4.94, -0.45, -0.26, -1.23, -5.29, -1.27, -0.01, -5.73, -0.00, -0.01, -6.54, -6.53, -2.35, -2.72, -4.25, -4.29, -6.15, -0.00, -3.71, -5.77, -4.25, -4.29, -2.70, -6.38, -0.10, -6.35, -2.02, -5.94, -1.99, -0.26, -0.01, -4.95, -6.27, -0.00, -1.24, -5.21, -2.56, -0.51, -2.46, -1.23, -1.46, -4.70, -4.43, -0.26, -6.14, -2.74, -1.09, -4.86, -4.28, -2.66,  0.05, -4.40, -0.10, -1.23, -2.07, -4.60, -0.26, -5.65, -2.91, -6.00, -0.10, -5.98,  0.20, -1.57, -5.95, -1.27, -0.01, -5.92, -0.00, -5.55 },
    /* for                 */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -0.08,  0.08,  0.20,  0.17, -0.05, -0.59,  0.09, -1.24,  0.09, -0.37, -0.16,  0.23, -0.32, -0.59, -0.24,  0.08,  0.20,  0.13, -1.69, -1.47,  0.19,  0.12, -1.61,  0.25, -0.23, -0.20, -0.03,  0.08, -0.02,  0.17, -0.12,  0.29,  0.16, -0.91, -0.90, -1.97,  0.13, -1.96, -0.03,  0.07,  0.31,  0.11, -0.12,  0.05,  0.08,  0.20, -0.89,  0.15, -0.12, -0.91,  0.05, -0.12, -1.72, -1.71,  0.35,  0.51, -0.31, -0.35, -1.34,  0.05,  0.69, -0.95, -0.31, -0.35, -0.20, -1.56,  0.01, -1.53, -0.27, -1.12, -0.08,  0.08, -0.12, -0.55, -1.45,  0.05, -0.05, -1.39,  0.04, -0.16,  0.48,  0.20, -0.42, -0.30, -0.84,  0.08, -1.33, -0.42,  0.09, -0.45,  0.12, -0.07, -0.28, -0.32,  0.01,  0.20, -0.37,  0.22,  0.08, -0.84, -0.60, -1.18,  0.01, -1.16,  0.11, -0.17, -1.13,  0.15, -0.12, -1.11,  0.05, -0.74 },
    /* me                  */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -0.33, -0.27, -0.34, -0.37, -1.42,  0.50, -0.89,  0.50,  0.92, -0.25,  1.55, -0.23, -0.81,  0.12, -0.33, -0.27,  0.21, -3.33, -3.11,  0.30,  0.41, -3.26,  0.03, -1.36, -0.95, -0.55,  0.94,  0.00, -0.34,  0.34, -0.70, -0.69, -0.85,  0.46, -3.03,  0.21, -2.60, -1.64, -0.86,  0.40, -0.57, -1.76,  0.01, -0.33, -0.27, -1.53, -0.01,  0.34, -1.97,  0.24,  0.34, -2.78, -2.77, -0.76, -0.77, -1.07, -0.86, -2.39,  0.24,  0.05, -2.01, -1.07, -0.86,  0.06, -2.62,  0.25, -2.59, -0.07, -2.18, -1.36, -0.33,  0.34, -2.19, -3.10,  0.24, -1.13, -2.04,  0.62, -0.25, -2.02, -0.27, -2.06, -1.53, -1.67, -0.33, -2.97, -1.56,  0.50, -1.68, -2.52, -0.23,  2.06, -1.22,  0.25, -0.27, -0.63, -1.42, -0.33, -3.21, -0.47, -2.82,  0.25, -2.80,  0.15, -0.81, -2.78, -0.01,  0.34, -2.75,  0.24, -2.38 },
    /* to                  */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -0.54, -0.05,  0.20,  0.19, -0.07, -0.52, -0.07, -0.32, -0.07,  0.30, -0.03,  0.13, -0.20,  0.12, -0.54, -0.02, -1.04, -0.82, -0.05, -0.10, -0.97,  0.52,  0.60,  0.57,  0.08, -0.11,  0.01, -0.05, -0.12, -0.37, -0.07,  0.12,  0.55, -0.74, -0.02, -0.31,  0.24,  0.09,  0.31,  0.11, -0.37,  0.01,  0.12, -0.54, -0.51,  0.02, -0.12, -0.36,  0.03, -0.12, -0.75, -0.74, -0.36, -0.39, -0.40, -0.38, -0.59,  0.03, -0.34, -0.39, -0.40, -0.38, -0.03, -0.59, -0.01, -0.56,  0.20, -0.38, -0.28,  0.12, -0.12, -0.67, -0.71,  0.03,  0.21, -0.42, -0.16, -0.07,  0.03, -0.54, -0.12,  0.09, -0.06,  0.12, -0.77, -0.27, -0.07, -0.39,  0.09,  0.22, -0.22, -0.11, -0.01, -0.54,  0.60, -0.23,  0.12, -0.87, -0.21, -0.79, -0.01, -0.78, -0.06,  0.28, -0.75,  0.02, -0.12, -0.72,  0.03, -0.35 },
    /* be                  */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -0.19, -0.27, -0.10,  0.14, -1.05,  0.14, -0.10, -0.04,  0.87, -0.33, -0.91, -0.04, -0.04, -0.01, -0.16, -1.69, -1.47,  0.94,  0.73, -1.61, -0.07,  0.29, -0.00,  0.09, -0.15,  0.14, -0.19,  0.09, -0.26, -0.41, -0.01,  1.10, -1.39, -0.16, -1.55, -0.12,  0.32,  0.60, -0.78, -0.54, -0.23, -0.04, -0.01, -0.48, -0.52,  0.09, -0.91,  0.04,  0.09, -1.72, -1.71, -0.04, -0.22, -0.31, -0.35, -1.75,  0.04,  0.37, -1.69, -0.31, -0.35,  0.00, -1.56,  0.13, -1.53, -0.01, -1.13, -0.08, -0.04,  0.09, -0.87, -1.45,  0.04, -0.30, -0.81,  0.04, -0.04, -0.52, -0.01, -0.35, -0.30, -1.20, -0.04, -1.74, -0.42,  0.14, -0.45, -0.20,  0.04,  0.34, -0.32,  0.13, -0.01,  0.24, -1.66, -0.04, -1.57,  0.03, -1.92,  0.13, -1.90,  0.54, -0.46, -1.87, -0.52,  0.09, -1.84,  0.04, -1.47 },
    /* on                  */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.21, -1.42, -0.04, -0.72, -0.04, -0.49, -0.05,  0.03,  0.20, -0.06,  0.09,  0.06,  0.30, -0.15, -1.16, -0.94, -0.53, -0.69, -1.09,  0.20,  1.04,  0.37, -0.38,  0.11,  0.06, -0.20, -0.30, -2.19,  0.36, -0.38, -1.18, -1.86, -0.15, -1.43,  0.36,  0.44, -0.28,  0.14, -0.59, -0.04,  0.06,  0.30, -0.36, -0.00, -0.30, -1.38, -0.01, -0.30, -1.61, -1.60, -0.01, -0.11, -0.13,  0.05, -1.22, -0.01, -0.36, -0.84, -0.13,  0.05, -0.36, -1.45, -0.05, -1.42, -0.18, -1.01,  0.35,  0.06, -0.30, -0.02, -1.34, -0.01, -0.67, -0.28, -0.33, -0.05,  0.15,  0.30, -0.15, -0.36,  0.50,  0.06, -1.21, -0.13, -0.04, -0.51,  0.65,  0.27, -0.18, -0.47, -0.05,  0.30,  0.86, -0.99,  0.06, -1.31, -0.89, -1.07, -0.05, -1.05, -0.39,  0.55, -1.02, -0.00, -0.30, -0.99, -0.01, -0.62 },
    /* good                */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -1.38,  0.13, -0.84,  0.13, -1.03,  0.23, -0.41, -0.60, -1.18,  0.28,  0.00, -0.14,  0.00, -3.29, -3.07,  0.76,  0.04, -3.21, -0.93, -1.09, -0.21, -0.04, -0.01, -0.36,  0.10,  0.10,  1.15,  0.15,  0.20, -0.50, -2.98,  0.00, -2.56, -0.12,  0.34, -0.19,  0.09, -2.13, -0.52,  0.00, -0.14, -1.49,  0.22,  0.10, -1.92, -0.03,  0.10, -2.74, -2.72, -0.55, -0.50, -1.44, -1.49, -2.35, -0.03,  0.10, -1.96, -1.44, -1.49, -0.89, -2.57, -0.31, -2.55, -1.22, -2.14,  0.23,  0.00,  0.10, -2.15, -2.47, -0.03,  0.56, -1.41, -0.34,  0.23,  0.34, -0.14, -0.12, -0.90, -1.63,  0.00, -2.34,  1.07,  0.13, -1.05, -0.47,  0.14, -0.07, -0.59, -0.31, -0.14, -0.59, -0.79,  0.00, -1.85, -1.11, -2.19, -0.31, -2.17, -0.39, -0.57, -2.15,  0.22,  0.10, -2.12, -0.03, -1.75 },
    /* terms               */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -0.70, -3.45, -0.70, -2.06, -0.05,  0.15, -2.21, -2.80,  0.18,  0.11, -0.71, -1.17, -5.90, -5.68, -0.26, -1.57, -5.82, -1.95, -2.12, -0.23, -2.24, -2.04, -0.98, -0.10,  0.19, -1.46, -0.52, -1.41, -2.11, -5.60, -1.17, -5.17,  0.02, -0.57, -0.58, -0.40, -3.74, -0.67,  0.11, -0.71, -4.10, -0.07,  0.19, -4.53, -0.70,  0.19, -5.35, -5.33, -1.16, -1.52, -3.05, -3.10, -4.96, -0.70, -2.51, -4.57, -3.05, -3.10, -1.51, -5.18, -0.10, -5.16, -0.83, -4.75, -1.38,  0.11,  0.19, -3.76, -5.08, -0.70, -0.05, -4.02, -2.36, -0.05, -1.27, -0.71,  0.73, -3.51, -3.24,  0.11, -4.95, -1.55, -0.70, -4.66, -3.09, -1.47,  0.66, -3.20, -0.10, -0.71, -0.88, -3.41,  0.11, -4.46, -2.72, -4.80, -0.10, -4.78,  0.39, -0.38, -4.76, -0.07,  0.19, -4.73, -0.70, -4.36 },
    /* with                */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -0.83,  0.16, -0.38,  0.24, -0.05,  0.41,  0.08, -0.50,  0.26,  0.31, -0.10, -1.70, -1.48, -0.27, -0.12, -1.62,  0.66,  0.77,  0.76,  0.09, -0.08,  0.14,  0.09, -0.20,  0.15,  0.35, -0.30, -0.49, -1.39, -0.10, -0.97,  0.34,  0.40,  0.16, -0.09, -0.86,  0.11,  0.26,  0.31, -0.48,  0.21, -0.20, -0.92, -0.05, -0.20, -1.14, -1.13, -0.42, -0.41, -0.76, -0.81, -0.76, -0.05, -0.90, -0.96, -0.76, -0.81, -0.47, -0.98, -0.16, -0.96,  0.91, -1.13, -0.05,  0.26, -0.20,  0.45, -0.87, -0.05,  0.07,  0.19,  0.03,  0.24,  0.47,  0.31,  0.38, -0.63,  0.38,  0.26, -0.75,  0.34,  0.16, -1.46, -0.88, -0.08, -0.06, -1.17, -0.16,  0.31,  0.08, -1.20,  0.26, -0.84, -0.52, -1.19, -0.16, -1.17, -0.38,  0.82, -1.14,  0.21, -0.20, -1.11, -0.05, -0.74 },
    /* anyone              */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -0.01, -1.59, -0.26,  0.62, -2.74, -3.32,  0.23, -0.12, -0.82, -0.89, -6.43, -6.21, -0.79, -1.10, -6.35, -2.48, -2.64, -2.09, -1.18, -1.57, -1.51,  0.96,  0.07, -1.99, -0.05, -1.94, -2.64, -6.12, -0.89, -5.70, -1.32, -0.10,  0.48, -0.93, -4.27, -0.52, -0.12, -0.82, -4.63, -0.02,  0.07, -5.06, -0.34,  0.07, -5.88, -5.86, -1.69, -2.05, -3.58, -3.63, -5.49, -0.34, -3.04, -5.10, -3.58, -3.63, -2.03, -5.71,  0.20, -5.69, -1.36, -5.28, -0.33, -0.12,  0.07, -4.29, -5.61, -0.34, -2.16, -4.55, -1.89, -0.26, -1.80, -0.82,  0.20, -4.04, -3.77, -0.12, -5.48, -3.66, -0.01, -4.19, -3.61, -2.00,  2.72, -3.73,  0.20, -0.82, -1.41, -3.93, -0.12, -4.99, -3.25, -5.33,  0.20, -5.31,  0.87, -1.91, -5.29, -0.02,  0.07, -5.26, -0.34, -4.89 },
    /* with                */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -0.38,  0.24, -0.05,  0.41,  0.08, -0.50,  0.26,  0.31, -0.10, -1.70, -1.48, -0.27, -0.12, -1.62,  0.66,  0.77,  0.76,  0.09, -0.08,  0.14,  0.09, -0.20,  0.15,  0.35, -0.30, -0.49, -1.39, -0.10, -0.97,  0.34,  0.40,  0.16, -0.09, -0.86,  0.11,  0.26,  0.31, -0.48,  0.21, -0.20, -0.92, -0.05, -0.20, -1.14, -1.13, -0.42, -0.41, -0.76, -0.81, -0.76, -0.05, -0.90, -0.96, -0.76, -0.81, -0.47, -0.98, -0.16, -0.96,  0.91, -1.13, -0.05,  0.26, -0.20,  0.45, -0.87, -0.05,  0.07,  0.19,  0.03,  0.24,  0.47,  0.31,  0.38, -0.63,  0.38,  0.26, -0.75,  0.34,  0.16, -1.46, -0.88, -0.08, -0.06, -1.17, -0.16,  0.31,  0.08, -1.20,  0.26, -0.84, -0.52, -1.19, -0.16, -1.17, -0.38,  0.82, -1.14,  0.21, -0.20, -1.11, -0.05, -0.74 },
    /* whom                */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.25, -1.05, -0.91, -0.91, -0.26, -0.13,  0.27,  0.53, -4.01, -3.79,  0.63,  1.32, -3.93, -1.65, -1.81,  0.33, -0.77, -1.15, -1.09, -0.21, -0.05, -0.57, -0.13,  0.48, -2.22, -3.71,  0.53, -3.28,  0.00,  0.15, -0.43, -0.63, -1.85,  0.90, -0.13,  0.27, -2.21, -0.06, -0.05, -2.64,  0.40, -0.05, -3.46, -3.44, -1.27, -1.63, -1.16, -1.21, -3.07,  0.40, -0.62, -2.68, -1.16, -1.21, -1.62, -3.29, -0.06, -3.27,  1.06, -2.86,  0.09, -0.13, -0.05, -1.87, -3.19,  0.40, -0.74, -2.13, -0.47,  0.25, -0.96,  0.27,  1.62, -1.62, -1.35, -0.13, -3.06,  0.35, -0.01, -1.77, -1.20, -0.58,  0.33, -1.31, -0.06,  0.27, -0.99, -1.52, -0.13, -2.57,  0.17, -2.91, -0.06, -2.89, -0.04,  0.51, -2.87, -0.06, -0.05, -2.84,  0.40, -2.47 },
    /* it                  */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.32,  0.16, -0.33,  0.14, -0.20, -0.88,  0.44, -1.62, -1.40,  0.21,  0.19, -1.54,  0.51, -0.54, -1.52, -0.24, -0.15,  0.39, -0.01,  0.17,  0.01, -0.29,  0.16,  0.58, -1.32,  0.44, -1.48, -0.17, -0.01, -0.14, -0.14, -0.47, -0.10, -0.20, -0.88, -0.82, -0.07,  0.17, -0.26,  0.21,  0.17, -1.07, -1.06,  0.21,  0.17, -0.10,  0.01, -0.68,  0.21, -0.41, -0.30, -0.10,  0.01,  0.77, -0.90,  0.25, -0.88, -0.41, -0.47, -0.40, -0.20,  0.17, -0.07, -0.80,  0.21, -0.02, -0.33, -0.09, -0.13, -0.38, -0.88, -0.14,  0.18, -0.77, -0.20, -1.26, -0.79,  0.20, -0.71, -0.39, -0.28,  0.24, -0.25,  0.25, -0.88,  0.01, -0.94, -0.20, -0.77, -0.14, -1.11,  0.25, -1.09,  0.09, -0.27, -1.07, -0.07,  0.17, -1.04,  0.21, -0.67 },
    /* had                 */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -0.74, -0.08, -0.34,  0.05,  0.46, -0.12, -1.18, -0.96,  0.06,  0.25, -1.10,  0.06,  1.61,  2.68, -0.52, -0.64, -0.34,  0.02,  0.02,  0.17, -0.04,  0.14, -1.09, -0.88, -0.12, -0.45,  1.22,  0.21, -1.92,  0.01, -1.19,  0.22,  0.05,  0.46, -0.70, -0.12,  0.02, -0.81, -0.02,  0.02, -0.63, -0.61,  0.10,  0.11,  0.86,  0.81, -0.24, -0.02,  0.40, -0.44,  0.86,  0.81, -0.11, -0.46,  0.04, -0.44,  2.57, -0.61,  1.84,  0.05,  0.02,  0.96, -0.36, -0.02,  0.42,  0.12, -0.55,  0.15,  3.45,  0.46,  1.64, -0.11,  0.16,  0.05, -0.23,  0.72,  0.00,  0.06, -1.07, -0.34, -0.18,  0.52,  0.04,  0.46, -0.55,  0.73,  0.05,  0.26, -0.08, -0.08,  0.04, -0.06,  0.06,  3.34, -0.04, -0.12,  0.02, -0.01, -0.02,  0.36 },
    /* always              */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -2.11, -0.73, -0.18, -0.57, -0.18, -4.63, -4.41,  0.00,  0.70, -4.55, -1.69, -1.43, -0.29, -1.39, -1.09, -1.29,  0.29,  0.03, -1.52, -0.19, -0.15, -0.84, -4.33, -0.18, -3.90, -0.17, -0.21,  0.10, -0.14, -2.48,  0.43, -0.18, -0.57, -2.83, -0.03,  0.03, -3.27,  0.08,  0.03, -4.08, -4.07,  0.11, -0.26, -2.11, -2.16, -3.69,  0.08, -1.25, -3.30, -2.11, -2.16, -0.82, -3.91, -0.06, -3.89, -0.88, -3.48, -0.85, -0.18,  0.03, -2.49, -3.81,  0.08,  0.64, -3.33, -0.10, -0.17, -0.00, -0.57, -0.00, -2.24, -1.97, -0.18, -3.68, -0.28,  0.20, -2.98, -2.40, -1.20,  0.51, -1.93, -0.06, -0.57, -0.93, -2.14, -0.18, -3.19, -1.45, -3.54, -0.06, -3.52, -0.04, -1.28, -3.49, -0.03,  0.03, -3.46,  0.08, -3.09 },
    /* pleased             */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -0.22, -0.07,  0.05, -0.34, -5.55, -5.33,  0.08, -0.22, -5.48, -1.61, -1.77,  0.11, -1.90, -0.69, -0.63,  0.25, -0.47, -1.12,  1.41, -2.07, -1.76, -5.25, -0.34, -4.83,  0.78,  0.19,  0.35, -0.06, -3.40, -0.13, -0.07,  0.05, -3.76, -0.15, -0.47, -4.19, -0.05, -0.47, -5.00, -4.99, -0.82, -1.18, -3.30, -3.34, -4.61, -0.05, -3.17, -5.23, -3.30, -3.34, -1.16, -4.84, -0.14, -4.81, -0.49, -4.40,  0.55, -0.07, -0.47, -3.41, -4.73, -0.05, -1.70, -3.67, -1.02, -0.97, -0.92,  0.05,  1.08, -3.16, -2.90, -0.07, -4.60, -1.20, -1.64, -3.32, -2.74, -1.13,  0.13, -2.86, -0.14,  0.05, -1.53, -4.06, -0.07, -4.11, -2.37, -4.46, -0.14, -4.44, -0.26, -1.03, -4.41, -0.15, -0.47, -4.39, -0.05, -4.02 },
    /* him                 */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -0.15,  0.17, -0.41, -2.30, -2.67,  0.42,  0.12, -2.23, -0.68,  0.16,  0.78, -0.92, -0.35, -0.29,  0.20,  0.01,  0.81,  0.25, -0.14,  0.17, -2.00, -0.41, -1.57,  0.39,  0.05,  0.05, -0.18, -0.73, -0.17, -0.15,  0.17, -1.09, -0.20,  0.01, -0.94,  0.13,  0.01, -1.75, -1.74, -0.37, -0.10, -0.63, -0.68, -1.36,  0.13, -0.24, -0.98, -0.63, -0.68,  0.09, -1.59, -0.19, -1.56, -0.14, -1.15,  0.63, -0.15,  0.01, -1.16, -1.48,  0.13,  0.23, -1.01, -0.58,  0.13,  1.74,  0.17,  0.63,  0.09, -0.64, -0.15, -1.35,  0.05, -0.34, -0.65, -0.49,  0.12,  0.35, -0.19, -0.19,  0.17, -0.28, -0.81, -0.15, -0.86, -0.71, -1.21, -0.19, -1.19,  0.23,  2.22, -1.16, -0.20,  0.01, -1.14,  0.13, -0.77 },
    /* to                  */ {},
    /* be                  */ {},
    /* at                  */ {},
    /* variance            */ {},
    /* There               */ {},
    /* Mrs                 */ {},
    /* Bennet              */ {},
    /* My                  */ {},
    /* mind                */ {},
    /* however             */ {},
    /* is                  */ {},
    /* now                 */ {},
    /* made                */ {},
    /* up                  */ {},
    /* on                  */ {},
    /* the                 */ {},
    /* subject             */ {},
    /* for                 */ {},
    /* having              */ {},
    /* received            */ {},
    /* ordination          */ {},
    /* at                  */ {},
    /* Easter              */ {},
    /* I                   */ {},
    /* have                */ {},
    /* been                */ {},
    /* so                  */ {},
    /* fortunate           */ {},
    /* as                  */ {},
    /* to                  */ {},
    /* be                  */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -0.48, -0.52,  0.09, -0.91,  0.04,  0.09, -1.72, -1.71, -0.04, -0.22, -0.31, -0.35, -1.75,  0.04,  0.37, -1.69, -0.31, -0.35,  0.00, -1.56,  0.13, -1.53, -0.01, -1.13, -0.08, -0.04,  0.09, -0.87, -1.45,  0.04, -0.30, -0.81,  0.04, -0.04, -0.52, -0.01, -0.35, -0.30, -1.20, -0.04, -1.74, -0.42,  0.14, -0.45, -0.20,  0.04,  0.34, -0.32,  0.13, -0.01,  0.24, -1.66, -0.04, -1.57,  0.03, -1.92,  0.13, -1.90,  0.54, -0.46, -1.87, -0.52,  0.09, -1.84,  0.04, -1.47 },
    /* distinguished       */ {},
    /* by                  */ {},
    /* the                 */ {},
    /* patronage           */ {},
    /* of                  */ {},
    /* the                 */ {},
    /* Right               */ {},
    /* Honourable          */ {},
    /* Lady                */ {},
    /* Catherine           */ {},
    /* de                  */ {},
    /* Bourgh              */ {},
    /* widow               */ {},
    /* of                  */ {},
    /* Sir                 */ {},
    /* Lewis               */ {},
    /* de                  */ {},
    /* Bourgh              */ {},
    /* whose               */ {},
    /* bounty              */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -0.98, -8.46, -4.13, -8.05, -3.10, -0.78, -0.11, -7.06, -8.38, -0.30, -3.35, -7.32, -4.66, -1.03, -4.57, -2.01, -2.57, -6.81, -6.54, -0.78, -8.25, -4.84, -1.20, -6.96, -6.39, -4.77, -0.06, -6.50, -0.98, -2.01, -4.18, -6.70, -0.78, -7.76, -5.02, -8.10, -0.98, -8.08, -1.91, -3.68, -8.06, -1.79, -0.11, -8.03, -0.30, -7.66 },
    /* and                 */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.37,  0.42,  0.36,  0.46,  0.01, -0.12,  0.18,  0.45,  0.03,  0.71,  0.77, -0.09,  0.16, -0.01,  0.20,  0.56, -0.10, -0.38,  0.01,  0.58,  0.36, -0.13, -0.46,  0.70, -0.29, -0.15, -0.26,  0.31,  0.20,  0.06,  0.12,  0.01,  0.65,  0.15,  0.31,  0.31,  0.01,  0.04,  0.16,  0.03, -0.04, -0.12,  0.06,  0.03,  0.43 },
    /* beneficence         */ {},
    /* has                 */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -2.04, -1.68,  0.15,  0.55, -1.05, -2.37,  0.13, -0.66, -1.31,  0.34, -0.03, -1.73,  0.24, -0.96, -0.80, -0.53,  0.15, -2.24, -1.84,  0.42, -0.96, -1.97,  0.23,  0.36, -1.50,  0.08,  0.24, -1.76, -0.70,  0.15, -1.75, -1.33, -2.10,  0.08, -2.08,  0.19, -1.13, -2.05,  0.31,  0.55, -2.03,  0.13, -1.66 },
    /* preferred           */ {},
    /* me                  */ {},
    /* to                  */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -0.12, -0.67, -0.71,  0.03,  0.21, -0.42, -0.16, -0.07,  0.03, -0.54, -0.12,  0.09, -0.06,  0.12, -0.77, -0.27, -0.07, -0.39,  0.09,  0.22, -0.22, -0.11, -0.01, -0.54,  0.60, -0.23,  0.12, -0.87, -0.21, -0.79, -0.01, -0.78, -0.06,  0.28, -0.75,  0.02, -0.12, -0.72,  0.03, -0.35 },
    /* the                 */ {},
    /* valuable            */ {},
    /* rectory             */ {},
    /* of                  */ {},
    /* this                */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -1.23,  0.83, -0.39, -0.07, -0.02, -0.19,  0.28,  0.54,  0.19, -1.17, -0.57,  0.50,  0.12,  0.70, -0.49,  0.07, -0.42,  0.34, -0.02,  0.10, -0.62,  0.19, -1.68,  0.48, -1.02,  0.34, -1.00,  0.05, -0.59, -0.97,  0.16,  0.06, -0.95, -0.10, -0.58 },
    /* parish              */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -2.24, -0.19, -2.14, -0.91, -1.14, -4.38, -4.11, -0.57, -5.82, -2.42,  1.23, -4.54, -3.96, -2.35,  0.78, -4.08, -0.56, -0.91, -1.75, -4.28, -0.57, -5.33, -2.59, -5.68, -0.56, -5.66, -1.80, -1.25, -5.63, -0.36, -0.78, -5.61, -0.34, -5.24 },
    /* where               */ {},
    /* it                  */ {},
    /* shall               */ {},
    /* be                  */ {},
    /* my                  */ {},
    /* earnest             */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -3.50,  0.52, -5.21, -1.81,  0.25, -3.93, -3.35, -1.74, -1.27, -3.47, -0.27,  2.02, -1.14, -3.67,  0.52, -4.72, -2.98, -5.07, -0.27, -5.05,  0.13, -0.64, -5.02, -0.75, -0.25, -5.00, -0.27, -4.63 },
    /* endeavour           */ {},
    /* to                  */ {},
    /* demean              */ {},
    /* myself              */ {},
    /* with                */ {},
    /* grateful            */ {  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -3.91, -2.30, -1.17, -4.03, -0.25,  0.46, -1.71, -4.23, -0.63, -5.29, -2.55, -5.63, -0.25, -5.61, -1.02, -1.21, -5.59,  0.68, -0.10, -5.56, -0.29, -5.19 },
    /* respect             */ {},
    /* towards             */ {},
    /* her                 */ {},
    /* ladyship            */ {},
    /* and                 */ {},
    /* be                  */ {},
    /* ever                */ {},
    /* ready               */ {},
    /* to                  */ {},
    /* perform             */ {},
    /* those               */ {},
    /* rites               */ {},
    /* and                 */ {},
    /* ceremonies          */ {},
    /* which               */ {},
    /* are                 */ {},
    /* instituted          */ {},
    /* by                  */ {},
    /* the                 */ {},
    /* Church              */ {},
    /* of                  */ {},
    /* England             */ {},

    };

    do_one_test(as, test_sentence, test_5_weights, DEFAULT_PAIR_DISTANCE);

    for (int pair_distance = 10; pair_distance < 50; pair_distance += 10)
    {
        std::cout << "Pair distance " << pair_distance << std::endl;
        do_one_test(as, test_sentence, test_5_weights, pair_distance, DONT_PRINT_PARSE_RESULTS);
    }

#endif

    exit(0);
}
#endif

