
                    Word Sense Disambiguation
                    -------------------------
                    Linas Vepstas - April 2008

This directory contains code for performing word-sense disambiguation.
This can be viewed as a first-draft attempt at extracting meaning from
text.

How-To
======
The WSD process is outlined below. It requires creating and maintaining
large, complex databases.  The WSD process is summarized here:

 * Download and compile opencog, RelEx, lexical-attraction from
   launchpad.
 * Create a bunch of SQL tables, as specified in the lexical-attr
   package. Configure locations and passwords in opencog.conf.
 * Parse a bunch of English text, using RelEx, to obtain frequency
   counts. Alternately, download pre-parsed texts from
   http://gnucash.org/linas/nlp/ which contains several cpu-years
   worth of parsed data.
 * Modify A.scm to change the hard-coded paths to point at the actual
   location of the parsed data. Modify lib/opencog-wsd.conf to
   include A.scm on startup.  Start the cogserver.
 * Run the scripts in the wordnet-import directory to load opencog
   with basic wordnet relationships. Can save soe time by loading,
   then saving to sql database. Next time, reload from the sql
   database, its much quicker.  (sql-open nlp )
 * Get to the scheme prompt, and run "(do-wsd 20)". This will run the
   current word-sense disambiguation code one 20 files, and will populate
   the databases with statistical results.  Caution; this is extremely
   CPU-intensive.
 * Read the README in wsd-post and triples for latest info & results.

The lexical attraction package, at https://launchpad.net/relex-statistical
is used to define SQL tables holding assorted relationships, including
tables of mutual information between word pairs, and tables of conditional
probabilities of link-grammar disjuncts. These tables are referenced
and/or generated by some of the opencog code here.

Database dumps of some of the statistical datasets can be downloaded from
http://gnucash.org/linas/nlp/  These represent several CPU-years of
number-crunching, and so are a short-cut to getting results more quickly.
