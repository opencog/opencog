
Misc development notes, in random order.
---------------------------------------

Would like to use continuations for the chat pipe ...
However, it seems that scm_with_guile() has a continuation barrier
in it. It appears that the barrier is overly pessimistic.

(define *myk* #f)

(call/cc (lambda (k) (set! *myk* k)))

(*myk* 42)


scm_c_call_with_current_module
scm_c_with_fluid

 scm_dynwind_begin (SCM_F_DYNWIND_REWINDABLE);
  scm_dynwind_fluid (fluid, value);
  ans = cproc (cdata);
  scm_dynwind_end ();


=========================================================

/usr/local/share/opencog/scm/nlp/scm/processing-utils.scm:
In procedure module-lookup: Unbound variable: r2l-rules

nlp/relex2logic/loader/gen-r2l-en-rulebase.scm:(define r2l-rules

(load-r2l-rulebase)

====================================================

nlp/scm/disjunct-list.scm

scheme@(guile-user)> (nlp-parse "who what where")
ERROR: In procedure cog-new-node:
ERROR: Throw to key `C++-EXCEPTION' with args `("cog-new-node"
"vector::_M_range_check")'.

scheme@(guile-user) [1]> ,bt
In opencog/nlp/chatbot/processing-utils.scm:
    226:8  2 (nlp-parse "who what where")
    42:29  1 (release-new-parsed-sents)
In unknown file:
           0 (cog-new-node 69 "# New Parsed Sentence")

#0  _M_lower_bound (this=<optimized out>, __k=..., __y=0x1c7ffe8,
    __x=0x100000000) at /usr/include/c++/4.8/bits/stl_tree.h:1157
#1  find (__k=..., this=0x1c7ffe0) at /usr/include/c++/4.8/bits/stl_tree.h:1805
#2  find (__x=..., this=0x1c7ffe0) at /usr/include/c++/4.8/bits/stl_map.h:837
#3  get (str=..., this=0x1c7ffe0)
    at atomspace-git/opencog/atomspace/StringIndex.h:52
#4  getAtom (str=..., type=3, this=0x1c74f48)
    at atomspace-git/opencog/atomspace/NodeIndex.h:66
#5  opencog::AtomTable::getHandle (this=this@entry=0x1c74ef0, t=t@entry=3,
    name=...)
    at atomspace-git/opencog/atomspace/AtomTable.cc:157
#6  0x00007ffff46398b7 in opencog::AtomSpace::add_node (this=0x1c74ef0,
    t=t@entry=3, name=..., async=async@entry=false)
    at atomspace-git/opencog/atomspace/AtomSpace.cc:149

 in guile:
scheme@(guile-user)> (cog-atomspace)
$1 = #<atomspace 0x31803a0>

above must be bogus or freed

 in cogserver:
Entering scheme shell; use ^D or a single . on a line by itself to exit.
guile> #<atomspace 0x300f150>


====================================================


scheme@(guile-user)> (use-modules (opencog))
duuude guile create as 0xc61840
duuude guile created count 1
duude call set_as
duuude swap: old as=(nil)
duuude swap: new as=0xc61840
duuude swapped: new count=2002001001

(start-cogserver "../lib/opencog-chatbot.conf")
duuuude cogserver telling scheme to use this: 0x1f0eeb0
duuude call set env_as to 0x1f0eeb0
duuude swap: old as=0xc61840
duuude swap: new as=0x1f0eeb0
duuude swapped: old count=2002001000
duuuude cogserver finished telling scheme to use this: 0x1f0eeb0

OK now this ... why? happens on module load ... like scheme is getting
inited again? but its already inited ??

(its tie use-modules (opencog)) being by-pased and running again. So
bad.  Must fix this! XXXXXXXXXX

Also the define-public is not being respected.. why? XXXXXXX

also gc is not respecting the fluid ref -- its been set as
current as but gc is collecting it wtf.


duuude guile create as 0x20781c0
duuude guile created count 1
duude call set_as
duuude swap: old as=0x1f0eeb0
duuude swap: new as=0x20781c0
duuude swapped: new count=2

Now this .. who is releaseing?  The GC is .. releasing the very first
aAS created.
duuude guile release 0xc61840
duuude guile release 0xc61840 has count 2002000999 <-- this is a
define-public, should not be released! how is that so?
duuude guile release 0x1f0eeb0 <--- this belongs to the cogserver.

Now who is setting the released thing??
duuude call set env_as to 0x1f0eeb0
duuude swap: old as=0x20781c0
duuude swap: new as=0x1f0eeb0
duuude swapped: old count=1


who is setting again??
duuude call set env_as to 0x20781c0
duuude swap: old as=0x1f0eeb0  << belongs to cogser
duuude swap: new as=0x20781c0
duuude swapped: new count=2

duuude guile release 0x1f0eeb0  << belong to cogser
duuude call set env_as to 0x1f0eeb0
duuude swap: old as=0x20781c0
duuude swap: new as=0x1f0eeb0
duuude swapped: old count=1
duuude call set env_as to 0x20781c0
duuude swap: old as=0x1f0eeb0
duuude swap: new as=0x20781c0
duuude swapped: new count=2
duuude guile release 0x20781c0
duuude guile release 0x20781c0 has count 1 << here GC thinks its free!
duuude guile release 0x1f0eeb0
duuude call set env_as to 0x1f0eeb0
duuude swap: old as=0x20781c0
duuude swap: new as=0x1f0eeb0
duuude swapped: old count=0
duuude call set env_as to 0x20781c0  << this is "freeed" who i suising it??
duuude swap: old as=0x1f0eeb0
duuude swap: new as=0x20781c0
duuude swapped: new count=1
duuude guile release 0x20781c0
duuude guile release 0x1f0eeb0
duuude guile release 0x20781c0 has count 0
duuude guile delete!!!!! 0x20781c0
duuude call set env_as to 0x1f0eeb0
duuude swap: old as=0x20781c0
duuude swap: new as=0x1f0eeb0
duuude call set env_as to 0x20781c0
duuude swap: old as=0x1f0eeb0
duuude swap: new as=0x20781c0
duuude guile release 0x20781c0
duuude guile release 0x1f0eeb0
duuude call set env_as to 0x1f0eeb0
duuude swap: old as=0x20781c0
duuude swap: new as=0x1f0eeb0
duuude call set env_as to 0x20781c0
duuude swap: old as=0x1f0eeb0
duuude swap: new as=0x20781c0
duuude guile release 0x20781c0
duuude guile release 0x1f0eeb0
duuude call set env_as to 0x1f0eeb0
duuude swap: old as=0x20781c0
duuude swap: new as=0x1f0eeb0
duuude call set env_as to 0x20781c0
duuude swap: old as=0x1f0eeb0
duuude swap: new as=0x20781c0
duuude guile release 0x1f0eeb0
duuude guile release 0x20781c0
duuude call set env_as to 0x1f0eeb0
duuude swap: old as=0x20781c0
duuude swap: new as=0x1f0eeb0
duuude call set env_as to 0x20781c0
duuude swap: old as=0x1f0eeb0
duuude swap: new as=0x20781c0
duuude guile release 0x1f0eeb0
duuude guile release 0x20781c0

====================================================

(define (declarative-rule interpretation_index)
   (list (InheritanceLink interpretation_index
      (DefinedLinguisticConceptNode "DeclarativeSpeechAct"))
   )
)

(define (pre-decl-rule int-index)
    (ListLink
        (declarative-rule int-index)
    )

(DefinedLinguisticConceptNode "TruthQuerySpeechAct"))
(InheritanceLink
 (DefinedLinguisticConceptNode "InterrogativeSpeechAct"))
(DefinedLinguisticConceptNode "ImperativeSpeechAct"))


(use-modules (opencog exec))
(nlp-parse "Who ate an apple?")
(load "../opencog/nlp/relex2logic/rules/interrogative.scm")
(load "../opencog/nlp/relex2logic/rules/in.scm")
(load "../opencog/nlp/chatbot/processing-utils.scm")

(InterpretationLink
   (InterpretationNode
"sentence@d38e2bc5-5c9d-447d-bbff-3c0b15b32d91_parse_0_interpretation_$X")
   (ParseNode "sentence@d38e2bc5-5c9d-447d-bbff-3c0b15b32d91_parse_0"
(stv 1 0.98210001))
)

why is there only one??  why is it not for the question?
who creates the InterpretationLink ?
who creates
sentence@d38e2bc5-5c9d-447d-bbff-3c0b15b32d91_parse_0_interpretation_$X"
??
r2l-parse does ... how? in processing_utils...

OK, but only the first one ever gets used ... fixed!

====================================================

* "Where is ...?" not identified as a question ..
  "When is ..." identified as conjunction by relex!


  Who works ...  What works ...
  Who sets interrogative-FLAG (_$qVar, T)
  "How is..."
  "Why is ..? also broken.


Where is the ball -- Q and Wq links

(InheritanceLink (stv 1.0 1.0)
   (WordInstanceNode "where@010c5f19-41d6-4b74-a4be-88a26f53d324")
   (DefinedLinguisticConceptNode "where")
)

(ReferenceLink (stv 1.0 1.0)
   (WordInstanceNode "where@010c5f19-41d6-4b74-a4be-88a26f53d324")
   (WordNode "where")
)


scm/sentence-matching.scm:

fixed! Relex was mis-behaving and R2L was using a fragile mechanism.

Relex failed to mark 4 of the 6 WH-words as interrogatives!

====================================================
* (process-query 'luser "Look to the left!") crashes
   C++-EXCEPTION' with args `("cog-fc"

  bug was the pre-SV-rule and definite-rule were running
    word-inst-get-lemma on LEFT-WALL, got nil, and then crashed.
  Fix to not run these rules when there is no lemma.

====================================================

(use-modules (opencog) (opencog nlp chatbot))
(process-query 'luser "Linas ate a cookie.")
(process-query 'luser "Who ate a cookie?")

(process-query 'luser "Linas ate an apple.")
(process-query 'luser "Who ate an apple?")

(cog-get-atoms 'InheritanceLink)

(cog-incoming-set (DefinedLinguisticConceptNode "DeclarativeSpeechAct"))



(use-modules (opencog) (opencog nlp) (opencog nlp microplanning))
(init-trace "/tmp/wtf")

(define lap
(SequentialAndLink
   (InheritanceLink
      (ConceptNode "Linas@862d2b73-dc84-4fc1-bc87-896476ba6541")
      (ConceptNode "Linas"))
   (EvaluationLink
      (DefinedLinguisticPredicateNode "definite")
      (ListLink
         (ConceptNode "Linas@862d2b73-dc84-4fc1-bc87-896476ba6541")))
   (ImplicationLink
      (PredicateNode "ate@37537945-4593-4136-bc70-236f4c86c43c")
      (PredicateNode "eat"))
   (InheritanceLink
      (ConceptNode "apple@5409a01f-f0d1-4665-af02-5811c9806b0e")
      (ConceptNode "apple"))
   (EvaluationLink
      (PredicateNode "ate@37537945-4593-4136-bc70-236f4c86c43c")
      (ListLink
         (ConceptNode "Linas@862d2b73-dc84-4fc1-bc87-896476ba6541")
         (ConceptNode "apple@5409a01f-f0d1-4665-af02-5811c9806b0e")))
   (InheritanceLink
      (SpecificEntityNode "Linas@862d2b73-dc84-4fc1-bc87-896476ba6541")
      (DefinedLinguisticConceptNode "male"))
   (InheritanceLink
      (SpecificEntityNode "Linas@862d2b73-dc84-4fc1-bc87-896476ba6541")
      (ConceptNode "Linas"))
))

(microplanning lap "declarative" *default_chunks_option* #f)

758c2970bd59a215f361b32f72a9f986966882c7 is the first bad commit
commit 758c2970bd59a215f361b32f72a9f986966882c7
Author: Linas Vepstas <linasvepstas@gmail.com>
Date:   Sun Nov 29 14:24:00 2015 -0600

    Wrap long lines

53f6cd548e24f2274878065bde7a0a0e8dc665f3 is good

iline 101 all-sets
wtf

(cog-get-atoms 'InterpretationNode)
(cog-incoming-set (car (cog-get-atoms 'InterpretationNode)))


(cog-incoming-set (DefinedLinguisticConceptNode "DeclarativeSpeechAct"))
(cog-incoming-set (car (cog-incoming-set (car (cog-get-atoms 'AnchorNode)))))

parse-get-r2l-outputs
r2l-parse

ahhh its focus-set!!!
parse-get-relex-outputs

(parse-get-relex-outputs parse-node)

ah haha!!!

====================================================

WTF:
fopencog has explocit error in scmutest -- can't find cog-atomspace
during module load

fopencog doesn't print this at guuile shell, but still doesn't define
it... oh right.


(use-modules (opencog)) from evaluator fails to actually
load the module scm code ...
probably because guile already thinks the module is loaded...


====================================================
ERROR: Unbound variable: pre-be-inheritance-rule
pre-be-inheritance-rule

====================================================

crash with null atom ptr .. line 455
outgoing set has null ptrs in it ... line 480
space :215
ForwardChainer::apply_rule
opencog/rule-engine/forwardchainer/ForwardChainer.cc:396

====================================================

state connected
IRC::disconnect()

dataout....

ret_len==SOCKET_ERROR
setsockopt (SO_KEEPALIVE

====================================================
bugs:

* 1916, #1922

* typoes fool the fuzzy matcher... e.g.
  "Linas eats banannas. "Who eats bannanas?"  note variable nn

