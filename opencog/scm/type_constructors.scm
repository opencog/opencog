
; DO NOT EDIT THIS FILE! This file was automatically
; generated from atom definitions in types.script by the macro OPENCOG_ADD_ATOM_TYPES
;
; This file contains basic scheme wrappers for atom creation.
;
(define (Node . x)
	(apply cog-new-node (append (list 'Node) x)))
(define (Link . x)
	(apply cog-new-link (append (list 'Link) x)))
(define (ConceptNode . x)
	(apply cog-new-node (append (list 'ConceptNode) x)))
(define (NumberNode . x)
	(apply cog-new-node (append (list 'NumberNode) x)))
(define (OrderedLink . x)
	(apply cog-new-link (append (list 'OrderedLink) x)))
(define (UnorderedLink . x)
	(apply cog-new-link (append (list 'UnorderedLink) x)))
(define (SetLink . x)
	(apply cog-new-link (append (list 'SetLink) x)))
(define (ListLink . x)
	(apply cog-new-link (append (list 'ListLink) x)))
(define (MemberLink . x)
	(apply cog-new-link (append (list 'MemberLink) x)))
(define (SubsetLink . x)
	(apply cog-new-link (append (list 'SubsetLink) x)))
(define (AndLink . x)
	(apply cog-new-link (append (list 'AndLink) x)))
(define (OrLink . x)
	(apply cog-new-link (append (list 'OrLink) x)))
(define (NotLink . x)
	(apply cog-new-link (append (list 'NotLink) x)))
(define (FalseLink . x)
	(apply cog-new-link (append (list 'FalseLink) x)))
(define (TrueLink . x)
	(apply cog-new-link (append (list 'TrueLink) x)))
(define (ContextLink . x)
	(apply cog-new-link (append (list 'ContextLink) x)))
(define (VariableNode . x)
	(apply cog-new-node (append (list 'VariableNode) x)))
(define (VariableTypeNode . x)
	(apply cog-new-node (append (list 'VariableTypeNode) x)))
(define (TypedVariableLink . x)
	(apply cog-new-link (append (list 'TypedVariableLink) x)))
(define (BindLink . x)
	(apply cog-new-link (append (list 'BindLink) x)))
(define (ForAllLink . x)
	(apply cog-new-link (append (list 'ForAllLink) x)))
(define (ExistsLink . x)
	(apply cog-new-link (append (list 'ExistsLink) x)))
(define (AverageLink . x)
	(apply cog-new-link (append (list 'AverageLink) x)))
(define (ScholemLink . x)
	(apply cog-new-link (append (list 'ScholemLink) x)))
(define (ImplicationLink . x)
	(apply cog-new-link (append (list 'ImplicationLink) x)))
(define (EvaluationLink . x)
	(apply cog-new-link (append (list 'EvaluationLink) x)))
(define (AssociativeLink . x)
	(apply cog-new-link (append (list 'AssociativeLink) x)))
(define (InheritanceLink . x)
	(apply cog-new-link (append (list 'InheritanceLink) x)))
(define (SimilarityLink . x)
	(apply cog-new-link (append (list 'SimilarityLink) x)))
(define (ExtensionalSimilarityLink . x)
	(apply cog-new-link (append (list 'ExtensionalSimilarityLink) x)))
(define (IntensionalInheritanceLink . x)
	(apply cog-new-link (append (list 'IntensionalInheritanceLink) x)))
(define (IntensionalSimilarityLink . x)
	(apply cog-new-link (append (list 'IntensionalSimilarityLink) x)))
(define (ProcedureNode . x)
	(apply cog-new-node (append (list 'ProcedureNode) x)))
(define (GroundedProcedureNode . x)
	(apply cog-new-node (append (list 'GroundedProcedureNode) x)))
(define (SchemaNode . x)
	(apply cog-new-node (append (list 'SchemaNode) x)))
(define (GroundedSchemaNode . x)
	(apply cog-new-node (append (list 'GroundedSchemaNode) x)))
(define (PredicateNode . x)
	(apply cog-new-node (append (list 'PredicateNode) x)))
(define (GroundedPredicateNode . x)
	(apply cog-new-node (append (list 'GroundedPredicateNode) x)))
(define (SatisfyingSetLink . x)
	(apply cog-new-link (append (list 'SatisfyingSetLink) x)))
(define (SchemaExecutionLink . x)
	(apply cog-new-link (append (list 'SchemaExecutionLink) x)))
(define (SchemaEvaluationLink . x)
	(apply cog-new-link (append (list 'SchemaEvaluationLink) x)))
(define (ExecutionLink . x)
	(apply cog-new-link (append (list 'ExecutionLink) x)))
(define (ExecutionOutputLink . x)
	(apply cog-new-link (append (list 'ExecutionOutputLink) x)))
(define (PredictiveImplicationLink . x)
	(apply cog-new-link (append (list 'PredictiveImplicationLink) x)))
(define (TailPredictiveImplicationLink . x)
	(apply cog-new-link (append (list 'TailPredictiveImplicationLink) x)))
(define (SequentialAndLink . x)
	(apply cog-new-link (append (list 'SequentialAndLink) x)))
(define (SimultaneousAndLink . x)
	(apply cog-new-link (append (list 'SimultaneousAndLink) x)))
(define (EventualSequentialAND . x)
	(apply cog-new-link (append (list 'EventualSequentialAND) x)))
(define (EventualSequentialImplication . x)
	(apply cog-new-link (append (list 'EventualSequentialImplication) x)))
(define (BeforeLink . x)
	(apply cog-new-link (append (list 'BeforeLink) x)))
(define (SimultaneousEquivalenceLink . x)
	(apply cog-new-link (append (list 'SimultaneousEquivalenceLink) x)))
(define (AnchorNode . x)
	(apply cog-new-node (append (list 'AnchorNode) x)))
(define (CountLink . x)
	(apply cog-new-link (append (list 'CountLink) x)))
(define (LgConnectorNode . x)
	(apply cog-new-node (append (list 'LgConnectorNode) x)))
(define (LgConnDirNode . x)
	(apply cog-new-node (append (list 'LgConnDirNode) x)))
(define (LgConnectorLink . x)
	(apply cog-new-link (append (list 'LgConnectorLink) x)))
(define (WordNode . x)
	(apply cog-new-node (append (list 'WordNode) x)))
(define (ReferenceLink . x)
	(apply cog-new-link (append (list 'ReferenceLink) x)))
(define (DocumentNode . x)
	(apply cog-new-node (append (list 'DocumentNode) x)))
(define (SentenceNode . x)
	(apply cog-new-node (append (list 'SentenceNode) x)))
(define (ParseNode . x)
	(apply cog-new-node (append (list 'ParseNode) x)))
(define (ParseLink . x)
	(apply cog-new-link (append (list 'ParseLink) x)))
(define (WordInstanceNode . x)
	(apply cog-new-node (append (list 'WordInstanceNode) x)))
(define (WordInstanceLink . x)
	(apply cog-new-link (append (list 'WordInstanceLink) x)))
(define (FeatureNode . x)
	(apply cog-new-node (append (list 'FeatureNode) x)))
(define (FeatureLink . x)
	(apply cog-new-link (append (list 'FeatureLink) x)))
(define (LinkGrammarRelationshipNode . x)
	(apply cog-new-node (append (list 'LinkGrammarRelationshipNode) x)))
(define (LinkGrammarDisjunctNode . x)
	(apply cog-new-node (append (list 'LinkGrammarDisjunctNode) x)))
(define (DefinedLinguisticConceptNode . x)
	(apply cog-new-node (append (list 'DefinedLinguisticConceptNode) x)))
(define (DefinedLinguisticRelationshipNode . x)
	(apply cog-new-node (append (list 'DefinedLinguisticRelationshipNode) x)))
(define (PrepositionalRelationshipNode . x)
	(apply cog-new-node (append (list 'PrepositionalRelationshipNode) x)))
(define (DefinedFrameNode . x)
	(apply cog-new-node (append (list 'DefinedFrameNode) x)))
(define (DefinedFrameElementNode . x)
	(apply cog-new-node (append (list 'DefinedFrameElementNode) x)))
(define (FrameElementLink . x)
	(apply cog-new-link (append (list 'FrameElementLink) x)))
(define (WordSenseNode . x)
	(apply cog-new-node (append (list 'WordSenseNode) x)))
(define (WordSenseLink . x)
	(apply cog-new-link (append (list 'WordSenseLink) x)))
(define (PartOfSpeechNode . x)
	(apply cog-new-node (append (list 'PartOfSpeechNode) x)))
(define (PartOfSpeechLink . x)
	(apply cog-new-link (append (list 'PartOfSpeechLink) x)))
(define (LemmaNode . x)
	(apply cog-new-node (append (list 'LemmaNode) x)))
(define (LemmaLink . x)
	(apply cog-new-link (append (list 'LemmaLink) x)))
(define (HolonymLink . x)
	(apply cog-new-link (append (list 'HolonymLink) x)))
(define (CosenseLink . x)
	(apply cog-new-link (append (list 'CosenseLink) x)))
(define (SemeNode . x)
	(apply cog-new-node (append (list 'SemeNode) x)))
(define (SemanticRelationNode . x)
	(apply cog-new-node (append (list 'SemanticRelationNode) x)))
(define (HebbianLink . x)
	(apply cog-new-link (append (list 'HebbianLink) x)))
(define (AsymmetricHebbianLink . x)
	(apply cog-new-link (append (list 'AsymmetricHebbianLink) x)))
(define (SymmetricHebbianLink . x)
	(apply cog-new-link (append (list 'SymmetricHebbianLink) x)))
(define (InverseHebbianLink . x)
	(apply cog-new-link (append (list 'InverseHebbianLink) x)))
(define (SymmetricInverseHebbianLink . x)
	(apply cog-new-link (append (list 'SymmetricInverseHebbianLink) x)))
(define (SpaceMapNode . x)
	(apply cog-new-node (append (list 'SpaceMapNode) x)))
(define (AtTimeLink . x)
	(apply cog-new-link (append (list 'AtTimeLink) x)))
(define (TimeNode . x)
	(apply cog-new-node (append (list 'TimeNode) x)))
(define (LatestLink . x)
	(apply cog-new-link (append (list 'LatestLink) x)))
(define (ObjectNode . x)
	(apply cog-new-node (append (list 'ObjectNode) x)))
(define (BlockEntityNode . x)
	(apply cog-new-node (append (list 'BlockEntityNode) x)))
(define (PetNode . x)
	(apply cog-new-node (append (list 'PetNode) x)))
(define (AvatarNode . x)
	(apply cog-new-node (append (list 'AvatarNode) x)))
(define (StructureNode . x)
	(apply cog-new-node (append (list 'StructureNode) x)))
(define (AccessoryNode . x)
	(apply cog-new-node (append (list 'AccessoryNode) x)))
(define (HumanoidNode . x)
	(apply cog-new-node (append (list 'HumanoidNode) x)))
(define (UnknownObjectNode . x)
	(apply cog-new-node (append (list 'UnknownObjectNode) x)))
(define (IsAcceptableSecondArgLink . x)
	(apply cog-new-link (append (list 'IsAcceptableSecondArgLink) x)))
