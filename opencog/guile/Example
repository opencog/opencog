
                   Example Usage
                   -------------

Below follow some examples for using scheme to input data into Opencog.
The scheme shell itself is reachable through the opencog shell.
Thus:
-- start the opencog server
-- telnet localhost 17001   # to get to the opencog shell
-- opencog> scm     # to enter the scheme shell

At this point, generic scheme expressions can be entered.

Example: Importing Data
-----------------------
Consider the following OpenCog XML:

<InheritanceLink strength=".98" confidence=".99">
       <Element class="ConceptNode" name="famous"/>
       <Element class="ConceptNode" name="artist"/>
</InheritanceLink>
<ExtensionalImplicationLink strength=".99" confidence=".99">
       <Element class="ConceptNode" name="Muhammad"/>
       <Element class="ConceptNode" name="artist"/>
</ExtensionalImplicationLink>
<ExtensionalImplicationLink strength=".99" confidence=".99">
      <Element class="ConceptNode" name="Britney"/>
      <Element class="ConceptNode" name="artist"/>
</ExtensionalImplicationLink>

This can be represented in scheme several different ways.
The most direct (but not the prettiest) way is as follows:

(cog-new-link 'InheritanceLink (cog-new-stv 0.98 0.99)
	(cog-new-node 'ConceptNode "famous")
	(cog-new-node 'ConceptNode "artist"))

(cog-new-link 'ExtensionalImplicationLink (cog-new-stv 0.99 0.99)
	(cog-new-node 'ConceptNode "Muhammad")
	(cog-new-node 'ConceptNode "artist"))

(cog-new-link 'ExtensionalImplicationLink (cog-new-stv 0.99 0.99)
	(cog-new-node 'ConceptNode "Britney")
	(cog-new-node 'ConceptNode "artist"))

Enter the above at the scheme shell prompt, and then exit the shell 
(with a single '.' followed by newline).  Then, at the opencog shell,
type 'ls'; this will reveal what was created.

The above can be prettied up with some "syntactic sugar."
A set of wrapper functions are defined in 
"src/atomspace/core_types.scm", which is loaded using the 
opencog/scm/load.sh shell script. To get an idea of what these
are like, some of these wrappers are shown below:

(define (stv x y) (cog-new-stv x y))
(define (ConceptNode . x) 
	(apply cog-new-node (append (list 'ConceptNode) x)))
(define (InheritanceLink . x) 
	(apply cog-new-link (append (list 'InheritanceLink) x)))
(define (ExtensionalImplicationLink . x) 
	(apply cog-new-link (append (list 'ExtensionalImplicationLink) x)))

After running "load.sh", atoms can be created using the rather sweeter 
form here:

(InheritanceLink (stv 0.98 0.99)
	(ConceptNode "famous")
	(ConceptNode "artist")
)
(ExtensionalImplicationLink (stv 0.99 0.99)
	(ConceptNode "Muhammad")
	(ConceptNode "artist")
)
(ExtensionalImplicationLink (stv 0.99 0.99)
	(ConceptNode "Britney")
	(ConceptNode "artist")
)


The simple truth values can appear either before, or after the nodes, 
thus:

(ExtensionalImplicationLink 
	(ConceptNode "Britney")
	(ConceptNode "artist")
	(stv 0.99 0.99)
)

will also work.

The above can be entered at the scheme shell prompt. There are several
ways to view what was created. One crude way is to exit the shell (with
a single '.' followed by newline) and type 'ls', which will display the
entire contents of the atomspace. A more refined way to view graphs is
with the cog-map-type, cog-incoming-set and cog-outgoing-set
procedures.  So, for example:

         ; Define a function that prints the atoms:
         guile> (define (prt-atom h) (display h) #f)
         ; Print all atoms of type ConceptNode:
         guile> (cog-map-type prt-atom 'ConceptNode)

The following will return all of the atoms that reference the
ConceptNode "artist":

        guile> (cog-incoming-set (ConceptNode "artist"))

The scheme "define" command is handy for naming atoms. So:

        guile> (define a (ConceptNode "artist"))
        guile> (cog-incoming-set a)


