/*
 * tests/dynamics/HebbianUpdatingAgentUTest.cxxtest
 *
 * Copyright (C) 2008 by OpenCog Foundation
 * All Rights Reserved
 *
 * Written by Joel Pitt <joel@fruitionnz.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as 
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses 
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <iostream>
#include <sstream>
#include <string>
#include <vector>

#include <opencog/truthvalue/SimpleTruthValue.h>
#include <opencog/dynamics/attention/HebbianUpdatingAgent.h>
#include <opencog/dynamics/attention/atom_types.h>
#include <opencog/server/CogServer.h>
#include <opencog/server/Agent.h>
#include <opencog/util/Config.h>

using namespace opencog;
using namespace std;

vector<Handle> createHebbianGraph(AtomSpace* atomSpace, std::string baseName)
{
    vector<Handle> testAtoms;
    int number = 4;

    for (int i = 0; i < number; i++) {
        std::ostringstream buf;
        TruthValuePtr tv1 = SimpleTruthValue::createTV(0.5f, 0.99f);
        buf << baseName << i;
        Handle h1 = atomSpace->add_node(CONCEPT_NODE, buf.str().c_str());
        h1->setTruthValue(tv1);
        //printf("add atom %d: %s\n", i, buf.str().c_str());
        testAtoms.push_back(h1);
    }

    TruthValuePtr tv2 = SimpleTruthValue::createTV(0.1f, 0.99f);

    HandleSeq outgoing1;
    outgoing1.push_back(testAtoms[0]);
    outgoing1.push_back(testAtoms[1]);
    Handle l1 = atomSpace->add_link(SYMMETRIC_HEBBIAN_LINK, outgoing1);
    l1->setTruthValue(tv2);

    HandleSeq outgoing2;
    outgoing2.push_back(testAtoms[2]);
    outgoing2.push_back(testAtoms[3]);
    Handle l2 = atomSpace->add_link(INVERSE_HEBBIAN_LINK, outgoing2);
    l2->setTruthValue(tv2);

    testAtoms.push_back(l1);
    testAtoms.push_back(l2);

    return testAtoms;
}

std::vector<Handle> createCase(bool srcInAF, int srcSTI, bool targInAF,
        int targSTI, bool inverse, float linkStr, std::string baseName)
{
    AtomSpace* a = &server().getAtomSpace();
    vector<Handle> testAtoms;
    std::ostringstream buf1;
    std::ostringstream buf2;
    TruthValuePtr tv1 = SimpleTruthValue::createTV(0.5f, 0.99f);
    buf1 << baseName << 1;
    Handle h1 = a->add_node(CONCEPT_NODE, buf1.str().c_str());
    h1->setTruthValue(tv1);
    a->set_STI(h1,srcSTI);
    if (srcSTI >= a->get_max_STI())
        a->update_max_STI(srcSTI);
    else if (srcSTI <= a->get_min_STI())
        a->update_min_STI(srcSTI);
    testAtoms.push_back(h1);
    buf2 << baseName << 2;
    Handle h2 = a->add_node(CONCEPT_NODE, buf2.str().c_str());
    h2->setTruthValue(tv1);
    a->set_STI(h2,targSTI);
    if (targSTI >= a->get_max_STI())
        a->update_max_STI(targSTI);
    else if (targSTI <= a->get_min_STI())
        a->update_min_STI(targSTI);
    testAtoms.push_back(h2);

    Handle l;
    if (inverse) {
        l = a->add_link(INVERSE_HEBBIAN_LINK, testAtoms[0], testAtoms[1]);
    } else {
        l = a->add_link(SYMMETRIC_HEBBIAN_LINK, testAtoms[0], testAtoms[1]);
    }
    TruthValuePtr linkTV = SimpleTruthValue::createTV(linkStr, 0.99f);
    l->setTruthValue(linkTV);
    testAtoms.push_back(l);

    return testAtoms;
}

void removeAll(AtomSpace* atomSpace)
{
    std::vector<Handle> allAtoms;
    std::vector<Handle>::iterator i;
    std::back_insert_iterator< std::vector<Handle> > outputI(allAtoms);

    server().getAtomSpace().get_handles_by_type(outputI, ATOM, true);

    for (i = allAtoms.begin(); i != allAtoms.end(); i++) {
        server().getAtomSpace().remove_atom(*i);
    }
}

class HebbianUpdatingAgentUTest :  public CxxTest::TestSuite {

private:

    Factory<HebbianUpdatingAgent, Agent> factory;
    HebbianUpdatingAgentPtr agent;
    CogServer& cogserver;
    std::vector<Handle> atoms;

public:

    static HebbianUpdatingAgentUTest* createSuite() { return new HebbianUpdatingAgentUTest(); }
    static void destroySuite(HebbianUpdatingAgentUTest* suite) { delete suite; }

    HebbianUpdatingAgentUTest() : cogserver(static_cast<CogServer&>(server(CogServer::createInstance))) {
        try {
            config().load("opencog.conf");
        } catch (RuntimeException &e) {
            std::cerr << e.getMessage() << std::endl;
        }
        cogserver.registerAgent(HebbianUpdatingAgent::info().id, &factory);
        agent = cogserver.createAgent<HebbianUpdatingAgent>(true);
        logger().setLevel(Logger::FINE);
        logger().setPrintToStdoutFlag(true);
    }

    ~HebbianUpdatingAgentUTest() {
        cogserver.unregisterAgent(HebbianUpdatingAgent::info().id);
    }

    void setUp() {
        std::vector< Handle >::iterator i;
        cogserver.getAtomSpace().set_attentional_focus_boundary(0);

    }

    void tearDown(){
        removeAll(&cogserver.getAtomSpace());
    }

//    void testGetSetMaxPercentage() {
//        float percent;
//        percent = agent->getMaxSpreadPercentage();
//        TS_ASSERT_EQUALS(percent, MA_DEFAULT_MAX_SPREAD_PERCENTAGE);
//        percent = 0.5;
//        agent->setMaxSpreadPercentage(percent);
//        TS_ASSERT_EQUALS(percent, agent->getMaxSpreadPercentage());
//    }

    void testRunWithLinkConversion() {
        AtomSpace* a = &cogserver.getAtomSpace();
        agent->convertLinks = true;
        std::vector<Handle> in_in_norm;
        std::vector<Handle> in_in_inv;
        std::vector<Handle> in_out_norm;
        std::vector<Handle> in_out_inv;
        std::vector<Handle> out_in_norm;
        std::vector<Handle> out_in_inv;
        
        in_in_norm = createCase(true, 10, true, 10, false, 0.1, "ininnorm");
        in_in_inv = createCase(true, 10, true, 10, true, 0.1, "inininv");
        in_out_norm = createCase(true, 10, false, -10, false, 0.1, "inoutnorm");
        in_out_inv = createCase(true, 10, false, -10, true, 0.1, "inoutinv");
        out_in_norm = createCase(false, -10, true, 10, false, 0.1, "outinnorm");
        out_in_inv = createCase(false, -10, true, 10, true, 0.1, "outininv");
        cogserver.runLoopStep();

        // replaced links, so handles no longer valid. find links through
        // outgoing sets.
        HandleSeq i;
        i.push_back(in_in_norm[0]); 
        i.push_back(in_in_norm[1]); 
        in_in_norm[2] = a->get_handle(SYMMETRIC_HEBBIAN_LINK, i);
        i.clear();
        TS_ASSERT(in_in_norm[2] != Handle::UNDEFINED);

        i.push_back(in_in_inv[0]); 
        i.push_back(in_in_inv[1]); 
        in_in_inv[2] = a->get_handle(SYMMETRIC_HEBBIAN_LINK, i);
        i.clear();
        TS_ASSERT(in_in_inv[2] != Handle::UNDEFINED);

        i.push_back(out_in_inv[1]); 
        i.push_back(out_in_inv[0]); 
        out_in_inv[2] = a->get_handle(INVERSE_HEBBIAN_LINK, i);
        i.clear();
        TS_ASSERT(out_in_inv[2] != Handle::UNDEFINED);

        i.push_back(out_in_norm[1]); 
        i.push_back(out_in_norm[0]); 
        out_in_norm[2] = a->get_handle(INVERSE_HEBBIAN_LINK, i);
        i.clear();
        TS_ASSERT(out_in_norm[2] != Handle::UNDEFINED);

        i.push_back(in_out_inv[0]); 
        i.push_back(in_out_inv[1]); 
        in_out_inv[2] = a->get_handle(INVERSE_HEBBIAN_LINK, i);
        i.clear();
        TS_ASSERT(in_out_inv[2] != Handle::UNDEFINED);

        i.push_back(in_out_norm[0]); 
        i.push_back(in_out_norm[1]); 
        in_out_norm[2] = a->get_handle(INVERSE_HEBBIAN_LINK, i);
        i.clear();
        TS_ASSERT(in_out_norm[2] != Handle::UNDEFINED);

        TS_ASSERT_DELTA(a->get_mean(in_in_norm[2]), 0.145f, 0.001);
        TS_ASSERT_DELTA(a->get_mean(in_in_inv[2]), 0.01f, 0.001);
        TS_ASSERT_DELTA(a->get_mean(out_in_inv[2]), 0.01f, 0.001);
        TS_ASSERT_DELTA(a->get_mean(out_in_norm[2]), 0.01f, 0.001);
        TS_ASSERT_DELTA(a->get_mean(in_out_inv[2]), 0.145f, 0.001);
        TS_ASSERT_DELTA(a->get_mean(in_out_norm[2]), 0.01f, 0.001);

       
    }

    

};
