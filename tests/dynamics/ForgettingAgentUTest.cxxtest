/*
 * tests/dynamics/ForgettingAgentUTest.cxxtest
 *
 * Copyright (C) 2008 by OpenCog Foundation
 * All Rights Reserved
 *
 * Written by Joel Pitt <joel@fruitionnz.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <iostream>
#include <sstream>
#include <string>
#include <vector>

#include <opencog/truthvalue/SimpleTruthValue.h>
#include <opencog/dynamics/attention/ForgettingAgent.h>
#include <opencog/server/CogServer.h>
#include <opencog/server/Agent.h>
#include <opencog/util/Config.h>

using namespace opencog;
using namespace std;

vector<Handle> createNodes(AtomSpace* atomSpace, std::string baseName, int number)
{
    vector<Handle> testAtoms;

    for (int i = 0; i < number; i++) {
        std::ostringstream buf;
        TruthValuePtr tv1 = SimpleTruthValue::createTV(0.5f, 0.99f);
        buf << baseName << i;
        Handle h1 = atomSpace->add_node(CONCEPT_NODE, buf.str().c_str());
        h1->setTruthValue(tv1);
        //printf("add atom %d: %s\n", i, buf.str().c_str());
        testAtoms.push_back(h1);
    }
    return testAtoms;
}

vector<Handle> createSimpleGraph(AtomSpace* atomSpace, const char* baseName)
{
    char buf[256];
    vector<Handle> testAtoms;
    int baseNameLength;

    memset(buf,0,256);
    baseNameLength = strlen(baseName);
    strcpy(buf,baseName);

    TruthValuePtr tv1 = SimpleTruthValue::createTV(0.5f, 0.99f);
    buf[baseNameLength] = '1';
    Handle h1 = atomSpace->add_node(CONCEPT_NODE, buf);
    h1->setTruthValue(tv1);
    buf[baseNameLength] = '2';
    Handle h2 = atomSpace->add_node(CONCEPT_NODE, buf);
    h2->setTruthValue(tv1);
    buf[baseNameLength] = '3';
    Handle h3 = atomSpace->add_node(CONCEPT_NODE, buf);
    h3->setTruthValue(tv1);

    HandleSeq outgoing1;
    outgoing1.push_back(h2);
    outgoing1.push_back(h3);
    Handle l1 = atomSpace->add_link(LIST_LINK, outgoing1);
    l1->setTruthValue(tv1);
    HandleSeq outgoing2;
    outgoing2.push_back(h1);
    outgoing2.push_back(l1);
    Handle l2 = atomSpace->add_link(EVALUATION_LINK, outgoing2);
    l2->setTruthValue(tv1);

    testAtoms.push_back(h1);
    testAtoms.push_back(h2);
    testAtoms.push_back(h3);
    testAtoms.push_back(l1);
    testAtoms.push_back(l2);

    return testAtoms;
}

class ForgettingAgentUTest :  public CxxTest::TestSuite {

private:

    Factory<ForgettingAgent, Agent> factory;
    CogServer& cogserver;
    ForgettingAgentPtr agent;

public:

    static ForgettingAgentUTest* createSuite() { return new ForgettingAgentUTest(); }
    static void destroySuite(ForgettingAgentUTest* suite) { delete suite; }

    ForgettingAgentUTest() : cogserver(static_cast<CogServer&>(server(CogServer::createInstance))) {
        try {
            config().load("opencog.conf");
        } catch (RuntimeException &e) {
            std::cerr << e.getMessage() << std::endl;
        }
        cogserver.registerAgent(ForgettingAgent::info().id, &factory);
        agent = cogserver.createAgent<ForgettingAgent>(true);
        logger().setLevel(Logger::FINE);
        logger().setPrintToStdoutFlag(true);
    }

    ~ForgettingAgentUTest() {
        cogserver.unregisterAgent(ForgettingAgent::info().id);
    }

    void setUp() {
    }

    void tearDown() {
    }

    void testPercentForget() {
        std::vector<Handle> atoms;
        printf("Testing forgetting based on percentage\n");

        agent->forgetPercentage = 0.10;

        int count = 100;
        atoms = createNodes(&cogserver.getAtomSpace(), "forgetPercent", count);

        cogserver.runLoopStep();
        count = count - (int) (count * agent->forgetPercentage);

        // Case: 100 atoms, 10% loss, all same LTI
        // Result: 10 random atom lost
        TS_ASSERT_EQUALS(cogserver.getAtomSpace().get_num_nodes(), count);

        // --
        count = cogserver.getAtomSpace().get_num_nodes();
        agent->forgetPercentage = 0.0f;
        cogserver.runLoopStep();

        // Case: 90 atoms, 0% loss, all same LTI
        // Result: 0 random atom lost
        TS_ASSERT_EQUALS(cogserver.getAtomSpace().get_num_nodes(), count);

        // --
        agent->forgetPercentage = 1.0f;
        cogserver.runLoopStep();
        count = 0;

        // Case: 90 atoms, 100% loss, all same LTI
        // Result: all atoms lost
        TS_ASSERT_EQUALS(cogserver.getAtomSpace().get_num_nodes(), count);

        // Test to make sure atoms are removed in the right order:
        count = 10;
        atoms = createNodes(&cogserver.getAtomSpace(), "forgetPercent", count);
        for (int i = 0; i < count; i++) {
            cogserver.getAtomSpace().set_LTI(atoms[i], (AttentionValue::lti_t) i);
        }

        agent->forgetPercentage = 0.20;
        cogserver.runLoopStep();
        // First two handles should now be invalid...
#ifdef USE_TLB_MAP
        TS_ASSERT(!cogserver.getAtomSpace().isValidHandle(atoms[0]));
        TS_ASSERT(!cogserver.getAtomSpace().isValidHandle(atoms[1]));
#else
        HandleSeq result;
        cogserver.getAtomSpace().get_handles_by_type(back_inserter(result),ATOM,true);
        for (unsigned int i = 0; i < result.size(); i++) {
            TS_ASSERT(result[i] != atoms[0]);
            TS_ASSERT(result[i] != atoms[1]);
        }
#endif

        // Forget all
        agent->forgetPercentage = 1.0f;
        cogserver.runLoopStep();
        count = 0;

    }

    void testThresholdForget() {
        std::vector<Handle> atoms;
        printf("Testing forgetting based on threshold\n");

        agent->forgetPercentage = 1.0f;
        agent->forgetThreshold = (AttentionValue::lti_t) -10;

        int count = 100;
        atoms = createNodes(&cogserver.getAtomSpace(), "forgetThreshold", count);

        // Case: 100 atoms, none below threshold
        // Result: Nothing lost
        cogserver.runLoopStep();
        TS_ASSERT_EQUALS(cogserver.getAtomSpace().get_num_nodes(), count);

        // Case: 100 atoms, 10 below threshold (ranging from threshold to
        // threshold - 10 LTI)
        // Result: 90 left, first 10 handles in array invalid
        for (int i = 0; i < 10; i++) {
            cogserver.getAtomSpace().set_LTI(atoms[i], (AttentionValue::lti_t)
                agent->forgetThreshold - i);
        }
        count = 90;

        cogserver.runLoopStep();
        TS_ASSERT_EQUALS(cogserver.getAtomSpace().get_num_nodes(), count);
#ifdef USE_TLB_MAP
        for (int i = 0; i < 10; i++) {
            TS_ASSERT(!cogserver.getAtomSpace().isValidHandle(atoms[i]));
        }
#else
        HandleSeq result;
        cogserver.getAtomSpace().get_handles_by_type(back_inserter(result),ATOM,true);
        for (unsigned int i = 0; i < result.size(); i++) {
            for (int j = 0; j < 10; j++) {
                TS_ASSERT(result[i] != atoms[j]);
            }
        }
#endif

        // Forget all
        agent->forgetThreshold = AttentionValue::MAXLTI;
        cogserver.runLoopStep();
        count = 0;

    }

    void testBothPercentAndThreshold() {
        int numRemoved = 0;
        std::vector<Handle> atoms;
        printf("Testing forgetting based on percentage and threshold\n");

        agent->forgetPercentage = 0.10f;
        agent->forgetThreshold = (AttentionValue::lti_t) -10;

        int count = 100;
        atoms = createNodes(&cogserver.getAtomSpace(), "forgetBoth", count);

        // Case: 100 atoms, only 5 below threshold
        // Result: only 5 lost, first five invalid
        for (int i = 0; i < 5; i++) {
            cogserver.getAtomSpace().set_LTI(atoms[i], (AttentionValue::lti_t)
                agent->forgetThreshold);
        }
        count = 95;
        cogserver.runLoopStep();
        TS_ASSERT_EQUALS(cogserver.getAtomSpace().get_num_nodes(), count);
#ifdef USE_TLB_MAP
        for (int i = 0; i < 5; i++) {
            TS_ASSERT(!cogserver.getAtomSpace().isValidHandle(atoms[i]));
        }
#else
        HandleSeq result;
        cogserver.getAtomSpace().get_handles_by_type(back_inserter(result),ATOM,true);
        for (unsigned int i = 0; i < result.size(); i++) {
            for (int j = 0; j < 5; j++) {
                TS_ASSERT(result[i] != atoms[j]);
            }
        }
#endif

        // Case: 95 atoms, 15 below threshold
        // Result: 9 removed, 86 left, first 14 handles in array invalid
        for (int i = 5; i < 20; i++) {
            cogserver.getAtomSpace().set_LTI(atoms[i], (AttentionValue::lti_t)
                agent->forgetThreshold);
        }
        count = 86;
        cogserver.runLoopStep();
        TS_ASSERT_EQUALS(cogserver.getAtomSpace().get_num_nodes(), count);
        numRemoved = 0;
#ifdef USE_TLB_MAP
        for (int i = 5; i < 20; i++) {
            if (!cogserver.getAtomSpace().isValidHandle(atoms[i])) {
                numRemoved++;
            }
        }
#else
        result.clear();
        cogserver.getAtomSpace().get_handles_by_type(back_inserter(result),ATOM,true);
        for (int j = 5; j < 20; j++) {
            bool removed = true;
            for (unsigned int i = 0; i < result.size(); i++) {
                if(result[i] == atoms[j]) {
                    removed = false;
                    break;
                }
            }
            if (removed) numRemoved++;
        }
#endif
        TS_ASSERT_EQUALS(9, numRemoved);

        // Forget all
        agent->forgetPercentage = 1.0f;
        agent->forgetThreshold = AttentionValue::MINLTI;
        cogserver.runLoopStep();
        count = 0;

    }
};
