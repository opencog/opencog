/*
 * tests/dynamics/HebbianCreationModuleUTest.cxxtest
 *
 * Copyright (C) 2014 Cosmo Harrigan
 * All Rights Reserved
 *
 * Written by Cosmo Harrigan
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <cxxtest/TestSuite.h>

#include <opencog/server/CogServer.h>
#include <opencog/atomspace/types.h>
#include <opencog/dynamics/attention/atom_types.h>
#include <opencog/atomspace/AttentionValue.h>
#include <opencog/atomspace/SimpleTruthValue.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/atomutils/AtomUtils.h>
#include <opencog/util/Logger.h>
#include <opencog/util/Config.h>
#include <opencog/util/algorithm.h>
//#include <iostream>

using namespace opencog;
using namespace std;

class HebbianCreationModuleUTest : public CxxTest::TestSuite
{
private:
    AtomSpace* as;

public:
    void tearDown()
    {
        cogserver().stop();
    }

    void InitCogServer()
    {
        try
        {
            config().load("opencog-test.conf");
        }
        catch (RuntimeException &e)
        {
            std::cerr << e.getMessage() << std::endl;
        }

        config().set("MODULES",
                     "opencog/dynamics/attention/libhebbiancreation.so");

        logger().setFilename(config()["LOG_FILE"]);
        logger().setLevel(Logger::getLevelFromString(config()["LOG_LEVEL"]));
        logger().setPrintToStdoutFlag(config().get_bool("LOG_TO_STDOUT"));

        cogserver().loadModules();
        this->as = &cogserver().getAtomSpace();
    }

    void testHebbianLinkCreation(void)
    {
        InitCogServer();

        // Set the AttentionalFocusBoundary
        as->setAttentionalFocusBoundary(100);

        count_t conf90 = SimpleTruthValue::confidenceToCount(0.90);

        // Populate the AtomSpace with the example atoms
        Handle kermit = as->addNode(
            CONCEPT_NODE, "Kermit");
        kermit->setTruthValue( SimpleTruthValue::createTV(0.001, conf90));
        Handle frog = as->addNode(
            CONCEPT_NODE, "Frog");
        frog->setTruthValue( SimpleTruthValue::createTV(0.01, conf90));
        Handle animal = as->addNode(
            CONCEPT_NODE, "Animal");
        animal->setTruthValue( SimpleTruthValue::createTV(0.1, conf90));
        Handle alive = as->addNode(
            PREDICATE_NODE, "alive");
        alive->setTruthValue( SimpleTruthValue::createTV(0.01, conf90));
        Handle slimy = as->addNode(
            PREDICATE_NODE, "slimy");
        slimy->setTruthValue( SimpleTruthValue::createTV(0.01, conf90));

        Handle kermitFrog = as->addLink(
                    INHERITANCE_LINK, kermit, frog);
        kermitFrog->setTruthValue(
                    SimpleTruthValue::createTV(0.9, conf90));
        Handle frogAnimal = as->addLink(
                    INHERITANCE_LINK, frog, animal);
        frogAnimal->setTruthValue(
                    SimpleTruthValue::createTV(0.9, conf90));
        Handle frogAlive = as->addLink(
                    EVALUATION_LINK, frog, alive);
        frogAlive->setTruthValue(
                    SimpleTruthValue::createTV(0.9, conf90));
        Handle frogSlimy = as->addLink(
                    EVALUATION_LINK, frog, slimy);
        frogSlimy->setTruthValue(
                    SimpleTruthValue::createTV(0.9, conf90));

        // Populate the AtomSpace with some additional dummy atoms
        Handle dummy1 = as->addNode(
                    CONCEPT_NODE, "Dummy1");
        dummy1->setTruthValue(
                    SimpleTruthValue::createTV(0.001, conf90));
        Handle dummy2 = as->addNode(
                    CONCEPT_NODE, "Dummy2");
        dummy2->setTruthValue(
                    SimpleTruthValue::createTV(0.001, conf90));
        Handle dummyLink = as->addLink(
                    INHERITANCE_LINK, dummy1, dummy2);
        dummyLink->setTruthValue(
                    SimpleTruthValue::createTV(0.9, conf90));

        // Put these atoms in the AttentionalFocus:
        // "Kermit", "Frog", "Animal", "alive"
        as->setSTI(kermit, 200);
        as->setSTI(frog, 200);
        as->setSTI(animal, 200);
        as->setSTI(alive, 200);

        HandleSeq attentionalFocus;
        as->getHandleSetInAttentionalFocus(back_inserter(attentionalFocus));

        // Allow the events to propagate
        sleep(1);

        // Confirm that these atoms now have AsymmetricHebbianLinks between
        // them: "Kermit", "Frog", "Animal", "alive"
        for (Handle node : attentionalFocus) {
            HandleSeq existingAsSource =
                    getNeighbors(node, false, true,
                                     ASYMMETRIC_HEBBIAN_LINK, false);
            HandleSeq existingAsTarget =
                    getNeighbors(node, true, false,
                                     ASYMMETRIC_HEBBIAN_LINK, false);
            TS_ASSERT(existingAsSource.size() == 3);
            TS_ASSERT(existingAsTarget.size() == 3);
        }

        // Confirm that only n*(n-1) = 12 AsymmetricHebbianLinks were formed,
        // indicating that none incorrectly include "slimy" nor the dummy atoms
        HandleSeq hebbianLinks;
        as->getHandlesByType(back_inserter(hebbianLinks), ASYMMETRIC_HEBBIAN_LINK);
        TS_ASSERT(hebbianLinks.size() == 12);
    }
};
