/*
 * tests/dynamics/SimpleImportanceDiffusionAgentUTest.cxxtest
 *
 * Copyright (C) 2014 Cosmo Harrigan
 * All Rights Reserved
 *
 * Written by Cosmo Harrigan
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <cxxtest/TestSuite.h>

#include <opencog/server/CogServer.h>
#include <opencog/atomspace/types.h>
#include <opencog/dynamics/attention/atom_types.h>
#include <opencog/dynamics/attention/SimpleImportanceDiffusionAgent.h>
#include <opencog/atomspace/AttentionValue.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/atomspace/Handle.h>
#include <opencog/guile/load-file.h>
#include <opencog/util/Config.h>

using namespace opencog;
using namespace std;

class SimpleImportanceDiffusionAgentUTest : public CxxTest::TestSuite
{
private:
    AtomSpace* as;
    Factory<SimpleImportanceDiffusionAgent, Agent> factory;
    SimpleImportanceDiffusionAgentPtr agent;

public:
    void setUp(void)
    {        
        this->as = &cogserver().getAtomSpace();
        config().load(NULL,false);
        config().set("SCM_PRELOAD",
            "opencog/scm/core_types.scm, "
            "opencog/scm/utilities.scm");
    
        load_scm_files_from_config(*as);
        
        config().set("MODULES",
            "opencog/dynamics/attention/libattention.so");
        
        cogserver().loadModules();
        
        cogserver().registerAgent(SimpleImportanceDiffusionAgent::info().id, &factory);
        agent = cogserver().createAgent<SimpleImportanceDiffusionAgent>(true);
    }

    void tearDown()
    {
        cogserver().stop();
    }

    /*
     * Test diffusion calculations between non-hebbian incident atoms using a 
     * simple EvaluationLink structure consisting of an EvaluationLink, 
     * PredicateNode, ListLink and ConceptNode
     *
     * Initial atomspace state is defined in: example-1.scm
     *
     * Handle #2: PredicateNode
     * Handle #3: ConceptNode
     * Handle #4: ListLink
     * Handle #5: EvaluationLink
     *
     * Test conditions:
     * ECAN_MAX_SPREAD_PERCENTAGE = 0.6
     * ECAN_SPREAD_HEBBIAN_ONLY = false
     * HEBBIAN_MAX_ALLOCATION_PERCENTAGE = 0.5
     */
    void testEvaluationLink(void)
    {
        config().set("SCM_PRELOAD", "tests/dynamics/scm/example-1.scm");
        agent->setMaxSpreadPercentage(0.60f);
        agent->setSpreadHebbianOnly(false);
        agent->setHebbianMaxAllocationPercentage(0.50f);
        agent->setMaxSpreadPercentage(0.60f);
        load_scm_files_from_config(*as);    

        // Initial conditions        
        TS_ASSERT(as->getSTI(Handle(2)) == 1000);
        TS_ASSERT(as->getSTI(Handle(3)) == 0);
        TS_ASSERT(as->getSTI(Handle(4)) == 0);
        TS_ASSERT(as->getSTI(Handle(5)) == 0);

        // Timestep #1
        cogserver().runLoopStep();
        TS_ASSERT(as->getSTI(Handle(2)) == 400);
        TS_ASSERT(as->getSTI(Handle(3)) == 0);
        TS_ASSERT(as->getSTI(Handle(4)) == 0);
        TS_ASSERT(as->getSTI(Handle(5)) == 600);
        
        // Timestep #2
        cogserver().runLoopStep();
        TS_ASSERT(as->getSTI(Handle(2)) == 340);
        TS_ASSERT(as->getSTI(Handle(3)) == 0);
        TS_ASSERT(as->getSTI(Handle(4)) == 180);
        TS_ASSERT(as->getSTI(Handle(5)) == 480);
        
        // Timestep #3
        cogserver().runLoopStep();
        TS_ASSERT(as->getSTI(Handle(2)) == 280);
        TS_ASSERT(as->getSTI(Handle(3)) == 54);
        TS_ASSERT(as->getSTI(Handle(4)) == 216);
        TS_ASSERT(as->getSTI(Handle(5)) == 450);
        
        // Timestep #4
        cogserver().runLoopStep();
        TS_ASSERT(as->getSTI(Handle(2)) == 247);
        TS_ASSERT(as->getSTI(Handle(3)) == 87);
        TS_ASSERT(as->getSTI(Handle(4)) == 253);
        TS_ASSERT(as->getSTI(Handle(5)) == 413);
        
        // Timestep #5
        cogserver().runLoopStep();
        TS_ASSERT(as->getSTI(Handle(2)) == 223);
        TS_ASSERT(as->getSTI(Handle(3)) == 111);
        TS_ASSERT(as->getSTI(Handle(4)) == 277);
        TS_ASSERT(as->getSTI(Handle(5)) == 389);
        
        // Confirm that no new atoms were added
        TS_ASSERT(as->getSize() == 4);
    }
};
