/*
 * tests/atomspace/AtomTableUTest.cxxtest
 *
 * Copyright (C) 2002-2007 Novamente LLC
 * Copyright (C) 2008 by OpenCog Foundation
 * All Rights Reserved
 *
 * Written by Welter Silva <welter@vettalabs.com>
 *            Gustavo Gama <gama@vettalabs.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <iostream>
#include <fstream>

// We must use the PROJECT_SOURCE_DIR var supplied by the CMake script to
// ensure we find the file whether or not we're building using a separate build
// dir
#define ATOM_TABLE_TEST_SCM_FILE PROJECT_SOURCE_DIR"/tests/atomspace/atom_table_utest.scm"

#include <opencog/atomspace/AtomSpaceDefinitions.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/atomspace/AtomTable.h>
#include <opencog/atomspace/ClassServer.h>
#include <opencog/atomspace/CompositeTruthValue.h>
#include <opencog/atomspace/Link.h>
#include <opencog/atomspace/Node.h>
#include <opencog/atomspace/SimpleTruthValue.h>
#include <opencog/atomspace/TLB.h>
#include <opencog/guile/load-file.h>
#include <opencog/util/Config.h>
#include <opencog/util/Logger.h>
#include <opencog/util/platform.h>
#include <opencog/util/mt19937ar.h>


#include "HandleEntry.h"

using namespace opencog;
using namespace std;

const char* gpnNames[] = {"GPN1", "GPN2", "GPN3", "GPN4", "GNP5", "GNP6"};
int numberOfExpectedMatches[] = {26, 26, 26, 1, 1, 1};

int numberOfExpectedMatchesWithVH1[] = {15, 15, 15, 0, 0, 0};
int numberOfExpectedMatchesWithVH2[] = {15, 15, 15, 1, 1, 1};

class AtomTableUTest : public CxxTest::TestSuite
{

private:

    AtomTable* table;
    AtomSpace* atomSpace;
    VersionHandle VH1;
    VersionHandle VH2;

public:

    AtomTableUTest() {
        // Uncomment to enable logging
        //logger().setLevel(Logger::DEBUG);
        //logger().setPrintToStdoutFlag(true);
    }
    ~AtomTableUTest() {}

    void setUp()
    {
        atomSpace = new AtomSpace();
        table = (AtomTable*) & (atomSpace->atomSpaceAsync->getAtomTable());

        /* load scm files with all necessary nodes and links  */
        load_scm_file(*atomSpace, PROJECT_SOURCE_DIR"/tests/scm/typedefs.scm");
        load_scm_file(*atomSpace, ATOM_TABLE_TEST_SCM_FILE);

        // Check for existing links because there are 2 identical links in the test xml file
        VH1 = VersionHandle(HYPOTHETICAL, atomSpace->addNode(CONCEPT_NODE, "HYPOTHETICAL"));
        VH2 = VersionHandle(CONTEXTUAL, atomSpace->addNode(CONCEPT_NODE, "CONTEXTUAL"));
    }

    void tearDown() {
        delete atomSpace;
    }

    void testSimple() {
        AtomTable atomTable;
        Handle word = atomTable.add(createNode(NUMBER_NODE, "1"));
        Handle sense = atomTable.add(createNode(CONCEPT_NODE, "28675194"));
        std::vector<Handle> os;
        os.push_back(word);
        os.push_back(sense);
        atomTable.add(createLink(INHERITANCE_LINK, os));
    }

    void testHolds() {
        Handle h(100101);
        AtomTable atomTable;
        Handle word = atomTable.add(createNode(NUMBER_NODE, "1"));
        TS_ASSERT(atomTable.holds(word));
        TS_ASSERT(!atomTable.holds(h));
    }

    void testIsCleared() {

        AtomTable atomTable;
        TS_ASSERT(atomTable.isCleared());
        Handle word = atomTable.add(createNode(NUMBER_NODE, "1"));
        TS_ASSERT(!atomTable.isCleared());
    }

    void testGetRandom() {
        AtomTable atomTable;
        ostringstream oss;
        size_t numBuckets = atomTable.getSize() / 10;
        for (unsigned i=0; i < numBuckets + 10; i++){
            oss.clear();
            oss << i;
            atomTable.add(createNode(NUMBER_NODE, oss.str()));
        }
        RandGen* rng = new opencog::MT19937RandGen(0);
        Handle h1 = atomTable.getRandom(rng);
        Handle h2 = atomTable.getRandom(rng);
        int tries = 0;
        while (h1 == h2 && tries < 100) {
            // getting the same handle 100 times is extremely improbable
            // whereas one or two in a row may happen once every now and then.
            Handle h2 = atomTable.getRandom(rng);
            tries+=1;
        }
        TS_ASSERT(h1 != h2);
        delete rng;

    }

    void REMOVEDtestPredicateIndices() {
        /* TODO: REVIEW ALL THIS STUFF */
        HandleEntry* expectedEntries[6];
        //logger().debug("building expectedEntries");
        for (int index = 0; index < 6; index++) {

            HandleSeq hs;
            table->getHandlesByGPN(back_inserter(hs), gpnNames[index]);
            HandleEntry* indexedHandles = HandleEntry::fromHandleVector(hs);

            //logger().debug("indexedHandles for index = %d => %p", index, indexedHandles);
            expectedEntries[index] = indexedHandles;
            //logger().debug("Handles in the index %d: ", index);
            int matchCount = 0;
            while (indexedHandles != NULL) {
                matchCount++;
                //logger().debug("%p (%d)\t", indexedHandles->handle, TLB::getAtom(indexedHandles->handle)->getType());
                indexedHandles = indexedHandles->next;
            }
            //logger().debug("\ncount = %d, expected count = %d", matchCount, numberOfExpectedMatches[index]);
            TS_ASSERT(matchCount == numberOfExpectedMatches[index]);
        }
        //logger().debug("testPredicateIndices with NULL_VERSION_HANDLE");
        for (int index = 0; index < 6; index++) {
            HandleSeq hs;
            table->getHandlesByGPN(back_inserter(hs), gpnNames[index]);
            HandleEntry* indexedHandles = HandleEntry::fromHandleVector(hs);
            //logger().debug("indexedHandles for index = %d => %p", index, indexedHandles);
            //logger().debug("Handles that matches predicate %s: ", gpnNames[index]);
            HandleEntry* expectedEntry = expectedEntries[index];
            while (indexedHandles != NULL) {
                TS_ASSERT(expectedEntry);
                TS_ASSERT(expectedEntry->handle == indexedHandles->handle);
                //logger().debug("%p (%d)\t", indexedHandles->handle, TLB::getAtom(indexedHandles->handle)->getType());
                indexedHandles = indexedHandles->next;
                expectedEntry = expectedEntry->next;
            }
            TS_ASSERT(!expectedEntry);
            //logger().debug("");
        }
        // test with non-null VersionHandles
        //logger().debug("adding versioned TVs");
        for (int index = 0; index < 6; index++) {
            HandleEntry* expectedEntry = expectedEntries[index];
            int count = 0;
            while (expectedEntry != NULL) {
                if (count < numberOfExpectedMatchesWithVH1[index]) {
                    //logger().debug("adding versioned tv with VH1");
                    AtomPtr atom(TLB::getAtom(expectedEntry->handle));
                    TruthValue* tv = CompositeTruthValue(TruthValue::NULL_TV(), VH1).merge(atom->getTruthValue());
                    atom->setTruthValue(*tv);
                    delete tv;
                    //logger().debug("resulting tv = %s", atom->getTruthValue()->toString().c_str());
                }
                if (numberOfExpectedMatches[index] - count <=  numberOfExpectedMatchesWithVH2[index]) {
                    //logger().debug("adding versioned tv with VH2");
                    AtomPtr atom(TLB::getAtom(expectedEntry->handle));
                    TruthValue* tv = CompositeTruthValue(TruthValue::NULL_TV(), VH2).merge(atom->getTruthValue());
                    atom->setTruthValue(*tv);
                    delete tv;
                    //logger().debug("resulting tv = %s", atom->getTruthValue()->toString().c_str());
                }
                expectedEntry = expectedEntry->next;
                count++;
            }
        }
        //logger().debug("testPredicateIndices with VH1");
        for (int index = 0; index < 6; index++) {
            HandleSeq hs;
            table->getHandlesByGPN(back_inserter(hs), gpnNames[index], VH1);
            HandleEntry* indexedHandles = HandleEntry::fromHandleVector(hs);
            //logger().debug("indexedHandles for index = %d => %p", index, indexedHandles);
            HandleEntry* expectedEntry = expectedEntries[index];
            int count = 0;
            while (indexedHandles != NULL) {
                TS_ASSERT(expectedEntry);
                TS_ASSERT(expectedEntry->handle == indexedHandles->handle);
                //logger().debug("Checking atom with TV = %s", TLB::getAtom(indexedHandles->handle)->getTruthValue().toString().c_str());
                TS_ASSERT(TLB::getAtom(indexedHandles->handle)->getTruthValue().getType() == COMPOSITE_TRUTH_VALUE);
                indexedHandles = indexedHandles->next;
                expectedEntry = expectedEntry->next;
                count++;
            }
            //logger().debug("count before = %d", count);
            while (count < numberOfExpectedMatches[index]) {
                TS_ASSERT(expectedEntry);
                expectedEntry = expectedEntry->next;
                count++;
            }
            //logger().debug("count after = %d", count);
            TS_ASSERT(!expectedEntry);
        }
        //logger().debug("testPredicateIndices with VH2");
        for (int index = 0; index < 6; index++) {
            HandleSeq hs;
            table->getHandlesByGPN(back_inserter(hs), gpnNames[index], VH2);
            HandleEntry* indexedHandles = HandleEntry::fromHandleVector(hs);
            //logger().debug("indexedHandles for index = %d => %p", index, indexedHandles);
            HandleEntry* expectedEntry = expectedEntries[index];
            int count = 0;
            while (numberOfExpectedMatches[index] - count > numberOfExpectedMatchesWithVH2[index]) {
                TS_ASSERT(expectedEntry);
                expectedEntry = expectedEntry->next;
                count++;
            }
            //logger().debug("count before = %d", count);
            while (indexedHandles != NULL) {
                TS_ASSERT(expectedEntry);
                TS_ASSERT(expectedEntry->handle == indexedHandles->handle);
                //logger().debug("Checking atom with TV = %s", TLB::getAtom(indexedHandles->handle)->getTruthValue()->toString().c_str());
                TS_ASSERT(TLB::getAtom(indexedHandles->handle)->getTruthValue().getType() == COMPOSITE_TRUTH_VALUE);
                indexedHandles = indexedHandles->next;
                expectedEntry = expectedEntry->next;
                count++;
            }
            //logger().debug("count after = %d", count);
            TS_ASSERT(!expectedEntry);
        }

        //logger().debug("testPredicateIndices(): END TEST");fflush(stdout);
    }

    // Look for atoms in the following structure:
    //      <ListLink timestamp="630057840">
    //          <Element class="CWPixelPerceptNode" name="00065349"/>
    //          <Element class="NumberNode" name="on"/>
    //      </ListLink>
    void testGetHandleSet()
    {
        //== getHandleSet(const char**, Type*, bool*, Arity, Type = ATOM, bool = true) ==/
        const char* names1[] = {"00065349", "12"};
        Type types1[] = {CONCEPT_NODE, NUMBER_NODE};
        HandleEntry* result = HandleEntry::fromHandleSet(table->getHandlesByNames(names1, types1, NULL, 2, LIST_LINK, false));
        TS_ASSERT(result != NULL);
        //logger().debug("result = %s", result->toString().c_str());
        delete (result);

        const char* names2[] = {"12", "00065349"};
        Type types2[] = {NUMBER_NODE, CONCEPT_NODE};
        result = HandleEntry::fromHandleSet(table->getHandlesByNames(names2, types2, NULL, 2, LIST_LINK, false));
        TS_ASSERT(result == NULL);

        const char* names3[] = {NULL, "12"};
        Type types3[] = {NOTYPE, NUMBER_NODE};
        result = HandleEntry::fromHandleSet(table->getHandlesByNames(names3, types3, NULL, 2, LIST_LINK, false));
        TS_ASSERT(result != NULL);
        //logger().debug("result = %s", result->toString().c_str());
        delete(result);

        const char* names4[] = {NULL, "00065349"};
        Type types4[] = {NOTYPE, CONCEPT_NODE};
        result = HandleEntry::fromHandleSet(table->getHandlesByNames(names4, types4, NULL, 2, LIST_LINK, false));
        //if (result != NULL) logger().debug("result = %s", result->toString().c_str());
        TS_ASSERT(result == NULL);

        result = HandleEntry::fromHandleSet(table->getHandlesByNames((const char**) NULL, types1, NULL, 2, LIST_LINK, false));
        TS_ASSERT(result != NULL);
        //logger().debug("result = %s", result->toString().c_str());
        delete(result);

        result = HandleEntry::fromHandleSet(table->getHandlesByNames((const char**) NULL, types2, NULL, 2, LIST_LINK, false));
        //if (result != NULL) logger().debug("result = %s", result->toString().c_str());
        TS_ASSERT(result == NULL);

        TS_ASSERT_THROWS(table->getHandlesByNames(names1, NULL, NULL, 2, LIST_LINK, false), RuntimeException&);
        TS_ASSERT_THROWS(table->getHandlesByNames(names2, NULL, NULL, 2, LIST_LINK, false), RuntimeException&);
        TS_ASSERT_THROWS(table->getHandlesByNames(names3, NULL, NULL, 2, LIST_LINK, false), RuntimeException&);
        TS_ASSERT_THROWS(table->getHandlesByNames(names4, NULL, NULL, 2, LIST_LINK, false), RuntimeException&);

        //== getHandleSet(Handle*, Type*, bool*, Arity, Type = ATOM, bool = true) ==/
        std::vector<Handle> handles1(2);
        handles1[0] = table->getHandle("00065349", CONCEPT_NODE);
        handles1[1] = table->getHandle("12", NUMBER_NODE);
        result = HandleEntry::fromHandleSet(table->getHandlesByOutgoing(handles1, types1, NULL, 2, LIST_LINK, false));
        TS_ASSERT(result);
        //logger().debug("result = %s", result->toString().c_str());
        delete(result);

        std::vector<Handle> handles2(2);
        handles2[0] = table->getHandle("12", NUMBER_NODE);
        handles2[1] = table->getHandle("00065349", CONCEPT_NODE);
        result = HandleEntry::fromHandleSet(table->getHandlesByOutgoing(handles2, types2, NULL, 2, LIST_LINK, false));
        TS_ASSERT(!result);
        //logger().debug("result = %s", result->toString().c_str());

        std::vector<Handle> handles3(2);
        handles3[0] = Handle::UNDEFINED;
        handles3[1] = table->getHandle("12", NUMBER_NODE);
        result = HandleEntry::fromHandleSet(table->getHandlesByOutgoing(handles3, types3, NULL, 2, LIST_LINK, false));
        TS_ASSERT(result);
        //logger().debug("result = %s", result->toString().c_str());
        delete(result);

        std::vector<Handle> handles4(2);
        handles4[0] = table->getHandle("12", NUMBER_NODE);
        handles4[1] = Handle::UNDEFINED;
        result = HandleEntry::fromHandleSet(table->getHandlesByOutgoing(handles4, types4, NULL, 2, LIST_LINK, false));
        TS_ASSERT(!result);
        //logger().debug("result = %s", result->toString().c_str());

        result = HandleEntry::fromHandleSet(table->getHandlesByOutgoing(std::vector<Handle>(), types1, NULL, 2, LIST_LINK, false));
        TS_ASSERT(result);
        //logger().debug("result = %s", result->toString().c_str());
        delete(result);

        result = HandleEntry::fromHandleSet(table->getHandlesByOutgoing(std::vector<Handle>(), types2, NULL, 2, LIST_LINK, false));
        //if (result != NULL) logger().debug("result = %s", result->toString().c_str());
        TS_ASSERT(!result);

        result = HandleEntry::fromHandleSet(table->getHandlesByOutgoing(handles1, NULL , NULL, 2, LIST_LINK, false));
        TS_ASSERT(result);
        //logger().debug("result = %s", result->toString().c_str());
        delete(result);

        result = HandleEntry::fromHandleSet(table->getHandlesByOutgoing(handles2, NULL, NULL, 2, LIST_LINK, false));
        //if (result != NULL) logger().debug("result = %s", result->toString().c_str());
        TS_ASSERT(!result);

        result = HandleEntry::fromHandleSet(table->getHandlesByOutgoing(handles3, NULL , NULL, 2, LIST_LINK, false));
        TS_ASSERT(result);
        //logger().debug("result = %s", result->toString().c_str());
        delete(result);

        result = HandleEntry::fromHandleSet(table->getHandlesByOutgoing(handles4, NULL, NULL, 2, LIST_LINK, false));
        //if (result != NULL) logger().debug("result = %s", result->toString().c_str());
        TS_ASSERT(!result);

        //== getHandleSet(Type*, bool*, Arity, Type = ATOM, bool = true) ==/

        result = HandleEntry::fromHandleSet(table->getHandlesByTypes(types1, NULL, 2, LIST_LINK, false));
        TS_ASSERT(result);
        //logger().debug("result = %s", result->toString().c_str());
        delete(result);

        result = HandleEntry::fromHandleSet(table->getHandlesByTypes(types2, NULL, 2, LIST_LINK, false));
        TS_ASSERT(!result);

        result = HandleEntry::fromHandleSet(table->getHandlesByTypes(types3, NULL, 2, LIST_LINK, false));
        TS_ASSERT(result);
        //logger().debug("result = %s", result->toString().c_str());
        delete(result);

        result = HandleEntry::fromHandleSet(table->getHandlesByTypes(types4, NULL, 2, LIST_LINK, false));
        //if (result != NULL) logger().debug("result = %s", result->toString().c_str());
        TS_ASSERT(!result);
    }

    void testGetHandleSet_bugfix1() {
        HandleSeq emptyOutgoing;
        HandleEntry* result = HandleEntry::fromHandleSet(table->getHandlesByOutgoing(emptyOutgoing, NULL, NULL, emptyOutgoing.size(), LIST_LINK, false));
        TS_ASSERT(!result);
        result = HandleEntry::fromHandleSet(table->getHandlesByOutgoing(emptyOutgoing, NULL, NULL, emptyOutgoing.size(), LIST_LINK, true));
        TS_ASSERT(!result);
        LinkPtr link = createLink(LIST_LINK, emptyOutgoing);
        Handle h = table->add(link);
        // if (link->getHandle() != h) delete link;
        result = HandleEntry::fromHandleSet(table->getHandlesByOutgoing(emptyOutgoing, NULL, NULL, emptyOutgoing.size(), LIST_LINK, false));
        TS_ASSERT(result);
        delete result;
        result = HandleEntry::fromHandleSet(table->getHandlesByOutgoing(emptyOutgoing, NULL, NULL, emptyOutgoing.size(), LIST_LINK, true));
        TS_ASSERT(result);
        delete result;
    }

    void testPrint() {
        const char *filename = PROJECT_BINARY_DIR"/tests/atomspace/AtomTableUTest.log";
        std::ofstream out(filename);

        out << "All Atoms:" << endl;
        table->print(out);
        out << "All Nodes:" << endl;
        table->print(out, NODE);
        out << "All ConceptNodes:" << endl;
        table->print(out, CONCEPT_NODE, false);
        out << "All Links:" << endl;
        table->print(out, LINK);
        out << "All ListLinks:" << endl;
        table->print(out, LIST_LINK, false);

        out.close();

        if (!CxxTest::TestTracker::tracker().testFailed())
            std::remove(filename);
    }

    void testImportanceUpdate() {
        AtomTable atomTable;

        /* add a simple set of links & nodes */
        NodePtr wordNode(new Node(NUMBER_NODE, "1"));
        wordNode->setAttentionValue(*AttentionValue::factory((AttentionValue::sti_t) - 10));
        Handle wnHandle = atomTable.add(wordNode);

        NodePtr senseNode(new Node(CONCEPT_NODE, "28675194"));
        senseNode->setAttentionValue(*AttentionValue::factory((AttentionValue::sti_t) 30));
        Handle snHandle = atomTable.add(senseNode);

        HandleSeq os;
        os.push_back(wnHandle);
        os.push_back(snHandle);
        LinkPtr inheritanceLink = createLink(INHERITANCE_LINK, os);
        inheritanceLink->setAttentionValue(*AttentionValue::factory((AttentionValue::sti_t) 500));
        Handle linkHandle = atomTable.add(inheritanceLink);

        // force sti decaying
        for (int i = 0; i < 10; i++)
            atomTable.decayShortTermImportance();

        // test the updated STIs
        TS_ASSERT(TLB::getAtom(wnHandle)->getAttentionValue().getSTI()   == -20);
        TS_ASSERT(TLB::getAtom(snHandle)->getAttentionValue().getSTI()   ==  20);
        TS_ASSERT(TLB::getAtom(linkHandle)->getAttentionValue().getSTI() == 490);
    }

    /* test the fix for the bug triggered whenever we had a link pointing to the
     * same atom twice (or more) */
    void testDoubleLink() {
        AtomTable atomTable;
        NodePtr n1(new Node(NUMBER_NODE, "1"));
        NodePtr n2(new Node(NUMBER_NODE, "2"));
        Handle hn1 = atomTable.add(n1);
        Handle hn2 = atomTable.add(n2);

        std::vector<Handle> os; os.push_back(hn1); os.push_back(hn1); os.push_back(hn2);
        LinkPtr l1(createLink(LIST_LINK, os));
        Handle hl1 = atomTable.add(l1);

        atomTable.extract(hn1, true);
    }

    void testMerge() {
        AtomTable atomTable;

        NodePtr n1(new Node(NUMBER_NODE, "1", SimpleTruthValue(0.1f, 0.2f)));
        Handle hn1 = atomTable.add(n1);

        NodePtr n2(new Node(NUMBER_NODE, "1", SimpleTruthValue(0.3f, 0.4f)));
        TS_ASSERT_THROWS_NOTHING(atomTable.add(n2));

        NodePtr n3(new Node(NUMBER_NODE, "1", SimpleTruthValue(0.8f, 0.3f)));
        TS_ASSERT_THROWS_NOTHING(atomTable.add(n3));

        Handle h = atomTable.getHandle("1", NUMBER_NODE);
        TS_ASSERT(h == hn1);
        TS_ASSERT_DELTA(TLB::getAtom(h)->getTruthValue().getMean(), 0.3f, 0.000001);
        TS_ASSERT_DELTA(TLB::getAtom(h)->getTruthValue().getCount(), 0.4f, 0.000001);
    }

    void testSimpleWithCustomAtomTypes() {
        AtomTable atomTable;
        Type MY_NUMBER_NODE = classserver().addType(NUMBER_NODE, "MyNumberNode");
        Type MY_CONCEPT_NODE = classserver().addType(CONCEPT_NODE, "MyConceptNode");
        Type MY_INHERITANCE_LINK = classserver().addType(INHERITANCE_LINK, "MyInheritanceLink");
        logger().debug("MY_NUMBER_NODE = %u, MY_CONCEPT_NODE = %u, MY_INHERITANCE_LINK = %u\n", MY_NUMBER_NODE, MY_CONCEPT_NODE, MY_INHERITANCE_LINK);
        NodePtr wp = createNode(MY_NUMBER_NODE, "1");
        Handle word = atomTable.add(wp);
        NodePtr sp = createNode(MY_CONCEPT_NODE, "28675194");
        Handle sense = atomTable.add(sp);
        std::vector<Handle> os;
        os.push_back(word);
        os.push_back(sense);
        LinkPtr lp = createLink(MY_INHERITANCE_LINK, os);
        Handle lh = atomTable.add(lp);

        TS_ASSERT(atomTable.getHandle("1", MY_NUMBER_NODE) != Handle::UNDEFINED);
        TS_ASSERT(atomTable.getHandle("28675194", MY_CONCEPT_NODE) != Handle::UNDEFINED);
        TS_ASSERT(atomTable.getHandle(MY_INHERITANCE_LINK, os) != Handle::UNDEFINED);
    }
};
