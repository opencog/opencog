/*
 * tests/atomspace/LinkUTest.cxxtest
 *
 * Copyright (C) 2002-2007 Novamente LLC
 * All Rights Reserved
 *
 * Written by Welter Silva <welter@vettalabs.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */
#include <opencog/util/platform.h>

#include <opencog/atomspace/Node.h>
#include <opencog/atomspace/Link.h>
#include <opencog/atomspace/atom_types.h>

using namespace opencog;

class LinkUTest :  public CxxTest::TestSuite
{
private:

public:
    LinkUTest() {
    }

    void setUp() {}

    void tearDown() {}

    void testEquals() {
        NodePtr n1(createNode(CONCEPT_NODE, "TEST"));
        NodePtr n2(createNode(CONCEPT_NODE, "TEST"));
        std::vector<Handle> out1;
        LinkPtr l1(createLink(LIST_LINK, out1));
        LinkPtr l2(createLink(LIST_LINK, out1));
        TS_ASSERT(l1->getArity() == 0);
        TS_ASSERT(l2->getArity() == 0);

        HandleSeq out2;
        out2.push_back(n1->getHandle());
        LinkPtr l3(createLink(LIST_LINK, out2));
        LinkPtr l4(createLink(LIST_LINK, out2));
        LinkPtr l5(createLink(INHERITANCE_LINK, out2));
        LinkPtr l6(createLink(INHERITANCE_LINK, out2));
        TS_ASSERT(l3->getArity() == 1);
        TS_ASSERT(l4->getArity() == 1);
        TS_ASSERT(l5->getArity() == 1);
        TS_ASSERT(l6->getArity() == 1);

        std::vector<Handle> out3;
        out3.push_back(n1->getHandle());
        out3.push_back(n2->getHandle());
        LinkPtr l7(createLink(INHERITANCE_LINK, out3));
        LinkPtr l8(createLink(INHERITANCE_LINK, out3));
        TS_ASSERT(l7->getArity() == 2);
        TS_ASSERT(l8->getArity() == 2);

        TS_ASSERT(*l1 == *l2);
        TS_ASSERT(*l3 == *l4);
        TS_ASSERT(*l5 == *l6);
        TS_ASSERT(*l7 == *l8);

        TS_ASSERT(*l1 != *l3);
        TS_ASSERT(*l1 != *l4);
        TS_ASSERT(*l1 != *l5);
        TS_ASSERT(*l1 != *l6);
        TS_ASSERT(*l1 != *l7);
        TS_ASSERT(*l1 != *l8);

        TS_ASSERT(*l3 != *l1);
        TS_ASSERT(*l3 != *l2);
        TS_ASSERT(*l3 != *l5);
        TS_ASSERT(*l3 != *l6);
        TS_ASSERT(*l3 != *l7);
        TS_ASSERT(*l3 != *l8);

        TS_ASSERT(*l5 != *l1);
        TS_ASSERT(*l5 != *l2);
        TS_ASSERT(*l5 != *l3);
        TS_ASSERT(*l5 != *l4);
        TS_ASSERT(*l5 != *l7);
        TS_ASSERT(*l5 != *l8);

        TS_ASSERT(*l7 != *l1);
        TS_ASSERT(*l7 != *l2);
        TS_ASSERT(*l7 != *l3);
        TS_ASSERT(*l7 != *l4);
        TS_ASSERT(*l7 != *l5);
        TS_ASSERT(*l7 != *l6);
    }
};
