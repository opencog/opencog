/*
 * tests/atomspace/AtomUTest.cxxtest
 *
 * Copyright (C) 2002-2007 Novamente LLC
 * All Rights Reserved
 *
 * Written by Welter Silva <welter@vettalabs.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/atomspace/Atom.h>
#include <opencog/atomspace/Link.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/atomspace/AtomSpaceDefinitions.h>
#include <opencog/util/platform.h>
#include <opencog/util/exceptions.h>

using namespace opencog;

#define FLOAT_ACCEPTABLE_ERROR 0.000001

class ConcreteAtom : public Link
{

public:
    ConcreteAtom(Type t, const std::vector<Handle>& o) : Link(t, o) {}
    std::string toString() {
        return "toString not implemented yet";
    }
    std::string toShortString() {
        return "toShortString not implemented yet";
    }
};

class AtomUTest :  public CxxTest::TestSuite
{
private:

    AtomSpace as;
    std::vector<Handle> sortedHandles; 


public:
    AtomUTest() {
        sortedHandles.push_back(as.addNode(CONCEPT_NODE, "0"));
        sortedHandles.push_back(as.addNode(CONCEPT_NODE, "1"));
        sortedHandles.push_back(as.addNode(CONCEPT_NODE, "2"));
        std::sort(sortedHandles.begin(), sortedHandles.end(), std::less<Handle>());
    }

    void setUp() {
    }

    void tearDown() {
    }

    void testConstructor() {
        std::vector<Handle> outgoing;
        outgoing.push_back(sortedHandles[2]);
        outgoing.push_back(sortedHandles[0]);
        outgoing.push_back(sortedHandles[1]);

        Atom* atom = new ConcreteAtom(ORDERED_LINK, outgoing);
        Link *link = dynamic_cast<Link *>(atom);
        TS_ASSERT(link != NULL);

        // Specific tests for ordered and unnordered links:
        TS_ASSERT(link->getOutgoingSet()[0] == sortedHandles[2]);
        TS_ASSERT(link->getOutgoingSet()[1] == sortedHandles[0]);
        TS_ASSERT(link->getOutgoingSet()[2] == sortedHandles[1]);
        // Unordered lists sort their outgoing sets
        atom = new ConcreteAtom(UNORDERED_LINK, outgoing);
        link = dynamic_cast<Link *>(atom);
        TS_ASSERT(link != NULL);
        TS_ASSERT(link->getOutgoingSet()[0] == sortedHandles[0]);
        TS_ASSERT(link->getOutgoingSet()[1] == sortedHandles[1]);
        TS_ASSERT(link->getOutgoingSet()[2] == sortedHandles[2]);
        delete atom;
    }

    void testFlags() {
        // Test to ensure removing incoming handle when it doesn't exist is ok
        std::vector<Handle> outgoing;
        outgoing.push_back(sortedHandles[2]);
        outgoing.push_back(sortedHandles[0]);
        outgoing.push_back(sortedHandles[1]);

        Atom* atom = new ConcreteAtom(ORDERED_LINK, outgoing);
        atom->markForRemoval();
        TS_ASSERT_EQUALS(atom->flags & MARKED_FOR_REMOVAL, MARKED_FOR_REMOVAL);
        atom->unsetRemovalFlag();
        TS_ASSERT((atom->flags & MARKED_FOR_REMOVAL) != MARKED_FOR_REMOVAL);
        delete atom;
    }

};

