/*
 * tests/atomspace/CompositeTruthValueUTest.cxxtest
 *
 * Copyright (C) 2002-2007 Novamente LLC
 * All Rights Reserved
 *
 * Written by Welter Silva <welter@vettalabs.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <math.h>

#include <opencog/atomspace/AtomTable.h>
#include <opencog/atomspace/CompositeTruthValue.h>
#include <opencog/atomspace/HandleMap.h>
#include <opencog/atomspace/IndefiniteTruthValue.h>
#include <opencog/atomspace/Node.h>
#include <opencog/atomspace/SimpleTruthValue.h>
#include <opencog/atomspace/atom_types.h>
#include <opencog/persist/file/CompositeRenumber.h>
#include <opencog/util/Config.h>
#include <opencog/util/Logger.h>
#include <opencog/util/exceptions.h>

using namespace opencog;

#define NUM_TVS 3
#define TV1_MEAN 0.25f
#define TV1_COUNT 0.0f
#define TV2_MEAN 0.5f
#define TV2_COUNT 1.0f
#define TV3_MEAN 0.75f
#define TV3_COUNT 2.0f
#define FLOAT_ACCEPTABLE_ERROR 0.000001

class CompositeTruthValueUTest :  public CxxTest::TestSuite
{
private:

    AtomTable atomTable;
    CompositeTruthValue* tvs[NUM_TVS];
    float means[NUM_TVS];
    float counts[NUM_TVS];
    float confidences[NUM_TVS];
    VersionHandle versionHandles[NUM_TVS];
    AtomPtr atoms[NUM_TVS];
    Handle atomhand[NUM_TVS];

public:
    CompositeTruthValueUTest() {
        try
        {
            config().load("opencog-test.conf");
        }
        catch (RuntimeException &e)
        {
            std::cerr << e.getMessage() << std::endl;
        }
        logger().setFilename(config()["LOG_FILE"]);
        logger().setLevel(Logger::getLevelFromString(config()["LOG_LEVEL"]));
        logger().setPrintToStdoutFlag(config().get_bool("LOG_TO_STDOUT"));

        means[0] = TV1_MEAN;
        means[1] = TV2_MEAN;
        means[2] = TV3_MEAN;
        counts[0] = TV1_COUNT;
        counts[1] = TV2_COUNT;
        counts[2] = TV3_COUNT;
        atoms[0] = NodePtr(createNode(CONCEPT_NODE, "zero"));
        atoms[1] = NodePtr(createNode(CONCEPT_NODE, "one"));
        atoms[2] = NodePtr(createNode(CONCEPT_NODE, "two"));

        // Composite truth values require valid handle uuid's to
        // function correctly, and the only way to get those is to
        // insert them into an atom table.
        atomhand[0] = atomTable.add(atoms[0]);
        atomhand[1] = atomTable.add(atoms[1]);
        atomhand[2] = atomTable.add(atoms[2]);

        versionHandles[0] = VersionHandle(HYPOTHETICAL, atomhand[0]);
        versionHandles[1] = VersionHandle(CONTEXTUAL, atomhand[1]);
        versionHandles[2] = VersionHandle(UNKNOWN, atomhand[2]);
    }

    void setUp() {
        for (int i = 0; i < NUM_TVS; i++) {
            tvs[i] = new CompositeTruthValue(SimpleTruthValue(means[i], counts[i]), versionHandles[i]);
            //confidences[i] = tvs[i]->getVersionedTV(versionHandles[i])->getConfidence();
            confidences[i] = SimpleTruthValue::countToConfidence(counts[i]);
        }
    }

    void tearDown() {
        for (int i = 0; i < NUM_TVS; i++) {
            delete tvs[i];
        }
    }

    void testConstructor() {
        logger().debug("testConstructor()");
        SimpleTruthValue* expectedPrimaryTV = (SimpleTruthValue*) TruthValue::DEFAULT_TV().clone();
        CompositeTruthValue* tv;
        for (int i = 0; i < NUM_TVS; i++) {
            tv = tvs[i];
            TS_ASSERT(tv != NULL);
            TS_ASSERT(fabs(tv->getMean()  - expectedPrimaryTV->getMean()) <= FLOAT_ACCEPTABLE_ERROR);
            TS_ASSERT(fabs(tv->getCount()  - expectedPrimaryTV->getCount()) <= FLOAT_ACCEPTABLE_ERROR);
            TS_ASSERT(fabs(tv->getConfidence() - expectedPrimaryTV->getConfidence()) <= FLOAT_ACCEPTABLE_ERROR);
            const SimpleTruthValue* versionedTv = dynamic_cast<const SimpleTruthValue*>(&(tv->getVersionedTV(versionHandles[i])));
            TS_ASSERT(versionedTv != NULL);
            TS_ASSERT(fabs(versionedTv->getMean()  - means[i]) <= FLOAT_ACCEPTABLE_ERROR);
            TS_ASSERT(fabs(versionedTv->getCount()  - counts[i]) <= FLOAT_ACCEPTABLE_ERROR);
            TS_ASSERT(fabs(versionedTv->getConfidence() - confidences[i]) <= FLOAT_ACCEPTABLE_ERROR);
        }
        tv = new CompositeTruthValue(TruthValue::NULL_TV(), NULL_VERSION_HANDLE);
        TS_ASSERT(tv != NULL);
        TS_ASSERT(fabs(tv->getMean()  - expectedPrimaryTV->getMean()) <= FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(fabs(tv->getCount()  - expectedPrimaryTV->getCount()) <= FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(fabs(tv->getConfidence() - expectedPrimaryTV->getConfidence()) <= FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(tv->getNumberOfVersionedTVs() == 0);
        delete tv;
        delete expectedPrimaryTV;
    }

    void testCopyConstructor() {
        logger().debug("testCopyConstructor()");
        const TruthValue& expectedPrimaryTV = TruthValue::DEFAULT_TV();
        CompositeTruthValue* tv;
        for (int i = 0; i < NUM_TVS; i++) {
            tv = new CompositeTruthValue(*(tvs[i]));
            TS_ASSERT(tv != NULL);
            TS_ASSERT(fabs(tv->getMean()  - expectedPrimaryTV.getMean()) <= FLOAT_ACCEPTABLE_ERROR);
            TS_ASSERT(fabs(tv->getCount()  - expectedPrimaryTV.getCount()) <= FLOAT_ACCEPTABLE_ERROR);
            TS_ASSERT(fabs(tv->getConfidence() - expectedPrimaryTV.getConfidence()) <= FLOAT_ACCEPTABLE_ERROR);
            const SimpleTruthValue* versionedTv = dynamic_cast<const SimpleTruthValue*>(&(tv->getVersionedTV(versionHandles[i])));
            TS_ASSERT(versionedTv != NULL);
            TS_ASSERT(fabs(versionedTv->getMean()  - means[i]) <= FLOAT_ACCEPTABLE_ERROR);
            TS_ASSERT(fabs(versionedTv->getCount()  - counts[i]) <= FLOAT_ACCEPTABLE_ERROR);
            TS_ASSERT(fabs(versionedTv->getConfidence() - confidences[i]) <= FLOAT_ACCEPTABLE_ERROR);
            delete tv;
        }
        tv = new CompositeTruthValue(TruthValue::NULL_TV(), NULL_VERSION_HANDLE);
        TS_ASSERT(tv != NULL);
        TS_ASSERT(fabs(tv->getMean()  - expectedPrimaryTV.getMean()) <= FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(fabs(tv->getCount()  - expectedPrimaryTV.getCount()) <= FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(fabs(tv->getConfidence() - expectedPrimaryTV.getConfidence()) <= FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(tv->getNumberOfVersionedTVs() == 0);
        delete tv;
    }

    void testClone() {
        logger().debug("testClone()");
        // test clone of CTVs with default primary TVs
        for (int i = 0; i < NUM_TVS; i++) {
            CompositeTruthValue* clonedTv = tvs[i]->clone();
            TS_ASSERT(clonedTv != NULL);
            TS_ASSERT(clonedTv->getType() == tvs[i]->getType());
            SimpleTruthValue* expectedPrimaryTV = (SimpleTruthValue*) TruthValue::DEFAULT_TV().clone();
            TS_ASSERT(fabs(clonedTv->getMean()  - expectedPrimaryTV->getMean()) <= FLOAT_ACCEPTABLE_ERROR);
            TS_ASSERT(fabs(clonedTv->getCount()  - expectedPrimaryTV->getCount()) <= FLOAT_ACCEPTABLE_ERROR);
            TS_ASSERT(fabs(clonedTv->getConfidence() - expectedPrimaryTV->getConfidence()) <= FLOAT_ACCEPTABLE_ERROR);
            const SimpleTruthValue* versionedTv = dynamic_cast<const SimpleTruthValue*>(&(clonedTv->getVersionedTV(versionHandles[i])));
            TS_ASSERT(versionedTv != NULL);
            TS_ASSERT(fabs(versionedTv->getMean()  - means[i]) <= FLOAT_ACCEPTABLE_ERROR);
            TS_ASSERT(fabs(versionedTv->getCount()  - counts[i]) <= FLOAT_ACCEPTABLE_ERROR);
            TS_ASSERT(fabs(versionedTv->getConfidence() - confidences[i]) <= FLOAT_ACCEPTABLE_ERROR);
            delete clonedTv;
        }
        // test clone of CTVs with non-default primary TVs
        for (int i = 0; i < NUM_TVS; i++) {
            tvs[i]->setVersionedTV(SimpleTruthValue(means[i], counts[i]), NULL_VERSION_HANDLE);
            CompositeTruthValue* clonedTv = tvs[i]->clone();
            TS_ASSERT(clonedTv != NULL);
            TS_ASSERT(clonedTv->getType() == tvs[i]->getType());
            if (clonedTv->getMean() != means[i]) logger().debug("clonedTv->getMean() = %f means[i] = %f", clonedTv->getMean(), means[i]);
            TS_ASSERT(fabs(clonedTv->getMean()  - means[i]) <= FLOAT_ACCEPTABLE_ERROR);
            if (clonedTv->getCount() != counts[i]) logger().debug("clonedTv->getCount() = %f counts[i] = %f", clonedTv->getCount(), counts[i]);
            TS_ASSERT(fabs(clonedTv->getCount()  - counts[i]) <= FLOAT_ACCEPTABLE_ERROR);
            TS_ASSERT(fabs(clonedTv->getConfidence() - confidences[i]) <= FLOAT_ACCEPTABLE_ERROR);
            const SimpleTruthValue* versionedTv = dynamic_cast<const SimpleTruthValue*>(&(clonedTv->getVersionedTV(versionHandles[i])));
            TS_ASSERT(versionedTv != NULL);
            TS_ASSERT(fabs(versionedTv->getMean()  - means[i]) <= FLOAT_ACCEPTABLE_ERROR);
            TS_ASSERT(fabs(versionedTv->getCount()  - counts[i]) <= FLOAT_ACCEPTABLE_ERROR);
            TS_ASSERT(fabs(versionedTv->getConfidence() - confidences[i]) <= FLOAT_ACCEPTABLE_ERROR);
            delete clonedTv;
        }
        // test clone of CTVs with no versioned TV
        CompositeTruthValue* tv = new CompositeTruthValue(SimpleTruthValue(means[0], counts[0]), NULL_VERSION_HANDLE);
        CompositeTruthValue* clonedTv = tv->clone();
        TS_ASSERT(clonedTv != NULL);
        TS_ASSERT(clonedTv->getType() == tv->getType());
        TS_ASSERT(fabs(clonedTv->getMean()  - means[0]) <= FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(fabs(clonedTv->getCount()  - counts[0]) <= FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(fabs(clonedTv->getConfidence() - confidences[0]) <= FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(clonedTv->getNumberOfVersionedTVs() == 0);
        delete clonedTv;
        // test clone of CTVs with multiple versioned TVs
        for (int i = 0; i < NUM_TVS; i++) {
            tv->setVersionedTV(SimpleTruthValue(means[i], counts[i]), versionHandles[i]);
        }
        clonedTv = tv->clone();
        TS_ASSERT(clonedTv != NULL);
        TS_ASSERT(clonedTv->getType() == tv->getType());
        TS_ASSERT(fabs(clonedTv->getMean()  - means[0]) <= FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(fabs(clonedTv->getCount()  - counts[0]) <= FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(fabs(clonedTv->getConfidence() - confidences[0]) <= FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(clonedTv->getNumberOfVersionedTVs() == 3);
        for (int i = 0; i < NUM_TVS; i++) {
            const SimpleTruthValue* versionedTv = dynamic_cast<const SimpleTruthValue*>(&(clonedTv->getVersionedTV(versionHandles[i])));
            TS_ASSERT(versionedTv != NULL);
            TS_ASSERT(fabs(versionedTv->getMean()  - means[i]) <= FLOAT_ACCEPTABLE_ERROR);
            TS_ASSERT(fabs(versionedTv->getCount()  - counts[i]) <= FLOAT_ACCEPTABLE_ERROR);
            TS_ASSERT(fabs(versionedTv->getConfidence() - confidences[i]) <= FLOAT_ACCEPTABLE_ERROR);
        }
        delete clonedTv;
        delete tv;
    }

    void testGetType() {
        logger().debug("testGetType()");
        for (int i = 0; i < NUM_TVS; i++) {
            TS_ASSERT(tvs[i]->getType() == COMPOSITE_TRUTH_VALUE);
        }
    }

    void testToFloat() {
        logger().debug("testToFloat()");
        SimpleTruthValue* expectedPrimaryTV = (SimpleTruthValue*) TruthValue::DEFAULT_TV().clone();
        for (int i = 0; i < NUM_TVS; i++) {
            //logger().debug("toFloat => %20.18f & %20.18f", tvs[i]->toFloat(), expectedPrimaryTV->toFloat());
            TS_ASSERT(fabs(tvs[i]->toFloat()  - expectedPrimaryTV->toFloat()) <= FLOAT_ACCEPTABLE_ERROR);
        }
    }

    void testToAndFromString() {
        logger().debug("testToAndFromString()");
        char tvStr[1024];
        for (int i = 0; i < NUM_TVS; i++) {
            std::string tvToStringValue = tvs[i]->toString();
            //logger().debug("%s", tvToStringValue.c_str());
            sprintf(tvStr, "%s %s", TruthValue::typeToStr(tvs[i]->getType()), tvToStringValue.c_str());
            //logger().debug("%s", tvStr);
            TruthValue* rebuiltTv = TruthValue::factory(tvStr);
            TS_ASSERT(rebuiltTv != NULL);
            TS_ASSERT(rebuiltTv->getType() == tvs[i]->getType());
            delete rebuiltTv;
            CompositeTruthValue* rebuiltCtv = CompositeTruthValue::fromString(tvToStringValue.c_str());
            TS_ASSERT(rebuiltCtv != NULL);
            TS_ASSERT(rebuiltCtv->getType() == tvs[i]->getType());
            TS_ASSERT(fabs(rebuiltCtv->getMean()  - tvs[i]->getMean()) <= FLOAT_ACCEPTABLE_ERROR);
            TS_ASSERT(fabs(rebuiltCtv->getCount()  - tvs[i]->getCount()) <= FLOAT_ACCEPTABLE_ERROR);
            TS_ASSERT(fabs(rebuiltCtv->getConfidence() - tvs[i]->getConfidence()) <= FLOAT_ACCEPTABLE_ERROR);
            TS_ASSERT(rebuiltCtv->getNumberOfVersionedTVs() == tvs[i]->getNumberOfVersionedTVs());
            for (int j = 0; j < NUM_TVS; j++) {
                const SimpleTruthValue* versionedTv = dynamic_cast<const SimpleTruthValue*>(&(rebuiltCtv->getVersionedTV(versionHandles[j])));
                if (versionedTv) {
                    //logger().debug("************ found versionedTv for tv[%d] => %s", i, versionedTv->toString().c_str());
                }
                if (j != i) {
                    TS_ASSERT(versionedTv == NULL);
                } else {
                    TS_ASSERT(versionedTv != NULL);
                    TS_ASSERT(fabs(versionedTv->getMean()  - means[j]) <= FLOAT_ACCEPTABLE_ERROR);
                    TS_ASSERT(fabs(versionedTv->getCount()  - counts[j]) <= FLOAT_ACCEPTABLE_ERROR);
                    TS_ASSERT(fabs(versionedTv->getConfidence() - confidences[j]) <= FLOAT_ACCEPTABLE_ERROR);
                }
            }
        }
    }

    void testMerge() {
        logger().debug("testMerge()");
        // test merge between CTVs with distinct versioned Tvs but with same default primaryTVs
        CompositeTruthValue* mergedTv = tvs[0];
        for (int i = 0; i < NUM_TVS; i++) {
            mergedTv = dynamic_cast<CompositeTruthValue *>(mergedTv->merge(*(tvs[i])));
            SimpleTruthValue* expectedPrimaryTV = (SimpleTruthValue*) TruthValue::DEFAULT_TV().clone();
            TS_ASSERT(fabs(mergedTv->getMean()  - expectedPrimaryTV->getMean()) <= FLOAT_ACCEPTABLE_ERROR);
            TS_ASSERT(fabs(mergedTv->getCount()  - expectedPrimaryTV->getCount()) <= FLOAT_ACCEPTABLE_ERROR);
            TS_ASSERT(fabs(mergedTv->getConfidence() - expectedPrimaryTV->getConfidence()) <= FLOAT_ACCEPTABLE_ERROR);
            TS_ASSERT(mergedTv->getNumberOfVersionedTVs() == (i + 1)); // each iteration adds a distinct versioned tv
            for (int j = 0; j < NUM_TVS; j++) {
                const SimpleTruthValue* versionedTv = dynamic_cast<const SimpleTruthValue*>(&(mergedTv->getVersionedTV(versionHandles[j])));
                if (j > i) {
                    TS_ASSERT(versionedTv == NULL);
                } else {
                    TS_ASSERT(versionedTv != NULL);
                    TS_ASSERT(fabs(versionedTv->getMean()  - means[j]) <= FLOAT_ACCEPTABLE_ERROR);
                    TS_ASSERT(fabs(versionedTv->getCount()  - counts[j]) <= FLOAT_ACCEPTABLE_ERROR);
                    TS_ASSERT(fabs(versionedTv->getConfidence() - confidences[j]) <= FLOAT_ACCEPTABLE_ERROR);
                }
            }
        }
        // test merge between CTVs with distinct versioned Tvs but with different primaryTVs
        tvs[1]->setVersionedTV(SimpleTruthValue(means[1], counts[1]), NULL_VERSION_HANDLE);
        mergedTv = (CompositeTruthValue*) tvs[1]->merge(*(tvs[2]));
        TS_ASSERT(fabs(mergedTv->getMean()  - means[1]) <= FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(fabs(mergedTv->getCount()  - counts[1]) <= FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(fabs(mergedTv->getConfidence() - confidences[1]) <= FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(mergedTv->getNumberOfVersionedTVs() == 2);
        // Now, with tvs[2] primaryTV with greater confidence...
        tvs[2]->setVersionedTV(SimpleTruthValue(means[2], counts[2]), NULL_VERSION_HANDLE);
        mergedTv = (CompositeTruthValue*) tvs[1]->merge(*(tvs[2]));
        TS_ASSERT(fabs(mergedTv->getMean()  - means[2]) <= FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(fabs(mergedTv->getCount()  - counts[2]) <= FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(fabs(mergedTv->getConfidence() - confidences[2]) <= FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(mergedTv->getNumberOfVersionedTVs() == 2);

        // test merge between CTVs with similar but different versioned Tvs
        CompositeTruthValue* newCTv = new CompositeTruthValue(TruthValue::NULL_TV(), NULL_VERSION_HANDLE);
        for (int i = 0; i < NUM_TVS; i++) {
            newCTv->setVersionedTV(SimpleTruthValue(means[i] / 2, counts[i] + 1), versionHandles[i]);
        }
        mergedTv = (CompositeTruthValue*) tvs[0]->merge(*newCTv);
        SimpleTruthValue expectedPrimaryTV((const SimpleTruthValue&)TruthValue::DEFAULT_TV());
        TS_ASSERT(fabs(mergedTv->getMean()  - expectedPrimaryTV.getMean()) <= FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(fabs(mergedTv->getCount()  - expectedPrimaryTV.getCount()) <= FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(fabs(mergedTv->getConfidence() - expectedPrimaryTV.getConfidence()) <= FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(mergedTv->getNumberOfVersionedTVs() == NUM_TVS);
        for (int j = 0; j < NUM_TVS; j++) {
            const SimpleTruthValue* versionedTv = dynamic_cast<const SimpleTruthValue*>(&(mergedTv->getVersionedTV(versionHandles[j])));
            TS_ASSERT(versionedTv != NULL);
            TS_ASSERT(fabs(versionedTv->getMean()  - means[j] / 2) <= FLOAT_ACCEPTABLE_ERROR);
            TS_ASSERT(fabs(versionedTv->getCount()  - (counts[j] + 1)) <= FLOAT_ACCEPTABLE_ERROR);
        }
        delete newCTv;

        // test merge between a CTV and other types of TV
        // merging with SimpleTruthValue objects
        TruthValue* fPtlTv = new SimpleTruthValue(0.0f, 0.0f);
        mergedTv = (CompositeTruthValue*) tvs[0]->merge(*fPtlTv);
        TS_ASSERT(fabs(mergedTv->getMean()  - expectedPrimaryTV.getMean()) <= FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(fabs(mergedTv->getCount()  - expectedPrimaryTV.getCount()) <= FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(fabs(mergedTv->getConfidence() - expectedPrimaryTV.getConfidence()) <= FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(mergedTv->getNumberOfVersionedTVs() == 1);
        delete fPtlTv;
        fPtlTv = new SimpleTruthValue(means[1], counts[1]);
        mergedTv = (CompositeTruthValue*) tvs[0]->merge(*fPtlTv);
        TS_ASSERT(fabs(mergedTv->getMean()  - means[1]) <= FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(fabs(mergedTv->getCount()  - counts[1]) <= FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(fabs(mergedTv->getConfidence() - confidences[1]) <= FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(mergedTv->getNumberOfVersionedTVs() == 1);
        delete fPtlTv;

        // merging with IndefiniteTruthValue objects
        expectedPrimaryTV = SimpleTruthValue(mergedTv->getMean(), mergedTv->getCount());
        TruthValue* indefiniteTv = new IndefiniteTruthValue(0.0f, 1.0f); // more u greater than l, less count value
        //logger().debug("tvs[1]->getConfidence() = %f, indefiniteTv->getConfidence() = %f", tvs[1]->getConfidence(), indefiniteTv->getConfidence());
        //logger().debug("tvs[1]->getMean() = %f, indefiniteTv->getMean() = %f", tvs[1]->getMean(), indefiniteTv->getMean());
        mergedTv = (CompositeTruthValue*) tvs[1]->merge(*indefiniteTv);
        //logger().debug("mergedTv->getMean() = %f, expectedPrimaryTV.getMean() = %f", mergedTv->getMean(), expectedPrimaryTV.getMean());
        TS_ASSERT(fabs(mergedTv->getMean()  - expectedPrimaryTV.getMean()) <= FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(fabs(mergedTv->getCount()  - expectedPrimaryTV.getCount()) <= FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(fabs(mergedTv->getConfidence() - expectedPrimaryTV.getConfidence()) <= FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(mergedTv->getNumberOfVersionedTVs() == 1);
        delete indefiniteTv;
        indefiniteTv = new IndefiniteTruthValue(0.5f, 0.5f); // more u tends to l, more count value
        mergedTv = (CompositeTruthValue*) tvs[1]->merge(*indefiniteTv);
        TS_ASSERT(fabs(mergedTv->getMean()  - indefiniteTv->getMean()) <= FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(fabs(mergedTv->getCount() - indefiniteTv->getCount()) < 0.5); // TODO: Specific case where float values are huge. So error must be higher as well. The ideal solution would be a float comparision considering N significative digits.
        TS_ASSERT(fabs(mergedTv->getConfidence() - indefiniteTv->getConfidence()) <= FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(mergedTv->getNumberOfVersionedTVs() == 1);
        delete indefiniteTv;
    }

    void testAssignmentOperator() {
        logger().debug("testAssignmentOperator()");
        SimpleTruthValue expectedPrimaryTV((const SimpleTruthValue&) TruthValue::DEFAULT_TV());
        for (int i = 0; i < NUM_TVS; i++) {
            CompositeTruthValue tv(TruthValue::NULL_TV(), NULL_VERSION_HANDLE);
            tv = *(tvs[i]); // This test operator=(const CompositeTruthvalue&) method
            // Alternativaly, you could use the line bellow:
            // tv = (const CompositeTruthValue&) *(tvs[i]);
            TS_ASSERT(fabs(tv.getMean()  - TruthValue::DEFAULT_TV().getMean()) <= FLOAT_ACCEPTABLE_ERROR);
            TS_ASSERT(fabs(tv.getCount()  - TruthValue::DEFAULT_TV().getCount()) <= FLOAT_ACCEPTABLE_ERROR);
            TS_ASSERT(fabs(tv.getConfidence() - TruthValue::DEFAULT_TV().getConfidence()) <= FLOAT_ACCEPTABLE_ERROR);
            const SimpleTruthValue& versionedTv = (const SimpleTruthValue&) tv.getVersionedTV(versionHandles[i]);
            TS_ASSERT(!versionedTv.isNullTv());
            TS_ASSERT(fabs(versionedTv.getMean()  - means[i]) <= FLOAT_ACCEPTABLE_ERROR);
            TS_ASSERT(fabs(versionedTv.getCount()  - counts[i]) <= FLOAT_ACCEPTABLE_ERROR);
            TS_ASSERT(fabs(versionedTv.getConfidence() - confidences[i]) <= FLOAT_ACCEPTABLE_ERROR);
        }
        for (int i = 0; i < NUM_TVS; i++) {
            CompositeTruthValue tv(TruthValue::NULL_TV(), NULL_VERSION_HANDLE);
            tv = (const TruthValue&) * (tvs[i]); // This test operator=(const TruthValue&) method
            TS_ASSERT(fabs(tv.getMean()  - TruthValue::DEFAULT_TV().getMean()) <= FLOAT_ACCEPTABLE_ERROR);
            TS_ASSERT(fabs(tv.getCount()  - TruthValue::DEFAULT_TV().getCount()) <= FLOAT_ACCEPTABLE_ERROR);
            TS_ASSERT(fabs(tv.getConfidence() - TruthValue::DEFAULT_TV().getConfidence()) <= FLOAT_ACCEPTABLE_ERROR);
            const SimpleTruthValue& versionedTv = (const SimpleTruthValue&) tv.getVersionedTV(versionHandles[i]);
            TS_ASSERT(!versionedTv.isNullTv());
            TS_ASSERT(fabs(versionedTv.getMean()  - means[i]) <= FLOAT_ACCEPTABLE_ERROR);
            TS_ASSERT(fabs(versionedTv.getCount()  - counts[i]) <= FLOAT_ACCEPTABLE_ERROR);
            TS_ASSERT(fabs(versionedTv.getConfidence() - confidences[i]) <= FLOAT_ACCEPTABLE_ERROR);
        }
        const TruthValue& simpleTv = SimpleTruthValue(0, 0);
        const TruthValue& indefiniteTv = IndefiniteTruthValue();
        CompositeTruthValue tv(TruthValue::NULL_TV(), NULL_VERSION_HANDLE);
        TS_ASSERT_THROWS(tv = TruthValue::NULL_TV(), RuntimeException&);
        TS_ASSERT_THROWS(tv = simpleTv, RuntimeException&);
        TS_ASSERT_THROWS(tv = indefiniteTv, RuntimeException&);
    }

    void testSetGetRemoveGetNumberOfVersionedTVs() {
        logger().debug("testSetGetRemoveGetNumberOfVersionedTVs()");
        CompositeTruthValue* ctv = new CompositeTruthValue(TruthValue::NULL_TV(), NULL_VERSION_HANDLE);
        TS_ASSERT(ctv->getNumberOfVersionedTVs() == 0);
        for (int i = 0; i < NUM_TVS; i++) {
            ctv->setVersionedTV(SimpleTruthValue(means[0], counts[0]), versionHandles[i]);
            TS_ASSERT(ctv->getNumberOfVersionedTVs() == (i + 1));
            for (int j = 0; j < NUM_TVS; j++) {
                if (j <= i) {
                    const TruthValue& versionedTv = ctv->getVersionedTV(versionHandles[j]);
                    TS_ASSERT(fabs(versionedTv.getMean()  - means[0]) <= FLOAT_ACCEPTABLE_ERROR);
                    TS_ASSERT(fabs(versionedTv.getCount()  - counts[0]) <= FLOAT_ACCEPTABLE_ERROR);
                    TS_ASSERT(fabs(versionedTv.getConfidence() - confidences[0]) <= FLOAT_ACCEPTABLE_ERROR);
                } else {
                    TS_ASSERT(ctv->getVersionedTV(versionHandles[j]).isNullTv());
                }
            }
        }
        for (int i = 0; i < NUM_TVS; i++) {
            ctv->removeVersionedTVs(versionHandles[i].substantive);
            TS_ASSERT(ctv->getNumberOfVersionedTVs() == (2 - i));
            for (int j = 0; j < NUM_TVS; j++) {
                if (j > i) {
                    const TruthValue& versionedTv = ctv->getVersionedTV(versionHandles[j]);
                    TS_ASSERT(fabs(versionedTv.getMean()  - means[0]) <= FLOAT_ACCEPTABLE_ERROR);
                    TS_ASSERT(fabs(versionedTv.getCount()  - counts[0]) <= FLOAT_ACCEPTABLE_ERROR);
                    TS_ASSERT(fabs(versionedTv.getConfidence() - confidences[0]) <= FLOAT_ACCEPTABLE_ERROR);
                } else {
                    TS_ASSERT(ctv->getVersionedTV(versionHandles[j]).isNullTv());
                }
            }
        }
        // Test invalid removal
        for (int i = 0; i < NUM_TVS; i++) {
            ctv->removeVersionedTVs(versionHandles[i].substantive);
        }
    }

    void testRemoveVersionedTV() {
        logger().debug("testRemoveVersionedTV()");
        for (int i = 0; i < NUM_TVS; i++) {
            for (int j = 0; j < NUM_TVS; j++) {
                TS_ASSERT(tvs[i]->getNumberOfVersionedTVs() == (j + 1));
                if (j != i) {
                    tvs[i]->setVersionedTV(SimpleTruthValue(means[j], counts[j]),
                                           VersionHandle(versionHandles[j].indicator, versionHandles[i].substantive));
                } else {
                    tvs[i]->setVersionedTV(SimpleTruthValue(means[i], counts[i]),
                                           VersionHandle(versionHandles[i].indicator, versionHandles[(i+1)%NUM_TVS].substantive));
                }
                TS_ASSERT(tvs[i]->getNumberOfVersionedTVs() == (j + 2));
            }
        }
        for (int i = 0; i < NUM_TVS; i++) {
            for (int j = 0; j < NUM_TVS; j++) {
                TS_ASSERT(tvs[i]->getNumberOfVersionedTVs() == (NUM_TVS - j + 1));
                tvs[i]->removeVersionedTV(NULL_VERSION_HANDLE);
                TS_ASSERT(tvs[i]->getNumberOfVersionedTVs() == (NUM_TVS - j + 1));
                tvs[i]->removeVersionedTV(VersionHandle(versionHandles[j].indicator, versionHandles[i].substantive));
                TS_ASSERT(tvs[i]->getNumberOfVersionedTVs() == (NUM_TVS - j));
                // trying to remove non-existing versioned TVs
                tvs[i]->removeVersionedTV(VersionHandle(versionHandles[j].indicator, versionHandles[i].substantive));
                TS_ASSERT(tvs[i]->getNumberOfVersionedTVs() == (NUM_TVS - j));
            }
            TS_ASSERT(tvs[i]->getNumberOfVersionedTVs() == 1);
            // removing the last versioned TV
            tvs[i]->removeVersionedTV(VersionHandle(versionHandles[i].indicator, versionHandles[(i+1)%NUM_TVS].substantive));
            TS_ASSERT(tvs[i]->getNumberOfVersionedTVs() == 0);
        }
    }

    void testSpecialCaseOfRemoveVersionedTVs() {
        logger().debug("testSpecialCaseOfRemoveVersionedTVs()");
        for (int i = 0; i < NUM_TVS; i++) {
            for (int j = 0; j < NUM_TVS; j++) {
                TS_ASSERT(tvs[i]->getNumberOfVersionedTVs() == (j + 1));
                if (j != i) {
                    tvs[i]->setVersionedTV(SimpleTruthValue(means[j], counts[j]),
                                           VersionHandle(versionHandles[j].indicator, versionHandles[i].substantive));
                } else {
                    tvs[i]->setVersionedTV(SimpleTruthValue(means[i], counts[i]),
                                           VersionHandle(versionHandles[i].indicator, versionHandles[(i+1)%NUM_TVS].substantive));
                }
                TS_ASSERT(tvs[i]->getNumberOfVersionedTVs() == (j + 2));
            }
            tvs[i]->removeVersionedTVs(versionHandles[i].substantive);
            TS_ASSERT(tvs[i]->getNumberOfVersionedTVs() == 1);
            tvs[i]->removeVersionedTVs(versionHandles[(i+1)%NUM_TVS].substantive);
            TS_ASSERT(tvs[i]->getNumberOfVersionedTVs() == 0);
        }
    }

    void testGetVersionHandle() {
        logger().debug("testGetVersionHandle()");
        for (int i = 0; i < NUM_TVS; i++) {
            for (int j = 0; j < tvs[i]->getNumberOfVersionedTVs(); j++) {
                VersionHandle vh = tvs[i]->getVersionHandle(j);
                TS_ASSERT(vh.indicator == versionHandles[i].indicator);
                TS_ASSERT(vh.substantive == versionHandles[i].substantive);
            }
        }
    }

    void testUpdateVersionHandles() {
        logger().debug("testUpdateVersionHandles()");
        //void CompositeTruthValue::updateVersionHandles(HandleMap *handles) {
        HandleMap<AtomPtr>::MapPtr handles = std::make_shared<HandleMap<AtomPtr>>();
        handles->add(atomhand[0], atoms[1]);
        handles->add(atomhand[1], atoms[2]);
        handles->add(atomhand[2], atoms[0]);
        for (int i = 0; i < NUM_TVS; i++) {
            CompositeTruthValue* tv = tvs[i];
            CompositeRenumber::updateVersionHandles(*tv, handles);
            const TruthValue& versionedTv1 = tv->getVersionedTV(versionHandles[i]);
            TS_ASSERT(versionedTv1.isNullTv());
            //logger().debug("%d => %p", i+1, handles->get(i+1));
            const TruthValue& versionedTv2 =
                tv->getVersionedTV(VersionHandle(versionHandles[i].indicator,
                            handles->get(atomhand[i])->getHandle() ));
            TS_ASSERT(!versionedTv2.isNullTv());
            TS_ASSERT(fabs(versionedTv2.getMean() - means[i]) <=
                    FLOAT_ACCEPTABLE_ERROR);
            TS_ASSERT(fabs(versionedTv2.getCount() - counts[i]) <=
                    FLOAT_ACCEPTABLE_ERROR);
            TS_ASSERT(fabs(versionedTv2.getConfidence() - confidences[i]) <=
                    FLOAT_ACCEPTABLE_ERROR);
        }
    }
};
