/*
 * tests/atomspace/HandleEntryUTest.cxxtest
 *
 * Copyright (C) 2002-2007 Novamente LLC
 * All Rights Reserved
 *
 * Written by Welter Silva <welter@vettalabs.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/atomspace/AtomSpace.h>
#include <opencog/atomspace/CompositeTruthValue.h>
#include <opencog/atomspace/Link.h>
#include <opencog/atomspace/Node.h>
#include <opencog/util/Logger.h>
#include <opencog/util/platform.h>

#include "HandleEntry.h"

using namespace opencog;

#define VH1 VersionHandle(CONTEXTUAL, h1)
#define VH2 VersionHandle(CONTEXTUAL, h2)

class HandleEntryUTest :  public CxxTest::TestSuite
{

private:
    AtomSpace _as;
    AtomPtr a1;
    AtomPtr a2;
    Handle h1;
    Handle h2;

public:
    HandleEntryUTest() {
        h1 = _as.addNode(CONCEPT_NODE, "atom one");
        h2 = _as.addNode(CONCEPT_NODE, "atom two");
        a1 = h1;
        a2 = h2;
    }

    void setUp() {
    }

    void tearDown() {
    }

    void printHandleEntry(HandleEntry* p) {
        logger().debug("HandleEntry = %s", p->toString().c_str());
        /*
        while (p != NULL) {
            logger().debug("p = %p", p);
            logger().debug("p->getAtom() = %p", p->getAtom());
            logger().debug("p->getAtom()->getTruthValue() = %p", p->getAtom()->getTruthValue());
            TruthValue* tv = p->getAtom()->getTruthValue();
            logger().debug("%s", TruthValue::typeToStr(tv->getType()).c_str());
            logger().debug("%s", tv->toString().c_str());
            p = p->next;
        }
        */
    }

    void testFilterSetVersionHandle()
    {
        AtomSpace as(_as);
        Handle n1(as.addNode(CONCEPT_NODE, "TEST1"));
        Handle n2(as.addNode(CONCEPT_NODE, "TEST2", CompositeTruthValue::createTV(TruthValue::NULL_TV(), NULL_VERSION_HANDLE)));
        Handle n3(as.addNode(PREDICATE_NODE, "TEST3", CompositeTruthValue::createTV(TruthValue::NULL_TV(), VH1)));
        CompositeTruthValuePtr tv = CompositeTVCast(CompositeTruthValue::createTV(TruthValue::NULL_TV(), VH1));
        tv->setVersionedTV(TruthValue::DEFAULT_TV(), VH2);
        Handle n4(as.addNode(PREDICATE_NODE, "TEST4", tv));
        Handle n5(as.addNode(CONCEPT_NODE, "TEST5", CompositeTruthValue::createTV(TruthValue::NULL_TV(), VH2)));

        HandleEntry* he = new HandleEntry(n1);
        he  = HandleEntry::concatenation(he, new HandleEntry(n2));
        he  = HandleEntry::concatenation(he, new HandleEntry(n3));
        he  = HandleEntry::concatenation(he, new HandleEntry(n4));
        he  = HandleEntry::concatenation(he, new HandleEntry(n5));
        TS_ASSERT(he->getSize() == 5);

        // Now filter
        //logger().debug("======================\nFiltering using NULL_VERSION_HANDLE");
        he = HandleEntry::filterSet(he, NULL_VERSION_HANDLE);
        printHandleEntry(he);
        TS_ASSERT(he->getSize() == 5);

        //logger().debug("======================\nFiltering using VH1");
        he = HandleEntry::filterSet(he, VH1);
        printHandleEntry(he);
        TS_ASSERT(he->getSize() == 2);

        //logger().debug("======================\nFiltering using VH2");
        he = HandleEntry::filterSet(he, VH2);
        printHandleEntry(he);
        TS_ASSERT(he->getSize() == 1);
    }

    void testFilterSetTypeBoolVersionHandle() {
        AtomSpace as;
        Handle n1 = as.addNode(CONCEPT_NODE, "TEST1");
        Handle n3 = as.addNode(PREDICATE_NODE, "TEST3", CompositeTruthValue::createTV(TruthValue::NULL_TV(), VH1));
        CompositeTruthValuePtr tv = CompositeTVCast(CompositeTruthValue::createTV(TruthValue::NULL_TV(), VH1));
        tv->setVersionedTV(TruthValue::DEFAULT_TV(), VH2);
        Handle n4 = as.addNode(PREDICATE_NODE, "TEST4", tv);
        Handle n5 = as.addNode(CONCEPT_NODE, "TEST5", CompositeTruthValue::createTV(TruthValue::NULL_TV(), VH2));

        // Create links that contains at least 1 target whose type is CONCEPT_NODE and
        // 1 target whose type is PREDICATE_NODE
        std::vector<Handle> outgoing(2);
        outgoing[0] = n1; // concept (without any VH)
        outgoing[1] = n3; // predicate (with VH1)
        Handle l1 = as.addLink(LIST_LINK, outgoing);
        outgoing.resize(3);
        outgoing[0] = n3; // predicate (with VH1)
        outgoing[1] = n4; // predicate (with VH1 and VH2)
        outgoing[2] = n5; // concept (with VH2)
        Handle l2 = as.addLink(LIST_LINK, outgoing);
        outgoing.resize(2);
        outgoing[0] = n4; // predicate (with VH1 and VH2)
        outgoing[1] = n5; // concept (with VH2)
        Handle l3 = as.addLink(LIST_LINK, outgoing);

        HandleEntry* he = new HandleEntry(l1);
        he  = HandleEntry::concatenation(he, new HandleEntry(l2));
        he  = HandleEntry::concatenation(he, new HandleEntry(l3));
        TS_ASSERT(he->getSize() == 3);

        // Now filter
        he = HandleEntry::filterSet(he, NODE, true, NULL_VERSION_HANDLE);
        printHandleEntry(he);
        TS_ASSERT(he->getSize() == 3);

        he = HandleEntry::filterSet(he, NODE, true, VH1);
        printHandleEntry(he);
        TS_ASSERT(he->getSize() == 3);

        he = HandleEntry::filterSet(he, PREDICATE_NODE, false, VH1);
        printHandleEntry(he);
        TS_ASSERT(he->getSize() == 3);

        he = HandleEntry::filterSet(he, CONCEPT_NODE, false, VH2);
        printHandleEntry(he);
        TS_ASSERT(he->getSize() == 2);

        he = HandleEntry::filterSet(he, PREDICATE_NODE, false, VH2);
        printHandleEntry(he);
        TS_ASSERT(he->getSize() == 2);

        he = HandleEntry::filterSet(he, CONCEPT_NODE, false, VH1);
        printHandleEntry(he);
        TS_ASSERT(he->getSize() == 0);
    }

    void testFilterSetCharPtrTypeVersionHandle()
    {
        AtomSpace as(_as);
        Handle n1 = as.addNode(CONCEPT_NODE, "TEST1");
        Handle n3 = as.addNode(PREDICATE_NODE, "TEST3", CompositeTruthValue::createTV(TruthValue::NULL_TV(), VH1));
        CompositeTruthValuePtr tv = CompositeTVCast(CompositeTruthValue::createTV(TruthValue::NULL_TV(), VH1));
        tv->setVersionedTV(TruthValue::DEFAULT_TV(), VH2);
        Handle n4 = as.addNode(PREDICATE_NODE, "TEST4", tv);
        Handle n5 = as.addNode(CONCEPT_NODE, "TEST4", CompositeTruthValue::createTV(TruthValue::NULL_TV(), VH2));

        // Create links that contains at least 1 target whose type is CONCEPT_NODE and
        // 1 target whose type is PREDICATE_NODE
        std::vector<Handle> outgoing(2);
        outgoing[0] = n1; // concept (without any VH)
        outgoing[1] = n4; // predicate (with VH1 and VH2)
        Handle l1 = as.addLink(LIST_LINK, outgoing);
        outgoing.resize(3);
        outgoing[0] = n3; // predicate (with VH1)
        outgoing[1] = n4; // predicate (with VH1 and VH2)
        outgoing[2] = n5; // concept (with VH2)
        Handle l2 = as.addLink(LIST_LINK, outgoing);
        outgoing.resize(2);
        outgoing[0] = n4; // predicate (with VH1 and VH2)
        outgoing[1] = n5; // concept (with VH2)
        Handle l3 = as.addLink(LIST_LINK, outgoing);

        HandleEntry* he = new HandleEntry(l1);
        he  = HandleEntry::concatenation(he, new HandleEntry(l2));
        he  = HandleEntry::concatenation(he, new HandleEntry(l3));
        TS_ASSERT(he->getSize() == 3);

        // Now filter
        he = HandleEntry::filterSet(he, "TEST4", PREDICATE_NODE, NULL_VERSION_HANDLE);
        printHandleEntry(he);
        TS_ASSERT(he->getSize() == 3);

        he = HandleEntry::filterSet(he, "TEST4", PREDICATE_NODE, VH1);
        printHandleEntry(he);
        TS_ASSERT(he->getSize() == 3);

        he = HandleEntry::filterSet(he, "TEST4", PREDICATE_NODE, VH2);
        printHandleEntry(he);
        TS_ASSERT(he->getSize() == 3);

        he = HandleEntry::filterSet(he, "TEST4", CONCEPT_NODE, VH2);
        printHandleEntry(he);
        TS_ASSERT(he->getSize() == 2);

        he = HandleEntry::filterSet(he, "TEST4", CONCEPT_NODE, VH1);
        printHandleEntry(he);
        TS_ASSERT(he->getSize() == 0);
    }

};
