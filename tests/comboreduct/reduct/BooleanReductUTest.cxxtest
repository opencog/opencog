#include <cxxtest/TestSuite.h>
#include <string>
#include <sstream>

#include <opencog/util/tree.h>
#include <opencog/util/mt19937ar.h>

#include <opencog/comboreduct/combo/vertex.h>
#include <opencog/comboreduct/interpreter/eval.h>
#include <opencog/comboreduct/table/table.h>
#include <opencog/comboreduct/reduct/reduct.h>
#include <opencog/comboreduct/ant_combo_vocabulary/ant_combo_vocabulary.h>

using namespace std;
using namespace opencog;
using namespace reduct;
using namespace ant_combo;

class BooleanReductUTest : public CxxTest::TestSuite
{
    void test_simplify_tree_str(const string& tr_str)
    {
        stringstream ss(tr_str);
        combo_tree tr;
        int size_before, size_after;
        ss >> tr;
        
        complete_truth_table tt1(tr);
        size_before = tr.size();
        vertex_set ignore_ops;
        logical_reduce(3, tr, ignore_ops);
        size_after = tr.size();
        complete_truth_table tt2(tr, integer_log2(tt1.size()));
        
        TS_ASSERT_LESS_THAN(size_after, size_before);
        TS_ASSERT_EQUALS(tt1, tt2);
    }

public:
    void test_simplify1() {
        test_simplify_tree_str("and(and(not(not(and($4 $3))) or(not(or($5 $4)) or(and($1 $5) and($1 $5)))) and(and(and(not($1) not($2)) not(not($3))) or(and(not($4) not($5)) or(or($2 $1) not($5)))))");
    }
    void test_simplify2() {
        test_simplify_tree_str("not(or(and(and(not($5) or($5 $3)) not(or($5 $2))) and(or(and($5 $3) or($5 $3)) not(not($1)))))");
    }
    void test_simplify3() {
        test_simplify_tree_str("and(or(not(and(or($5 $3) not($2))) or(or(or($1 $2) and($2 $3)) or(and($2 $4) not($5)))) not(not(and(or($3 $3) or($3 $4)))))");
    }
    void test_simplify4() {
        test_simplify_tree_str("or(and(not($1) $3 or($3 not($1)) or(not($1) and($2 $1) and($3 $2))) and($3 $1) and(not($3) or($3 $1) not(or($3 not($1))) not(or($2 $1))))");
    }
    void test_simplify5() {
        test_simplify_tree_str("or(and(or(not($1) not($2)) $3) and(or(not($1) $3) not($2)))");
    }
    void test_simplify6() {
        test_simplify_tree_str("and(or(and(or(not($1) $3) not($2)) and(not($1) $3)) or(not($2) $3))");
    }

};
