#include <opencog/util/tree.h>
#include <opencog/util/mt19937ar.h>

#include <opencog/comboreduct/combo/vertex.h>
#include <opencog/comboreduct/interpreter/eval.h>
#include <opencog/comboreduct/table/table.h>
#include <opencog/comboreduct/table/table_io.h>
#include <opencog/comboreduct/reduct/reduct.h>
#include <opencog/comboreduct/ant_combo_vocabulary/ant_combo_vocabulary.h>

// This is almost, but not quite, a verbatim copy of the FullReductUTest
// test case.  Two big differences: we start by calling bool_reduce and
// not full_reduce(); the results should be the same, alghout the entry
// point is different.
//
// The other big difference is the big, gnarly cond expression at the end.

using namespace std;
using namespace opencog;
using namespace reduct;
using namespace ant_combo;

class BooleanFullUTest : public CxxTest::TestSuite
{
public:
    BooleanFullUTest() : testno(0) {}
    int testno;
    
    void base_test(const string& tree_str)
    {
        stringstream ss(tree_str);
        combo_tree tr_in;
        ss >> tr_in;
        
        type_tree tt = infer_type_tree(tr_in);

        testno++;
        std::cout << "-------------------------------- bool test " << testno << std::endl;
        std::cout << "combo tree = " << tr_in << std::endl;
        std::cout << "type tree = " << tt << std::endl;

        bool ct = is_well_formed(tt);

        std::cout << "is well formed = " << ct << std::endl;

        TS_ASSERT(ct);

        vertex_set ignore_ops;
        logical_reduction r(ignore_ops);

        for (int reduct_effort = 0; reduct_effort <4; reduct_effort++) {
            combo_tree tr = tr_in;
            ITable cti(tt);
            const rule& bool_reduct = r(reduct_effort);

            try {
                OTable mt1(tr, cti);
                std::cout << "effort = " << reduct_effort
                          << " tr before = " << tr << std::endl;
                bool_reduct(tr);
                std::cout << "effort = " << reduct_effort
                          << " tr  after = " << tr << std::endl;
                std::cout << std::endl;
                OTable mt2(tr, cti);

                TS_ASSERT_EQUALS(mt1, mt2);
            }
            catch(EvalException& e) {
                TS_ASSERT(true);
            }

            // Do it again .. reduct a tree that's already reduced, eh!?
            try {
                OTable mt1(tr, cti);
                std::cout << " again = " << reduct_effort
                          << " tr before = " << tr << std::endl;
                bool_reduct(tr);
                std::cout << " again = " << reduct_effort
                          << " tr  after = " << tr << std::endl;
                std::cout << std::endl;
                OTable mt2(tr, cti);

                TS_ASSERT_EQUALS(mt1, mt2);
            }
            catch(EvalException& e) {
                TS_ASSERT(true);
            }
        }
    }
    
    // test_simplify1 :
    // or(not(0<(+($1 $2))) not(0<($1)) not(0<($2))) -> or(not(0<($1)) not(0<($2)))
    void test_simplify1()
    {
        string tree_str="or(not(0<(+($1 $2))) not(0<($1)) not(0<($2)))";
        base_test(tree_str);
    }

    // test_simplify2 :
    // or(0<(+($1 0.3)) 0<(+($1 -0.3)))
    void test_simplify2()
    {
        string tree_str="or(0<(+($1 0.3)) 0<(+($1 -0.3)))";
        base_test(tree_str);
    }

    // test_simplify3
    // 0<sin(y) -> true  if 0<y -> true and 0<pi-y -> true
    void test_simplify3()
    {
        string tree_str="and(0<(sin($1)) 0<($1) 0<(+(*(-1 $1) 3)))";
        base_test(tree_str);
    }

    // test_simplify4
    // 0<sin(y) -> true  if 1<=y -> true and 0<3-y -> true
    void test_simplify4()
    {
        string tree_str="and(0<(sin($1)) not(0<(+(1 *(-1 $1)))) 0<(+(*(-1 $1) 3)))";
        base_test(tree_str);
    }

    // test_simplify5
    // and(not(0<(*($1 -1))) 0<($1)) -> 0<($1)
    void test_simplify5()
    {
        string tree_str="and(not(0<(*($1 -1))) 0<($1))";
        base_test(tree_str);
    }

    // test_simplify6
    // and(not(0<(*($1 -1))) 0<(+($1 2))) -> not(0<(*($1 -1)))
    void test_simplify6()
    {
        string tree_str="and(not(0<(*($1 -1))) 0<(+($1 2)))";
        base_test(tree_str);
    }

    // test_simplify7
    // 0<(+( *($1 -1) *($2 0) *(0 $3)))  ->  0<(*(-1 $1))
    void test_simplify7()
    {
        string tree_str="and(0<(+( *($1 -1) *($2 0) *(0 $3))))";
        base_test(tree_str);
    }

    // test_simplify8
    // 0<(+( *($1 -1) *($2 0) *(0 $3) $1 1))  ->  true
    // XXX but this last reduction is never made.
    void test_simplify8()
    {
        string tree_str="or(0<(+( *($1 -1) *($2 0) *(0 $3) $1 1)))";
        base_test(tree_str);
    }

    // test_simplify9
    // 0<(+( *(0 $1) *($2 0) 1))  ->   true
    void test_simplify9()
    {
        string tree_str="and(0<(+( *(0 $1) *($2 0) 1)))";
        base_test(tree_str);
    }

    // test_simplifya
    // multiple predicates need simplification.
    // or( 0<(+( *(0 $1) *($2 0) 1)) 0<(/($3 1)) 0<( *(1 $4)))  ->   true
    void test_simplifya()
    {
        string tree_str="or( 0<(+( *(0 $1) *($2 0) 1)) 0<(/($3 1)) 0<( *(1 $4)))";
        base_test(tree_str);
    }

    // test_simplifyb
    // multiple predicates need simplification.
    // and( 0<(+( *(0 $1) *($2 0) 1)) 0<(/($3 1)) 0<( *(1 $4)))  ->   
    //           ... -> and(0<($3) 0<($4))
    void test_simplifyb()
    {
        string tree_str="and( 0<(+( *(0 $1) *($2 0) 1)) 0<(/($3 1)) 0<( *(1 $4)))";
        base_test(tree_str);
    }

    // test_simplifyc
    // multiple predicates need simplification, mixed with booleans.
    // and( or($1) and(or($2 and($2))) 0<(/($3 1)) 0<( *(1 $4)))  ->   
    //           ... -> and($1 $2 0<($3) 0<($4))
    void test_simplifyc()
    {
        string tree_str="and( or($1) and(or($2 and($2))) 0<(/($3 1)) 0<( *(1 $4)))";
        base_test(tree_str);
    }

    // test_simplifyd
    // multiple predicates need simplification, mixed with booleans.
    // 0<( +(1 impulse(and(or($1 and($1))))))   ->
    //           ... ->  0<( +(1 impulse($1))
    void test_simplifyd()
    {
        string tree_str="or(0<( +(1 impulse(and(or($1 and($1)))))))";
        base_test(tree_str);
    }
 
    // test_simplify14 :
    // and(or(not(0<($1)) not(0<($2))))
    // Previously, the not's were getting accidentally stripped out.
    // Just make sure they are not.
    void test_simplify14() {
        string tree_str="and(or(not(0<($2)) not(0<(+($1 0)))))";
        base_test(tree_str);
    }

    // test_simplify15 :
    // failing reduction of cond
    void test_simplify15() {
        // string tree_str="cond(0<($1) POX 0<($2) CYT 0<($3) NUC 0<($4) ME2 CYT)"; 
        string tree_str="cond(0<($1) POX 0<($2) ME2 CYT)"; 
        base_test(tree_str);
    }

    // test_simplify16 :
    // failing reduction of cond, same as above, giant-sized example.
    void test_simplify16() {
        string tree_str="cond(or(and(or(0<(+(/(*(+(*(/(+(1 $7) +(*(-1 $1) $6)) 1 1) $8 $1 $2 $3 $4 $5 $6 $7) 1) +(2))))))) POX or(and(or(not(0<(+(/(*(+(*($4 1 1) $8 $1 $2 $3 $4 $5 $6 $7) 1) 1))))))) CYT or(and(or(not(0<(+(/(*(+(*(*(+(1 $7) $8) +(-1) 1) *($7 1 1) $8 $1 $2 $3 $4 $5 $6 $7) 1) 1))))))) NUC or(and(or(not(0<(+(/(*(+(*(+(-1 *($8 $8 1 1) *($4 1 1) $1 $2 $3 $4 $5 $6 $7 $8) $8 $8 1 1) *($4 1 1) $8 $1 $2 $3 $4 $5 $6 $7) 1) 1))))))) ME2 CYT)"; 
        base_test(tree_str);
    }

    // test_simplify17 :
    // failing reduction of cond, same as above, gianter-sized example.
    void test_simplify17() {
        string tree_str="cond(or(and(or(0<(+(/(*(+(*(/(+(1 $7) +(*(-1 $1) $6)) 1 1) $8 $1 $2 $3 $4 $5 $6 $7 0) 1) +(2)) 0))))) POX or(and(or(not(0<(+(/(*(+(*($4 1 1) $8 $1 $2 $3 $4 $5 $6 $7 0) 1) 1) 0)))))) CYT or(and(or(not(0<(+(/(*(+(*(*(+(1 $7) $8) +(-1) 1) *($7 1 1) $8 $1 $2 $3 $4 $5 $6 $7 0) 1) 1) 0)))))) NUC or(and(or(not(0<(+(/(*(+(*(+(-1 *($8 $8 1 1) *($4 1 1) $1 $2 $3 $4 $5 $6 $7 $8) $8 $8 1 1) *($4 1 1) $8 $1 $2 $3 $4 $5 $6 $7 0) 1) 1) 0)))))) ME2 CYT)"; 
        base_test(tree_str);
    }

    // test_simplify18 :
    // failing reduction of cond, same as above, gianterer-sized example.
    void test_simplify18() {
        string tree_str="cond(or(and(or(0<(+(/(*(+(*(/(+(1 $7) +(*(-1 $1) $6)) +(1) +(1)) *($8) *($1) *($2) *($3) *($4) *($5) *($6) *($7) 0) 1) +(2)) 0))))) POX or(and(or(not(0<(+(/(*(+(*($4 +(1) +(1)) *($8) *($1) *($2) *($3) *($4) *($5) *($6) *($7) 0) 1) +(1)) 0)))))) CYT or(and(or(not(0<(+(/(*(+(*(*(+(1 $7) $8) +(-1) +(1)) *($7 +(1) +(1)) *($8) *($1) *($2) *($3) *($4) *($5) *($6) *($7) 0) 1) +(1)) 0)))))) NUC or(and(or(not(0<(+(/(*(+(*(+(-1 *($8 $8 +(1) +(1)) *($4 +(1) +(1)) *($1) *($2) *($3) *($4) *($5) *($6) *($7) *($8)) $8 $8 +(1) +(1)) *($4 +(1) +(1)) *($8) *($1) *($2) *($3) *($4) *($5) *($6) *($7) 0) 1) +(1)) 0)))))) ME2 CYT)"; 
        base_test(tree_str);
    }

    // test_simplify19 :
    // failing reduction of cond, same as above, more gianterer-sized example.
    void test_simplify19() {
        string tree_str="cond(or(and(or(0<(+(/(*(+(*(/(+(1 $7) +(*(-1 $1) $6)) +(1) +(1)) *($8 +(0)) *($1 +(0)) *($2 +(0)) *($3 +(0)) *($4 +(0)) *($5 +(0)) *($6 +(0)) *($7 +(0)) 0) 1) +(2)) 0))))) POX or(and(or(not(0<(+(/(*(+(*($4 +(1) +(1)) *($8 +(0)) *($1 +(0)) *($2 +(0)) *($3 +(0)) *($4 +(0)) *($5 +(0)) *($6 +(0)) *($7 +(0)) 0) 1) +(1)) 0)))))) CYT or(and(or(not(0<(+(/(*(+(*(*(+(1 $7) $8) +(-1) +(1)) *($7 +(1) +(1)) *($8 +(0)) *($1 +(0)) *($2 +(0)) *($3 +(0)) *($4 +(0)) *($5 +(0)) *($6 +(0)) *($7 +(0)) 0) 1) +(1)) 0)))))) NUC or(and(or(not(0<(+(/(*(+(*(+(-1 *($8 $8 +(1) +(1)) *($4 +(1) +(1)) *($1 +(0)) *($2 +(0)) *($3 +(0)) *($4 +(0)) *($5 +(0)) *($6 +(0)) *($7 +(0)) *($8 +(0))) $8 $8 +(1) +(1)) *($4 +(1) +(1)) *($8 +(0)) *($1 +(0)) *($2 +(0)) *($3 +(0)) *($4 +(0)) *($5 +(0)) *($6 +(0)) *($7 +(0)) 0) 1) +(1)) 0)))))) ME2 CYT)"; 
        base_test(tree_str);
    }

    // test_simplify20 :
    // failing reduction of cond, same as above, super-giant-sized example.
    void test_simplify20() {
        string tree_str="cond(or(and(or(0<(+(/(*(+(*(/(+(1 $7) +(*(-1 $1) $6)) +(1 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8)) +(1 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8))) *($8 +(0 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8))) *($1 +(0 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8))) *($2 +(0 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8))) *($3 +(0 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8))) *($4 +(0 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8))) *($5 +(0 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8))) *($6 +(0 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8))) *($7 +(0 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8))) 0 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8)) 1) +(2 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8))) 0))))) POX or(and(or(not(0<(+(/(*(+(*($4 +(1 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8)) +(1 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8))) *($8 +(0 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8))) *($1 +(0 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8))) *($2 +(0 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8))) *($3 +(0 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8))) *($4 +(0 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8))) *($5 +(0 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8))) *($6 +(0 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8))) *($7 +(0 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8))) 0 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8)) 1) +(1 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8))) 0)))))) CYT or(and(or(not(0<(+(/(*(+(*(*(+(1 $7) $8) +(-1 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8)) +(1 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8))) *($7 +(1 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8)) +(1 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8))) *($8 +(0 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8))) *($1 +(0 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8))) *($2 +(0 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8))) *($3 +(0 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8))) *($4 +(0 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8))) *($5 +(0 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8))) *($6 +(0 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8))) *($7 +(0 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8))) 0 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8)) 1) +(1 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8))) 0)))))) NUC or(and(or(not(0<(+(/(*(+(*(+(-1 *($8 $8 +(1 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8)) +(1 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8))) *($4 +(1 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8)) +(1 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8))) *($1 +(0 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8))) *($2 +(0 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8))) *($3 +(0 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8))) *($4 +(0 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8))) *($5 +(0 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8))) *($6 +(0 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8))) *($7 +(0 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8))) *($8 +(0 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8))) *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8)) $8 $8 +(1 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8)) +(1 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8))) *($4 +(1 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8)) +(1 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8))) *($8 +(0 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8))) *($1 +(0 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8))) *($2 +(0 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8))) *($3 +(0 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8))) *($4 +(0 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8))) *($5 +(0 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8))) *($6 +(0 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8))) *($7 +(0 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8))) 0 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8)) 1) +(1 *(0 $1) *(0 $2) *(0 $3) *(0 $4) *(0 $5) *(0 $6) *(0 $7) *(0 $8))) 0)))))) ME2 CYT)"; 
        base_test(tree_str);
    }

};
