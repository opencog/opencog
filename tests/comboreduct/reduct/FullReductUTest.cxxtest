#include <opencog/util/tree.h>
#include <opencog/util/mt19937ar.h>

#include <opencog/comboreduct/combo/vertex.h>
#include <opencog/comboreduct/interpreter/eval.h>
#include <opencog/comboreduct/table/table.h>
#include <opencog/comboreduct/reduct/reduct.h>
#include <opencog/comboreduct/ant_combo_vocabulary/ant_combo_vocabulary.h>

using namespace std;
using namespace opencog;
using namespace reduct;
using namespace ant_combo;

class FullReductUTest : public CxxTest::TestSuite
{
public:
    FullReductUTest() : testno(0) {}
    int testno;
    void base_test(const string& tree_str)
    {
        stringstream ss(tree_str);
        combo_tree tr;
        ss >> tr;
        
        type_tree tt = infer_type_tree(tr);

        testno++;
        std::cout << "-------------------------------- test " << testno << std::endl;
        std::cout << "type tree = " << tt << std::endl;

        bool ct = is_well_formed(tt);

        std::cout << "is well formed = " << ct << std::endl;

        TS_ASSERT(ct);

        ITable cti(tt);

        try {
            OTable mt1(tr, cti);
            std::cout << "tr before = " << tr << std::endl;
            full_reduce(tr);
            std::cout << "tr  after = " << tr << std::endl;
            OTable mt2(tr, cti);

            TS_ASSERT_EQUALS(mt1, mt2);
        }
        catch(EvalException& e) {
            TS_ASSERT(true);
        }
    }
    
    // test_simplify1 :
    // or(not(0<(+($1 $2))) not(0<($1)) not(0<($2))) -> or(not(0<($1)) not(0<($2)))
    void test_simplify1()
    {
        string tree_str="or(not(0<(+($1 $2))) not(0<($1)) not(0<($2)))";
        base_test(tree_str);
    }

    // test_simplify2 :
    // or(0<(+($1 0.3)) 0<(+($1 -0.3)))
    void test_simplify2()
    {
        string tree_str="or(0<(+($1 0.3)) 0<(+($1 -0.3)))";
        base_test(tree_str);
    }

    // test_simplify3
    // 0<sin(y) -> true  if 0<y -> true and 0<pi-y -> true
    void test_simplify3()
    {
        string tree_str="and(0<(sin($1)) 0<($1) 0<(+(*(-1 $1) 3)))";
        base_test(tree_str);
    }

    // test_simplify4
    // 0<sin(y) -> true  if 1<=y -> true and 0<3-y -> true
    void test_simplify4()
    {
        string tree_str="and(0<(sin($1)) not(0<(+(1 *(-1 $1)))) 0<(+(*(-1 $1) 3)))";
        base_test(tree_str);
    }

    // test_simplify5
    // and(not(0<(*($1 -1))) 0<($1)) -> 0<($1)
    void test_simplify5()
    {
        string tree_str="and(not(0<(*($1 -1))) 0<($1))";
        base_test(tree_str);
    }

    // test_simplify6
    // and(not(0<(*($1 -1))) 0<(+($1 2))) -> not(0<(*($1 -1)))
    void test_simplify6()
    {
        string tree_str="and(not(0<(*($1 -1))) 0<(+($1 2)))";
        base_test(tree_str);
    }

    // test_simplify7
    // 0<(+( *($1 -1) *($2 0) *(0 $3)))  ->  0<(*(-1 $1))
    void test_simplify7()
    {
        string tree_str="0<(+( *($1 -1) *($2 0) *(0 $3)))";
        base_test(tree_str);
    }

    // test_simplify8
    // 0<(+( *($1 -1) *($2 0) *(0 $3) $1 1))  ->  true
    // XXX but this last reduction is never made.
    void test_simplify8()
    {
        string tree_str="0<(+( *($1 -1) *($2 0) *(0 $3) $1 1))";
        base_test(tree_str);
    }

    // test_simplify9
    // 0<(+( *(0 $1) *($2 0) 1))  ->   true
    void test_simplify9()
    {
        string tree_str="0<(+( *(0 $1) *($2 0) 1))";
        base_test(tree_str);
    }

    // test_simplifya
    // multiple predicates need simplification.
    // or( 0<(+( *(0 $1) *($2 0) 1)) 0<(/($3 1)) 0<( *(1 $4)))  ->   true
    void test_simplifya()
    {
        string tree_str="or( 0<(+( *(0 $1) *($2 0) 1)) 0<(/($3 1)) 0<( *(1 $4)))";
        base_test(tree_str);
    }

    // test_simplifyb
    // multiple predicates need simplification.
    // and( 0<(+( *(0 $1) *($2 0) 1)) 0<(/($3 1)) 0<( *(1 $4)))  ->   
    //           ... -> and(0<($3) 0<($4))
    void test_simplifyb()
    {
        string tree_str="and( 0<(+( *(0 $1) *($2 0) 1)) 0<(/($3 1)) 0<( *(1 $4)))";
        base_test(tree_str);
    }

    // test_simplifyc
    // multiple predicates need simplification, mixed with booleans.
    // and( or($1) and(or($2 and($2))) 0<(/($3 1)) 0<( *(1 $4)))  ->   
    //           ... -> and($1 $2 0<($3) 0<($4))
    void test_simplifyc()
    {
        string tree_str="and( or($1) and(or($2 and($2))) 0<(/($3 1)) 0<( *(1 $4)))";
        base_test(tree_str);
    }

    // test_simplifyd
    // multiple predicates need simplification, mixed with booleans.
    // 0<( +(1 impulse(and(or($1 and($1))))))   ->
    //           ... ->  0<( +(1 impulse($1))
    void test_simplifyd()
    {
        string tree_str="0<( +(1 impulse(and(or($1 and($1))))))";
        base_test(tree_str);
    }
 
    // test_simplify14 :
    // and(or(not(0<($1)) not(0<($2))))
    // Previously, the not's were getting accidentally stripped out.
    // Just make sure they are not.
    void test_simplify14() {
        string tree_str="and(or(not(0<($2)) not(0<(+($1 0)))))";
        base_test(tree_str);
    }

};
