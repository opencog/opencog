/** ContinReductUTest.cxxtest --- 
 *
 * Copyright (C) 2010 Novamente LLC
 *
 * Author: Nil Geisweiller
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */
#include <opencog/util/tree.h>
#include <opencog/util/mt19937ar.h>

#include <opencog/comboreduct/combo/vertex.h>
#include <opencog/comboreduct/interpreter/eval.h>
#include <opencog/comboreduct/table/table.h>
#include <opencog/comboreduct/reduct/reduct.h>
#include <opencog/comboreduct/ant_combo_vocabulary/ant_combo_vocabulary.h>

using namespace std;
using namespace opencog;
using namespace reduct;
using namespace ant_combo;

class ContinReductUTest : public CxxTest::TestSuite {
public:
    // test if the combo program of string tr_str is shorter (or equal
    // if strict is false) to the result once reduced, and preserves
    // semantics (compare contin table)
    void perform_test_reduce(const string& tr_str, bool strict = true) {
        stringstream ss(tr_str);
        combo_tree tr;
        ss >> tr;

        type_tree tt = infer_type_tree(tr);
        
        ITable rnt(tt);
        
        int size_before, size_after;
        int reduct_effort = 2;
        
        try {
            OTable ct1(tr, rnt);
            // std::cout << "ct1:" << std::endl << ct1 << std::endl;;
            size_before=tr.size();
            std::cout << "before: " << tr << std::endl;
            
            contin_reduce(tr, reduct_effort, vertex_set());
            std::cout << "after:  " << tr << std::endl;      
            size_after=tr.size();
            OTable ct2(tr, rnt);
            // std::cout << "ct2:" << std::endl << ct2 << std::endl;;
            
            if(strict) {
                TS_ASSERT_LESS_THAN(size_after, size_before);
            } else {
                TS_ASSERT_LESS_THAN_EQUALS(size_after, size_before);
            }
            TS_ASSERT_EQUALS(ct1, ct2);
        }
        catch(EvalException& e) {
            std::cout << "An expection has been raised during the test (could be normal)" << std::endl;
            TS_ASSERT(true);
        }
    }
    
    // test_simplify1 :
    // x+0 -> x
    // x*1 -> x
    // x*0 -> 0
    // x/c -> 1/c * x
    // x/(c*y) -> 1/c * x/y
    // 0/x -> 0
    // *(x) -> x
    // +(x) -> x
    void test_simplify1() {
        string tree_str="*(+(*(/(*(+($1 *($2 0)) 1) *(5.0 $3)) /(+($3 /(0 $4)) 5.0))))";
        perform_test_reduce(tree_str);
    }

    // test_simplify2 :
    // x/z+y/z -> (x+y)/z
    // x*y+x*z -> x*(y+z)
    // (x*y)/(x*z) -> y/z
    void test_simplify2() {
        string tree_str="/(*($5 +(*($4 +(/($1 $3) /($2 $3))) *($5 +(/($1 $3) /($2 $3))))) *($5 $6))";
        perform_test_reduce(tree_str);
    }

    // test_simplify3 :
    // (x/y)/z -> x/(y*z)
    // x/(y/z) -> (x*z)/y
    // x*(y/z) -> (x*y)/z
    void test_simplify3() {
        string tree_str="*(/(/($1 $2) $3) /($4 /($5 $6)) /($7 /($8 $9)))";
        perform_test_reduce(tree_str);
    }

    // test_simplify4 :
    // log(x)+log(y) -> log(x*y)
    // log(x)-log(y) -> log(x/y)
    // log(c/x) -> -log(c^-1*x)
    // log(exp(x)*y) -> x+log(y)
    void test_simplify4() {
        string tree_str="*(+(log(+($1 1)) log(+($2 1))) +(log(+($3 1)) *(log(+($4 1)) -1)) log(/(5.0 +($5 1))) log(*(exp($6) +($7 1))))";
        perform_test_reduce(tree_str);
    }

// the following test is not valid if log has the semantics
// log(abs(x)) because the rule exp(log(x)+y) -> x*exp(y) is not
// applied
#ifndef ABS_LOG
    // test_simplify5 :
    // prod exp(x_i) -> exp(sum x_i)
    // x/exp(y) -> x*exp(-y)
    // exp(log(x)+y) -> x*exp(y) (if log is not defined as log(abs(x)))
    // sin(x+c) -> sin(x + (c>pi? c-pi : (c<= pi? c+pi))
    void test_simplify5() {
        string tree_str="+(*(exp($1) exp($2) $3 exp($4)) /($5 exp($6)) exp(+(log(+($7 1)) $8)) sin(+($9 100.0)))";
        perform_test_reduce(tree_str, false);
    }
#endif

    // test_simplify6 :
    // test the distribute rule
    // *(+(*(+($1 $2 1) -1) 1) -1) should reduce to +($1 $2)
    void test_simplify6() {
        string tree_str="*(+(*(+($1 $2 1) -1) 1) -1)";
        perform_test_reduce(tree_str);
    }
    
    // test_simplify7 :
    // test the distribute rule
    // +(*(+(*(+($1 $2) 2) 1.5) 0.5) -1) should reduce to +($1 $2)
    void test_simplify7() {
        string tree_str="+(*(+(*(+($1 $2) 2) 1.5) 0.5) -1)";
        perform_test_reduce(tree_str);
    }

    // test_simplify8 :
    // test the distribute rule
    void test_simplify8() {
        string tree_str="*(+($3 *(2 +(*(+($1 1)) 1))) $1 4)";
        perform_test_reduce(tree_str);
    }

    // test_simplify9 :
    // +($1 *(5 $1)) should reduce to *(6 $1)
    void test_simplify9() {
        string tree_str="+($1 *(5 $1))";
        perform_test_reduce(tree_str);
    }

    // test_simplify10 :
    // factorize/distribute test
    /// @todo
    // +(*(+(*(+($1 1) 0.9375) -0.9375) $1) 2.9375) 
    // becomes +(2.9375 *(+(-0.9375 *(0.9375 +(1 $1))) $1))
    // wich could probably be improved
    void test_simplify10() {
        string tree_str="+(*(+(*(+($1 1) 0.9375) -0.9375) $1) 2.9375)";
        perform_test_reduce(tree_str, false);
    }

    // test_simplify11 :
    // factorize/distribute test
    void test_simplify11() {
        string tree_str="*(+(*($1 +(2.75 *($1 -2))) 1) $1 +(0.5 *($1 0.5)))";
        perform_test_reduce(tree_str, false); /// @todo can do better
    }

    // test_simplify12 :
    // factorize/distribute test
    void test_simplify12() {
        string tree_str="*(-1 +(1 $1) +(*($1 $1) $1))";
        perform_test_reduce(tree_str, false); /// @todo can be improved
    }

    // test_simplify13 :
    // factorize/distribute test
    void test_simplify13() {
        string tree_str="+(*(2 $1) *(+(1 *(+(1 *(-1 $1)) +(2 *(-4 $1))) *(+(2 *(-2 $1)) $1)) $1 $1))";
        perform_test_reduce(tree_str);
    }

    // test_simplify14 :
    // factorize/distribute test
    void test_simplify14() {
        string tree_str="*(1.125 +(1 *(+(1 *(+(1 *($1 $1)) $1)) +(1 $1) $1)))";
        perform_test_reduce(tree_str, false); /// @todo can do better
    }

    // test_simplify15 :
    // factorize/distribute test    
    void test_simplify15() {
        string tree_str="*(-1.75 +(*(+(1 *(+(1 *(+(1 *(-1 $9)) $9)) $9)) $1) $3))";
        perform_test_reduce(tree_str);
    }

    // reduce argument of impulse
    void test_simplify16() {
        string tree_str="*(-1.75 impulse(and(or(and($1 $2) $1))))";
        perform_test_reduce(tree_str);
    }

    // reduce argument of impulse
    void test_simplify17() {
        string tree_str="*(-1.75 impulse(or(and(or(and($1 $2) $1)) not($1))))";
        perform_test_reduce(tree_str);
    }

    // reduce argument of impulse
    void test_simplify18() {
        string tree_str="*(-1.75 impulse(or(and(or(0<(+(2 1)))))))";
        perform_test_reduce(tree_str);
    }

    // reduce argument of impulse
    void test_simplify19() {
        string tree_str="*(-1.75 impulse(or(and(or(0<(+(2 $1)))))))";
        perform_test_reduce(tree_str);
    }

    // reduce argument of impulse
    void test_simplify20() {
        string tree_str="*(-1.75 impulse(or(and(or(0<(+(2 *(2 $1) 6)))))))";
        perform_test_reduce(tree_str);
    }
};
