#include <opencog/comboreduct/combo/combo.h>
#include <opencog/comboreduct/type_checker/type_tree.h>

using namespace opencog;
using namespace opencog::combo;
using namespace std;

class TreeTypeUTest : public CxxTest::TestSuite
{
public:

    void test_get_type_tree1() {
        string s = "and($1 0<(+($2 $2)) $3)";
        stringstream ss(s);
        combo_tree tr;
        ss >> tr;

        std::cout << tr << std::endl;

        type_tree tt = get_type_tree(tr);
        stringstream sst;
        sst << tt;

        std::cout << tt << std::endl;

        string st = "application(->(arg_list(boolean) boolean) $1 application(->(contin boolean) application(->(arg_list(contin) contin) $2 $2)) $3) ";
        TS_ASSERT_EQUALS(sst.str(), st);
    }

    void test_get_type_tree2() {
        stringstream ss("goto_obj_action");
        combo_tree tr;
        ss >> tr;

        std::cout << "'" << tr << "'" << std::endl;

        type_tree tt = get_type_tree(tr);
        stringstream sst;
        sst << tt;

        std::cout << "'" << tt << "'" << std::endl;

        string st = "action_definite_object ";

        TS_ASSERT_EQUALS(sst.str(), st);
    }

    void test_get_intersection1() {
        std::cout << "test_get_intersection1" << std::endl;

        string st1 = "union(contin_type boolean_type)";
        string st2 = "union(indefinite_object_type contin_type)";
        string st_res = "contin_type";

        stringstream sst1(st1);
        stringstream sst2(st2);
        stringstream sst_res(st_res);

        type_tree tt1;
        type_tree tt2;
        type_tree tt_res;
        type_tree tt_res_cal;

        sst1 >> tt1;
        sst2 >> tt2;
        sst_res >> tt_res;
        tt_res_cal = get_intersection(tt1, tt2);

        std::cout << "TT1 : " << tt1 << std::endl;
        std::cout << "TT2 : " << tt2 << std::endl;
        std::cout << "TT_RES : " << tt_res << std::endl;
        std::cout << "TT_RES_CAL : " << tt_res_cal << std::endl;

        TS_ASSERT_EQUALS(tt_res_cal, tt_res);
    }

    void test_get_intersection2() {
        std::cout << "test_get_intersection2" << std::endl;

        stringstream sst1("->(definite_object action_result)");
        stringstream sst2("->(indefinite_object action_result)");
        stringstream sst_res("->(union(indefinite_object definite_object) action_result)");

        type_tree tt1;
        type_tree tt2;
        type_tree tt_res;
        type_tree tt_res_cal;

        sst1 >> tt1;
        sst2 >> tt2;
        sst_res >> tt_res;
        tt_res_cal = get_intersection(tt1, tt2);

        std::cout << "TT1 : " << tt1 << std::endl;
        std::cout << "TT2 : " << tt2 << std::endl;
        std::cout << "TT_RES : " << tt_res << std::endl;
        std::cout << "TT_RES_CAL : " << tt_res_cal << std::endl;

        TS_ASSERT(equal_type_tree(tt_res_cal, tt_res));
    }

    void test_get_intersection3() {
        std::cout << "test_get_intersection3" << std::endl;

        stringstream sst1("->(contin contin boolean)");
        stringstream sst2("unknown");
        stringstream sst_res("->(contin contin boolean)");

        type_tree tt1;
        type_tree tt2;
        type_tree tt_res;
        type_tree tt_res_cal;

        sst1 >> tt1;
        sst2 >> tt2;
        sst_res >> tt_res;
        tt_res_cal = get_intersection(tt1, tt2);

        std::cout << "TT1 : " << tt1 << std::endl;
        std::cout << "TT2 : " << tt2 << std::endl;
        std::cout << "TT_RES : " << tt_res << std::endl;
        std::cout << "TT_RES_CAL : " << tt_res_cal << std::endl;

        TS_ASSERT(equal_type_tree(tt_res_cal, tt_res));
    }

    void test_infer_arg_type_tree1() {
        //TODO once there is a bigger vocabulary set than ant
        TS_ASSERT(true);
    }

    void test_insert_arg_type_tree() {
        type_tree tt(id::boolean_type);
        std::vector<type_tree> arg_types;
        set_arg_type(type_tree(id::contin_type), 1, arg_types);
        type_tree tt_arg(id::union_type);
        tt_arg.append_child(tt_arg.begin(), id::indefinite_object_type);
        tt_arg.append_child(tt_arg.begin(), id::action_result_type);
        set_arg_type(tt_arg, 2, arg_types);
        insert_arg_type_tree(arg_types, tt);
        stringstream ss_test("->(contin union(indefinite_object action_result) boolean)");
        type_tree tt_test;
        ss_test >> tt_test;

        std::cout << "TT : " << tt << std::endl;
        std::cout << "TT TEST : " << tt_test << std::endl;

        TS_ASSERT_EQUALS(tt, tt_test);
    }

    //reduce a type_tree without arguments
    void test_reduce_type_tree1() {

        std::cout << "test_reduce_type_tree1" << std::endl;

        string s = "0<(20.0)";
        stringstream ss(s);
        combo_tree tr;
        ss >> tr;

        type_tree tt = get_type_tree(tr);
        stringstream sst;
        sst << tt;

        std::cout << "Non-reduced type tree : " << tt << std::endl;

        reduce_type_tree(tt, tr);
        std::cout << "Reduced type tree : " << tt << std::endl;

        stringstream sst_red;
        sst_red << tt;

        string st = "boolean ";
        TS_ASSERT_EQUALS(sst_red.str(), st);
    }

    //reduce a type_tree without arguments
    void test_reduce_type_tree2() {

        std::cout << "test_reduce_type_tree2" << std::endl;

        string s = "and(true 0<)";
        stringstream ss(s);
        combo_tree tr;
        ss >> tr;

        type_tree tt = get_type_tree(tr);
        stringstream sst;
        sst << tt;

        std::cout << "Non-reduced type tree : " << tt << std::endl;

        reduce_type_tree(tt, tr);
        std::cout << "Reduced type tree : " << tt << std::endl;

        stringstream sst_red;
        sst_red << tt;

        string st = "->(contin boolean) ";
        TS_ASSERT_EQUALS(sst_red.str(), st);
    }

    void test_reduce_type_tree3() {
        std::cout << "test_reduce_type_tree3" << std::endl;

        stringstream ss("union(boolean_type contin_type boolean_type)");
        type_tree tt;
        ss >> tt;
        reduce_type_tree(tt);
        type_tree tt_res;
        stringstream sst_res("union(boolean contin)"); //expected result
        sst_res >> tt_res;

        std::cout << "REDUCED TT : " << tt << std::endl;
        std::cout << "EXPECTED RESULT TT : " << tt_res << std::endl;

        TS_ASSERT(equal_type_tree(tt, tt_res));
    }

    void test_reduce_type_tree4() {
        std::cout << "test_reduce_type_tree4" << std::endl;

        stringstream ss("application(->(boolean arg_list(contin) action_result) boolean ->(definite_object contin) contin)");
        type_tree tt;
        ss >> tt;
        reduce_type_tree(tt);
        stringstream sst;
        sst << tt;
        string st = "->(definite_object action_result) ";

        std::cout << "REDUCED TT : " << tt << std::endl;

        TS_ASSERT_EQUALS(sst.str(), st);
    }

    void test_reduce_type_tree5() {
        std::cout << "test_reduce_type_tree5" << std::endl;

        stringstream ss("application(->(boolean boolean arg_list(contin) action_result) boolean boolean)");
        type_tree tt;
        ss >> tt;
        reduce_type_tree(tt);
        stringstream sst;
        sst << tt;
        string st = "action_result ";

        std::cout << "REDUCED TT : " << tt << std::endl;

        TS_ASSERT_EQUALS(sst.str(), st);
    }

    void test_reduce_type_tree6() {
        std::cout << "test_reduce_type_tree6" << std::endl;

        stringstream ss("union(unknown contin)");
        type_tree tt;
        ss >> tt;
        reduce_type_tree(tt);
        stringstream sst;
        sst << tt;
        string st = "unknown ";

        std::cout << "REDUCED TT : " << tt << std::endl;

        TS_ASSERT_EQUALS(sst.str(), st);
    }

    //reduce a type_tree with arguments
    void test_infer_type_tree1() {

        std::cout << "test_infer_type_tree1" << std::endl;

        string s = "and($1 0<(+($2 $2)) $3)";
        stringstream ss(s);
        combo_tree tr;
        ss >> tr;

        type_tree tt = infer_type_tree(tr);
        stringstream sst;
        sst << tt;

        std::cout << tt << std::endl;

        stringstream sst_red;
        sst_red << tt;

        string st = "->(boolean contin boolean boolean) ";
        TS_ASSERT_EQUALS(sst_red.str(), st);
    }

    //reduce a type_tree with arguments
    void test_infer_type_tree2() {

        std::cout << "test_infer_type_tree2" << std::endl;

        string s = "and_seq(move_forward action_not(and_seq))";
        stringstream ss(s);
        combo_tree tr;
        ss >> tr;

        type_tree tt = infer_type_tree(tr);
        stringstream sst;
        sst << tt;

        std::cout << tt << std::endl;

        stringstream sst_red;
        sst_red << tt;

        string st = "->(arg_list(action_result) action_result) ";
        TS_ASSERT_EQUALS(sst_red.str(), st);
    }

    //reduce a type_tree with arguments
    void test_infer_type_tree3() {

        std::cout << "test_infer_type_tree3" << std::endl;

        string s = "_*_";
        stringstream ss(s);
        combo_tree tr;
        ss >> tr;

        type_tree tt = infer_type_tree(tr);
        stringstream sst;
        sst << tt;

        std::cout << tt << std::endl;

        stringstream sst_red;
        sst_red << tt;

        string st = "wild_card ";
        TS_ASSERT_EQUALS(sst_red.str(), st);
    }

    //checked that dummy_definite_object($1) is ill_formed
    void test_infer_type_tree4() {

        std::cout << "test_infer_type_tree4" << std::endl;

        string s = "dummy_definite_object($1)";
        stringstream ss(s);
        combo_tree tr;
        ss >> tr;

        bool assert_raised = false;

        type_tree tt = type_tree(id::ill_formed_type);

        try {
            tt = infer_type_tree(tr);
            std::cout << tt << std::endl;
        } catch (AssertionException ex) {
            assert_raised = true;
        }
        TS_ASSERT(assert_raised || !is_well_formed(tt));
    }

    void test_inherit_type_tree1() {
        string s1 = "indefinite_object";
        string s2 = "definite_object";
        string s3 = "union(indefinite_object definite_object)";
        stringstream ss1(s1);
        stringstream ss2(s2);
        stringstream ss3(s3);

        type_tree tr1, tr2, tr3;

        ss1 >> tr1;
        ss2 >> tr2;
        ss3 >> tr3;

        TS_ASSERT(inherit_type_tree(tr1, tr3));
        TS_ASSERT(inherit_type_tree(tr2, tr3));
    }

    void test_inherit_type_tree2() {
        string s1 = "->(indefinite_object action_result)";
        string s2 = "->(union(indefinite_object definite_object) action_result)";
        string s3 = "->(unknown action_result)";
        stringstream ss1(s1);
        stringstream ss2(s2);
        stringstream ss3(s3);

        type_tree tr1, tr2, tr3;

        ss1 >> tr1;
        ss2 >> tr2;
        ss3 >> tr3;

        TS_ASSERT(inherit_type_tree(tr2, tr1));
        TS_ASSERT(inherit_type_tree(tr1, tr3));
        TS_ASSERT(inherit_type_tree(tr2, tr3));
    }

    void test_inherit_type_tree3() {
        string s1 = "->(union(indefinite_object definite_object) arg_list(union(boolean contin)) action_result)";
        string s2 = "->(indefinite_object arg_list(boolean) action_result)";

        stringstream ss1(s1);
        stringstream ss2(s2);

        type_tree tr1, tr2;

        ss1 >> tr1;
        ss2 >> tr2;

        TS_ASSERT(inherit_type_tree(tr1, tr2));
    }

    void test_does_contain_all_arg_up_to() {
        stringstream ss("+($1 impulse($2) 4.0)");
        combo_tree tr;
        ss >> tr;
        TS_ASSERT(!does_contain_all_arg_up_to(tr, 1));
        TS_ASSERT(does_contain_all_arg_up_to(tr, 2));
        TS_ASSERT(!does_contain_all_arg_up_to(tr, 3));
    }

    void test_infer_vertex_type() {
        stringstream ss("+(1 contin_if(and($1 $2) *($3 $4) +($5 $6)))");
        combo_tree tr;
        ss >> tr;
        std::cout << "TR : " << tr << std::endl;
        combo_tree::iterator cit = tr.begin();
        ++cit;
        ++cit;
        type_tree cit_type_tree = infer_vertex_type(tr, cit);
        type_tree tt_res;
        stringstream ss_res("->(boolean contin contin contin)");
        ss_res >> tt_res;
        std::cout << "CIT_TYPE_TREE : " << cit_type_tree << std::endl;
        TS_ASSERT_EQUALS(cit_type_tree, tt_res);
    }

    void test_argument_type_list_input_type1() {
        stringstream ss("->(contin boolean arg_list(action_result) boolean)");
        type_tree tt;
        ss >> tt;
        type_tree_seq atl = get_signature_inputs(tt);
        arity_t a = type_tree_arity(tt);
        TS_ASSERT_EQUALS(a, -3);
        type_tree tti3 = argument_type_list_input_type(atl, a, 3);
        TS_ASSERT_EQUALS(tti3, type_tree(id::action_result_type));
    }

    void test_infer_arity1() {
        stringstream ss("/($1 +)");
        combo_tree tr;
        ss >> tr;
        arity_t a = infer_arity(tr);
        TS_ASSERT_EQUALS(a, -2);
    }

    void test_infer_arity2() {
        stringstream ss("and_seq(move_forward boolean_while(is_food_ahead and_seq(boolean_while(is_food_ahead and_seq) turn_left)))");
        combo_tree tr;
        ss >> tr;
        arity_t a = infer_arity(tr);

        TS_ASSERT_EQUALS(a, -1);
    }

    void test_infer_arity3() {
        stringstream ss("and_seq(move_forward boolean_while(is_food_ahead and_seq) turn_left turn_right boolean_while(is_food_ahead and_seq(boolean_while(is_food_ahead and_seq) move_forward)))");
        combo_tree tr;
        ss >> tr;
        arity_t a = infer_arity(tr);

        TS_ASSERT_EQUALS(a, -1);
    }

    void test_infer_arity4() {
        stringstream ss("and_seq(move_forward turn_left turn_right boolean_while(is_food_ahead and_seq) boolean_while(is_food_ahead and_seq(boolean_while(is_food_ahead and_seq) move_forward)))");
        combo_tree tr;
        ss >> tr;
        arity_t a = infer_arity(tr);

        TS_ASSERT_EQUALS(a, -1);
    }

    void test_explicit_arity1() {
        stringstream ss("+(1 $5 $1)");
        combo_tree tr;
        ss >> tr;
        arity_t a = explicit_arity(tr);
        TS_ASSERT_EQUALS(a, 5);
    }

};
