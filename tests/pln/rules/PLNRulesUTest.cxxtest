/*
 * tests/pln/rules/PLNRulesUTest.cxxtest
 *
 * Copyright (C) 2014 Cosmo Harrigan
 * Copyright (C) 2015 OpenCog Foundation
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/guile/SchemeEval.h>
#include <opencog/guile/SchemeSmob.h>
#include <opencog/atoms/base/Handle.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/rule-engine/Rule.h>
#include <opencog/util/Logger.h>
#include <opencog/util/algorithm.h>
#include <opencog/query/BindLinkAPI.h>
#include <cxxtest/TestSuite.h>
#include <string>
#include <vector>

using namespace std;
using namespace opencog;
using namespace std;

class PLNRulesUTest: public CxxTest::TestSuite
{
private:
	AtomSpace as;
	SchemeEval eval;

public:
	PLNRulesUTest() : eval(&as)
	{
		logger().set_level(Logger::DEBUG);
		logger().set_timestamp_flag(false);
		logger().set_print_to_stdout_flag(true);

		string cur_ppp_dir = string(PROJECT_SOURCE_DIR),
			cur_dir = cur_ppp_dir + "/tests/pln/rules";
		vector<string> load_paths = {cur_ppp_dir, cur_dir};
		for (string& p : load_paths)
		{
			string eval_str = string("(add-to-load-path \"") + p + string("\")");
			eval.eval(eval_str);
		}

		eval.eval("(add-to-load-path \"/usr/local/share\")");
		eval.eval("(use-modules (opencog))");
		eval.eval("(use-modules (opencog attention-bank))");
		eval.eval("(use-modules (opencog query))");
		eval.eval("(use-modules (opencog logger))");
		eval.eval("(use-modules (opencog rule-engine))");
		eval.eval("(use-modules (srfi srfi-1))");
	}

	~PLNRulesUTest()
	{
		// Erase the log file if no assertions failed.
		if (!CxxTest::TestTracker::tracker().suiteFailed())
			std::remove(logger().get_filename().c_str());
	}

	void setUp();
	void tearDown();
	void load_scm_files(std::vector<std::string>);

	void test_deduction();
	void test_and_introduction();
	void test_or_introduction();
	void test_not_introduction();
	void test_forall_full_instantiation();
	void test_forall_partial_instantiation();
	void test_forall_implication_to_higher_order();
	void test_implication_full_instantiation();
	void test_implication_full_instantiation_extra_variables();
	void test_implication_partial_instantiation();
	void test_implication_scope_to_implication();
	void test_and_lambda_distribution();
	void test_implication_implicant_distribution();
	void test_implication_introduction();
	void test_closed_lambda_introduction();
	void test_equivalence_to_implication();
	void test_implication_and_lambda_factorization();
	// TODO rename this rule into
	// antecedant-conjunction-introduction-rule
	void test_implication_implicant_conjunction();
	void test_implication_direct_evaluation();
	void test_conditional_full_instantiation_meta_rule();
	void test_consequent_disjunction_elimination();
};

void PLNRulesUTest::tearDown()
{
}

void PLNRulesUTest::setUp()
{
	as.clear();
}

void PLNRulesUTest::load_scm_files(std::vector<std::string> files)
{
	std::string hd("(load-from-path \"");
	std::string tl("\")");
	for (auto f: files) {
		string result = eval.eval(hd + f + tl);
		logger().debug() << "[PLNRulesUTest] Loaded \"" << f << "\":"
		                 << std::endl << result;
	}
}

#define getarity(hand) hand->get_arity()

/**
 * tests the deduction rule (deduction-rule) defined in:
 * opencog/pln/rules/term/deduction.scm
 */
void PLNRulesUTest::test_deduction()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	load_scm_files({"tests/pln/rules/simple-assertions.scm",
				    "opencog/pln/rules/term/deduction.scm"});

	Handle results;

	// To start with, it should only know that men are humans
	results = eval.eval_h("(cog-bind find-humans)");
	TS_ASSERT_EQUALS(1, getarity(results));

	// Apply the rule
	eval.eval_h("(cog-bind deduction-inheritance-rule)");

	// After applying the deduction rule, it should know that all 3 of the
	// instances of men are also humans (Socrates, Einstein, and Peirce)
	results = eval.eval_h("(cog-bind find-humans)");

	logger().debug() << "results = " << results->to_string();

	// 4 in total, man, Peirce, Einstein, Socrates
	TS_ASSERT_EQUALS(4, getarity(results));
}

/**
 * Tests the and rule (and-introduction-rule) defined in:
 * opencog/pln/rules/wip/and-introduction.scm
 */
void PLNRulesUTest::test_and_introduction()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	load_scm_files({"tests/pln/rules/simple-predicates.scm",
	                "opencog/pln/rules/wip/and-introduction.scm"});

	// Apply the rule
	Handle results = eval.eval_h("(cog-bind-af and-introduction-rule)");

	// It should contain 1 groundings, and(A, B)
	TS_ASSERT_EQUALS(1, getarity(results));
}

/**
 * Tests the and rule (or-introduction-rule) defined in:
 * opencog/pln/rules/wip/or-introduction.scm
 */
void PLNRulesUTest::test_or_introduction()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	load_scm_files({"tests/pln/rules/simple-predicates.scm",
	                "opencog/pln/rules/wip/or-introduction.scm"});

	// Apply the rule
	Handle results = eval.eval_h("(cog-bind-af or-introduction-rule)");

	// It should contain 1 groundings, or(A, B)
	TS_ASSERT_EQUALS(1, getarity(results));
}

/**
 * Tests the not rule (not-introduction-rule) defined in:
 * opencog/pln/rules/wip/not-introduction.scm
 */
void PLNRulesUTest::test_not_introduction()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	load_scm_files({"tests/pln/rules/simple-predicates.scm",
	               "opencog/pln/rules/wip/not-introduction.scm"});

	// Apply the rule
	Handle results = eval.eval_h("(cog-bind-af not-introduction-rule)");

	// It should contain 2 groundings, not(A), not(B)
	TS_ASSERT_EQUALS(2, getarity(results));
}

/**
 * Test the pln-forall-instantiation-rule defined in:
 * opencog/pln/rules/wip/forall-instantiation.scm
 */
void PLNRulesUTest::test_forall_full_instantiation()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	load_scm_files({"tests/pln/rules/simple-forall.scm",
	                "opencog/pln/rules/wip/forall-instantiation.scm"});

	// Apply the rule
	Handle rule = eval.eval_h("forall-full-instantiation-rule");
	Handle results = bindlink(&as, rule);

	/**
	 * It should contain 4 groundings:
	 *
	 * 1. EvaluationLink
	 *       PredicateNode "is-predicate"
	 *       <some-predicate>
	 *
	 * 2. EvaluationLink
	 *       PredicateNode "is-concept"
	 *       <some-concept>
	 *
	 * 3. EvaluationLink
	 *       PredicateNode "are-concept-and-predicate"
	 *       ListLink
	 *          <some-concept>
	 *          <some-predicate>
	 *
	 * 4. ImplicationScopeLink
	 *       EvaluationLink
	 *          PredicateNode "P"
	 *          <some-concept>
	 *       EvaluationLink
	 *          PredicateNode "P"
	 *          <some-concept>
	 */
	TS_ASSERT_EQUALS(4, getarity(results));
}

/**
 * Test the pln-forall-instantiation-rule defined in:
 * opencog/pln/rules/wip/forall-instantiation.scm
 */
void PLNRulesUTest::test_forall_partial_instantiation()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	load_scm_files({"tests/pln/rules/simple-forall.scm",
	                "opencog/pln/rules/wip/forall-instantiation.scm"});

	// Apply the rule
	Handle rule = eval.eval_h("forall-partial-instantiation-rule");
	Handle results = bindlink(&as, rule);

	/**
	 * It should contain 1 groundings:
	 *
	 * 3. ForAllLink
	 *       <one variable as the other has been instantiated>
	 *       EvaluationLink
	 *          PredicateNode "are-concept-and-predicate"
	 *          ListLink
	 *             <some-concept>
	 *             <some-predicate>
	 */
	TS_ASSERT_EQUALS(1, getarity(results));
}

void PLNRulesUTest::test_forall_implication_to_higher_order()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	load_scm_files({"tests/pln/rules/simple-forall.scm",
	                "opencog/pln/rules/wip/forall-implication-to-higher-order.scm"});

	// Apply the rule
	Handle rule = eval.eval_h("forall-implication-to-higher-order-rule");
	Handle results = bindlink(&as, rule);
	Handle expected = eval.eval_h
		("(SetLink"
		 "   (ImplicationLink"
		 "      (LambdaLink"
		 "         (TypedVariableLink"
		 "            (VariableNode \"$X\")"
		 "            (TypeNode \"ConceptNode\"))"
		 "         (EvaluationLink"
		 "            (PredicateNode \"P\")"
		 "            (VariableNode \"$X\")))"
		 "      (LambdaLink"
		 "         (TypedVariableLink"
		 "            (VariableNode \"$X\")"
		 "            (TypeNode \"ConceptNode\"))"
		 "         (EvaluationLink"
		 "            (PredicateNode \"P\")"
		 "            (VariableNode \"$X\")))))");

	logger().debug() << "results = " << results->to_string();
	logger().debug() << "expected = " << expected->to_string();

	TS_ASSERT_EQUALS(results, expected);
}

/**
 * Test implication-full-instantiation-rule defined in:
 * opencog/pln/rules/wip/implication-instantiation.scm
 */
void PLNRulesUTest::test_implication_full_instantiation()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	load_scm_files({"tests/pln/rules/simple-implication.scm",
	                "opencog/pln/rules/wip/implication-instantiation.scm"});

	// Apply the rule
	Handle rule = eval.eval_h("implication-full-instantiation-rule");
	Handle results = bindlink(&as, rule);
	Handle expected = eval.eval_h
		("(SetLink"
		 "   (EvaluationLink"
		 "      (PredicateNode \"Q\")"
		 "      (ListLink"
		 "         (ConceptNode \"B\")"
		 "         (ConceptNode \"A\")))"
		 "   (EvaluationLink"
		 "      (PredicateNode \"Q\")"
		 "      (ConceptNode \"A\")))");

	logger().debug() << "results = " << results->to_string();
	logger().debug() << "expected = " << expected->to_string();

	TS_ASSERT_EQUALS(results, expected);
}

/**
 * Test implication-full-instantiation-rule defined in:
 * opencog/pln/rules/wip/implication-instantiation.scm
 */
void PLNRulesUTest::test_implication_full_instantiation_extra_variables()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	load_scm_files({"tests/pln/rules/implication-extra-variables.scm",
	                "opencog/pln/rules/wip/implication-instantiation.scm"});

	// Apply the rule
	Handle rule = eval.eval_h("implication-full-instantiation-rule");
	Handle results = bindlink(&as, rule);
	Handle expected = eval.eval_h
		("(SetLink"
		 "   (EvaluationLink"
		 "      (PredicateNode \"Q\")"
		 "      (ListLink"
		 "         (ConceptNode \"A\")"
		 "         (ConceptNode \"A\"))))");

	logger().debug() << "results = " << results->to_string();
	logger().debug() << "expected = " << expected->to_string();

	TS_ASSERT_EQUALS(results, expected);
}

/**
 * Test implication-partial-instantiation-rule defined in:
 * opencog/pln/rules/wip/implication-instantiation.scm
 */
void PLNRulesUTest::test_implication_partial_instantiation()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	load_scm_files({"tests/pln/rules/simple-implication.scm",
	                "opencog/pln/rules/wip/implication-instantiation.scm"});

	// Apply the rule
	Handle rule = eval.eval_h("implication-partial-instantiation-rule");
	Handle results = bindlink(&as, rule);

	// Depending on the random seed the result can be one of the other
	// (partial instantiation occurs on $X or $Y).
	Handle possible_results_1 = eval.eval_h
		("(SetLink"
		 "   (ImplicationScopeLink"
		 "      (TypedVariableLink"
		 "         (VariableNode \"$X\")"
		 "         (TypeNode \"ConceptNode\"))"
		 "      (EvaluationLink"
		 "         (PredicateNode \"P\")"
		 "         (ListLink"
		 "            (VariableNode \"$X\")"
		 "            (ConceptNode \"B\")))"
		 "      (EvaluationLink"
		 "         (PredicateNode \"Q\")"
		 "         (ListLink"
		 "            (ConceptNode \"B\")"
		 "            (VariableNode \"$X\")))))");
	Handle possible_results_2 = eval.eval_h
		("(SetLink"
		 "   (ImplicationScopeLink"
		 "      (TypedVariableLink"
		 "         (VariableNode \"$Y\")"
		 "         (TypeNode \"ConceptNode\"))"
		 "      (EvaluationLink"
		 "         (PredicateNode \"P\")"
		 "         (ListLink"
		 "            (ConceptNode \"A\")"
		 "            (VariableNode \"$Y\")))"
		 "      (EvaluationLink"
		 "         (PredicateNode \"Q\")"
		 "         (ListLink"
		 "            (VariableNode \"$Y\")"
		 "            (ConceptNode \"A\")))))");

	logger().debug() << "results = " << results->to_string();
	logger().debug() << "possible_results_1 = " << possible_results_1->to_string();
	logger().debug() << "possible_results_2 = " << possible_results_2->to_string();

	TS_ASSERT((results == possible_results_1)
	          or (results == possible_results_2));
}

/**
 * Test implication-scope-to-implication-rule defined in:
 * opencog/pln/rules/wip/implication-scope-to-implication.scm
 */
void PLNRulesUTest::test_implication_scope_to_implication()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	load_scm_files({"tests/pln/rules/simple-implication.scm",
	                "opencog/pln/rules/wip/implication-scope-to-implication.scm"});

	// Apply the rule
	Handle rule = eval.eval_h("implication-scope-to-implication-rule");
	Handle results = bindlink(&as, rule);
	Handle expected = eval.eval_h
		("(SetLink"
		 "   (ImplicationLink"
		 "      (LambdaLink"
		 "         (TypedVariableLink"
		 "            (VariableNode \"$X\")"
		 "            (TypeNode \"ConceptNode\"))"
		 "         (EvaluationLink"
		 "            (PredicateNode \"dummy-implicant\")"
		 "            (VariableNode \"$X\")))"
		 "      (LambdaLink"
		 "         (TypedVariableLink"
		 "            (VariableNode \"$X\")"
		 "            (TypeNode \"ConceptNode\"))"
		 "         (EvaluationLink"
		 "            (PredicateNode \"dummy-implicand\")"
		 "            (VariableNode \"$X\"))))"
		 "   (ImplicationLink"
		 "      (LambdaLink"
		 "         (VariableList"
		 "            (TypedVariableLink"
		 "               (VariableNode \"$X\")"
		 "               (TypeNode \"ConceptNode\"))"
		 "            (TypedVariableLink"
		 "               (VariableNode \"$Y\")"
		 "               (TypeNode \"ConceptNode\")))"
		 "         (EvaluationLink"
		 "            (PredicateNode \"P\")"
		 "            (ListLink"
		 "               (VariableNode \"$X\")"
		 "               (VariableNode \"$Y\"))))"
		 "      (LambdaLink"
		 "         (VariableList"
		 "            (TypedVariableLink"
		 "               (VariableNode \"$X\")"
		 "               (TypeNode \"ConceptNode\"))"
		 "            (TypedVariableLink"
		 "               (VariableNode \"$Y\")"
		 "               (TypeNode \"ConceptNode\")))"
		 "         (EvaluationLink"
		 "            (PredicateNode \"Q\")"
		 "            (ListLink"
		 "               (VariableNode \"$Y\")"
		 "               (VariableNode \"$X\")))))"
		 "   (ImplicationLink"
		 "      (LambdaLink"
		 "         (TypedVariableLink"
		 "            (VariableNode \"$X\")"
		 "            (TypeNode \"ConceptNode\"))"
		 "         (EvaluationLink"
		 "            (PredicateNode \"P\")"
		 "            (VariableNode \"$X\")))"
		 "      (LambdaLink"
		 "         (TypedVariableLink"
		 "            (VariableNode \"$X\")"
		 "            (TypeNode \"ConceptNode\"))"
		 "         (EvaluationLink"
		 "            (PredicateNode \"Q\")"
		 "            (VariableNode \"$X\")))))");

	std::cout << "results = " << results->to_string();
	std::cout << "expected = " << expected->to_string();

	TS_ASSERT_EQUALS(results, expected);
}

/**
 * Test and-lambda-distribution-rule defined in:
 * opencog/pln/rules/wip/and-lambda-distribution.scm
 */
void PLNRulesUTest::test_and_lambda_distribution()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	load_scm_files({"tests/pln/rules/simple-lambda.scm",
	                "opencog/pln/rules/wip/and-lambda-distribution.scm"});

	// Apply the rule
	Handle rule = eval.eval_h("and-lambda-distribution-rule");
	Handle results = bindlink(&as, rule);
	Handle expected = eval.eval_h
		("(SetLink"
		 "   (AndLink"
		 "      (LambdaLink"
		 "         (VariableNode \"$X\")"
		 "         (EvaluationLink"
		 "            (PredicateNode \"P\")"
		 "            (VariableNode \"$X\")))"
		 "      (LambdaLink"
		 "         (VariableNode \"$X\")"
		 "         (EvaluationLink"
		 "            (PredicateNode \"Q\")"
		 "            (VariableNode \"$X\")))))");

	std::cout << "results = " << results->to_string();
	std::cout << "expected = " << expected->to_string();

	TS_ASSERT_EQUALS(results, expected);
}

/**
 * Test implication-implicant-distribution-rule defined in:
 * opencog/pln/rules/wip/implication-implicant-distribution.scm
 */
void PLNRulesUTest::test_implication_implicant_distribution()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	load_scm_files({"tests/pln/rules/simple-implication.scm",
	                "opencog/pln/rules/wip/implication-implicant-distribution.scm"});

	// Apply the rule
	Handle rule = eval.eval_h("implication-implicant-distribution-rule");
	Handle results = bindlink(&as, rule);
	Handle expected = eval.eval_h
		("(SetLink"
		 "   (ImplicationLink"
		 "      (PredicateNode \"P\")"
		 "      (AndLink"
		 "         (PredicateNode \"P\")"
		 "         (PredicateNode \"Q\"))))");

	std::cout << "results = " << results->to_string();
	std::cout << "expected = " << expected->to_string();

	TS_ASSERT_EQUALS(results, expected);
}

/**
 * Test implication-introduction-rule defined in:
 * opencog/pln/rules/wip/implication-introduction.scm
 */
void PLNRulesUTest::test_implication_introduction()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	load_scm_files({"tests/pln/rules/simple-predicates.scm",
	                "opencog/pln/rules/wip/implication-introduction.scm"});

	// Apply the rule
	Handle rule = eval.eval_h("implication-introduction-rule");
	Handle results = bindlink(&as, rule);
	Handle expected = eval.eval_h
		("(SetLink"
		 "   (ImplicationLink"
		 "      (PredicateNode \"P\")"
		 "      (PredicateNode \"Q\"))"
		 "   (ImplicationLink"
		 "      (PredicateNode \"Q\")"
		 "      (PredicateNode \"P\")))");

	std::cout << "results = " << results->to_string();
	std::cout << "expected = " << expected->to_string();

	TS_ASSERT_EQUALS(results, expected);
}

/**
 * Test closed-lambda-introduction-rule defined in:
 * opencog/pln/rules/wip/closed-lambda-introduction.scm
 */
void PLNRulesUTest::test_closed_lambda_introduction()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	load_scm_files({"tests/pln/rules/simple-lambda.scm",
	                "opencog/pln/rules/wip/closed-lambda-introduction.scm"});

	// Apply the rule
	Handle rule = eval.eval_h("closed-lambda-introduction-rule");
	Handle results = bindlink(&as, rule);
	Handle expected = eval.eval_h
		("(LambdaLink"
		 "   (VariableNode \"$X\")"
		 "   (EvaluationLink"
		 "      (PredicateNode \"P\")"
		 "      (ConceptNode \"A\")))");

	std::cout << "results = " << results->to_string();
	std::cout << "expected = " << expected->to_string();

	// Rather than enumerating all possible constructions we just make
	// sure the one that matters is in there.
	HandleSet sss;
	for (auto h : results->getOutgoingSet()) sss.insert(h);
	TS_ASSERT(is_in(expected, sss));
}

/**
 * Test equivalence-to-implication-rule defined in:
 * opencog/pln/rules/wip/equivalence-to-implication.scm
 */
void PLNRulesUTest::test_equivalence_to_implication()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	load_scm_files({"tests/pln/rules/simple-equivalence.scm",
	                "opencog/pln/rules/wip/equivalence-to-implication.scm"});

	// Apply the rule
	Handle rule_alias =
		eval.eval_h("equivalence-to-implication-rule-name"),
		rbs = as.add_node(CONCEPT_NODE, "dummy rbs"),
		rule_ml = as.add_link(MEMBER_LINK, rule_alias, rbs);
	Rule rule(rule_ml);
	Handle results = bindlink(&as, rule.get_rule());
	Handle expected = eval.eval_h(
		"(SetLink"
		"  (ImplicationLink"
		"    (PredicateNode \"P\")"
		"    (PredicateNode \"Q\")"
		"  )"
		"  (ImplicationLink"
		"    (PredicateNode \"Q\")"
		"    (PredicateNode \"P\")"
		"  )"
		")");

	std::cout << "results = " << results->to_string();
	std::cout << "expected = " << expected->to_string();

	TS_ASSERT_EQUALS(results, expected);
}

/**
 * TODO: this test will have to be moved to the higher order facts
 * utest once implemented.
 */
void PLNRulesUTest::test_implication_and_lambda_factorization()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	load_scm_files({"tests/pln/rules/simple-lambda.scm",
	                "opencog/pln/rules/wip/implication-and-lambda-factorization.scm"});

	// Apply the rule
	Handle rule = eval.eval_h("implication-and-lambda-factorization-rule");
	Handle results = bindlink(&as, rule);
	Handle expected = eval.eval_h
		("(SetLink"
		 "  (ImplicationLink"
		 "    (AndLink"
		 "      (LambdaLink"
		 "        (VariableNode \"$X\")"
		 "        (EvaluationLink"
		 "          (PredicateNode \"Q\")"
		 "          (VariableNode \"$X\")"
		 "        )"
		 "      )"
		 "      (LambdaLink"
		 "        (VariableNode \"$X\")"
		 "        (EvaluationLink"
		 "          (PredicateNode \"P\")"
		 "          (VariableNode \"$X\")"
		 "        )"
		 "      )"
		 "    )"
		 "    (LambdaLink"
		 "      (VariableNode \"$X\")"
		 "      (AndLink"
		 "        (EvaluationLink"
		 "          (PredicateNode \"P\")"
		 "          (VariableNode \"$X\")"
		 "        )"
		 "        (EvaluationLink"
		 "          (PredicateNode \"Q\")"
		 "          (VariableNode \"$X\")"
		 "        )"
		 "      )"
		 "    )"
		 "  )"
		 ")");

	std::cout << "results = " << results->to_string();
	std::cout << "expected = " << expected->to_string();

	TS_ASSERT_EQUALS(results, expected);
}

void PLNRulesUTest::test_implication_implicant_conjunction()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	load_scm_files({"tests/pln/rules/simple-implication-implicant-conjunction.scm",
	                "opencog/pln/rules/wip/implication-implicant-conjunction.scm"});

	// Apply the rule
	Handle rule = eval.eval_h("implication-implicant-conjunction-rule");
	Handle results = bindlink(&as, rule);
	Handle expected = eval.eval_h
		("(SetLink"
		 "   (Implication"
		 "      (And"
		 "         (Predicate \"P1\")"
		 "         (Predicate \"P2\"))"
		 "      (Predicate \"Q\")))");

	std::cout << "results = " << results->to_string();
	std::cout << "expected = " << expected->to_string();

	TS_ASSERT_EQUALS(results, expected);
}

/**
 * test implication-direct-evaluation-rule defined in:
 * opencog/pln/rules/implication-direct-evaluation.scm
 */
void PLNRulesUTest::test_implication_direct_evaluation()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	load_scm_files({"tests/pln/rules/implication-direct-evaluation.scm",
	                "opencog/pln/rules/wip/implication-direct-evaluation.scm"});

	// Apply the rule
	Handle rule = eval.eval_h("implication-direct-evaluation-rule");
	Handle results = bindlink(&as, rule);
	Handle expected = eval.eval_h
		("(SetLink"
		 "   (ImplicationLink"
		 "      (PredicateNode \"P\")"
		 "      (PredicateNode \"Q\"))"
		 "   (ImplicationLink"
		 "      (PredicateNode \"Q\")"
		 "      (PredicateNode \"P\")))");

	std::cout << "results = " << results->to_string();
	std::cout << "expected = " << expected->to_string();

	TS_ASSERT_EQUALS(results, expected);
}

/**
 * test implication-direct-evaluation-rule defined in:
 * opencog/pln/meta-rules/predicate/conditional-full-instantiation.scm
 */
void PLNRulesUTest::test_conditional_full_instantiation_meta_rule()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	load_scm_files({"tests/pln/rules/simple-implication-scope.scm",
	                "opencog/pln/meta-rules/predicate/conditional-full-instantiation.scm"});

	// Apply the rule
	Handle rule = eval.eval_h("conditional-full-instantiation-implication-scope-meta-rule");
	Handle results = bindlink(&as, rule);
	Handle expected = eval.eval_h
		("(SetLink"
		 "  (BindLink"
		 "    (TypedVariableLink"
		 "      (VariableNode \"$X\")"
		 "      (TypeNode \"ConceptNode\")"
		 "    )"
		 "    (AndLink"
		 "      (EvaluationLink"
		 "        (GroundedPredicateNode \"scm: gt-zero-confidence\")"
		 "        (EvaluationLink"
		 "          (PredicateNode \"P\")"
		 "          (VariableNode \"$X\")"
		 "        )"
		 "      )"
		 "      (EvaluationLink"
		 "        (PredicateNode \"P\")"
		 "        (VariableNode \"$X\")"
		 "      )"
		 "    )"
		 "    (ExecutionOutputLink"
		 "      (GroundedSchemaNode \"scm: conditional-full-instantiation-scope-formula\")"
		 "      (ListLink"
		 "        (EvaluationLink"
		 "          (PredicateNode \"Q\")"
		 "          (VariableNode \"$X\")"
		 "        )"
		 "        (EvaluationLink"
		 "          (PredicateNode \"P\")"
		 "          (VariableNode \"$X\")"
		 "        )"
		 "        (ImplicationScopeLink"
		 "          (TypedVariableLink"
		 "            (VariableNode \"$X\")"
		 "            (TypeNode \"ConceptNode\")"
		 "          )"
		 "          (EvaluationLink"
		 "            (PredicateNode \"P\")"
		 "            (VariableNode \"$X\")"
		 "          )"
		 "          (EvaluationLink"
		 "            (PredicateNode \"Q\")"
		 "            (VariableNode \"$X\")"
		 "          )"
		 "        )"
		 "      )"
		 "    )"
		 "  )"
		 ")");

	std::cout << "results = " << results->to_string();
	std::cout << "expected = " << expected->to_string();

	TS_ASSERT_EQUALS(results, expected);
}

void PLNRulesUTest::test_consequent_disjunction_elimination()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	load_scm_files({"tests/pln/rules/simple-consequent-disjunction-elimination.scm",
	                "opencog/pln/rules/propositional/consequent-disjunction-elimination.scm"});

	// Apply the rule
	Handle rule = eval.eval_h("consequent-disjunction-elimination-implication-rule");
	Handle results = bindlink(&as, rule);
	Handle expected = eval.eval_h
		("(SetLink"
		 "   (Implication"
		 "      (Predicate \"P\")"
		 "      (Predicate \"Q1\")))");

	std::cout << "results = " << results->to_string();
	std::cout << "expected = " << expected->to_string();

	TS_ASSERT_EQUALS(results, expected);
}
