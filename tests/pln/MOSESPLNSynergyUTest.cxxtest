/*
 * tests/pln/MOSESPLNSynergyUTest.cxxtest
 *
 * Copyright (C) 2014 Cosmo Harrigan
 * Copyright (C) 2015 OpenCog Foundation
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/util/Logger.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/truthvalue/SimpleTruthValue.h>
#include <opencog/guile/SchemeEval.h>
#include <opencog/query/BindLinkAPI.h>
#include <opencog/rule-engine/forwardchainer/ForwardChainer.h>
#include <opencog/rule-engine/backwardchainer/BackwardChainer.h>

#include <cxxtest/TestSuite.h>

using namespace opencog;

#define al as.add_link
#define an as.add_node
#define gl as.get_link
#define gn as.get_node

class MOSESPLNSynergyUTest: public CxxTest::TestSuite
{
private:
	AtomSpace as;
	SchemeEval eval;

public:
	MOSESPLNSynergyUTest() : eval(&as)
	{
		logger().set_level(Logger::INFO);
		logger().set_timestamp_flag(false);
		logger().set_print_to_stdout_flag(true);
		// logger().set_sync_flag(true);
	}

	~MOSESPLNSynergyUTest()
	{
		// Erase the log file if no assertions failed.
		if (!CxxTest::TestTracker::tracker().suiteFailed())
			std::remove(logger().get_filename().c_str());
	}

	void setUp();
	void tearDown();

	// Test the MOSES PLN synergy as a predefined sequence of pattern
	// matcher steps
	void test_moses_pln_synergy_pm();

	// Test the MOSES PLN synergy using the URE's Forward Chainer
	void test_moses_pln_synergy_fc();

	// Test the MOSES PLN synergy using the URE's Backward Chainer
	void test_moses_pln_synergy_bc();
};

void MOSESPLNSynergyUTest::tearDown()
{
}

void MOSESPLNSynergyUTest::setUp()
{
	string cur_pp_dir = string(PROJECT_SOURCE_DIR),
		cur_dir = cur_pp_dir + "/tests/pln";
	vector<string> load_paths = {cur_pp_dir, cur_dir};
	for (string& p : load_paths)
	{
		string eval_str = string("(add-to-load-path \"") + p + string("\")");
		eval.eval(eval_str);
	}

	eval.eval("(use-modules (opencog))");
	eval.eval("(use-modules (opencog query))");
	eval.eval("(use-modules (opencog logger))");
}

// This takes too much memory, re-enabled when fixed.
void MOSESPLNSynergyUTest::test_moses_pln_synergy_pm()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	eval.eval("(add-to-load-path \"..\")");
	eval.eval("(add-to-load-path \"../../..\")");
	eval.eval("(load-from-path \"examples/pln/moses-pln-synergy/scm/moses-pln-synergy-pm.scm\")");

	// Query the TV of the inference target, which should be
	//
	// (ImplicationLink (stv 0.60357851 0.65475)
	//    (OrLink
	//       (PredicateNode "take-treatment-1" (stv 0.1 0.80000001))
	//       (PredicateNode "eat-lots-fruits-vegetables" (stv 0.07 0.80000001))
	//    )
	//    (PredicateNode "recovery-speed-of-injury-alpha" (stv 0.30000001 0.80000001))
	// )
    Handle target = gl(IMPLICATION_LINK,
	                   gl(OR_LINK,
	                      gn(PREDICATE_NODE, "take-treatment-1"),
	                      gn(PREDICATE_NODE, "eat-lots-fruits-vegetables")),
	                   gn(PREDICATE_NODE, "recovery-speed-of-injury-alpha"));
	std::cout << "target = " << target->to_string() << std::endl;

	TS_ASSERT_DIFFERS(target, Handle::UNDEFINED);

	strength_t target_strength = target->getTruthValue()->get_mean(),
		expected_strength = 0.603579;
	confidence_t target_confidence = target->getTruthValue()->get_confidence(),
		expected_confidence = 0.65475;
#define TEST_EPSILON 1e-6
	TS_ASSERT_DELTA(target_strength, expected_strength, TEST_EPSILON);
	TS_ASSERT_DELTA(target_confidence, expected_confidence, TEST_EPSILON);
}

// This takes too long (3 to 4 days), disabled until it gets severely
// optimized
void MOSESPLNSynergyUTest::test_moses_pln_synergy_fc()
{
	// logger().debug("BEGIN TEST: %s", __FUNCTION__);

	// eval.eval("(load \"" PROJECT_SOURCE_DIR
	//              "examples/pln/moses-pln-synergy/scm/moses-model.scm,"
	//              "examples/pln/moses-pln-synergy/scm/background-knowledge.scm,"
	//              "examples/pln/moses-pln-synergy/scm/pln-fc-config.scm");

	// Handle hsources =
	// 	al(SET_LINK,
	// 	   eval.eval_h("if-X-takes-Y-and-Y-contains-Z-then-X-takes-Z"),
	// 	   eval.eval_h("being-well-hydrated-tends-to-speed-up-injury-recovery"));
	// Handle rbs = eval.eval_h("pln-rbs");
	// HandleSeq focus_set = {};
	// ForwardChainer fc(as, rbs, hsources, focus_set);
    // fc.do_chain();
    // UnorderedHandleSet result = fc.get_chaining_result();

	// // Query the TV of the inference target, which should be
	// //
	// // (ImplicationLink (stv 0.60357851 0.69999999)
	// //    (OrLink
	// //       (PredicateNode "take-treatment-1" (stv 0.1 0.80000001))
	// //       (PredicateNode "eat-lots-fruits-vegetables" (stv 0.07 0.80000001))
	// //    )
	// //    (PredicateNode "recovery-speed-of-injury-alpha" (stv 0.30000001 0.80000001))
	// // )
	// Handle target = gl(IMPLICATION_LINK,
	//                    gl(OR_LINK,
	//                       gn(PREDICATE_NODE, "take-treatment-1"),
	//                       gn(PREDICATE_NODE, "eat-lots-fruits-vegetables")),
	//                    gn(PREDICATE_NODE, "recovery-speed-of-injury-alpha"));
	// std::cout << "target = " << target->to_string() << std::endl;

	// TS_ASSERT_DIFFERS(target, Handle::UNDEFINED);

	// strength_t expected_strength = 0.603579;
	// confidence_t expected_confidence = 0.64125;
	// SimpleTruthValue expected_tv(expected_strength, expected_confidence);
	// TS_ASSERT(target->getTruthValue()->operator==(expected_tv));
	TS_ASSERT(true);
}

// This takes too long (3 to 4 days), disabled until it gets severely
// optimized
void MOSESPLNSynergyUTest::test_moses_pln_synergy_bc()
{
	// logger().debug("BEGIN TEST: %s", __FUNCTION__);

	// eval.eval("(add-to-load-path \"..\")");
	// eval.eval("(add-to-load-path \"../../..\")");
	// eval.eval("(load-from-path \"examples/pln/moses-pln-synergy/scm/moses-pln-synergy-pm.scm\")");
	// eval.eval("(load-from-path \"examples/pln/moses-pln-synergy/scm/background-knowledge.scm\")");
	// eval.eval("(load-from-path \"examples/pln/moses-pln-synergy/scm/pln-bc-config.scm\")");

	// Handle target = eval.eval_h("moses-model");
	// Handle rbs = eval.eval_h("pln-rbs");
	// BackwardChainer bc(as, rbs, target);
	// bc.do_chain();

	// // Query the TV of the inference target, which should be
	// //
	// // (ImplicationLink (stv 0.60357851 0.69999999)
	// //    (OrLink
	// //       (PredicateNode "take-treatment-1" (stv 0.1 0.80000001))
	// //       (PredicateNode "eat-lots-fruits-vegetables" (stv 0.07 0.80000001))
	// //    )
	// //    (PredicateNode "recovery-speed-of-injury-alpha" (stv 0.30000001 0.80000001))
	// // )
	// std::cout << "target = " << target->to_string() << std::endl;

	// TS_ASSERT_DIFFERS(target, Handle::UNDEFINED);

	// strength_t expected_strength = 0.603579;
	// confidence_t expected_confidence = 0.64125;
	// SimpleTruthValue expected_tv(expected_strength, expected_confidence);
	// TS_ASSERT(target->getTruthValue()->operator==(expected_tv));
	TS_ASSERT(true);
}

#undef gl
#undef gn
