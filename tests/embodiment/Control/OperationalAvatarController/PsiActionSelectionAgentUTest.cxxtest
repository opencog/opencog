/*
 * tests/embodiment/Control/OperationalAvatarController/PsiActionSelectionAgentUTest.cxxtest
 *
 * @author Zhenhua Cai <czhedu@gmail.com>
 * @date   2011-06-16
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/nlp/types/atom_types.h>
#include <opencog/embodiment/Control/MessagingSystem/MessageFactory.h>

#include "OACMock.h"

class PsiActionSelectionAgentUTest: public CxxTest::TestSuite {

private:
    
    OACMock oacMock;
	const string PsiUTest_dir = string(PROJECT_SOURCE_DIR)
		+ "/tests/embodiment/Control/OperationalAvatarController/Scaffold/";
	const string physiological_state_xml = PsiUTest_dir
		+ "physiological_state.xml";
	const string dog_park_map_xml = PsiUTest_dir
		+ "dog_park_map.xml";

public:

    /**
     * Since this test suit needs a constructor, then we should tell cxxtest how
     * to create a test suit dynamically by writing two static functions
     * createSuite and destroySuite
     */
    static PsiActionSelectionAgentUTest * createSuite() {
        return new PsiActionSelectionAgentUTest();
    }

    static void destroySuite(PsiActionSelectionAgentUTest * suite) {
        delete suite;
        int rc = ::system("./stop_embodiment.sh"); 
        if (rc) {
            cerr << "Ohh Nooo!!! Failed to stop embodiment!" << endl;
            _exit(1);
        }
    }

    /**
     * Constructor
     */
    PsiActionSelectionAgentUTest() {

         // Temporarily mask error in oacMock.createOAC() while skipping actual test below.
        return;

        oacMock.setConfig();

        // Set your specific configurations before invoking createOAC. 
        config().set("PSI_DEMAND_UPDATER_ENABLED", "false"); 
        config().set("PSI_ACTION_SELECTION_ENABLED", "true"); 
        config().set("PSI_RELATION_UPDATER_ENABLED", "false"); 
        config().set("PSI_FEELING_UPDATER_ENABLED", "false"); 
        config().set("OCPLANNING_AGENT_ENABLED", "false");
        config().set("IMPORTANCE_DECAY_ENABLED", "false"); 
        config().set("ACTION_SELECTION_ENABLED", "false"); 
        config().set("COMBO_INTERPRETER_ENABLED", "false"); 
        config().set("SCHEMA_GOAL_MINING_ENABLED", "false"); 
        config().set("PROCEDURE_INTERPRETER_ENABLED", "false"); 
        config().set("ENTITY_EXPERIENCE_ENABLED", "false"); 
        config().set("FISHGRAM_ENABLED", "false");
        config().set("MONITOR_CHANGES_ENABLED", "false"); 
        config().set("STIMULUS_UPDATER_ENABLED", "false"); 
        config().set("FORGETTING_ENABLED", "false"); 
        config().set("HEBBIAN_UPDATING_ENABLED", "false");
        config().set("IMPORTANCE_SPREADING_ENABLED", "false");
        config().set("IMPORTANCE_UPDATING_ENABLED", "false");
        config().set("IMPORTANCE_SPREADING_ENABLED", "false");
        config().set("ENABLE_UNITY_CONNECTOR", "true");

        oacMock.createOAC();

        Message * p_message; 

        // Load physiological state, such as energy, thirst etc
        p_message = oacMock.createMessageFromFile(config().get("PROXY_ID"),
                                                  oacMock.getAgentBrainId(), 
                                                  STRING,
                                                  physiological_state_xml.c_str()
                                                 );

        oacMock.getOAC().processNextMessage(p_message); 
        delete p_message; 

        // Load map info
        p_message = oacMock.createMessageFromFile(config().get("PROXY_ID"),
                                                  oacMock.getAgentBrainId(), 
                                                  STRING,
                                                  dog_park_map_xml.c_str()
                                                 );

        oacMock.getOAC().processNextMessage(p_message); 
        delete p_message; 

        OAC & oac = oacMock.getOAC(); 
        oac.psiActionSelectionAgent->init();  
    }

    ~PsiActionSelectionAgentUTest() {

    }

    /**
     * setUp and tearDown would be invoked before and after each single test. 
     */
    void setUp() {

    }

    void tearDown(){

    }

    void test_Init() {

        // NOTE: When removing the following TS_SKIP remove the "return" in the constructor.
        TS_SKIP("Unit test disabled, see: https://github.com/opencog/opencog/issues/1283");

        OAC & oac = oacMock.getOAC(); 
        AtomSpace & atomSpace = oac.getAtomSpace();

        std::string demand_names = config().get("PSI_DEMANDS");
        int demand_num =
	        std::count(demand_names.begin(), demand_names.end(), ',') + 1;  

        Handle hConceptNode = atomSpace.getHandle(CONCEPT_NODE,
                                                  "psi_demand_goal_list");
        TS_ASSERT_DIFFERS(hConceptNode, opencog::Handle::UNDEFINED); 

        std::vector<Handle> referenceLinkSet;

        hConceptNode->getIncomingSetByType(
                        back_inserter(referenceLinkSet), // return value
                        REFERENCE_LINK,  // type of the returned link 
                        false            // subclass is not acceptable, 
                                         // i.e. returned link should be exactly of 
                      );                 // type REFERENCE_LINK

        TS_ASSERT_EQUALS(referenceLinkSet.size(), 1); 

        Handle hReferenceLink = referenceLinkSet[0];
        Handle hListLink = atomSpace.getOutgoing(hReferenceLink, 1); 
        TS_ASSERT_EQUALS(atomSpace.getOutgoing(hListLink).size(), demand_num);  
    }

    void test_doPlanning_getPlan() {

        // NOTE: When removing the following TS_SKIP remove the "return" in the constructor.
        TS_SKIP("Unit test disabled, see: https://github.com/opencog/opencog/issues/1283");

        OAC & oac = oacMock.getOAC(); 
        AtomSpace & atomSpace = oac.getAtomSpace();

        SchemeEval evaluator(&atomSpace);
        std::string scheme_expression, scheme_return_value;

        std::cout << "AtomSpace before planning" << std::endl
                  << atomSpace;

        scheme_expression = "( do_planning )";

        // Run the Procedure that do planning
        try {
	        scheme_return_value = evaluator.eval(scheme_expression);
	        std::cout << "scheme_return_value =" << std::endl
	                  << scheme_return_value << std::endl;
	        TS_ASSERT(!evaluator.eval_error());
        } catch(...) {
	        // TODO this doesn't work, it doesn't catch the
	        // opencog::RuntimeException thrown by the AtomTable
	        //
	        // Attempting to insert link with invalid outgoing members
	        // (/home/nilg/OpenCog/opencog/opencog/atomspace/AtomTable.cc:544)
	        //
	        std::cout << "I caught it!!!" << std::endl;
        }

        std::cout << "AtomSpace after planning" << std::endl
                  << atomSpace;

        // give it an agent first.
        //oac.
        
        // Get the plan stored in AtomSpace
        oac.psiActionSelectionAgent->plan_action_list.clear();
        oac.psiActionSelectionAgent->temp_action_list.clear();

        oac.psiActionSelectionAgent->getPlan();
        TS_ASSERT_DIFFERS(oac.psiActionSelectionAgent->plan_selected_demand_goal,
                          opencog::Handle::UNDEFINED);
        TS_ASSERT_DIFFERS(oac.psiActionSelectionAgent->plan_action_list.size(), 0);
        TS_ASSERT_DIFFERS(oac.psiActionSelectionAgent->temp_action_list.size(), 0);
    }
};
