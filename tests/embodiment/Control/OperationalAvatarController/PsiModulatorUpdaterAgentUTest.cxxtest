/*
 * tests/embodiment/Control/OperationalAvatarController/PsiModulatorUpdaterAgentUTest.cxxtest
 *
 * @author Zhenhua Cai <czhedu@gmail.com>
 * @date   2011-06-16
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/embodiment/Control/MessagingSystem/MessageFactory.h>

#include <OACMock.h>

class PsiModulatorUpdaterAgentUTest: public CxxTest::TestSuite {

private:
    
    OACMock oacMock; 
	const string PsiUTest_dir = string(PROJECT_SOURCE_DIR)
		+ "/tests/embodiment/Control/OperationalAvatarController/Scaffold/";
	const string physiological_state_xml = PsiUTest_dir
		+ "physiological_state.xml";
	const string dog_park_map_xml = PsiUTest_dir
		+ "dog_park_map.xml";

public:

    /**
     * Since this test suit needs a constructor, then we should tell cxxtest how
     * to create a test suit dynamically by writing two static functions
     * createSuite and destroySuite
     */
    static PsiModulatorUpdaterAgentUTest * createSuite() {
        return new PsiModulatorUpdaterAgentUTest();
    }

    static void destroySuite(PsiModulatorUpdaterAgentUTest * suite) {
        delete suite;
        int rc = ::system("./stop_embodiment.sh"); 
        if (rc) { 
            cerr << "Ohh Nooo!!! Failed to stop embodiment!" << endl;
            _exit(1);                             
        }                                         
    }

    /**
     * Constructor
     */
    PsiModulatorUpdaterAgentUTest() {

        // Temporarily mask error in oacMock.createOAC() while skipping actual test below.
        return;

        oacMock.setConfig();

        // Set your specific configurations before invoking createOAC. 
        config().set("PSI_MODULATOR_UPDATER_ENABLED", "true"); 
        config().set("PSI_DEMAND_UPDATER_ENABLED", "false"); 
        config().set("PSI_ACTION_SELECTION_ENABLED", "false"); 
        config().set("PSI_RELATION_UPDATER_ENABLED", "false"); 
        config().set("PSI_FEELING_UPDATER_ENABLED", "false"); 
        config().set("IMPORTANCE_DECAY_ENABLED", "false"); 
        config().set("ACTION_SELECTION_ENABLED", "false"); 
        config().set("COMBO_INTERPRETER_ENABLED", "false"); 
        config().set("SCHEMA_GOAL_MINING_ENABLED", "false"); 
        config().set("PROCEDURE_INTERPRETER_ENABLED", "false"); 
        config().set("ENTITY_EXPERIENCE_ENABLED", "false"); 
        config().set("FISHGRAM_ENABLED", "false");
        config().set("MONITOR_CHANGES_ENABLED", "false"); 

        oacMock.createOAC(); 

        Message * p_message; 

        // Load physiological state, such as energy, thirst etc
        p_message = oacMock.createMessageFromFile(config().get("PROXY_ID"),
                                                  oacMock.getAgentBrainId(), 
                                                  STRING,
                                                  physiological_state_xml.c_str()
                                                 );

        oacMock.getOAC().processNextMessage(p_message); 
        delete p_message; 

        // Load map info
        p_message = oacMock.createMessageFromFile(config().get("PROXY_ID"),
                                                  oacMock.getAgentBrainId(), 
                                                  STRING,
                                                  dog_park_map_xml.c_str()
                                                 );

        oacMock.getOAC().processNextMessage(p_message); 
        delete p_message; 

        OAC & oac = oacMock.getOAC(); 
        oac.psiModulatorUpdaterAgent->init();
    }

    ~PsiModulatorUpdaterAgentUTest() {

    }

    /**
     * setUp and tearDown would be invoked before and after each single test. 
     */
    void setUp() {

    }

    void tearDown(){

    }

    void test_Init() {

        // NOTE: When removing the following TS_SKIP remove the "return" in the constructor.
        TS_SKIP("Unit test disabled, see: https://github.com/opencog/opencog/issues/1283");

        OAC & oac = oacMock.getOAC(); 

        std::string modulator_names = config().get("PSI_MODULATORS");
        int modulator_num = std::count(modulator_names.begin(), modulator_names.end(), ',') + 1;  
        TS_ASSERT_EQUALS(oac.psiModulatorUpdaterAgent->modulatorList.size(), modulator_num);  
    }

    void test_runUpdater_updateModulator() {

        // NOTE: When removing the following TS_SKIP remove the "return" in the constructor.
        TS_SKIP("Unit test disabled, see: https://github.com/opencog/opencog/issues/1283");

        OAC & oac = oacMock.getOAC(); 
        AtomSpace & atomSpace = oac.getAtomSpace();

        int rand_index = (int) ( 1.0*rand()/RAND_MAX *
                                 (oac.psiModulatorUpdaterAgent->modulatorList.size()-0.5) 
                               ); 
        PsiModulatorUpdaterAgent::Modulator & modulator = oac.psiModulatorUpdaterAgent->modulatorList[rand_index];
        TS_ASSERT( modulator.runUpdater(atomSpace) ); 

        TS_ASSERT( modulator.updateModulator(atomSpace, 19210701) ); 
    }
};
