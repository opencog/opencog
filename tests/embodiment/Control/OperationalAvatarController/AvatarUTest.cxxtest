/*
 * tests/embodiment/Control/OperationalAvatarController/AvatarUTest.cxxtest
 *
 * Copyright (C) 2002-2009 Novamente LLC
 * All Rights Reserved
 * Author(s): Carlos Lopes
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */


#include <opencog/atomspace/AtomSpace.h>

#include <opencog/embodiment/Control/OperationalAvatarController/Pet.h>


#include "LSMessageSenderMock.h"
#include <tests/embodiment/Control/PerceptionActionInterface/PAITestUtil.h>
#include <tests/embodiment/Control/PerceptionActionInterface/ActionPlanSenderMock.h>
#include <opencog/embodiment/Control/PerceptionActionInterface/PAI.h>
#include <opencog/embodiment/Control/EmbodimentConfig.h>

using namespace opencog::oac;
using namespace opencog::pai;
using namespace opencog;
using namespace opencog::control;

#include <iostream>
using namespace std;

static const string petId = "1";
static const string ownerId = "10";
static const string avatar = "avatar";
static const string petName = "Rex Ferraris";
static const string petType = "pet";
static const string petTraits = "maxie";
static const string file   = "pet.dump";
static const vector<string> trick(1, "fetch");
static const string triedSchema  = "fetch_01";

class AvatarUTest :  public CxxTest::TestSuite
{

private:
    Pet * pet;
    AtomSpace * atomSpace;
    LSMessageSenderMock * sender;
    PAI* pai;
    ActionPlanSender* apSender;
    unsigned long timestamp;
    unsigned long timestamp2;

public:

    AvatarUTest() {
        config(EmbodimentConfig::embodimentCreateInstance, true);
	config().set("ENABLE_ACTION_COLLECT", "false");
        atomSpace = new AtomSpace();
        sender = new LSMessageSenderMock();
        timestamp2 = PAITestUtil::getCurrentTimestamp();
        timestamp = timestamp2 - 30;
        printf("AvatarUTest(): timestamp = %lu, timestamp2 = %lu\n", timestamp, timestamp2);
        atomSpace->addNode(PET_NODE, petId);
    }

    ~AvatarUTest() {
        delete (pet);
    }

    void setUp() {
    }

    void tearDown() {
    }

    void TestExportToFile() {
        pet = new Pet(petId, petName, petType, petTraits, ownerId, atomSpace, sender);
        apSender = new FailureActionPlanSender();
        pai = new PAI(*atomSpace, *apSender, *pet);
        pet->setPAI(pai);

        TS_ASSERT(pet != NULL);
        TS_ASSERT(pet->getPetId()  == petId);
        TS_ASSERT(pet->getName()   == petName);
        TS_ASSERT(pet->getType()   == petType);
        TS_ASSERT(pet->getTraits() == petTraits);
        TS_ASSERT(pet->getMode() == PLAYING);
        TS_ASSERT(pet->getOwnerId() == ownerId);

        Pet::exportToFile(file, *pet);
        delete(pet);
    }

    void TestImportFromFile() {
        pet = Pet::importFromFile(file, petId, atomSpace, sender);
        apSender = new FailureActionPlanSender();
        pai = new PAI(*atomSpace, *apSender, *pet);
        pet->setPAI(pai);

        TS_ASSERT(pet != NULL);
        TS_ASSERT(pet->getPetId() == petId);
        TS_ASSERT(pet->getName() == petName);
        TS_ASSERT(pet->getType()   == petType);
        TS_ASSERT(pet->getTraits() == petTraits);
        TS_ASSERT(pet->getMode() == PLAYING);
        TS_ASSERT(pet->getOwnerId() == ownerId);
    }

    void TestSetGetMethods() {
        pet->setOwnerId("20");
        pet->setName("Fido");
        pet->setMode(LEARNING);

        // pet id should not change
        TS_ASSERT(pet->getPetId() == petId);
        TS_ASSERT(pet->getOwnerId() == "20");
        TS_ASSERT(pet->getName() == "Fido");

        TS_ASSERT(pet->getMode() == LEARNING);

        // return to original mode
        pet->setMode(PLAYING);
    }

    void TestStartLearning() {
        pet->startLearning(trick, timestamp);

        TS_ASSERT(pet->getMode() == LEARNING);
        TS_ASSERT(pet->getTriedSchema() == "");
        TS_ASSERT(pet->getLearningSchema() == trick);
    }

    void TestStartExemplar() {
        pet->startExemplar(trick, timestamp);
        TS_ASSERT(pet->getExemplarStartTimestamp() == timestamp);
    }

    void TestEndExemplar() {
        pet->endExemplar(trick, timestamp2);
        TS_ASSERT(pet->getExemplarEndTimestamp() == 0);
    }

    void TestPositiveReward() {
        pet->setTriedSchema(triedSchema);
        pet->reward(timestamp2);

        TS_ASSERT(pet->getTriedSchema() == triedSchema);
    }

    void TestNegativeReward() {
        pet->punish(timestamp2);
    }

    void TestStopLearning() {
        TS_ASSERT(pet->getTriedSchema() == triedSchema);
        TS_ASSERT(pet->getLearningSchema().size() == 1);
        pet->stopLearning(trick, timestamp2);

        // Since this test wont result in a candidate schema being stored in
        // the Procedure repository, the pet will not leave the LEARNING
        // mode and erase the schemas name (for recovery reasons).
        //TS_ASSERT(pet->getMode() == LEARNING);
        // This is temporarly changed since LS may crash or be unavailable before sending the SCHEMA message back, leading OAC to be in learning mode forever...
        TS_ASSERT(pet->getMode() == PLAYING);
    }
};
