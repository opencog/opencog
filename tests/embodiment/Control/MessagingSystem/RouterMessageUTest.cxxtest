/*
 * tests/embodiment/Control/MessagingSystem/RouterMessageUTest.cxxtest
 *
 * Copyright (C) 2002-2009 Novamente LLC
 * All Rights Reserved
 * Author(s): Carlos Lopes
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */


#include <opencog/embodiment/Control/MessagingSystem/RouterMessage.h>
#include <string>
#include <string.h>

using namespace opencog::messaging;

static const std::string to = "Fido";
static const std::string from = "Proxy";
static const int encapsulateType = 3;

class RouterMessageUTest : public CxxTest::TestSuite
{

private:

public:

    RouterMessageUTest() {
    }

    void testGettersAndSetters() {
        std::string msg(strdup("msg"));
        RouterMessage *obj1 = new RouterMessage(to, from, encapsulateType, msg);
        RouterMessage *obj2 = new RouterMessage(to, from, 1);

        obj2->setMessage(obj1->getMessage());
        obj2->setEncapsulateType(obj1->getEncapsulateType());

        TS_ASSERT(obj1->getType() == obj2->getType());
        TS_ASSERT(obj1->getMessage() == obj2->getMessage());
        TS_ASSERT(obj1->getEncapsulateType() == obj2->getEncapsulateType());
    }

    void testLoadPlainTextRepresentation() {

        std::string msg(strdup("msg"));
        RouterMessage *obj1 = new RouterMessage(to, from, encapsulateType, msg);

        RouterMessage *obj2 = new RouterMessage(to, from, encapsulateType);

        obj2->loadPlainTextRepresentation(obj1->getPlainTextRepresentation());

        TS_ASSERT(! strcmp(obj1->getPlainTextRepresentation(), obj2->getPlainTextRepresentation()));
    }

    void setUp() {
    }

    void tearDown() {
    }

}; // class
