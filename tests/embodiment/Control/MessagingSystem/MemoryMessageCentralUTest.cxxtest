/*
 * tests/embodiment/Control/MessagingSystem/MemoryMessageCentralUTest.cxxtest
 *
 * Copyright (C) 2002-2009 Novamente LLC
 * All Rights Reserved
 * Author(s): Elvys
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */


#include <opencog/embodiment/Control/MessagingSystem/MemoryMessageCentral.h>
#include <opencog/embodiment/Control/MessagingSystem/StringMessage.h>
#include <opencog/embodiment/Control/MessagingSystem/Message.h>
#include <opencog/util/numeric.h>
#include "stdio.h"
#include "stdlib.h"
//#include "pthread.h"
#include <opencog/util/mt19937ar.h>

#include <iostream>

using namespace opencog::messaging;

class MemoryMessageCentralUTest :  public CxxTest::TestSuite
{
public:

    MemoryMessageCentral *mmc;

    std::string id1, id2;

    MemoryMessageCentralUTest() {
    }

    ~MemoryMessageCentralUTest() {
    }

    void setUp() {

        mmc = new MemoryMessageCentral();

        id1 = ("id1");
        id2 = ("id2");

    }

    void tearDown() {

        delete mmc;

    }

    void testCreateQueue() {

        mmc->createQueue(id2);

        TS_ASSERT(mmc->existsQueue(id2));

    }

    void testQueueOperations() {

        mmc->createQueue(id1);
        mmc->createQueue(id2);

        TS_ASSERT(mmc->existsQueue(id1));

        TS_ASSERT(mmc->isQueueEmpty(id1));
        TS_ASSERT(mmc->isQueueEmpty(id2));

        StringMessage * str_message = new StringMessage(std::string("from"), std::string("to"), std::string("message 1"));
        StringMessage * str_message2 = new StringMessage(std::string("from"), std::string("to"), std::string("message 2"));
        Message *ret_message = NULL;

        ret_message = mmc->pop(id1);
        TS_ASSERT(ret_message == NULL);

        ret_message = mmc->pop(id2);
        TS_ASSERT(ret_message == NULL);

        mmc->push(id1, str_message);

        ret_message = mmc->pop(id2);
        TS_ASSERT(ret_message == NULL);

        mmc->push(id1, str_message2);

        TS_ASSERT(!mmc->isQueueEmpty(id1));
        TS_ASSERT(mmc->isQueueEmpty(id2));

        ret_message = mmc->pop(id1);
        TS_ASSERT(ret_message != NULL);

        delete ret_message;

        ret_message = mmc->pop(id1);
        TS_ASSERT(ret_message != NULL);

        delete ret_message;

        ret_message = mmc->pop(id1);
        TS_ASSERT(ret_message == NULL);
    }


    void testConcurrentQueueAccess() {

        pthread_t tid1, tid2, tid3, tid4, tid5, tid6;

        pthread_attr_t atid1, atid2, atid3, atid4, atid5, atid6;


        mmc->createQueue(id1);
        TS_ASSERT(mmc->existsQueue(id1));

        mmc->createQueue(id2);
        TS_ASSERT(mmc->existsQueue(id2));

//  struct sched_param par;

//  par.sched_priority = 1;

        pthread_attr_init(&atid1);
        pthread_attr_setscope(&atid1, PTHREAD_SCOPE_PROCESS);
        pthread_attr_setinheritsched(&atid1, PTHREAD_EXPLICIT_SCHED);
//  pthread_attr_setschedpolicy(&atid1, SCHED_RR);
//  pthread_attr_setschedparam(&atid1, &par);

        pthread_attr_init(&atid2);
        pthread_attr_setscope(&atid2, PTHREAD_SCOPE_PROCESS);
        pthread_attr_setinheritsched(&atid2, PTHREAD_EXPLICIT_SCHED);
//  pthread_attr_setschedpolicy(&atid2, SCHED_RR);
//  pthread_attr_setschedparam(&atid2, &par);

        pthread_attr_init(&atid3);
        pthread_attr_setscope(&atid3, PTHREAD_SCOPE_PROCESS);
        pthread_attr_setinheritsched(&atid3, PTHREAD_EXPLICIT_SCHED);
//  pthread_attr_setschedpolicy(&atid3, SCHED_RR);
//  pthread_attr_setschedparam(&atid3, &par);

        pthread_attr_init(&atid4);
        pthread_attr_setscope(&atid4, PTHREAD_SCOPE_PROCESS);
        pthread_attr_setinheritsched(&atid4, PTHREAD_EXPLICIT_SCHED);
//  pthread_attr_setschedpolicy(&atid4, SCHED_RR);
//  pthread_attr_setschedparam(&atid4, &par);

        pthread_attr_init(&atid5);
        pthread_attr_setscope(&atid5, PTHREAD_SCOPE_PROCESS);
        pthread_attr_setinheritsched(&atid5, PTHREAD_EXPLICIT_SCHED);
//  pthread_attr_setschedpolicy(&atid5, SCHED_RR);
//  pthread_attr_setschedparam(&atid5, &par);

        pthread_attr_init(&atid6);
        pthread_attr_setscope(&atid6, PTHREAD_SCOPE_PROCESS);
        pthread_attr_setinheritsched(&atid6, PTHREAD_EXPLICIT_SCHED);
//  pthread_attr_setschedpolicy(&atid6, SCHED_RR);
//  pthread_attr_setschedparam(&atid6, &par);

        pthread_create(&tid1, &atid1, MemoryMessageCentralUTest::threadMessageQueueRandonAccess, (void*) mmc);

        pthread_create(&tid2, &atid2, MemoryMessageCentralUTest::threadMessageQueueRandonAccess, (void*) mmc);
        pthread_create(&tid3, &atid3, MemoryMessageCentralUTest::threadMessageQueueRandonAccess, (void*) mmc);
        pthread_create(&tid4, &atid4, MemoryMessageCentralUTest::threadMessageQueueRandonAccess, (void*) mmc);
        pthread_create(&tid5, &atid5, MemoryMessageCentralUTest::threadMessageQueueRandonAccess, (void*) mmc);
        pthread_create(&tid6, &atid6, MemoryMessageCentralUTest::threadMessageQueueRandonAccess, (void*) mmc);


//  threadMessageQueueRandonAccess((void*) mmc);

// I need access the thread IDs structure, to make thread start. I dont know why, but It worked ...

        pthread_join(tid1, NULL);
        pthread_join(tid2, NULL);
        pthread_join(tid3, NULL);
        pthread_join(tid4, NULL);
        pthread_join(tid5, NULL);
        pthread_join(tid6, NULL);

    }

    static void* threadMessageQueueRandonAccess(void* args) {

        opencog::MT19937RandGen rng(0);

        std::string id1("id1");
        std::string id2("id2");

        MemoryMessageCentral *mmc = (MemoryMessageCentral *) args;

        for (int i = 0; i < 20000; i++) {

            int choice = rng.randint(5);

            switch (choice) {
            case 0:
            case 1: {
                char num[10];
                std::string msg("message ");
                //itoa(i, num, 10);
                sprintf(num, "%05d", i);
                msg.append(num);
                StringMessage * str_message = new StringMessage(std::string("from"), std::string("to"), msg);

                if (rng.randbool()) {
                    mmc->push(id1, str_message);
                } else {
                    mmc->push(id2, str_message);
                }
            }
            break;
            case 2:
            case 3: {
                Message *ret_message = NULL;

                if (rng.randbool()) {
                    ret_message = mmc->pop(id1);
                    if (ret_message != NULL) {
                        delete ret_message;
                    }
                } else {
                    ret_message = mmc->pop(id2);
                    if (ret_message != NULL) {
                        delete ret_message;
                    }
                }
            }
            break;
            case 4: {

                if (rng.randbool()) {
                    if (mmc->isQueueEmpty(id1)) {
                    }
                }
            }
            break;
            }

        }//for

        return NULL;
    }

};
