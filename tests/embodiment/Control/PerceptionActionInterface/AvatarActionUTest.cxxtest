/*
 * tests/embodiment/Control/PerceptionActionInterface/AvatarActionUTest.cxxtest
 *
 * Copyright (C) 2002-2009 Novamente LLC
 * All Rights Reserved
 * Author(s): Carlos Lopes
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/embodiment/Control/PerceptionActionInterface/AvatarAction.h>
using namespace opencog::pai;

#include <opencog/util/exceptions.h>

class AvatarActionUTest :  public CxxTest::TestSuite
{

public:
    AvatarActionUTest() {
    }

    ~AvatarActionUTest() {
    }

    void setUp() {
    }

    void tearDown() {
    }

    void TestSetGetMethods() {
        AvatarAction action;
        action.setType(ActionType::DROP());
        action.setSequence(1);
        TS_ASSERT(action.getType() == ActionType::DROP());
        TS_ASSERT(action.getName() == "drop");
        TS_ASSERT(action.getSequence() == 1);
        action.setType(ActionType::SIT());
        action.setSequence(10);
        TS_ASSERT(action.getType() == ActionType::SIT());
        TS_ASSERT(action.getName() == "sit");
        TS_ASSERT(action.getSequence() == 10);
        action.addParameter(ActionParameter("duration", ActionParamType::FLOAT(), "2"));
        TS_ASSERT_THROWS(action.setType(ActionType::FLY()), opencog::InvalidParamException&);

    }

    void TestAddAndGetParametersMethods() {
        ActionParameter floatParam("speed", ActionParamType::FLOAT(), "10.5");
        ActionParameter floatDurationParam("duration", ActionParamType::FLOAT(), "2.0");
        ActionParameter vectorParam("target", ActionParamType::VECTOR(), Vector(1.2, 1.3, 1.4));
        ActionParameter rotationParam("rotate", ActionParamType::ROTATION(), Rotation(1.2, 1.3, 1.4));
        ActionParameter entityParam("object", ActionParamType::ENTITY(), Entity("10", "pet"));

        AvatarAction walkAction(ActionType::WALK());
        const list<ActionParameter>& walkParameters = walkAction.getParameters();
        TS_ASSERT(walkParameters.empty());
        TS_ASSERT(!walkAction.containsValidParameters());

        // Check if addParamter throws InvalidParamException when a parameters of wrong type is given
        TS_ASSERT_THROWS(walkAction.addParameter(floatParam), opencog::InvalidParamException&);
        TS_ASSERT_THROWS(walkAction.addParameter(rotationParam), opencog::InvalidParamException&);
        TS_ASSERT_THROWS(walkAction.addParameter(entityParam), opencog::InvalidParamException&);

        walkAction.addParameter(vectorParam);
        TS_ASSERT(walkParameters.size() == 1);
        TS_ASSERT(!walkAction.containsValidParameters());

        // Check if addParamter throws RuntimeException when a parameters of wrong type is given
        TS_ASSERT_THROWS(walkAction.addParameter(rotationParam), opencog::InvalidParamException&);
        TS_ASSERT_THROWS(walkAction.addParameter(vectorParam), opencog::InvalidParamException&);
        TS_ASSERT_THROWS(walkAction.addParameter(entityParam), opencog::InvalidParamException&);

        walkAction.addParameter(floatParam);
        TS_ASSERT(walkParameters.size() == 2);
        TS_ASSERT(walkAction.containsValidParameters());

        // Check if addParamter throws RuntimeException when a parameters of wrong type is given
        TS_ASSERT_THROWS(walkAction.addParameter(floatParam), opencog::InvalidParamException&);
        TS_ASSERT_THROWS(walkAction.addParameter(vectorParam), opencog::InvalidParamException&);
        TS_ASSERT_THROWS(walkAction.addParameter(entityParam), opencog::InvalidParamException&);

        walkAction.addParameter(rotationParam);
        TS_ASSERT(walkParameters.size() == 3);
        TS_ASSERT(walkAction.containsValidParameters());

        // Chek if the parameters are in the right order
        list<ActionParameter>::const_iterator itr = walkParameters.begin();
        TS_ASSERT(itr->getName() == "target");
        TS_ASSERT(itr->getType() == ActionParamType::VECTOR());
        TS_ASSERT(itr->isVectorValue());
        const Vector& c = itr->getVectorValue();
        TS_ASSERT_DELTA(c.x, 1.2, 0.001);
        TS_ASSERT_DELTA(c.y, 1.3, 0.001);
        TS_ASSERT_DELTA(c.z, 1.4, 0.001);
        itr++;
        TS_ASSERT(itr->getName() == "speed");
        TS_ASSERT(itr->getType() == ActionParamType::FLOAT());
        TS_ASSERT(itr->isStringValue());
        TS_ASSERT(itr->getStringValue() == "10.5");
        itr++;
        TS_ASSERT(itr->getName() == "rotate");
        TS_ASSERT(itr->getType() == ActionParamType::ROTATION());
        TS_ASSERT(itr->isRotationValue());
        const Rotation& r = itr->getRotationValue();
        TS_ASSERT_DELTA(r.pitch, 1.2, 0.001);
        TS_ASSERT_DELTA(r.roll, 1.3, 0.001);
        TS_ASSERT_DELTA(r.yaw, 1.4, 0.001);

        // Check if addParamter throws RuntimeException if number of parameters is exceeded
        TS_ASSERT_THROWS(walkAction.addParameter(entityParam), opencog::InvalidParamException&);
        TS_ASSERT_THROWS(walkAction.addParameter(rotationParam), opencog::InvalidParamException&);
        TS_ASSERT_THROWS(walkAction.addParameter(vectorParam), opencog::InvalidParamException&);
        TS_ASSERT_THROWS(walkAction.addParameter(floatParam), opencog::InvalidParamException&);

        AvatarAction eatAction(ActionType::EAT());
        const list<ActionParameter>& eatParameters = eatAction.getParameters();
        TS_ASSERT(eatParameters.empty());
        TS_ASSERT(!eatAction.containsValidParameters());

        // Check if addParamter throws RuntimeException when a parameters of wrong type is given
        TS_ASSERT_THROWS(eatAction.addParameter(vectorParam), opencog::InvalidParamException&);
        TS_ASSERT_THROWS(eatAction.addParameter(rotationParam), opencog::InvalidParamException&);
        TS_ASSERT_THROWS(eatAction.addParameter(floatParam), opencog::InvalidParamException&);

        eatAction.addParameter(entityParam);
        TS_ASSERT(eatParameters.size() == 1);

        // Check if addParamter throws RuntimeException when a parameters of wrong type is given
        TS_ASSERT_THROWS(eatAction.addParameter(vectorParam), opencog::InvalidParamException&);
        TS_ASSERT_THROWS(eatAction.addParameter(rotationParam), opencog::InvalidParamException&);
        TS_ASSERT_THROWS(eatAction.addParameter(entityParam), opencog::InvalidParamException&);

        eatAction.addParameter(floatDurationParam);
        TS_ASSERT(eatParameters.size() == 2);
        TS_ASSERT(eatAction.containsValidParameters());

        // Check if addParamter throws RuntimeException if number of parameters is exceeded
        TS_ASSERT_THROWS(eatAction.addParameter(entityParam), opencog::InvalidParamException&);
        TS_ASSERT_THROWS(eatAction.addParameter(rotationParam), opencog::InvalidParamException&);
        TS_ASSERT_THROWS(eatAction.addParameter(vectorParam), opencog::InvalidParamException&);
        TS_ASSERT_THROWS(eatAction.addParameter(floatParam), opencog::InvalidParamException&);

        TS_ASSERT(eatParameters.front().getName() == "object");
        TS_ASSERT(eatParameters.front().getType() == ActionParamType::ENTITY());
        TS_ASSERT(eatParameters.front().isEntityValue());
        const Entity& e = eatParameters.front().getEntityValue();
        TS_ASSERT(e.id == "10");
        TS_ASSERT(e.type == "pet");

        TS_ASSERT(eatParameters.back().getName() == "duration");
        TS_ASSERT(eatParameters.back().getType() == ActionParamType::FLOAT());
        TS_ASSERT(eatParameters.back().isStringValue());
        TS_ASSERT(eatParameters.back().getStringValue() == "2.0");

        // TODO: To really test every case, tests adding parameters for all the AtionTypes must be inserted here.
        //        But sincerely, we can just trust in AtomType configuration (see construction of all of them in AtomType.cc) ...
    }
};
