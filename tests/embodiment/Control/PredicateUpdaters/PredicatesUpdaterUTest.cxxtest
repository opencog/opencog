/*
 * tests/embodiment/Control/PredicateUpdaters/PredicatesUpdaterUTest.cxxtest
 *
 * Copyright (C) 2002-2009 Novamente LLC
 * All Rights Reserved
 * Author(s): Carlos Lopes
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/atomspace/AtomSpace.h>
#include <opencog/atomspace/SimpleTruthValue.h>

#include <opencog/embodiment/Control/PredicateUpdaters/PredicatesUpdater.h>
#include <opencog/embodiment/AtomSpaceExtensions/AtomSpaceUtil.h>
#include <tests/embodiment/Control/PerceptionActionInterface/PAITestUtil.h>

#include <opencog/util/StringManipulator.h>

#include <opencog/persist/file/SavingLoading.h>

#include <opencog/server/CogServer.h>

#include <string>
#include <stdio.h>

#include <opencog/util/StringTokenizer.h>
#include <opencog/persist/xml/NMXmlParser.h>
#include <opencog/persist/xml/NMXmlExporter.h>
#include <opencog/persist/xml/StringXMLBufferReader.h>

#include <fstream>

static const std::string petId = "Fido";
static const std::string owner = "Dudu";
static const std::string stick = "stick";
static const std::string food  = "meat";
static const std::string drink = "water";
static const std::string wall = "wall";


using namespace opencog::oac;
using namespace opencog::pai;

class PredicatesUpdaterUTest :  public CxxTest::TestSuite
{

private:

    AtomSpace* atomSpace;
    PredicatesUpdater * updater;

    std::vector<Handle> handles;
    unsigned int lastTimestamp;

public:

    PredicatesUpdaterUTest() {
        // this levels are necessary to identify what is happening during
        // the frames creation
        logger().setLevel( Logger::ERROR );
        logger().setLevel( Logger::DEBUG );



        CogServer& cogserver = static_cast<CogServer&>(server());
        atomSpace = cogserver.getAtomSpace();

        updater = new PredicatesUpdater(*atomSpace, petId);
        addOnwerInfo();
        lastTimestamp = 0;

    }

    ~PredicatesUpdaterUTest() {
        // NOTE: there is memory leak, since atomSpace/updater is not released here.
        // However, since cxxtest declares the PredicatesUpdaterUTest as static, atomSpace should not
        // be released here, because it depends on ClassServer, which could have been released already at
        // this point...
    }

    void setUp() {
    }

    void tearDown() {
    }

    void addOnwerInfo() {

        // adding ownership relation
        Handle petHandle = atomSpace->addNode(PET_NODE, petId);
        Handle ownerHandle = atomSpace->addNode(AVATAR_NODE, owner);

        HandleSeq seq0;
        seq0.push_back(ownerHandle);
        seq0.push_back(petHandle);

        HandleSeq seq;
        seq.push_back(atomSpace->addNode(PREDICATE_NODE, "owns"));
        seq.push_back(atomSpace->addLink(LIST_LINK, seq0));

        atomSpace->addLink(EVALUATION_LINK, seq);
    }

    void addSpaceInfoMock(double baseX, double baseY) {
        handles.clear();
        unsigned long timestamp = PAITestUtil::getCurrentTimestamp();

        TS_ASSERT(lastTimestamp != timestamp);

        // adding pet
        Handle objs = atomSpace->addNode(PET_NODE, petId);
        atomSpace->getSpaceServer().addSpaceInfo(true, objs, timestamp, 
                                baseX, baseY, 0, // position
                                0.5, 0.5, 0.5, 0, false);
        addSizeInfo(objs, 0.5, 0.5, 0.5);
        handles.push_back(objs);

        // adding avatar
        objs = atomSpace->addNode(AVATAR_NODE, owner);
        atomSpace->getSpaceServer().addSpaceInfo(true, objs, timestamp, 
                                baseX + 1.5, baseY + 1.5, 0, // position
                                0.5, 0.5, 0.5, 0, false);
        addSizeInfo(objs, 0.5, 0.5, 0.5);
        handles.push_back(objs);

        // adding stick
        objs = atomSpace->addNode(ACCESSORY_NODE, stick);
        atomSpace->getSpaceServer().addSpaceInfo(true, objs, timestamp, 
                                baseX + 10.2, baseY + 10.2, 0,  // position
                                0.2, 0.2, 0.2, 0, false);
        addSizeInfo(objs, 0.2, 0.2, 0.2);
        handles.push_back(objs);

        // adding food
        objs = atomSpace->addNode(OBJECT_NODE, food);
        atomSpace->getSpaceServer().addSpaceInfo(true, objs, timestamp, 
                                baseX, baseY + 0.4, 0,  // position
                                0.1, 0.1, 0.1, 0, false);
        addSizeInfo(objs, 0.1, 0.1, 0.1);
        handles.push_back(objs);
        AtomSpaceUtil::addPropertyPredicate(*atomSpace, "is_edible", objs, SimpleTruthValue(1.0, 1.0));

        // adding drink
        objs = atomSpace->addNode(OBJECT_NODE, drink);
        atomSpace->getSpaceServer().addSpaceInfo(true, objs, timestamp, 
                                baseX, baseY + 0.4, 0,  // position
                                0.1, 0.1, 0.1, 0, false);
        addSizeInfo(objs, 0.1, 0.1, 0.1);
        handles.push_back(objs);
        AtomSpaceUtil::addPropertyPredicate(*atomSpace, "is_drinkable", objs, SimpleTruthValue(1.0, 1.0));

        // adding wall
        objs = atomSpace->addNode(STRUCTURE_NODE, wall);
        atomSpace->getSpaceServer().addSpaceInfo(true, objs, timestamp, 
                                3, 3, 0,  // position
                                2, 0.2, 1, 0, true);
        addSizeInfo(objs, 2, 0.2, 1);
        handles.push_back(objs);

        lastTimestamp = timestamp;
    }

    void addSizeInfo(Handle obj, double length, double width, double height) {
        HandleSeq seq0;
        seq0.push_back(obj);
        seq0.push_back(atomSpace->addNode(NUMBER_NODE, opencog::toString(length)));
        seq0.push_back(atomSpace->addNode(NUMBER_NODE, opencog::toString(width)));
        seq0.push_back(atomSpace->addNode(NUMBER_NODE, opencog::toString(height)));

        HandleSeq seq;
        seq.push_back(atomSpace->addNode(PREDICATE_NODE, "size"));
        seq.push_back(atomSpace->addLink(LIST_LINK, seq0));

        atomSpace->addLink(EVALUATION_LINK, seq);
    }

    /**
     * test everything but without movement
     */
    void testRound01() {
        // used to see if the predicates where correctly set
        BasicPredicateUpdater checker(*atomSpace);

        // add objs
        addSpaceInfoMock(10, 10);
        updater->update(handles, PAITestUtil::getCurrentTimestamp());


        printf("---------------------------------------------------------------\n");
        printf("Round 01 - stick predicates - should not move\n");
        Handle obj = atomSpace->getHandle(ACCESSORY_NODE, stick);
        // stick should be small
        TS_ASSERT(AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_small", obj));
        // stick should be movable
        TS_ASSERT(AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_movable", obj));
        // stick should be pickupable
        TS_ASSERT(AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_pickupable", obj));
        // stick should not be edible
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_edible", obj));
        // stick should not be drinkable
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_drinkable", obj));
        // stick should not be noisy
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_noisy", obj));
        // stick should not be poo_place
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_poo_place", obj));
        // stick should not be pee_place
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_pee_place", obj));
        printf("End checking stick predicates\n");

        printf("---------------------------------------------------------------\n");
        printf("Round 01 - owner predicates - should not move\n");
        obj = atomSpace->getHandle(AVATAR_NODE, owner);
        // owner should not be small
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_small", obj));
        // owner should be movable
        TS_ASSERT(AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_movable", obj));
        // owner should not be pickupable
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_pickupable", obj));
        // owner should not be edible
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_edible", obj));
        // owner should not be drinkable
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_drinkable", obj));
        // owner should be noisy
        TS_ASSERT(AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_noisy", obj));
        // stick should not be poo_place
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_poo_place", obj));
        // stick should not be pee_place
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_pee_place", obj));
        printf("End checking owner predicates\n");

        printf("---------------------------------------------------------------\n");
        printf("Round 01 - food predicates - should not move\n");
        obj = atomSpace->getHandle(OBJECT_NODE, food);
        // food should be small
        TS_ASSERT(AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_small", obj));
        // food should be movable
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_movable", obj));
        // food should be pickupable
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_pickupable", obj));
        // food should be edible
        TS_ASSERT(AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_edible", obj));
        // food should not be drinkable
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_drinkable", obj));
        // food should not be noisy
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_noisy", obj));
        // stick should not be poo_place
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_poo_place", obj));
        // stick should not be pee_place
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_pee_place", obj));
        printf("End checking food predicates\n");

        printf("---------------------------------------------------------------\n");
        printf("Round 01 - drink predicates - should not move\n");
        obj = atomSpace->getHandle(OBJECT_NODE, drink);
        // drink should be small
        TS_ASSERT(AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_small", obj));
        // drink should be movable
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_movable", obj));
        // drink should not be pickupable
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_pickupable", obj));
        // drink should not be edible
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_edible", obj));
        // drink should be drinkable
        TS_ASSERT(AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_drinkable", obj));
        // drink should not be noisy
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_noisy", obj));
        // stick should not be poo_place
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_poo_place", obj));
        // stick should not be pee_place
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_pee_place", obj));
        printf("End checking drink predicates\n");

        printf("---------------------------------------------------------------\n");
        printf("Round 01 - wall predicates - should not move\n");
        obj = atomSpace->getHandle(STRUCTURE_NODE, wall);
        // wall should be small
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_small", obj));
        // wall not should be movable
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_movable", obj));
        // wall not should be pickupable
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_pickupable", obj));
        // wall should not be edible
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_edible", obj));
        // wall should not be drinkable
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_drinkable", obj));
        // wall should not be noisy
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_noisy", obj));
        // wall should be poo place
        TS_ASSERT(AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_poo_place", obj));
        // wall should be pee_place
        TS_ASSERT(AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_pee_place", obj));
        printf("End checking wall predicates\n");
        printf("---------------------------------------------------------------\n");
    }

    /**
     * test everything, now the objects have moved
     */
    void testRound2() {
        sleep(1);

        // used to see if the predicates where correctly set
        BasicPredicateUpdater checker(*atomSpace);

        // add objs
        addSpaceInfoMock(15, 15);
        updater->update(handles, PAITestUtil::getCurrentTimestamp());

        printf("---------------------------------------------------------------\n");
        printf("Round 02 - stick predicates - should move\n");
        Handle obj = atomSpace->getHandle(ACCESSORY_NODE, stick);
        // stick should be small
        TS_ASSERT(AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_small", obj));
        // stick should be movable
        TS_ASSERT(AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_movable", obj));
        // stick should be pickupable
        TS_ASSERT(AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_pickupable", obj));
        // stick should not be noisy
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_noisy", obj));
        // stick should not be poo_place
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_poo_place", obj));
        // stick should not be pee_place
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_pee_place", obj));
        printf("End checking stick predicates\n");
        printf("---------------------------------------------------------------\n");

        printf("Round 02 - owner predicates - should move\n");
        obj = atomSpace->getHandle(AVATAR_NODE, owner);
        // owner should not be small
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_small", obj));
        // owner should be movable
        TS_ASSERT(AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_movable", obj));
        // owner should not be pickupable
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_pickupable", obj));
        // owner should be noisy
        TS_ASSERT(AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_noisy", obj));
        // stick should not be poo_place
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_poo_place", obj));
        // stick should not be pee_place
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_pee_place", obj));
        printf("End checking owner predicates\n");
        printf("---------------------------------------------------------------\n");

        printf("Round 02 - food predicates - not should move\n");
        obj = atomSpace->getHandle(OBJECT_NODE, food);
        // food should be small
        TS_ASSERT(AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_small", obj));
        // food should be movable
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_movable", obj));
        // food should be pickupable
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_pickupable", obj));
        // food should not be noisy
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_noisy", obj));
        // stick should not be poo_place
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_poo_place", obj));
        // stick should not be pee_place
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_pee_place", obj));
        printf("End checking food predicates\n");
        printf("---------------------------------------------------------------\n");

        printf("Round 02 - drink predicates - should not move\n");
        obj = atomSpace->getHandle(OBJECT_NODE, drink);
        // drink should be small
        TS_ASSERT(AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_small", obj));
        // drink should be movable
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_movable", obj));
        // drink should not be pickupable
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_pickupable", obj));
        // drink should not be edible
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_edible", obj));
        // drink should be drinkable
        TS_ASSERT(AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_drinkable", obj));
        // drink should not be noisy
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_noisy", obj));
        // stick should not be poo_place
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_poo_place", obj));
        // stick should not be pee_place
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_pee_place", obj));
        printf("End checking drink predicates\n");

        printf("---------------------------------------------------------------\n");
        printf("Round 02 - wall predicates - should not move\n");
        obj = atomSpace->getHandle(STRUCTURE_NODE, wall);
        // wall should be small
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_small", obj));
        // wall not should be movable
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_movable", obj));
        // wall not should be pickupable
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_pickupable", obj));
        // wall should not be edible
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_edible", obj));
        // wall should not be drinkable
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_drinkable", obj));
        // wall should not be noisy
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_noisy", obj));
        // wall should be poo place
        TS_ASSERT(AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_poo_place", obj));
        // wall should be pee_place
        TS_ASSERT(AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_pee_place", obj));
        printf("End checking wall predicates\n");
        printf("---------------------------------------------------------------\n");
    }

    /**
     * test everything, now the objects have moved
     */
    void testRound3() {
        sleep(1);

        // used to see if the predicates where correctly set
        BasicPredicateUpdater checker(*atomSpace);

        // add objs
        addSpaceInfoMock(15, 15);
        updater->update(handles, PAITestUtil::getCurrentTimestamp());

        printf("---------------------------------------------------------------\n");
        printf("Round 03 - stick predicates - should not move\n");
        Handle obj = atomSpace->getHandle(ACCESSORY_NODE, stick);
        // stick should be small
        TS_ASSERT(AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_small", obj));
        // stick should be movable
        TS_ASSERT(AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_movable", obj));
        // stick should be pickupable
        TS_ASSERT(AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_pickupable", obj));
        // stick should not be edible
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_edible", obj));
        // stick should not be drinkable
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_drinkable", obj));
        // stick should not be noisy
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_noisy", obj));
        // stick should not be poo_place
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_poo_place", obj));
        // stick should not be pee_place
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_pee_place", obj));
        printf("End checking stick predicates\n");
        printf("---------------------------------------------------------------\n");

        printf("Round 03 - owner predicates - should not move\n");
        obj = atomSpace->getHandle(AVATAR_NODE, owner);
        // owner should not be small
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_small", obj));
        // owner should be movable
        TS_ASSERT(AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_movable", obj));
        // owner should not be pickupable
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_pickupable", obj));
        // owner should not be edible
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_edible", obj));
        // owner should not be drinkable
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_drinkable", obj));
        // owner should be noisy
        TS_ASSERT(AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_noisy", obj));
        // stick should not be poo_place
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_poo_place", obj));
        // stick should not be pee_place
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_pee_place", obj));

        printf("End checking owner predicates\n");
        printf("---------------------------------------------------------------\n");

        printf("Round 03 - food predicates - should not move\n");
        obj = atomSpace->getHandle(OBJECT_NODE, food);
        // food should be small
        TS_ASSERT(AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_small", obj));
        // food should be movable
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_movable", obj));
        // food should be pickupable
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_pickupable", obj));
        // food should be edible
        TS_ASSERT(AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_edible", obj));
        // food should not be drinkable
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_drinkable", obj));
        // food should not be noisy
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_noisy", obj));
        // stick should not be poo_place
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_poo_place", obj));
        // stick should not be pee_place
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_pee_place", obj));

        printf("End checking food predicates\n");
        printf("---------------------------------------------------------------\n");

        printf("Round 03 - drink predicates - should not move\n");
        obj = atomSpace->getHandle(OBJECT_NODE, drink);
        // drink should be small
        TS_ASSERT(AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_small", obj));
        // drink should be movable
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_movable", obj));
        // drink should not be pickupable
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_pickupable", obj));
        // drink should not be edible
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_edible", obj));
        // drink should be drinkable
        TS_ASSERT(AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_drinkable", obj));
        // drink should not be noisy
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_noisy", obj));
        // stick should not be poo_place
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_poo_place", obj));
        // stick should not be pee_place
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_pee_place", obj));
        printf("End checking drink predicates\n");

        printf("---------------------------------------------------------------\n");
        printf("Round 03 - wall predicates - should not move\n");
        obj = atomSpace->getHandle(STRUCTURE_NODE, wall);
        // wall should be small
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_small", obj));
        // wall not should be movable
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_movable", obj));
        // wall not should be pickupable
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_pickupable", obj));
        // wall should not be edible
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_edible", obj));
        // wall should not be drinkable
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_drinkable", obj));
        // wall should not be noisy
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_noisy", obj));
        // wall should be poo place
        TS_ASSERT(AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_poo_place", obj));
        // wall should be pee_place
        TS_ASSERT(AtomSpaceUtil::isPredicateTrue(*atomSpace, "is_pee_place", obj));
        printf("End checking wall predicates\n");
        printf("---------------------------------------------------------------\n");

    }

    void testNearPredicates() {
        Handle petH   = atomSpace->getHandle(PET_NODE, petId);
        Handle ownerH = atomSpace->getHandle(AVATAR_NODE, owner);
        Handle stickH = atomSpace->getHandle(ACCESSORY_NODE, stick);
        Handle wallH  = atomSpace->getHandle(STRUCTURE_NODE, wall);
        Handle foodH  = atomSpace->getHandle(OBJECT_NODE, food);
        Handle drinkH = atomSpace->getHandle(OBJECT_NODE, drink);

        // pet near
        TS_ASSERT(AtomSpaceUtil::isPredicateTrue(*atomSpace, "near", petH, foodH));
        TS_ASSERT(AtomSpaceUtil::isPredicateTrue(*atomSpace, "near", petH, drinkH));
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "near", petH, stickH));
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "near", petH, wallH));
        TS_ASSERT(AtomSpaceUtil::isPredicateTrue(*atomSpace, "near", petH, ownerH));

        // owner
        TS_ASSERT(AtomSpaceUtil::isPredicateTrue(*atomSpace, "near", ownerH, petH));
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "near", ownerH,  stickH));
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "near", ownerH, wallH));

        // wall - near to nothing
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "near", wallH, petH));
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "near", wallH, ownerH));
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "near", wallH, foodH));
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "near", wallH, stickH));
        TS_ASSERT(!AtomSpaceUtil::isPredicateTrue(*atomSpace, "near", wallH, drinkH));

        /// food and drink
        TS_ASSERT(AtomSpaceUtil::isPredicateTrue(*atomSpace, "near", drinkH, foodH));
        TS_ASSERT(AtomSpaceUtil::isPredicateTrue(*atomSpace, "near", foodH, drinkH));


        FILE * fp = fopen( "firstMap.bin", "wb+");
        assert(fp != 0);
        atomSpace->getSpaceServer().getLatestMap( ).save( fp );
        fflush(fp);
        fclose(fp);

    }

};
