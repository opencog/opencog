/*
 * tests/embodiment/Control/Procedure/scriptsComboInterpreterUTest.cxxtest
 *
 * Copyright (C) 2002-2009 Novamente LLC
 * All Rights Reserved
 * Author(s): Elvys Borges
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */


#include <opencog/embodiment/Control/Procedure/RunningProcedureId.h>
#include "ComboInterpreterUTest.h"
#include <opencog/embodiment/AvatarComboVocabulary/AvatarComboVocabulary.h>

#include <opencog/embodiment/Control/Procedure/ComboProcedureRepository.h>
#include <fstream>
#include <iostream>

#include <opencog/atomspace/SimpleTruthValue.h>

using namespace opencog::pai;
using namespace AvatarCombo;
using namespace std;
using namespace Procedure;

static std::string macku = "id_Macku";
static std::string stick = "id_Stick";
static std::string meat = "id_meat";
static std::string wynx = "id_Wynx";
static std::string milk = "id_milk";

class scriptsComboInterpreterUTest :  public CxxTest::TestSuite , ComboInterpreterUTest
{

private:

    ComboProcedureRepository cpr;
    bool combo_loaded;

public :

    scriptsComboInterpreterUTest() {
        combo_loaded = false;
    }

    void load_combo_functions() {
        if (combo_loaded) return;
        //load scripts
        string file_combo(PVP_XML_FILE_PATH "/scripts.combo");
        ifstream fin(file_combo.c_str());
        int n = cpr.loadFromStream(fin);
        cout << "loaded " << n << " combo functions from " << file_combo << std::endl;
        addFeelingsAndTraits();
        combo_loaded = true;
    }

    void addFeelingsAndTraits() {
        Handle pet = atomSpace->getHandle(PET_NODE, PAIUtils::getInternalId("Macku"));
        if (pet == Handle::UNDEFINED) {
            std::cout << "Not able to find Macku" << std::endl;
            return;
        }

        SimpleTruthValue tv(0.6, 1.0);
        SimpleTruthValue tv2(0.4, 1.0);

        // traits
        AtomSpaceUtil::setPredicateValue(*atomSpace, "curiosity", tv, pet);
        AtomSpaceUtil::setPredicateValue(*atomSpace, "fearfulness", tv, pet);
        AtomSpaceUtil::setPredicateValue(*atomSpace, "playfulness", tv, pet);
        AtomSpaceUtil::setPredicateValue(*atomSpace, "excitability", tv, pet);
        AtomSpaceUtil::setPredicateValue(*atomSpace, "friendliness", tv, pet);
        AtomSpaceUtil::setPredicateValue(*atomSpace, "aggressiveness", tv, pet);
        AtomSpaceUtil::setPredicateValue(*atomSpace, "appreciativeness", tv2, pet);

        // feelings
        AtomSpaceUtil::setPredicateValue(*atomSpace, "fear", tv, pet);
        AtomSpaceUtil::setPredicateValue(*atomSpace, "love", tv, pet);
        AtomSpaceUtil::setPredicateValue(*atomSpace, "hate", tv, pet);
        AtomSpaceUtil::setPredicateValue(*atomSpace, "pride", tv2, pet);
        AtomSpaceUtil::setPredicateValue(*atomSpace, "anger", tv2, pet);
        AtomSpaceUtil::setPredicateValue(*atomSpace, "gratitude", tv2, pet);
        AtomSpaceUtil::setPredicateValue(*atomSpace, "happiness", tv, pet);
        AtomSpaceUtil::setPredicateValue(*atomSpace, "excitement", tv, pet);

        // add new one
        HandleSeq freqLink;
        freqLink.push_back(atomSpace->addNode(CONCEPT_NODE, "currentActionRepetition"));
        freqLink.push_back(atomSpace->addNode(NUMBER_NODE, "2"));

        atomSpace->addLink(FREQUENCY_LINK, freqLink);
    }

    void setUp() {
        // Set selected demand goal
        std::vector<Handle> outgoing_list; 
        std::vector<Handle> empty_outgoing_list; 

        Handle h_concept_node = atomSpace->addNode(CONCEPT_NODE, "plan_selected_demand_goal"); 

        outgoing_list.clear(); 
        outgoing_list.push_back( atomSpace->addNode(PREDICATE_NODE, "EnergyDemandGoal") ); 
        outgoing_list.push_back( atomSpace->addLink(LIST_LINK, empty_outgoing_list) ); 
        Handle h_demand_evaluation_link = atomSpace->addLink(EVALUATION_LINK, outgoing_list); 

        outgoing_list.clear(); 
        outgoing_list.push_back(h_concept_node); 
        outgoing_list.push_back(h_demand_evaluation_link); 
        Handle h_demand_reference_link = atomSpace->addLink(REFERENCE_LINK, outgoing_list); 
        std::cout<<atomSpace->atomAsString(h_demand_reference_link); 

        load_combo_functions();
    }

    void testMath() {

        std::string str("randbool");
        runProcedureAndComboScriptsRandom(str, true);

        //std::string str("factorial(3)");
        str.assign("factorial(3)");
        runProcedureAndComboScripts(str, string("6"));

        str.assign("fibonacci(3)");
        runProcedureAndComboScripts(str, string("2"));

        str.assign("+(5 6)");
        runProcedureAndComboScripts(str, string("11"));

        str.assign("0<(+(-5 6))");
        runProcedureAndComboScripts(str, id::logical_true);

    }

    void testLogical() {

        //    std::string str("and(is_small(Stick) is_small(meat))");
        std::string str("and(0<(+(rand -0.5)) is_small(id_Stick))");
        //    std::string str("randbool");

        runProcedureAndComboScriptsRandom(str, true);

        str.assign("or(randbool is_small(id_meat))");
        runProcedureAndComboScriptsRandom(str, true);


        str.assign("and(is_small(id_Stick) or(randbool is_small(id_meat)))");
        runProcedureAndComboScriptsRandom(str, true);


        str.assign("and(is_small(id_Stick) is_small(id_meat) is_small(id_Wynx))");
        runProcedureAndComboScriptsRandom(str, true);
    }

    void testLogicalWildCard() {
        combo::variable_unifier vu;
        vu.insert(wynx, true);
        vu.insert(milk, true);
        vu.insert(meat, true);
        vu.insert(stick, true);
        vu.insert(macku, true);

        combo::variable_unifier vu2(vu);
        combo::variable_unifier vu25(vu);
        combo::variable_unifier vu3(vu);
        combo::variable_unifier vu31(vu);
        combo::variable_unifier vu35(vu);
        combo::variable_unifier vu351(vu);
        combo::variable_unifier vu4(vu);
        combo::variable_unifier vu5(vu);
        combo::variable_unifier vu6(vu);
        combo::variable_unifier vu7(vu);
        combo::variable_unifier vu8(vu);
        combo::variable_unifier vu9(vu);
        combo::variable_unifier vu10(vu);
        combo::variable_unifier vu11(vu);
        combo::variable_unifier vu12(vu);
        combo::variable_unifier vu13(vu);
        combo::variable_unifier vu14(vu);


        combo::variable_unifier vu_result;
        vu_result.insert(wynx, true);
        vu_result.insert(milk, false);
        vu_result.insert(meat, false);
        vu_result.insert(stick, false);
        vu_result.insert(macku, false);
        std::string str("is_avatar(_*_)");
        runProcedureAndComboScriptsWildCard(str, vu, vu_result);

        vu_result.setVariableState(wynx, false);
        vu_result.setVariableState(milk, false);
        vu_result.setVariableState(meat, false);
        vu_result.setVariableState(stick, false);
        vu_result.setVariableState(macku, true);
        str.clear();
        str.assign("is_pet(_*_)");
        runProcedureAndComboScriptsWildCard(str, vu2, vu_result);

        vu_result.setVariableState(wynx, true);
        vu_result.setVariableState(milk, true);
        vu_result.setVariableState(meat, true);
        vu_result.setVariableState(stick, true);
        vu_result.setVariableState(macku, false);
        str.clear();
        str.assign("not(is_pet(_*_))");
        runProcedureAndComboScriptsWildCard(str, vu25, vu_result);

        vu_result.setVariableState(wynx, true);
        vu_result.setVariableState(milk, false);
        vu_result.setVariableState(meat, false);
        vu_result.setVariableState(stick, false);
        vu_result.setVariableState(macku, true);
        str.clear();
        str.assign("or(is_pet(_*_) is_avatar(_*_))");
        runProcedureAndComboScriptsWildCard(str, vu3, vu_result);

        vu_result.setVariableState(wynx, true);
        vu_result.setVariableState(milk, false);
        vu_result.setVariableState(meat, false);
        vu_result.setVariableState(stick, false);
        vu_result.setVariableState(macku, true);
        str.clear();
        str.assign("or(is_avatar(_*_) is_pet(_*_))");
        runProcedureAndComboScriptsWildCard(str, vu31, vu_result);

        vu_result.setVariableState(wynx, true);
        vu_result.setVariableState(milk, true);
        vu_result.setVariableState(meat, true);
        vu_result.setVariableState(stick, true);
        vu_result.setVariableState(macku, true);
        str.clear();
        str.assign("not(near(id_meat id_stick))");
        runProcedureAndComboScriptsWildCard(str, vu35, vu_result);

        vu_result.setVariableState(wynx, true);
        vu_result.setVariableState(milk, true);
        vu_result.setVariableState(meat, true);
        vu_result.setVariableState(stick, true);
        vu_result.setVariableState(macku, true);
        str.clear();
        str.assign("near(id_meat id_stick)");
        runProcedureAndComboScriptsWildCard(str, vu351, vu_result);

        vu_result.setVariableState(wynx, false);
        vu_result.setVariableState(milk, true);
        vu_result.setVariableState(meat, false);
        vu_result.setVariableState(stick, false);
        vu_result.setVariableState(macku, false);
        str.clear();
        str.assign("and(is_drinkable(_*_) not(near(_*_ id_stick)))");
        runProcedureAndComboScriptsWildCard(str, vu4, vu_result);


        vu_result.setVariableState(wynx, false);
        vu_result.setVariableState(milk, false);
        vu_result.setVariableState(meat, false);
        vu_result.setVariableState(stick, false);
        vu_result.setVariableState(macku, false);

        // wrong command
        str.clear();
        str.assign("and(is_drinkable(_*_) near(_*_ meat))");
        runProcedureAndComboScriptsWildCard(str, vu4, vu_result);

        vu_result.setVariableState(wynx, false);
        vu_result.setVariableState(milk, false);
        vu_result.setVariableState(meat, false);
        vu_result.setVariableState(stick, true);
        vu_result.setVariableState(macku, false);
        str.clear();
        str.assign("and(is_pickupable(_*_) is_movable(_*_) is_small(_*_))");
        runProcedureAndComboScriptsWildCard(str, vu5, vu_result);

        vu_result.setVariableState(wynx, false);
        vu_result.setVariableState(milk, false);
        vu_result.setVariableState(meat, false);
        vu_result.setVariableState(stick, false);
        vu_result.setVariableState(macku, false);
        str.clear();
        str.assign("and(is_drinkable(_*_) is_pickupable(_*_))");
        runProcedureAndComboScriptsWildCard(str, vu6, vu_result);

        // the values will be all true at end, even with the negative general
        // result since the wild card wont be evaluated and he
        vu_result.setVariableState(wynx, true);
        vu_result.setVariableState(milk, true);
        vu_result.setVariableState(meat, true);
        vu_result.setVariableState(stick, true);
        vu_result.setVariableState(macku, true);
        str.clear();
        str.assign("and(is_fearful(id_Macku) 0<( +(get_current_action_repetition -3)) is_last_pet_schema(beg_to_target_action action_success _*_))");
        runProcedureAndComboScriptsWildCard(str, vu7, vu_result);

        vu_result.setVariableState(wynx, false);
        vu_result.setVariableState(milk, false);
        vu_result.setVariableState(meat, false);
        vu_result.setVariableState(stick, false);
        vu_result.setVariableState(macku, false);
        str.clear();
        str.assign("and(is_fearful(id_Macku) is_owner(_*_ id_Macku) 0<( +(get_current_action_repetition -1)) is_last_pet_schema(beg_to_target_action  action_success _*_))");
        runProcedureAndComboScriptsWildCard(str, vu8, vu_result);

        vu_result.setVariableState(wynx, false);
        vu_result.setVariableState(milk, false);
        vu_result.setVariableState(meat, false);
        vu_result.setVariableState(stick, false);
        vu_result.setVariableState(macku, false);
        str.clear();
        str.assign("and(is_aggressive(id_Macku) near(id_Macku _*_) is_there_relation(anger id_Macku _*_) is_there_relation(enemy id_Macku _*_))");
        runProcedureAndComboScriptsWildCard(str, vu9, vu_result);


        //the following tests test OR wild_card case
        //in all possible ways
        vu_result.setVariableState(wynx, false);
        vu_result.setVariableState(milk, false);
        vu_result.setVariableState(meat, false);
        vu_result.setVariableState(stick, false);
        vu_result.setVariableState(macku, false);
        str.clear();
        str.assign("or(false false)");
        runProcedureAndComboScriptsWildCard(str, vu10, vu_result);

        vu_result.setVariableState(wynx, true);
        vu_result.setVariableState(milk, true);
        vu_result.setVariableState(meat, true);
        vu_result.setVariableState(stick, true);
        vu_result.setVariableState(macku, true);
        str.clear();
        str.assign("or(true true)");
        runProcedureAndComboScriptsWildCard(str, vu11, vu_result);

        vu_result.setVariableState(wynx, true);
        vu_result.setVariableState(milk, true);
        vu_result.setVariableState(meat, true);
        vu_result.setVariableState(stick, true);
        vu_result.setVariableState(macku, true);
        str.clear();
        str.assign("or(false true)");
        runProcedureAndComboScriptsWildCard(str, vu12, vu_result);

        vu_result.setVariableState(wynx, true);
        vu_result.setVariableState(milk, true);
        vu_result.setVariableState(meat, true);
        vu_result.setVariableState(stick, true);
        vu_result.setVariableState(macku, true);
        str.clear();
        str.assign("or(true false)");
        runProcedureAndComboScriptsWildCard(str, vu13, vu_result);

        vu_result.setVariableState(wynx, false);
        vu_result.setVariableState(milk, false);
        vu_result.setVariableState(meat, false);
        vu_result.setVariableState(stick, false);
        vu_result.setVariableState(macku, true);
        str.clear();
        str.assign("or(false is_pet(_*_))");
        runProcedureAndComboScriptsWildCard(str, vu14, vu_result);

    }

    void testGoto() {
        logger().setLevel(Logger::FINE);
        logger().setPrintToStdoutFlag(true);
        std::string str("goto_obj(random_pet 2)");
        runProcedureInCombo(str, id::action_success);
    }

    void testChase() {
        std::string str("chase");
        //it's working, but there is a loop unti object go away.
        //      runProcedureAndComboScripts(str, id::action_success);
    }

    void testFunction1() {
        std::string str("function1");
        runProcedureAndComboScripts(str, id::action_success);
    }

    void runProcedureAndComboScripts(std::string cmd, vertex vResult) {

        cout << "Start (" << cmd.c_str() << ")" << std::endl;

        combo::combo_tree tree;

        stringstream ss(cmd);
        // ss >> tree;
        AvatarCombo::operator>>(ss, tree);

        //charge scripts
        cpr.instantiateProcedureCalls(tree, true);

        vector<vertex> arguments ;
        Procedure::ComboInterpreter interpreter(*ppai);
        Procedure::RunningProcedureId runningId = interpreter.runProcedure(tree, arguments);
        while (! interpreter.isFinished(runningId)) {
            interpreter.run(NULL);
            sender->processSentMessage();
        }

        if (!interpreter.isFailed(runningId)) {
            vertex result = interpreter.getResult(runningId);
            std::cout << "Result (" << cmd.c_str() << ") = " << result << std::endl;
            TS_ASSERT(true);
            //if (result != id::null_vertex && vResult != id::null_vertex) {

            if (is_builtin(result)) {
                TS_ASSERT(get_builtin(result) == vResult);
            }
            if (is_definite_object(result)) {
                TS_ASSERT(get_definite_object(result) == vResult);
            }
            if (is_action_result(result)) {
                TS_ASSERT(get_action(result) == vResult);
            }
        } else {
            std::cout << "Failed (" << cmd.c_str() << ") = " << std::endl;
            TS_ASSERT(false);
        }
    }

    void runProcedureAndComboScriptsRandom(std::string cmd, bool is_bool_obj) {

        cout << "Start (" << cmd.c_str() << ")" << std::endl;

        combo::combo_tree tree;

        stringstream ss(cmd);
        // ss >> tree;
        AvatarCombo::operator>>(ss, tree);

        //charge scripts
        cpr.instantiateProcedureCalls(tree, true);


        vector<vertex> arguments ;
        Procedure::ComboInterpreter interpreter(*ppai);
        Procedure::RunningProcedureId runningId = interpreter.runProcedure(tree, arguments);
        while (! interpreter.isFinished(runningId)) {
            interpreter.run(NULL);
            sender->processSentMessage();
        }

        if (!interpreter.isFailed(runningId)) {
            vertex result = interpreter.getResult(runningId);
            std::cout << "Result (" << cmd.c_str() << ") = " << result << std::endl;
            TS_ASSERT(true);
            //if (result != id::null_vertex && vResult != id::null_vertex) {
            if (is_bool_obj) {

                if (is_builtin(result)) {
                    TS_ASSERT(get_builtin(result) == id::logical_true ||
                              get_builtin(result) == id::logical_false);
                } else {
                    TS_ASSERT(false);
                }

            } else {

                if (is_builtin(result)) {
                    TS_ASSERT(get_builtin(result) != id::logical_true &&
                              get_builtin(result) != id::logical_false);
                } else {
                    TS_ASSERT(false);
                }
            }

        } else {
            std::cout << "Failed (" << cmd.c_str() << ") = " << std::endl;
            TS_ASSERT(false);
        }
    }

    void runProcedureAndComboScriptsWildCard(std::string cmd, combo::variable_unifier& vu, combo::variable_unifier& vu_result) {

        cout << "Start (" << cmd.c_str() << ")" << std::endl;

        combo::combo_tree tree;
        stringstream ss(cmd);
        // ss >> tree;
        AvatarCombo::operator>>(ss, tree);

        //charge scripts
        cpr.instantiateProcedureCalls(tree, true);

        vector<vertex> arguments ;
        Procedure::ComboInterpreter interpreter(*ppai);
        Procedure::RunningProcedureId runningId = interpreter.runProcedure(tree, arguments, vu);

        while (! interpreter.isFinished(runningId)) {
            interpreter.run(NULL);
            sender->processSentMessage();
        }

        if (!interpreter.isFailed(runningId)) {
            vertex result = interpreter.getResult(runningId);
            std::cout << "Result (" << cmd.c_str() << ") = " << result << std::endl;

            combo::variable_unifier vu_result_local = interpreter.getUnifierResult(runningId);

            if (is_builtin(result)) {
                TS_ASSERT(get_builtin(result) == id::logical_true ||
                          get_builtin(result) == id::logical_false);
            } else {
                TS_ASSERT(false);
                return;
            }

            if (get_builtin(result) == id::logical_true) {
                TS_ASSERT(!vu_result_local.empty());
                if (vu_result_local.isUpdated()) {
                    TS_ASSERT(vu_result_local.isOneVariableActive());
                } else {
                    TS_ASSERT(!vu_result_local.isOneVariableActive());
                }

            } else if (get_builtin(result) == id::logical_false) {
                TS_ASSERT(!vu_result_local.empty());
                // don't metter if is updated or not... in every case
                // there should be no variable active
                TS_ASSERT(!vu_result_local.isOneVariableActive());
            }

            combo::UnifierIt it;
            combo::UnifierIt local_it;

            for (it = vu_result.begin(), local_it = vu_result_local.begin();
                    it != vu_result.end() && local_it != vu_result_local.end();
                    it++, local_it++) {
                printf("expectd %s - got %s\n", it->first.c_str(),
                       local_it->first.c_str());
                printf("expectd %s - got %s\n", (it->second ? "true" : "false"), ((*local_it).second ? "true" : "false"));
                TS_ASSERT(it->first == local_it->first);
                TS_ASSERT(it->second == local_it->second);
            }

        } else {
            std::cout << "Failed (" << cmd.c_str() << ") = " << std::endl;
            TS_ASSERT(false);
        }
    }

};

