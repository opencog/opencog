/*
 * tests/embodiment/Control/Procedure/BuiltIn/PetRandomSchemaUTest.cxxtest
 *
 * Copyright (C) 2002-2009 Novamente LLC
 * All Rights Reserved
 * Author(s): Carlos Lopes
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include "PAI.h"
#include "PetRandomSchema.h"
#include "PopulateAtomSpace.h"

using namespace Procedure;

class PetRandomSchemaUTest :  public CxxTest::TestSuite
{

private:
    PopulateAtomSpace pop;

public:

    PetRandomSchemaUTest() {
    }

    ~PetRandomSchemaUTest() {
    }

    void setUp() {
    }

    void tearDown() {
    }

    void testRound01() {
        pop.addSpaceInfoMock(10, 10);
        pop.callUpdater();

        // random_edible
        PetRandomSchema re(pop.getPAI(), (string)"random_edible");
        std::vector<combo::vertex> args;
        combo::vertex result = re.execute(args);
        TS_ASSERT(boost::get<combo::definite_object>(result) == food ||
                  boost::get<combo::definite_object>(result) == ration);

        // random_drinkable
        PetRandomSchema rd(pop.getPAI(), (string)"random_drinkable");
        result = rd.execute(args);
        TS_ASSERT(boost::get<combo::definite_object>(result) == drink ||
                  boost::get<combo::definite_object>(result) == milk);

        // random_moving
        PetRandomSchema rm(pop.getPAI(), (string)"random_moving");
        result = rm.execute(args);
        TS_ASSERT(boost::get<combo::definite_object>(result) == id::null_obj);

        // random_friendly
        PetRandomSchema rf(pop.getPAI(), (string)"random_friendly");
        result = rf.execute(args);
        TS_ASSERT(boost::get<combo::definite_object>(result) == owner ||
                  boost::get<combo::definite_object>(result) == avatar);

        // random_small
        PetRandomSchema rs(pop.getPAI(), (string)"random_small");
        std::string resultString = boost::get<combo::definite_object>(rs.execute(args));
        TS_ASSERT(resultString == stick || resultString == doll ||
                  resultString == food  || resultString == ball ||
                  resultString == milk  || resultString == ration ||
                  resultString == drink);

        // random_movable - tudo que eh small eh movable
        PetRandomSchema rmv(pop.getPAI(), (string)"random_movable");
        resultString = boost::get<combo::definite_object>(rmv.execute(args));
        TS_ASSERT(resultString == stick || resultString == doll ||
                  resultString == food  || resultString == ball ||
                  resultString == milk  || resultString == ration ||
                  resultString == drink || resultString == owner ||
                  resultString == avatar);

        // random_pickupable
        PetRandomSchema rp(pop.getPAI(), (string)"random_pickupable");
        resultString = boost::get<combo::definite_object>(rp.execute(args));
        TS_ASSERT(resultString == stick || resultString == doll ||
                  resultString == food  || resultString == ball ||
                  resultString == milk  || resultString == ration ||
                  resultString == drink);


        PetRandomSchema rn(pop.getPAI(), (string)"random_noisy");
        resultString = boost::get<combo::definite_object>(rn.execute(args));
        TS_ASSERT(resultString == owner || resultString == avatar);

    }

    void testRound02() {
        pop.addSpaceInfoMock(40, 40);
        pop.callUpdater();

        // random_moving
        PetRandomSchema rm(pop.getPAI(), (string)"random_moving");
        std::vector<combo::vertex> args;
        combo::vertex result = rm.execute(args);
        TS_ASSERT(boost::get<combo::definite_object>(result) != id::null_obj);

        printf("************** %s ********************\n",
               ((std::string)(boost::get<combo::definite_object>(result))).c_str());
    }
};

