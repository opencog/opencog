/*
 * tests/embodiment/Control/Procedure/BuiltIn/AvatarActionSchemaUTest.cxxtest
 *
 * Copyright (C) 2002-2009 Novamente LLC
 * All Rights Reserved
 * Author(s): Welter Luigi
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/util/misc.h>
#include <opencog/embodiment/Control/Procedure/BuiltIn/AvatarActionSchema.h>
#include <tests/embodiment/Control/PerceptionActionInterface/ActionPlanSenderMock.h>
#include <tests/embodiment/Control/PerceptionActionInterface/AvatarInterfaceMock.h>
#include <opencog/embodiment/Control/EmbodimentConfig.h>

using namespace Procedure;
using namespace opencog::pai;
using namespace opencog::control;
using namespace opencog;
using namespace std;

class AvatarActionSchemaUTest :  public CxxTest::TestSuite
{
private:
    AtomSpace atomSpace; 

public:
    AvatarActionSchemaUTest() {
        config(EmbodimentConfig::embodimentCreateInstance, true);
    }

    ~AvatarActionSchemaUTest() {
    }

    void setUp() {
        std::vector<Handle> outgoing_list; 
        std::vector<Handle> empty_outgoing_list; 

        Handle h_concept_node = atomSpace.addNode(CONCEPT_NODE, "plan_selected_demand_goal"); 

        outgoing_list.clear(); 
        outgoing_list.push_back( atomSpace.addNode(PREDICATE_NODE, "EnergyDemandGoal") ); 
        outgoing_list.push_back( atomSpace.addLink(LIST_LINK, empty_outgoing_list) ); 
        Handle h_demand_evaluation_link = atomSpace.addLink(EVALUATION_LINK, outgoing_list); 

        outgoing_list.clear(); 
        outgoing_list.push_back(h_concept_node); 
        outgoing_list.push_back(h_demand_evaluation_link); 
        Handle h_demand_reference_link = atomSpace.addLink(REFERENCE_LINK, outgoing_list); 
        std::cout<<atomSpace.atomAsString(h_demand_reference_link); 
    }

    void tearDown() {
    }

    void testGetName() {
	config().set("ENABLE_ACTION_COLLECT", "false"); 
        FailureActionPlanSender ap;
        AvatarInterfaceMock pi;
        PAI pai(atomSpace, ap, pi);
        pi.setPAI(&pai);
        AvatarActionSchema stepForward(pai, ActionType::STEP_FORWARD());
        TS_ASSERT(!strcmp(stepForward.getName().c_str(), "STEP_FORWARD"));
    }

    void testExecuteOk() {
	config().set("ENABLE_ACTION_COLLECT", "false"); 
        std::list<ActionPlan> plans;
        OKActionPlanSender ap(plans);
        AvatarInterfaceMock pi;
        PAI pai(atomSpace, ap, pi);
        pi.setPAI(&pai);
        AvatarActionSchema stepForward(pai, ActionType::STEP_FORWARD());
        std::vector<combo::vertex> args(1, "Wynx");
        combo::vertex result = stepForward.execute(args);
        ActionPlanID* planId = boost::get<ActionPlanID>(&result);
        TS_ASSERT(planId);
        TS_ASSERT(!pai.isPlanFinished(*planId));
        TS_ASSERT(!plans.empty());
        TS_ASSERT(plans.front().getAction(1).getType() == ActionType::STEP_FORWARD());
    }

    void testExecuteFailure() {
	config().set("ENABLE_ACTION_COLLECT", "false"); 
        FailureActionPlanSender ap;
        AvatarInterfaceMock pi;
        PAI pai(atomSpace, ap, pi);
        pi.setPAI(&pai);
        AvatarActionSchema stepForward(pai, ActionType::STEP_FORWARD());
        AvatarActionSchema eat(pai, ActionType::EAT());

        // param exception
        std::vector<combo::vertex> args(1, "food");
        TS_ASSERT_THROWS(eat.execute(args), opencog::InvalidParamException&);

        // send exception
        std::vector<combo::vertex> args2(1, "Wynx");
        TS_ASSERT_THROWS(stepForward.execute(args2), opencog::RuntimeException&);
    }

};
