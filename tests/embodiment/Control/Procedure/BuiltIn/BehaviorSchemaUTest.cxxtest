/*
 * tests/embodiment/Control/Procedure/BuiltIn/BehaviorSchemaUTest.cxxtest
 *
 * Copyright (C) 2002-2009 Novamente LLC
 * All Rights Reserved
 * Author(s): Welter Luigi
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */


#include "ActionPlanSenderMock.h"
#include "AvatarInterfaceMock.h"

#include "BehaviorSchema.h"

using namespace Procedure;
using namespace opencog::pai;

#if defined( _WIN32) && !defined(__CYGWIN__)
typedef __int64 mytime_t;
#else
#include <inttypes.h> // int64_t
typedef int64_t mytime_t;
#endif

class BehaviorSchemaUTest :  public CxxTest::TestSuite
{

public:
    BehaviorSchemaUTest() {
    }

    ~BehaviorSchemaUTest() {
    }

    void setUp() {
    }

    void tearDown() {
    }

    /*
        void etName() {
            AtomSpace as;
            FailureActionPlanSender ap;
            AvatarInterfaceMock pi(as);
            PAI pai(as, ap, pi);

            PetBowlSchema  petBowl(pai);
     PetHomeSchema  petHome(pai);
     LastFoodPlaceSchema lastFoodPlace(pai);
     OwnerSchema  owner(pai);

            TS_ASSERT(!strcmp(.getName().c_str(), ActionType::STEP_FORWARD().getName().c_str()));
        }*/

    void testExecute() {
        AtomSpace as;
        std::list<ActionPlan> plans;
        OKActionPlanSender ap(plans);
        AvatarInterfaceMock pi(as);
        PAI pai(as, ap, pi);

        std::vector<combo::vertex> args(1, "Wynx");

        PetBowlSchema  petBowl(pai);
        PetHomeSchema  petHome(pai);
        LastFoodPlaceSchema lastFoodPlace(pai);
        OwnerSchema  owner(pai);

        IsSmallSchema  isSmall(pai);
        IsMovingSchema  isMoving(pai);
        IsFriendlySchema isFriendly(pai);
        IsNoiseObjSchema isNoiseObj(pai);
        IsTaggedPlaceSchema isPooPlaceSchema(pai, "POO");
        IsTaggedPlaceSchema isPeePlaceSchema(pai, "PEE");

        args.clear();
        combo::vertex v;
        v = petBowl.execute(args);

        args.clear();
        v = petHome.execute(args);

        args.clear();
        v = lastFoodPlace.execute(args);

        args.clear();
        v = owner.execute(args);

        args.clear();
        v = isSmall.execute(args);

        HandleSeq hs1b;
        hs1b.push_back(pai.getAtomSpace().addNode(CONCEPT_NODE, "obj223"));
        hs1b.push_back(pai.getAtomSpace().addNode(NODE, "goto"));
        hs1b.push_back(pai.getAtomSpace().addNode(NUMBER_NODE, "5"));
        hs1b.push_back(pai.getAtomSpace().addNode(NUMBER_NODE, "6"));
        hs1b.push_back(pai.getAtomSpace().addNode(NUMBER_NODE, "10"));
        Handle h0b =  pai.getAtomSpace().addLink(LIST_LINK, hs1b);

        HandleSeq hs2b;
        hs2b.push_back(pai.getAtomSpace().addNode(PREDICATE_NODE, "behaved"));
        hs2b.push_back(h0b);
        Handle h2 = pai.getAtomSpace().addLink(EVALUATION_LINK, hs2b);

        pai.getAtomSpace().addTimeInfo(h2, PAI::getCurrentTimestamp());
        args.push_back("obj223");
        v = isMoving.execute(args);
        TS_ASSERT(boost::get<combo::id::builtin>(v) == combo::id::logical_true);

        args.clear();
        args.push_back("obj224");
        v = isMoving.execute(args);

        TS_ASSERT(boost::get<combo::id::builtin>(v) == combo::id::logical_false);
        args.clear();

        HandleSeq hsF1;
        hsF1.push_back(pai.getAtomSpace().addNode(CONCEPT_NODE, "obj223"));
        Handle hF0 =  pai.getAtomSpace().addLink(LIST_LINK, hsF1);

        HandleSeq hsF2;
        hsF2.push_back(pai.getAtomSpace().addNode(PREDICATE_NODE, "is_friendly"));
        hsF2.push_back(hF0);
        Handle hF2 = pai.getAtomSpace().addLink(EVALUATION_LINK, hsF2);

        pai.getAtomSpace().addTimeInfo(hF2, PAI::getCurrentTimestamp());
        args.push_back("obj223");
        v = isFriendly.execute(args);
        TS_ASSERT(boost::get<combo::id::builtin>(v) == combo::id::logical_true);
        args.clear();
        args.push_back("obj224");
        v = isFriendly.execute(args);

        TS_ASSERT(boost::get<combo::id::builtin>(v) == combo::id::logical_false);

        args.clear();
        v = isNoiseObj.execute(args);

        args.clear();
        v = isPooPlaceSchema.execute(args);

        args.clear();
        v = isPeePlaceSchema.execute(args);
    }

};
