/*
 * tests/embodiment/Control/Procedure/actionsComboInterpreterUTest.cxxtest
 *
 * Copyright (C) 2002-2009 Novamente LLC
 * All Rights Reserved
 * Author(s): Elvys Borges
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */


#include "ComboInterpreterUTest.h"
#include <opencog/util/mt19937ar.h>
#include <opencog/embodiment/AvatarComboVocabulary/AvatarComboVocabulary.h>

using namespace opencog::pai;
using namespace AvatarCombo;
using namespace std;


class actionsComboInterpreterUTest :  public CxxTest::TestSuite , ComboInterpreterUTest
{

private:
    opencog::RandGen* rng;

public :

    actionsComboInterpreterUTest() {
        rng = new opencog::MT19937RandGen(0);

        logger().setPrintErrorLevelStdout();
    }

    ~actionsComboInterpreterUTest() {
        delete rng;
    }

    opencog::RandGen& getRandGen() {
        return *rng;
    }

    void setUp() {
        // Set selected demand goal
        std::vector<Handle> outgoing_list; 
        std::vector<Handle> empty_outgoing_list; 

        Handle h_concept_node = atomSpace->addNode(CONCEPT_NODE, "plan_selected_demand_goal"); 

        outgoing_list.clear(); 
        outgoing_list.push_back( atomSpace->addNode(PREDICATE_NODE, "EnergyDemandGoal") ); 
        outgoing_list.push_back( atomSpace->addLink(LIST_LINK, empty_outgoing_list) ); 
        Handle h_demand_evaluation_link = atomSpace->addLink(EVALUATION_LINK, outgoing_list); 

        outgoing_list.clear(); 
        outgoing_list.push_back(h_concept_node); 
        outgoing_list.push_back(h_demand_evaluation_link); 
        Handle h_demand_reference_link = atomSpace->addLink(REFERENCE_LINK, outgoing_list); 
        std::cout<<atomSpace->atomAsString(h_demand_reference_link); 
    }

    //void testGotoObject() {
    //    std::string str("goto_obj(nearest_object 2)");
    //    printf("rng = %p\n", &rng);
    //    runProcedureInCombo(str, id::action_success);
    //}

    //void testGoNearObj() {
    //    std::string str("water_bowl");
    //    runProcedureInCombo(str, PAIUtils::getInternalId("Water"));
    //    str.assign("gonear_obj(water_bowl 4)");
    //    runProcedureInCombo(str, id::action_success);
    //}

    //void testFollow() {
    //    // target duration speed
    //    std::string str("follow(nearest_object 10 2)");
    //    runProcedureInCombo(str, id::action_success);
    //}

    //void testStepTowards() {
    //    std::string str("step_towards(nearest_object TOWARDS)");
    //    runProcedureInCombo(str, id::action_success);
    //}

    //void testStepBackward() {
    //    std::string str("step_backward");
    //    runProcedureInCombo(str, id::action_success);
    //}

    //void testStepForward() {
    //    std::string str("step_forward");
    //    runProcedureInCombo(str, id::action_success);
    //}

    //void testRandomStep() {
    //    std::string str("random_step");
    //    runProcedureInCombo(str, id::action_success);
    //}

    //void testRotateLeft() {
    //    std::string str("rotate_left");
    //    runProcedureInCombo(str, id::action_success);
    //}

    //void testRotateRight() {
    //    std::string str("rotate_right");
    //    runProcedureInCombo(str, id::action_success);
    //}

    //void testJumpUp() {
    //    std::string str("jump_up");
    //    runProcedureInCombo(str, id::action_success);
    //}

    //void testJumpTowards() {
    //    std::string str("jump_towards(nearest_object)");
    //    runProcedureInCombo(str, id::action_success);
    //}

    //void testTurnToFace() {
    //    std::string str("turn_to_face(nearest_avatar)");
    //    runProcedureInCombo(str, id::action_success);
    //}

    //void testGoBehindObj() {
    //    std::string str("water_bowl");
    //    runProcedureInCombo(str, PAIUtils::getInternalId("Water"));

    //    str.assign("gobehind_obj(water_bowl 2)");
    //    runProcedureInCombo(str, id::action_success);
    //}

    //void testGoBehind() {
    //    std::string str("go_behind(nearest_object nearest_avatar 2)");
    //    runProcedureInCombo(str, id::action_success);
    //}

    //void testGrab() {
    //    std::string str("grab(nearest_pickupable)");
    //    runProcedureInCombo(str, id::action_success);
    //}

    //void testGrabNearest() {
    //    std::string str("grab_nearest");
    //    //   runProcedureInCombo(str, id::action_success);
    //}

    //void testNudge_to() {
    //    std::string str("nudge_to(nearest_movable nearest_pee_place)");
    //    runProcedureInCombo(str, id::action_success);
    //}

    //void testDrop() {
    //    std::string str("drop");
    //    runProcedureInCombo(str, id::action_success);
    //}

    //void testEat() {
    //    std::string str("eat(nearest_edible)");
    //    runProcedureInCombo(str, id::action_success);
    //}

    //void testDrink() {
    //    std::string str("drink(nearest_drinkable)");
    //    runProcedureInCombo(str, id::action_success);
    //}

    //void testSit() {
    //    std::string str("sit");
    //    runProcedureInCombo(str, id::action_success);
    //}

    //void testWidenEyes() {
    //    std::string str("widen_eyes");
    //    runProcedureInCombo(str, id::action_success);
    //}

    //void testSleep() {
    //    std::string str("sleep");
    //    runProcedureInCombo(str, id::action_success);
    //}

};
