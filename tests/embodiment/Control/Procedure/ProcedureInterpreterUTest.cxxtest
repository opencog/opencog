/*
 * tests/embodiment/Control/Procedure/ProcedureInterpreterUTest.cxxtest
 *
 * Copyright (C) 2002-2009 Novamente LLC
 * All Rights Reserved
 * Author(s): Welter Luigi
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/embodiment/Control/Procedure/ProcedureInterpreter.h>
#include <tests/embodiment/Control/PerceptionActionInterface/ActionPlanSenderMock.h>
#include <tests/embodiment/Control/PerceptionActionInterface/AvatarInterfaceMock.h>
#include <opencog/embodiment/Control/Procedure/BuiltIn/AvatarActionSchema.h>
#include <opencog/embodiment/Control/EmbodimentConfig.h>
#include <opencog/atomspace/AtomSpace.h>

using namespace Procedure;
using namespace opencog::pai;
using namespace opencog::control;
using namespace opencog;

class ProcedureInterpreterUTest :  public CxxTest::TestSuite
{

private:
    AtomSpace atomSpace; 

public:
    ProcedureInterpreterUTest() {
        config(EmbodimentConfig::embodimentCreateInstance, true);
	config().set("ENABLE_ACTION_COLLECT", "false"); 
    }

    ~ProcedureInterpreterUTest() {
    }

    void setUp() {
        std::vector<Handle> outgoing_list; 
        std::vector<Handle> empty_outgoing_list; 

        Handle h_concept_node = atomSpace.addNode(CONCEPT_NODE, "plan_selected_demand_goal"); 

        outgoing_list.clear(); 
        outgoing_list.push_back( atomSpace.addNode(PREDICATE_NODE, "EnergyDemandGoal") ); 
        outgoing_list.push_back( atomSpace.addLink(LIST_LINK, empty_outgoing_list) ); 
        Handle h_demand_evaluation_link = atomSpace.addLink(EVALUATION_LINK, outgoing_list); 

        outgoing_list.clear(); 
        outgoing_list.push_back(h_concept_node); 
        outgoing_list.push_back(h_demand_evaluation_link); 
        Handle h_demand_reference_link = atomSpace.addLink(REFERENCE_LINK, outgoing_list); 
        std::cout<<atomSpace.atomAsString(h_demand_reference_link); 
    }

    void tearDown() {

    }

    void testOk() {
        std::list<ActionPlan> plans;
        OKActionPlanSender ap(plans);
        AvatarInterfaceMock pi;
        PAI pai(atomSpace, ap, pi);
        pi.setPAI(&pai);
        std::vector<combo::vertex> arguments;
        AvatarActionSchema p(pai, ActionType::STEP_FORWARD());
        ProcedureInterpreter interpreter(pai);
        RunningProcedureID id = interpreter.runProcedure(p, arguments);
        //TS_ASSERT(interpreter.isFinished(id)); // it's finished because interpreter runs builtin procedures imediatelly
        TS_ASSERT(!interpreter.isFailed(id));
        interpreter.run(NULL);
#if 0 // TODO: Add pai.processPVPMessage(<action status message>) so that the action can be marked finished
        TS_ASSERT(interpreter.isFinished(id));
        TS_ASSERT(!interpreter.isFailed(id));
        combo::vertex result = interpreter.getResult(id);
        //cout << "result = '" << result << "'" << endl;
        TS_ASSERT(get<ActionPlanID>(&result));
        TS_ASSERT(get<ActionPlanID>(result) == "0");
        TS_ASSERT(!plans.empty());
        TS_ASSERT(plans.front().getAction(1).getType() == ActionType::STEP_FORWARD());
        interpreter.stopProcedure(id);
        TS_ASSERT(interpreter.isFinished(id));
        TS_ASSERT(!interpreter.isFailed(id));
#endif
    }

    void testFailure() {
        FailureActionPlanSender ap;
        AvatarInterfaceMock pi;
        PAI pai(atomSpace, ap, pi);
        pi.setPAI(&pai);
        std::vector<combo::vertex> arguments;
        AvatarActionSchema p(pai, ActionType::STEP_FORWARD());
        ProcedureInterpreter interpreter(pai);
        RunningProcedureID id = interpreter.runProcedure(p, arguments);
        //TS_ASSERT(interpreter.isFinished(id)); // it's finished because interpreter runs builtin procedures imediatelly
        TS_ASSERT(interpreter.isFailed(id));
        interpreter.run(NULL);
        TS_ASSERT(interpreter.isFailed(id));
#if 0// TODO: Add pai.processPVPMessage(<action status message>) so that the action can be marked finished
        TS_ASSERT(interpreter.isFinished(id));
        /* Cannot call getResult if the procedure has failed
               combo::vertex result = interpreter.getResult(id);
        //cout << "result = '" << result << "'" << endl;
               TS_ASSERT(get<combo::id::builtin>(&result));
               TS_ASSERT(get<combo::id::builtin>(result) == combo::id::null_vertex);
        */
        interpreter.stopProcedure(id);
        TS_ASSERT(interpreter.isFinished(id));
        TS_ASSERT(!interpreter.isFailed(id));
#endif
    }

};
