/*
 * tests/embodiment/Control/Procedure/BuiltInProcedureRepositoryUTest.cxxtest
 *
 * Copyright (C) 2002-2009 Novamente LLC
 * All Rights Reserved
 * Author(s): Welter Luigi
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/util/misc.h>
#include <opencog/embodiment/Control/Procedure/BuiltInProcedureRepository.h>
#include <tests/embodiment/Control/PerceptionActionInterface/ActionPlanSenderMock.h>
#include <tests/embodiment/Control/PerceptionActionInterface/AvatarInterfaceMock.h>
#include <opencog/embodiment/Control/EmbodimentConfig.h>

using namespace Procedure;
using namespace opencog::pai;
using namespace opencog::control;
using namespace opencog;
using namespace std;

class BuiltInProcedureRepositoryUTest :  public CxxTest::TestSuite
{

public:
    BuiltInProcedureRepositoryUTest() {
        config(EmbodimentConfig::embodimentCreateInstance, true);
	config().set("ENABLE_ACTION_COLLECT", "false"); 
    }

    ~BuiltInProcedureRepositoryUTest() {
    }

    void setUp() {
    }

    void tearDown() {
    }


    void testContains() {
        AtomSpace as;

        FailureActionPlanSender ap;
        AvatarInterfaceMock pi;
        PAI pai(as, ap, pi);
        pi.setPAI(&pai);
        BuiltInProcedureRepository rep(pai);
        TS_ASSERT(rep.contains(string("STEP_FORWARD")));
        TS_ASSERT(!rep.contains("non-existing-builtin-schema"));
    }

    void testGet() {
        AtomSpace as;

        FailureActionPlanSender ap;
        AvatarInterfaceMock pi;
        PAI pai(as, ap, pi);
        pi.setPAI(&pai);
        BuiltInProcedureRepository rep(pai);
        const BuiltInProcedure& proc = rep.get(string("STEP_FORWARD"));
        TS_ASSERT(proc.getName() == "STEP_FORWARD");
    }

};
