/*
 * tests/embodiment/Control/Procedure/isComboInterpreterUTest.cxxtest
 *
 * Copyright (C) 2002-2009 Novamente LLC
 * All Rights Reserved
 * Author(s): Elvys Borges
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */


#include <opencog/atomspace/SimpleTruthValue.h>

#include "ComboInterpreterUTest.h"
#include <opencog/util/mt19937ar.h>
#include <opencog/embodiment/Control/PerceptionActionInterface/PAIUtils.h>
#include <opencog/embodiment/AvatarComboVocabulary/AvatarComboVocabulary.h>
#include <opencog/embodiment/AtomSpaceExtensions/AtomSpaceUtil.h>
#include <fstream>
#include <iostream>


using namespace opencog::pai;
using namespace AvatarCombo;
using namespace std;

class isComboInterpreterUTest :  public CxxTest::TestSuite , ComboInterpreterUTest
{

private:
    opencog::RandGen* rng;
    bool combo_loaded;

public :

    isComboInterpreterUTest() {
	config().set("ENABLE_ACTION_COLLECT", "false"); 
        rng = new opencog::MT19937RandGen(0);
        combo_loaded = false;
    }

    ~isComboInterpreterUTest() {
        delete rng;
    }

    void load_combo_functions() {
        if (combo_loaded) return;
        string file_combo(PVP_XML_FILE_PATH "/scripts.combo");
        ifstream fin(file_combo.c_str());
        int n = cpr.loadFromStream(fin);
        cout << "loaded " << n << " combo functions from " << file_combo << std::endl;

        addFeelingsAndTraits();
        addRelations();
    }

    void addRelations() {
        Handle pet = atomSpace->getHandle(PET_NODE, PAIUtils::getInternalId("Macku"));
        if (pet == Handle::UNDEFINED) {
            std::cout << "Not able to find Macku" << std::endl;
            return;
        }

        Handle wynx = atomSpace->getHandle(AVATAR_NODE, PAIUtils::getInternalId("Wynx"));
        if (pet == Handle::UNDEFINED) {
            std::cout << "Not able to find Wynx" << std::endl;
            return;
        }

        SimpleTruthValue tv(0.6, 1.0);
        SimpleTruthValue tv2(0.4, 1.0);

        AtomSpaceUtil::setPredicateValue(*atomSpace, "friend", tv, pet, wynx);
        AtomSpaceUtil::setPredicateValue(*atomSpace, "curiosity", tv, pet, wynx);
        AtomSpaceUtil::setPredicateValue(*atomSpace, "anger", tv, pet, wynx);
        AtomSpaceUtil::setPredicateValue(*atomSpace, "enemy", tv, pet, wynx);

        AtomSpaceUtil::setPredicateValue(*atomSpace, "gratitude", tv2, pet, wynx);
        AtomSpaceUtil::setPredicateValue(*atomSpace, "love", tv2, pet, wynx);
        AtomSpaceUtil::setPredicateValue(*atomSpace, "fear", tv2, pet, wynx);
    }

    void addFeelingsAndTraits() {
        Handle pet = atomSpace->getHandle(PET_NODE, PAIUtils::getInternalId("Macku"));
        if (pet == Handle::UNDEFINED) {
            std::cout << "Not able to find Macku" << std::endl;
            return;
        }

        SimpleTruthValue tv(0.6, 1.0);
        SimpleTruthValue tv2(0.4, 1.0);

        // traits
        AtomSpaceUtil::setPredicateValue(*atomSpace, "curiosity", tv, pet);
        AtomSpaceUtil::setPredicateValue(*atomSpace, "fearfulness", tv, pet);
        AtomSpaceUtil::setPredicateValue(*atomSpace, "playfulness", tv, pet);
        AtomSpaceUtil::setPredicateValue(*atomSpace, "excitability", tv, pet);
        AtomSpaceUtil::setPredicateValue(*atomSpace, "friendliness", tv, pet);
        AtomSpaceUtil::setPredicateValue(*atomSpace, "aggressiveness", tv2, pet);
        AtomSpaceUtil::setPredicateValue(*atomSpace, "appreciativeness", tv2, pet);

        // feelings
        AtomSpaceUtil::setPredicateValue(*atomSpace, "fear", tv, pet);
        AtomSpaceUtil::setPredicateValue(*atomSpace, "love", tv, pet);
        AtomSpaceUtil::setPredicateValue(*atomSpace, "hate", tv, pet);
        AtomSpaceUtil::setPredicateValue(*atomSpace, "pride", tv2, pet);
        AtomSpaceUtil::setPredicateValue(*atomSpace, "anger", tv2, pet);
        AtomSpaceUtil::setPredicateValue(*atomSpace, "gratitude", tv2, pet);
        AtomSpaceUtil::setPredicateValue(*atomSpace, "happiness", tv, pet);
        AtomSpaceUtil::setPredicateValue(*atomSpace, "excitement", tv, pet);

        // add new one
        HandleSeq freqLink;
        freqLink.push_back(atomSpace->addNode(CONCEPT_NODE, "currentActionRepetition"));
        freqLink.push_back(atomSpace->addNode(NUMBER_NODE, "4"));

        atomSpace->addLink(FREQUENCY_LINK, freqLink);
    }

    void setUp() {
        load_combo_functions();
    }

    opencog::RandGen& getRandGen() {
        return *rng;
    }

    void testGets() {
        vertex v(0.8);

        string str("get_hunger(");
        str += PAIUtils::getInternalId("Macku");
        str += ")";
        runProcedureInCombo(str, v);

        str.assign("get_thirst(");
        str += PAIUtils::getInternalId("Macku");
        str += ")";
        runProcedureInCombo(str, v);

        str.assign("get_poo_urgency(");
        str += PAIUtils::getInternalId("Macku");
        str += ")";
        runProcedureInCombo(str, v);

        str.assign("get_pee_urgency(");
        str += PAIUtils::getInternalId("Macku");
        str += ")";
        runProcedureInCombo(str, v);

        str.assign("get_energy(");
        str += PAIUtils::getInternalId("Macku");
        str += ")";
        runProcedureInCombo(str, v);

        str.assign("get_fitness(");
        str += PAIUtils::getInternalId("Macku");
        str += ")";
        runProcedureInCombo(str, v);

        vertex v1(4.0);
        str.clear();
        str.assign("get_current_action_repetition");
        runProcedureInCombo(str, v1);

    }

    void testIsThereFriendRelation() {
        string str("is_there_relation(");
        str += "friend ";
        str += PAIUtils::getInternalId("Macku");
        str += " ";
        str += PAIUtils::getInternalId("Wynx");
        str += ")";
        runProcedureInCombo(str, id::logical_true);

        str.assign("is_there_relation(");
        str += "friend ";
        str += PAIUtils::getInternalId("Wynx");
        str += " ";
        str += PAIUtils::getInternalId("Macku");
        str += ")";
        runProcedureInCombo(str, id::logical_false);
    }

    void testIsThereCuriosityRelation() {
        string str("is_there_relation(");
        str += "curiosity ";
        str += PAIUtils::getInternalId("Macku");
        str += " ";
        str += PAIUtils::getInternalId("Wynx");
        str += ")";
        runProcedureInCombo(str, id::logical_true);

        str.assign("is_there_relation(");
        str += "curiosity ";
        str += PAIUtils::getInternalId("Wynx");
        str += " ";
        str += PAIUtils::getInternalId("Macku");
        str += ")";
        runProcedureInCombo(str, id::logical_false);
    }

    void testIsThereAngerRelation() {
        string str("is_there_relation(");
        str += "anger ";
        str += PAIUtils::getInternalId("Macku");
        str += " ";
        str += PAIUtils::getInternalId("Wynx");
        str += ")";
        runProcedureInCombo(str, id::logical_true);

        str.assign("is_there_relation(");
        str += "anger ";
        str += PAIUtils::getInternalId("Wynx");
        str += " ";
        str += PAIUtils::getInternalId("Macku");
        str += ")";
        runProcedureInCombo(str, id::logical_false);
    }

    void testIsThereEnemyRelation() {
        string str("is_there_relation(");
        str += "enemy ";
        str += PAIUtils::getInternalId("Macku");
        str += " ";
        str += PAIUtils::getInternalId("Wynx");
        str += ")";
        runProcedureInCombo(str, id::logical_true);

        str.assign("is_there_relation(");
        str += "enemy ";
        str += PAIUtils::getInternalId("Wynx");
        str += " ";
        str += PAIUtils::getInternalId("Macku");
        str += ")";
        runProcedureInCombo(str, id::logical_false);
    }

    void testIsThereGratitudeRelation() {
        string str("is_there_relation(");
        str += "gratitude ";
        str += PAIUtils::getInternalId("Macku");
        str += " ";
        str += PAIUtils::getInternalId("Wynx");
        str += ")";
        runProcedureInCombo(str, id::logical_false);

        str.assign("is_there_relation(");
        str += "gratitude ";
        str += PAIUtils::getInternalId("Wynx");
        str += " ";
        str += PAIUtils::getInternalId("Macku");
        str += ")";
        runProcedureInCombo(str, id::logical_false);
    }

    void testIsThereLoveRelation() {
        string str("is_there_relation(");
        str += "love ";
        str += PAIUtils::getInternalId("Macku");
        str += " ";
        str += PAIUtils::getInternalId("Wynx");
        str += ")";
        runProcedureInCombo(str, id::logical_false);

        str.assign("is_there_relation(");
        str += "love ";
        str += PAIUtils::getInternalId("Wynx");
        str += " ";
        str += PAIUtils::getInternalId("Macku");
        str += ")";
        runProcedureInCombo(str, id::logical_false);
    }

    void testIsThereFearRelation() {
        string str("is_there_relation(");
        str += "fear ";
        str += PAIUtils::getInternalId("Macku");
        str += " ";
        str += PAIUtils::getInternalId("Wynx");
        str += ")";
        runProcedureInCombo(str, id::logical_false);

        str.assign("is_there_relation(");
        str += "fear ";
        str += PAIUtils::getInternalId("Wynx");
        str += " ";
        str += PAIUtils::getInternalId("Macku");
        str += ")";
        runProcedureInCombo(str, id::logical_false);
    }

    void testIsAggressive() {
        string str("is_aggressive(");
        str += PAIUtils::getInternalId("Macku");
        str += ")";
        runProcedureInCombo(str, id::logical_false);

        str.assign("is_aggressive(");
        str += PAIUtils::getInternalId("Wynx");
        str += ")";
        runProcedureInCombo(str, id::logical_false);
    }

    void testIsCurious() {
        string str("is_curious(");
        str += PAIUtils::getInternalId("Macku");
        str += ")";
        runProcedureInCombo(str, id::logical_true);

        str.assign("is_curious(");
        str += PAIUtils::getInternalId("Wynx");
        str += ")";
        runProcedureInCombo(str, id::logical_false);
    }

    void testIsPlayful() {
        string str("is_playful(");
        str += PAIUtils::getInternalId("Macku");
        str += ")";
        runProcedureInCombo(str, id::logical_true);

        str.assign("is_playful(");
        str += PAIUtils::getInternalId("Wynx");
        str += ")";
        runProcedureInCombo(str, id::logical_false);
    }

    void testIsFriendly() {
        string str("is_friendly(");
        str += PAIUtils::getInternalId("Macku");
        str += ")";
        runProcedureInCombo(str, id::logical_true);

        str.assign("is_friendly(");
        str += PAIUtils::getInternalId("Wynx");
        str += ")";
        runProcedureInCombo(str, id::logical_false);
    }

    void testIsFearful() {
        string str("is_fearful(");
        str += PAIUtils::getInternalId("Macku");
        str += ")";
        runProcedureInCombo(str, id::logical_true);

        str.assign("is_fearful(");
        str += PAIUtils::getInternalId("Wynx");
        str += ")";
        runProcedureInCombo(str, id::logical_false);
    }

    void testIsAppreciative() {
        string str("is_appreciative(");
        str += PAIUtils::getInternalId("Macku");
        str += ")";
        runProcedureInCombo(str, id::logical_false);

        str.assign("is_appreciative(");
        str += PAIUtils::getInternalId("Wynx");
        str += ")";
        runProcedureInCombo(str, id::logical_false);
    }

    void testIsExcitable() {
        string str("is_excitable(");
        str += PAIUtils::getInternalId("Macku");
        str += ")";
        runProcedureInCombo(str, id::logical_true);

        str.assign("is_excitable(");
        str += PAIUtils::getInternalId("Wynx");
        str += ")";
        runProcedureInCombo(str, id::logical_false);
    }

    void testIsHappy() {
        string str("is_happy(");
        str += PAIUtils::getInternalId("Macku");
        str += ")";
        runProcedureInCombo(str, id::logical_true);

        str.assign("is_happy(");
        str += PAIUtils::getInternalId("Wynx");
        str += ")";
        runProcedureInCombo(str, id::logical_false);
    }

    void testIsFear() {
        string str("is_fear(");
        str += PAIUtils::getInternalId("Macku");
        str += ")";
        runProcedureInCombo(str, id::logical_true);

        str.assign("is_fear(");
        str += PAIUtils::getInternalId("Wynx");
        str += ")";
        runProcedureInCombo(str, id::logical_false);
    }

    void testIsProud() {
        string str("is_proud(");
        str += PAIUtils::getInternalId("Macku");
        str += ")";
        runProcedureInCombo(str, id::logical_false);

        str.assign("is_proud(");
        str += PAIUtils::getInternalId("Wynx");
        str += ")";
        runProcedureInCombo(str, id::logical_false);
    }

    void testIsLovely() {
        string str("is_lovely(");
        str += PAIUtils::getInternalId("Macku");
        str += ")";
        runProcedureInCombo(str, id::logical_true);

        str.assign("is_lovely(");
        str += PAIUtils::getInternalId("Wynx");
        str += ")";
        runProcedureInCombo(str, id::logical_false);
    }

    void testIsHateful() {
        string str("is_hateful(");
        str += PAIUtils::getInternalId("Macku");
        str += ")";
        runProcedureInCombo(str, id::logical_true);

        str.assign("is_hateful(");
        str += PAIUtils::getInternalId("Wynx");
        str += ")";
        runProcedureInCombo(str, id::logical_false);
    }

    void testIsAngry() {
        string str("is_angry(");
        str += PAIUtils::getInternalId("Macku");
        str += ")";
        runProcedureInCombo(str, id::logical_false);

        str.assign("is_angry(");
        str += PAIUtils::getInternalId("Wynx");
        str += ")";
        runProcedureInCombo(str, id::logical_false);
    }

    void testIsGrateful() {
        string str("is_grateful(");
        str += PAIUtils::getInternalId("Macku");
        str += ")";
        runProcedureInCombo(str, id::logical_false);

        str.assign("is_grateful(");
        str += PAIUtils::getInternalId("Wynx");
        str += ")";
        runProcedureInCombo(str, id::logical_false);
    }

    void testIsExcited() {
        string str("is_excited(");
        str += PAIUtils::getInternalId("Macku");
        str += ")";
        runProcedureInCombo(str, id::logical_true);

        str.assign("is_excited(");
        str += PAIUtils::getInternalId("Wynx");
        str += ")";
        runProcedureInCombo(str, id::logical_false);
    }

    void testIsEdible() {
        string str("is_edible(");
        str += PAIUtils::getInternalId("meat");
        str += ")";
        runProcedureInCombo(str, id::logical_true);

        str.assign("is_edible(");
        str += PAIUtils::getInternalId("Stick");
        str += ")";
        runProcedureInCombo(str, id::logical_false);
    }

    void testIsMovable() {
        string str("is_movable(");
        str += PAIUtils::getInternalId("Stick");
        str += ")";
        runProcedureInCombo(str, id::logical_true);

        str.assign("is_movable(");
        str += PAIUtils::getInternalId("wall");
        str += ")";
        runProcedureInCombo(str, id::logical_false);
    }

    void testIsPickupable() {
        string str("is_pickupable(");
        str += PAIUtils::getInternalId("Stick");
        str += ")";
        runProcedureInCombo(str, id::logical_true);

        str.assign("is_pickupable(");
        str += PAIUtils::getInternalId("wall");
        str += ")";
        runProcedureInCombo(str, id::logical_false);
    }

    void testIsDrinkable() {
        string str("is_drinkable(");
        str += PAIUtils::getInternalId("Stick");
        str += ")";
        runProcedureInCombo(str, id::logical_false);
    }

    void testIsAvatar() {
        string str("is_avatar(");
        str += PAIUtils::getInternalId("Wynx");
        str += ")";
        runProcedureInCombo(str, id::logical_true);
        str.assign("is_avatar(");
        str += PAIUtils::getInternalId("Macku");
        str += ")";
        runProcedureInCombo(str, id::logical_false);
    }

    void testIsPet() {
        string str("is_pet(");
        str += PAIUtils::getInternalId("32f56136-7973-4703-915b-6ec1bf5c67fa");
        str += ")";
        runProcedureInCombo(str, id::logical_true);
        str.assign("is_pet(");
        str += PAIUtils::getInternalId("Wynx");
        str += ")";
        runProcedureInCombo(str, id::logical_false);
    }

    void testIsSmall() {
        string str("is_small(");
        str += PAIUtils::getInternalId("Stick");
        str += ")";
        runProcedureInCombo(str, id::logical_true);

        str.assign("is_small(");
        str += PAIUtils::getInternalId("meat");
        str += ")";
        runProcedureInCombo(str, id::logical_true);
        //owner
        str.assign("is_small(");
        str += PAIUtils::getInternalId("Wynx");
        str += ")";
        runProcedureInCombo(str, id::logical_false);
    }

    void testIsMoving() {
        string str("is_moving(");
        str += PAIUtils::getInternalId("meat");
        str += ")";
        runProcedureInCombo(str, id::logical_false);
    }

    void testIsPooPlace() {
        string str("is_poo_place(");
        str += PAIUtils::getInternalId("wall");
        str += ")";
        runProcedureInCombo(str, id::logical_true);
    }

    void testIsPeePlace() {
        string str("is_pee_place(");
        str += PAIUtils::getInternalId("wall");
        str += ")";
        runProcedureInCombo(str, id::logical_true);
    }

    void testIsNoise() {
        string str("is_noisy(");
        str += PAIUtils::getInternalId("Stick");
        str += ")";
        runProcedureInCombo(str, id::logical_false);
    }

    void testIsNull() {
        string str("is_null(");
        str += PAIUtils::getInternalId("wall");
        str += ")";
        runProcedureInCombo(str, id::logical_false);
    }

    void testNear() {
        string str("near(");
        str += PAIUtils::getInternalId("milk ");
        str += PAIUtils::getInternalId("meat");
        str += ")";
        runProcedureInCombo(str, id::logical_false);

        // oposite
        str.assign("near(");
        str += PAIUtils::getInternalId("meat ");
        str += PAIUtils::getInternalId("milk");
        str += ")";
        runProcedureInCombo(str, id::logical_false);

        // not near
        str.assign("near(");
        str += PAIUtils::getInternalId("milk ");
        str += PAIUtils::getInternalId("Food");
        str += ")";
        runProcedureInCombo(str, id::logical_false);

        str.assign("near(");
        str += PAIUtils::getInternalId("Food ");
        str += PAIUtils::getInternalId("milk");
        str += ")";
        runProcedureInCombo(str, id::logical_false);

    }

//    void testNext() {
//        string str("next(");
//        str += PAIUtils::getInternalId("milk ");
//        str += PAIUtils::getInternalId("meat");
//        str += ")";
//        runProcedureInCombo(str, id::logical_true);
//
//        // oposite
//        str.assign("next(");
//        str += PAIUtils::getInternalId("meat ");
//        str += PAIUtils::getInternalId("milk");
//        str += ")";
//        runProcedureInCombo(str, id::logical_true);
//
//        // not near
//        str.assign("next(");
//        str += PAIUtils::getInternalId("milk ");
//        str += PAIUtils::getInternalId("Food");
//        str += ")";
//        runProcedureInCombo(str, id::logical_false);
//
//        str.assign("next(");
//        str += PAIUtils::getInternalId("Food ");
//        str += PAIUtils::getInternalId("milk");
//        str += ")";
//        runProcedureInCombo(str, id::logical_false);
//
//    }

//    void testisProportionalNext() {
//        string str("is_proportional_next(");
//        str += PAIUtils::getInternalId("milk ");
//        str += PAIUtils::getInternalId("meat ");
//        str += "3 0.93)";
//        runProcedureInCombo(str, id::logical_true);
//
//        // oposite
//        str.assign("is_proportional_next(");
//        str += PAIUtils::getInternalId("meat ");
//        str += PAIUtils::getInternalId("milk ");
//        str += "4 0.93)";
//        runProcedureInCombo(str, id::logical_true);
//
//        str.assign("is_proportional_next(");
//        str += PAIUtils::getInternalId("meat ");
//        str += PAIUtils::getInternalId("milk ");
//        str += "2 0.93878)";
//        runProcedureInCombo(str, id::logical_true);
//
//        str.assign("is_proportional_next(");
//        str += PAIUtils::getInternalId("meat ");
//        str += PAIUtils::getInternalId("milk ");
//        str += "0 0.6)";
//        runProcedureInCombo(str, id::logical_false);
//
//        str.assign("is_proportional_next(");
//        str += PAIUtils::getInternalId("meat ");
//        str += PAIUtils::getInternalId("milk ");
//        str += "1 0.6)";
//        runProcedureInCombo(str, id::logical_false);
//
//        // not near
//        str.assign("is_proportional_next(");
//        str += PAIUtils::getInternalId("milk ");
//        str += PAIUtils::getInternalId("Food ");
//        str += "3 0.6)";
//        runProcedureInCombo(str, id::logical_false);
//
//        str.assign("is_proportional_next(");
//        str += PAIUtils::getInternalId("Food ");
//        str += PAIUtils::getInternalId("milk ");
//        str += "4 0.5)";
//        runProcedureInCombo(str, id::logical_false);
//
//    }

};


