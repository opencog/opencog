#############################################
###########   HELPER FUNCTIONS    ###########
#############################################

randbool(0) := 0<(+(rand -0.5))

# $1 < $2
less_than(2) := 0<(+($2 *(-1 $1)))

# $1 > $2
greater_than(2) := 0<(+($1 *(-1 $2)))

# $1 == $2
equal_to(2) := and(not(less_than($1 $2)) not(greater_than($1 $2)))

true_threshold(0) := 0.5

# ----------------------- Traits helper functions ----------------
is_aggressive(1) :=
    greater_than(get_aggressiveness($1) true_threshold)

is_curious(1) :=
    greater_than(get_curiosity($1) true_threshold)

is_playful(1) :=
    greater_than(get_playfulness($1) true_threshold)

is_friendly(1) :=
    greater_than(get_friendliness($1) true_threshold)

is_fearful(1) :=
    greater_than(get_fearfulness($1) true_threshold)

is_appreciative(1) :=
    greater_than(get_appreciativeness($1) true_threshold)

is_excitable(1) := 
    greater_than(get_excitability($1) true_threshold)

# ----------------------- Emo Feelings helper functions ----------
is_happy(1) :=
    greater_than(get_happiness($1) true_threshold)

is_fear(1) :=
    greater_than(get_fear($1) true_threshold)

is_proud(1) :=
    greater_than(get_pride($1) true_threshold)

is_lovely(1) :=
    greater_than(get_love($1) true_threshold)

is_hateful(1) :=
    greater_than(get_hate($1) true_threshold)

is_angry(1) :=
    greater_than(get_anger($1) true_threshold)

is_grateful(1) := 
    greater_than(get_gratitude($1) true_threshold)

is_excited(1) :=
    greater_than(get_excitability($1) true_threshold)


###
# Seek food locally, and whines if no food is around:
###
seek_food_locally(0) := 
action_boolean_if(exists_edible
		  and_seq(goto_obj(random_edible 2)
			  eat(nearest_edible))
		  whine)

###
# Sniff butt if available (preferably pet-butt, otherwise avatar-butt):
###
sniff_butt(0) := 
action_boolean_if(exists_pet
		  and_seq(goto_obj(random_pet 2)
		          sniff_pet_part(nearest_pet 
					 BUTT))
		  action_boolean_if(exists_avatar
			    	    and_seq(goto_obj(random_avatar 2)
 				            sniff_avatar_part(nearest_avatar 
							      BUTT))
				    action_success))

###
# Chase pets or avatars (which one is chosen by a coin-flip):
###
randbool(0) := 0<(+(rand -0.5))
#indefinite_object_if has not been implemented yet so that procedure is disactivated
#rand_pet_or_avatar(0) := 
#indefinite_object_if(exists_pet
#           indefinite_object_if(exists_avatar
#	              indefinite_object_if(randbool
#				 random_avatar
#		                 random_pet)
#		      random_pet)
#	   random_avatar)
#chase_helper(1) :=
#boolean_while(not(is_null($1))
#	      and_seq(bark
#		      goto_obj($1 2)
#		      growl))
#chase(0) := chase_helper(rand_pet_or_avatar)

###
# Pick up something, carry it a while, then put it down:
###
random_step(0) := 
and_seq(action_boolean_if(randbool
		          rotate_left
		          rotate_right)
	action_boolean_if(randbool
		          step_forward
		          step_backward))
pickup_carry_put_down(0) :=
and_seq(goto_obj(random_pickupable 2)
	grab(nearest_pickupable)
	random_step
	random_step
	random_step
        drop)

###
# Nudge something around (uses random_step defined above):
###
#nudge_forward does not exist anymore so that function disactiavated
#nudge_around(0) :=
#and_seq(goto_obj(random_movable 2)
#	nudge_forward(nearest_movable)
#	random_step
#	goto_obj(nearest_movable 2)
#	nudge_forward(nearest_movable)
#	random_step
#	goto_obj(nearest_movable 2)
#	nudge_forward(nearest_movable))

### 
# No functional language code sample is complete without a ridiculously
# inefficient implementation of factorial
###
factorial(1) := contin_if(0<($1) *($1 factorial(+($1 -1))) 1)

###
# And an even less efficient implementation of fibonacci
###
fibonacci(1) := 
contin_if(0<($1)
           contin_if(0<(+($1 -1))
	              +(fibonacci(+($1 -1)) 
        	        fibonacci(+($1 -2)))
	              1)
          0)

#function to test combo interpreter
function1(0) := wander_searching_food
    

          	

#Sit in a particular spot or on an object
sit_small_object(0) :=
		action_boolean_if(exists_small
			and_seq(goto_obj(nearest_small 2) sit)
		    sit
		)
          
#Lie down - lie_down crash, so I chaged to stay
rotate_lie_down(0) :=
		and_seq(random_step random_step 
			rotate_left rotate_left rotate_left rotate_left 
			lie_down )

#Come with the owner
come_with_owner(0) :=
	action_boolean_if(is_null(owner)
		wag
		and_seq(goto_obj(owner 2) 
			boolean_while(is_moving(owner) goto_obj(owner 2))
		)
	)

#Heel (walk right next to the owner and sit when owner stops walking)
heel_sit(0) :=
	action_boolean_if(is_null(owner)
		sit
		and_seq(goto_obj(owner 2) 
			boolean_while(not(is_null(owner))
				action_boolean_if(is_moving(owner) goto_obj(owner 2) sit)
			)
		)
	)


#Find a specific object by name and either bring it to the owner, or
# come back and lead the owner to it

#Guard stuff


#Looking for food. If does not exist, ramdom_step_searching until find food
wander_searching_food(0) :=
	and_seq(
    	boolean_while(not(exists_edible) random_step_searching)
        goto_obj(nearest_edible 2) wag eat(nearest_edible)
    )


#Looking for water. If does not exist, ramdom_step_searching until find water
wander_searching_water(0) :=
    and_seq(
    	boolean_while(not(exists_drinkable) random_step_searching)
        and_seq(goto_obj(nearest_drinkable 2) wag drink(nearest_drinkable))
    )


#walk random, but more forward 
random_step_lib(0) := 
	and_seq( 
		action_boolean_if(0<(+(rand -0.5)) 
        	action_boolean_if(0<(+(rand -0.5))
          		rotate_left rotate_right
          	)
        	step_forward
      	)
		action_boolean_if(0<(+(rand -0.3))
	        step_forward
        	step_backward
        )
	)
	
#walk random, but more forward and more right and does not rotate every time
random_step_searching(0) := 
	and_seq(
    	action_boolean_if(0<(+(rand -0.5)) 
        	action_boolean_if(0<(+(rand -0.6))
          		rotate_left rotate_right
          	)
        	step_forward
        )
      	action_boolean_if(0<(+(rand -0.3))
        	step_forward
	        step_backward
	    )
	)

#pick  something, carry and drop after some number of random_step.
#pick_grab is defined nowhere so that procedure is disactivated
#pick_carry_drop_chew_grab(0) :=
#	action_boolean_if(0<(+(rand -0.666))
#    	pick_carry_drop
#    	action_boolean_if(0<(+(rand -0.5))
#	    	pick_chew
#     		pick_grab
#      	)
#    )

#pick  something, carry and drop after some number of random_step.
pick_carry_drop(0) :=
	and_seq(goto_obj(random_pickupable 2)
    	grab(nearest_pickupable)
    	wag
    	random_step_lib
    	random_step_lib
    	random_step_lib
    	boolean_while(0<(+(rand -0.5)) 
        	random_step_lib
        )
    	drop
    	wag
    )

#pick  something, carry and drop after some number of random_step.
pick_chew(0) :=
	and_seq(goto_obj(random_pickupable 2)
    	lick_at(nearest_pickupable)
    	lie_down
    	chew(nearest_pickupable)
    	wag
    	chew(nearest_pickupable)
    	wag
    	chew(nearest_pickupable)
    	wag
    	boolean_while(0<(+(rand -0.5)) 
      		and_seq(
        		chew(nearest_pickupable)
        		wag
        	)
        )
    	drop
    	wag
    )

#pick  something, carry and drop after some number of random_step.
pick_grabs_scratch(0) :=
	and_seq(goto_obj(random_pickupable 2)
    	grab(nearest_pickupable)
    	wag
    	scratch_other(nearest_pickupable)
    	wag
    	grab(nearest_pickupable)
    	lean_rock_dance
    	wag
    	boolean_while(0<(+(rand -0.5)) 
      		and_seq(
        		scratch_other(nearest_pickupable)
        		wag
        	)
        )
    	drop
    	wag
    )

#chase animals or people. follow obj (the parameter) for 15s. The object initially would be
#moving rapidly, but nowadays I can not know it.
chase_animal_people(1) :=
	action_boolean_if(
		boolean_if(
			is_avatar($1) true is_pet($1)
		)
		and_seq(growl_at($1) 
			bark follow($1 10 2) 
      		bark
      	)
      	sit
	)



#Seek food locally, and whines if no food is around:
seek_food_whine(0) :=
	action_boolean_if(exists_edible
		and_seq(goto_obj(random_edible 2)
			eat(nearest_edible)
		)
        whine
	)

#pay_attention and sit
pay_attention(0) :=
	action_boolean_if(is_null(owner)
		and_seq(turn_to_face(owner) sit)
		sit
	)

#Looking for pee place. If does not exist, ramdom_step_searching until find one
wander_searching_pee_place(0) :=
    and_seq(
    	boolean_while(not(exists_pee_place) random_step_searching)
        and_seq(goto_obj(nearest_pee_place 2) wag pee)
    )

#Looking for poo place. If does not exist, ramdom_step_searching until find one
wander_searching_poo_place(0) :=
    and_seq(
    	boolean_while(not(exists_poo_place) random_step_searching)
        and_seq(goto_obj(nearest_poo_place 2) wag poo)
    )

#not_hungry
not_hungry(0) := not(0<(+(get_hunger(self) -0.4)))

#dummy mutually recursive schemata
A(1) := contin_boolean_if(0<($1) *(B($1) 0.5) 0)
B(1) := contin_boolean_if(0<($1) +(A($1) -0.5) 0)
