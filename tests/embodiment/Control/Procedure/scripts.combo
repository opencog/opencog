#############################################
###########   HELPER FUNCTIONS    ###########
#############################################

randbool(0) := 0<(+(rand -0.5))

# $1 < $2
less_than(2) := 0<(+($2 *(-1 $1)))

# $1 > $2
greater_than(2) := 0<(+($1 *(-1 $2)))

# $1 == $2
equal_to(2) := and(not(less_than($1 $2)) not(greater_than($1 $2)))

true_threshold(0) := 0.5

# ----------------------- Traits helper functions ----------------
is_aggressive(1) :=
    greater_than(get_aggressiveness($1) true_threshold)

is_curious(1) :=
    greater_than(get_curiosity($1) true_threshold)

is_playful(1) :=
    greater_than(get_playfulness($1) true_threshold)

is_friendly(1) :=
    greater_than(get_friendliness($1) true_threshold)

is_fearful(1) :=
    greater_than(get_fearfulness($1) true_threshold)

is_appreciative(1) :=
    greater_than(get_appreciativeness($1) true_threshold)

is_excitable(1) := 
    greater_than(get_excitability($1) true_threshold)

# ----------------------- Emo Feelings helper functions ----------
is_happy(1) :=
    greater_than(get_happiness($1) true_threshold)

is_fear(1) :=
    greater_than(get_fear($1) true_threshold)

is_proud(1) :=
    greater_than(get_pride($1) true_threshold)

is_lovely(1) :=
    greater_than(get_love($1) true_threshold)

is_hateful(1) :=
    greater_than(get_hate($1) true_threshold)

is_angry(1) :=
    greater_than(get_anger($1) true_threshold)

is_grateful(1) := 
    greater_than(get_gratitude($1) true_threshold)

is_excited(1) :=
    greater_than(get_excitability($1) true_threshold)


###
# Seek food locally, and whines if no food is around:
###
seek_food_locally(0) := 
action_boolean_if(exists_edible
		  and_seq(goto_obj(random_edible 2)
			  eat(nearest_edible))
		  whine)

###
# Pick up something, carry it a while, then put it down:
###
random_step(0) := 
and_seq(action_boolean_if(randbool
		          rotate_left
		          rotate_right)
	action_boolean_if(randbool
		          step_forward
		          step_backward))
pickup_carry_put_down(0) :=
and_seq(goto_obj(random_pickupable 2)
	grab(nearest_pickupable)
	random_step
	random_step
	random_step
        drop)

### 
# No functional language code sample is complete without a ridiculously
# inefficient implementation of factorial
###
factorial(1) := contin_if(0<($1) *($1 factorial(+($1 -1))) 1)

###
# And an even less efficient implementation of fibonacci
###
fibonacci(1) := 
contin_if(0<($1)
           contin_if(0<(+($1 -1))
	              +(fibonacci(+($1 -1)) 
        	        fibonacci(+($1 -2)))
	              1)
          0)

#function to test combo interpreter
function1(0) := wander_searching_food

#Sit in a particular spot or on an object
sit_small_object(0) :=
		action_boolean_if(exists_small
			and_seq(goto_obj(nearest_small 2) sit)
		    sit
		)

#Find a specific object by name and either bring it to the owner, or
# come back and lead the owner to it

#Guard stuff

#walk random, but more forward 
random_step_lib(0) := 
	and_seq( 
		action_boolean_if(0<(+(rand -0.5)) 
        	action_boolean_if(0<(+(rand -0.5))
          		rotate_left rotate_right
          	)
        	step_forward
      	)
		action_boolean_if(0<(+(rand -0.3))
	        step_forward
        	step_backward
        )
	)
	
#walk random, but more forward and more right and does not rotate every time
random_step_searching(0) := 
	and_seq(
    	action_boolean_if(0<(+(rand -0.5)) 
        	action_boolean_if(0<(+(rand -0.6))
          		rotate_left rotate_right
          	)
        	step_forward
        )
      	action_boolean_if(0<(+(rand -0.3))
        	step_forward
	        step_backward
	    )
	)

#pay_attention and sit
pay_attention(0) :=
	action_boolean_if(is_null(owner)
		and_seq(turn_to_face(owner) sit)
		sit
	)

#not_hungry
not_hungry(0) := not(0<(+(get_hunger(self) -0.4)))

#dummy mutually recursive schemata
A(1) := contin_boolean_if(0<($1) *(B($1) 0.5) 0)
B(1) := contin_boolean_if(0<($1) +(A($1) -0.5) 0)
