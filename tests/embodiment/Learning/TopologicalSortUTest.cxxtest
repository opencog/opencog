/*
 * tests/embodiment/Learning/TopologicalSortUTest.cxxtest
 *
 * Copyright (C) 2002-2009 Novamente LLC
 * All Rights Reserved
 * Author(s): Novamente team
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */
#include <cxxtest/TestSuite.h>
#include <vector>
#include <cassert>
#include "util/digraph.h"

using namespace std;
using namespace opencog;
using namespace boost;

class TopologicalSortUTest : public CxxTest::TestSuite
{
public:
    void test1() {
        opencog::seed_rand(time(NULL));
        digraph foo(100);
        for (int i = 1;i < 100;++i) //a chain
            foo.insert(i - 1, i);
        vector<int> out;
        randomized_topological_sort(foo, back_inserter(out));
        TS_ASSERT(is_sorted(out.begin(), out.end()));

        std::vector<int> bla(make_counting_iterator(0),
                             make_counting_iterator(100));
        TS_ASSERT_EQUALS(out, bla);
    }

    void test2() {
        digraph foo(100);
        for (int i = 0;i < 50;++i)
            foo.insert(i*2, i*2 + 1);
        vector<int> out;
        randomized_topological_sort(foo, back_inserter(out));
        for (int i = 0;i < 100;++i)
            TS_ASSERT(find(out.begin(), out.end(), i) != out.end());
        for (int i = 0;i < 50;++i)
            TS_ASSERT(find(out.begin(), out.end(), 2*i) <
                      find(out.begin(), out.end(), 2*i + 1));
    }
};
