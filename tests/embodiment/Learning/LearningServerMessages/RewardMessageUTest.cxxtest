/*
 * tests/embodiment/Learning/LearningServerMessages/RewardMessageUTest.cxxtest
 *
 * Copyright (C) 2002-2009 Novamente LLC
 * All Rights Reserved
 * Author(s): Carlos Lopes
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <string.h>
#include <opencog/embodiment/Learning/LearningServerMessages/RewardMessage.h>

using namespace opencog::learningserver::messages;

static const std::string from  = "PET";
static const std::string to    = "LS";
static const std::string trick = "fetch";
static const double reward = -1.0;
static const std::string candidate = "do fetch";
static std::vector<std::string> trickArguments;

class RewardMessageUTest : public CxxTest::TestSuite
{

private:
    RewardMessage * rm;

public:

    RewardMessageUTest() {
        rm = new RewardMessage(from, to, trick, trickArguments, candidate, reward);
    }

    ~RewardMessageUTest() {
        delete(rm);
    }

    void testLoadPlainTextRepresentation() {
        RewardMessage rm2(from, to);

        rm2.loadPlainTextRepresentation(rm->getPlainTextRepresentation());
        TS_ASSERT(rm2.getSchema() == trick);
        TS_ASSERT_DELTA(rm2.getReward(), reward, 0.0001);
        TS_ASSERT(rm2.getCandidateSchema() == candidate);
    }

    void testGettersSetters() {
        rm->setSchema("rollOver");
        rm->setCandidateSchema("do roll over");
        rm->setReward(1.0);

        TS_ASSERT(rm->getSchema() == "rollOver");
        TS_ASSERT_DELTA(rm->getReward(), 1.0, 0.0001);
        TS_ASSERT(rm->getCandidateSchema() == "do roll over");
    }

    void setUp() {
    }

    void tearDown() {
    }

}; // class
