/*
 * tests/embodiment/Learning/LearningServerMessages/SchemaMessageUTest.cxxtest
 *
 * Copyright (C) 2002-2009 Novamente LLC
 * All Rights Reserved
 * Author(s): Carlos Lopes
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <string.h>
#include <sstream>
#include <opencog/comboreduct/type_checker/type_tree.h>

#include <opencog/embodiment/Control/MessagingSystem/MessageFactory.h>
#include <opencog/embodiment/Learning/LearningServerMessages/SchemaMessage.h>
#include <opencog/embodiment/AvatarComboVocabulary/AvatarComboVocabulary.h>

using namespace AvatarCombo;
using namespace opencog::messaging;
using namespace opencog::learningserver::messages;

static const std::string from  = "PET";
static const std::string to    = "LS";
static const std::string trick = "fetch";
static const std::string trickCandidate = "fetch_1";
static const std::string comboSchema = "and_seq($1 $2 and_seq($3 or_seq($4 $5 or_seq($6 $7 exec_seq($8 $9 exec_seq($10))))))";

class SchemaMessageUTest : public CxxTest::TestSuite
{

private:
    SchemaMessage * sm;
    opencog::combo::combo_tree schema;

    std::string toLoad;
    std::string loaded;

public:

    SchemaMessageUTest() {
        std::stringstream ss(comboSchema);
        // ss >> schema;
        AvatarCombo::operator>>(ss, schema);
    }

    ~SchemaMessageUTest() {
        delete(sm);
    }

    void testConstructor() {

        std::string invalidMsg = "trick_name***";
        SchemaMessage message(from, to);
        TS_ASSERT_THROWS(SchemaMessage(from, to, invalidMsg), opencog::InvalidParamException&);
    }

    void testGetPlainTextRepresentation()
    {
        sm = new SchemaMessage(from, to, schema, trick);
        TS_ASSERT(sm);

        toLoad = sm->getPlainTextRepresentation();
    }

    void testLoadPlainTextRepresentation()
    {
        SchemaMessage sm2(from, to);

        sm2.loadPlainTextRepresentation(toLoad.c_str());
        TS_ASSERT(sm2.getSchemaName() == sm->getSchemaName());
        TS_ASSERT(sm2.getSchema() == sm->getSchema());

        opencog::combo::combo_tree comboSchema2 = sm2.getComboSchema();

        opencog::combo::type_tree comboType = infer_type_tree(comboSchema2);
        bool ct = is_well_formed(comboType);

        TS_ASSERT(ct);
    }

    void setUp() {
    }

    void tearDown() {
    }

}; // class
