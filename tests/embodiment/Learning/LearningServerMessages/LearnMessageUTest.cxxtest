/*
 * tests/embodiment/Learning/LearningServerMessages/LearnMessageUTest.cxxtest
 *
 * Copyright (C) 2002-2009 Novamente LLC
 * All Rights Reserved
 * Author(s): Carlos Lopes
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/persist/xml/FileXMLBufferReader.h>
#include <opencog/persist/xml/NMXmlParser.h>

#include <string.h>
#include <stdlib.h>

#include <opencog/atomspace/AtomSpace.h>
#include <opencog/embodiment/Learning/Filter/EntityRelevanceFilter.h>
#include <opencog/embodiment/Learning/LearningServerMessages/LearnMessage.h>

#define OBJ_LENGTH 0.5
#define OBJ_WIDTH 0.5
#define OBJ_HEIGHT 0.5
#define OBJ_YAW 0.0

using namespace opencog::learningserver::messages;

static const std::string from   = "PET";
static const std::string to     = "LS";
static const std::string trick  = "fetch";
static const std::string pet    = "pet";
static const std::string owner  = "Ben";
static const std::string avatar = "avatar";
static const std::string ball   = "ball";
static const std::string nonSL  = "nonSL";
static const std::vector<std::string> trickArgs;

class LearnMessageUTest : public CxxTest::TestSuite
{

private:


    std::string toLoad;

public:

    static LearnMessageUTest *createSuite() {
        return new LearnMessageUTest( );
    }
    static void destroySuite( LearnMessageUTest *suite ) {
        delete suite;
    }

    LearnMessageUTest() {
    }

    ~LearnMessageUTest() {
    }

    void setUp() {
    }

    void tearDown() {
    }

    void testCreateMessage() {

        AtomSpace * atomSpace;
        LearnMessage * learnMessage;

        atomSpace = new AtomSpace();

        Handle n1 = atomSpace->addNode(NODE, nonSL);
        Handle n2 = atomSpace->addNode(PET_NODE, pet);
        Handle n3 = atomSpace->addNode(OBJECT_NODE, ball);
        Handle n4 = atomSpace->addNode(AVATAR_NODE, avatar);
        Handle n5 = atomSpace->addNode(AVATAR_NODE, owner);

        atomSpace->getSpaceServer().addSpaceInfo(true, n1, 1, 100, 100, 0, OBJ_LENGTH, OBJ_WIDTH, OBJ_HEIGHT, OBJ_YAW);
        atomSpace->getSpaceServer().addSpaceInfo(true, n2, 1, 100, 100, 0, OBJ_LENGTH, OBJ_WIDTH, OBJ_HEIGHT, OBJ_YAW);
        atomSpace->getSpaceServer().addSpaceInfo(true, n3, 1, 102, 102, 0, OBJ_LENGTH, OBJ_WIDTH, OBJ_HEIGHT, OBJ_YAW);
        atomSpace->getSpaceServer().addSpaceInfo(true, n4, 1, 104, 104, 0, OBJ_LENGTH, OBJ_WIDTH, OBJ_HEIGHT, OBJ_YAW);
        atomSpace->getSpaceServer().addSpaceInfo(true, n5, 1, 106, 106, 0, OBJ_LENGTH, OBJ_WIDTH, OBJ_HEIGHT, OBJ_YAW);

        //to satisfy an assert of LearnMessage
        Handle trick_h = atomSpace->addNode(CONCEPT_NODE, trick);
        Temporal t(1, 100);
        atomSpace->getTimeServer().addTimeInfo(trick_h, t);

        learnMessage = new LearnMessage(from, to, trick, trickArgs, owner, avatar, *atomSpace);
        TS_ASSERT(learnMessage);
        TS_ASSERT(learnMessage->getSchema() == trick);
        TS_ASSERT(learnMessage->getOwnerId() == owner);
        TS_ASSERT(learnMessage->getAvatarId() == avatar);

        toLoad = learnMessage->getPlainTextRepresentation();
        //printf("%s\n", learnMessage->getSchemaActions().c_str());
        //printf("%s\n", toLoad.c_str());

        delete learnMessage;
        delete atomSpace;
    }

    void testDefiniteObjects() {
        AtomSpace * atomSpace = new AtomSpace();

        LearnMessage * lm = new LearnMessage(from, to);

        lm->loadPlainTextRepresentation(toLoad.c_str());

        lm->populateAtomSpace(*atomSpace);

        Handle petHandle = atomSpace->getHandle(PET_NODE, pet);
        TS_ASSERT(petHandle != Handle::UNDEFINED);

        Handle avatarHandle = atomSpace->getHandle(AVATAR_NODE, avatar);
        TS_ASSERT(avatarHandle != Handle::UNDEFINED);

        Handle ownerHandle = atomSpace->getHandle(AVATAR_NODE, owner);
        TS_ASSERT(ownerHandle != Handle::UNDEFINED);

        Handle ballHandle = atomSpace->getHandle(OBJECT_NODE, ball);
        TS_ASSERT(ballHandle != Handle::UNDEFINED);

        EntityRelevanceFilter filter(atomSpace->getSpaceServer().getLatestMap(), pet, owner);
        std::set<std::string> definiteObjects = filter.getEntities();

        // should be 5 since SpaceMap does not have knowledge about the types
        // of the objects inside the map
        TS_ASSERT(definiteObjects.size() == 5);
        printf("definiteObjects.size %zu\n", definiteObjects.size());
        TS_ASSERT(definiteObjects.find(ball) != definiteObjects.end());
        TS_ASSERT(definiteObjects.find("owner") != definiteObjects.end());
        TS_ASSERT(definiteObjects.find("self") != definiteObjects.end());
    }

    void testLoadPlainTextRepresentation() {
        AtomSpace * atomSpace = new AtomSpace();

        LearnMessage * lm = new LearnMessage(from, to);

        lm->loadPlainTextRepresentation(toLoad.c_str());
        TS_ASSERT(lm);
        TS_ASSERT(lm->getSchema() == trick);
        TS_ASSERT(lm->getAvatarId() == avatar);
        TS_ASSERT(lm->getOwnerId() == owner);

        std::string loaded = lm->getPlainTextRepresentation();
        TS_ASSERT(toLoad == loaded);

        lm->populateAtomSpace(*atomSpace);
        TS_ASSERT(atomSpace);

        delete lm;
    }

}; // class
