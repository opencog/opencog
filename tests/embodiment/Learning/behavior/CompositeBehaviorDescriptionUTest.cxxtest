/*
 * tests/embodiment/Learning/behavior/CompositeBehaviorDescriptionUTest.cxxtest
 *
 * Copyright (C) 2002-2009 Novamente LLC
 * All Rights Reserved
 * Author(s): Andre Senna
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */


#include <opencog/embodiment/Learning/behavior/CompositeBehaviorDescription.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/util/hashing.h>

using namespace behavior;

class CompositeBehaviorDescriptionUTest : public CxxTest::TestSuite
{

private:

public:

    CompositeBehaviorDescriptionUTest() {

    }

    void setUp() {
    }

    void tearDown() {
    }

    void test_equals() {

        AtomSpace atomSpace;

        Handle h0 = atomSpace.addNode(PREDICATE_NODE, "P0");
        Handle h1 = atomSpace.addNode(PREDICATE_NODE, "P1");

        Temporal t0(0, 6);
        Temporal t1(0, 4);

        CompositeBehaviorDescription bd1(&atomSpace);
        CompositeBehaviorDescription bd2(&atomSpace);
        CompositeBehaviorDescription bd3(&atomSpace);
        CompositeBehaviorDescription bd4(&atomSpace);
        CompositeBehaviorDescription bd5(&atomSpace);
        CompositeBehaviorDescription bd6(&atomSpace);
        CompositeBehaviorDescription bd7(&atomSpace);
        CompositeBehaviorDescription bd8(&atomSpace);

        bd1.addPredicate(h0, t0);
        bd2.addPredicate(h0, t1);
        bd3.addPredicate(h1, t0);
        bd4.addPredicate(h1, t1);

        bd5.addPredicate(h0, t0);
        bd5.addPredicate(h1, t1);

        bd6.addPredicate(h0, t1);
        bd6.addPredicate(h1, t0);

        bd7.addPredicate(h1, t1);
        bd7.addPredicate(h0, t0);

        bd8.addPredicate(h1, t0);
        bd8.addPredicate(h0, t1);

        TS_ASSERT(  bd1.equals(bd1));
        TS_ASSERT(! bd1.equals(bd2));
        TS_ASSERT(! bd1.equals(bd3));
        TS_ASSERT(! bd1.equals(bd4));
        TS_ASSERT(! bd1.equals(bd5));
        TS_ASSERT(! bd1.equals(bd6));
        TS_ASSERT(! bd1.equals(bd7));
        TS_ASSERT(! bd1.equals(bd8));

        TS_ASSERT(! bd2.equals(bd1));
        TS_ASSERT(  bd2.equals(bd2));
        TS_ASSERT(! bd2.equals(bd3));
        TS_ASSERT(! bd2.equals(bd4));
        TS_ASSERT(! bd2.equals(bd5));
        TS_ASSERT(! bd2.equals(bd6));
        TS_ASSERT(! bd2.equals(bd7));
        TS_ASSERT(! bd2.equals(bd8));

        TS_ASSERT(! bd3.equals(bd1));
        TS_ASSERT(! bd3.equals(bd2));
        TS_ASSERT(  bd3.equals(bd3));
        TS_ASSERT(! bd3.equals(bd4));
        TS_ASSERT(! bd3.equals(bd5));
        TS_ASSERT(! bd3.equals(bd6));
        TS_ASSERT(! bd3.equals(bd7));
        TS_ASSERT(! bd3.equals(bd8));

        TS_ASSERT(! bd4.equals(bd1));
        TS_ASSERT(! bd4.equals(bd2));
        TS_ASSERT(! bd4.equals(bd3));
        TS_ASSERT(  bd4.equals(bd4));
        TS_ASSERT(! bd4.equals(bd5));
        TS_ASSERT(! bd4.equals(bd6));
        TS_ASSERT(! bd4.equals(bd7));
        TS_ASSERT(! bd4.equals(bd8));

        TS_ASSERT(! bd5.equals(bd1));
        TS_ASSERT(! bd5.equals(bd2));
        TS_ASSERT(! bd5.equals(bd3));
        TS_ASSERT(! bd5.equals(bd4));
        TS_ASSERT(  bd5.equals(bd5));
        TS_ASSERT(! bd5.equals(bd6));
        //TS_ASSERT(  bd5.equals(bd7));
        TS_ASSERT(! bd5.equals(bd8));

        TS_ASSERT(! bd6.equals(bd1));
        TS_ASSERT(! bd6.equals(bd2));
        TS_ASSERT(! bd6.equals(bd3));
        TS_ASSERT(! bd6.equals(bd4));
        TS_ASSERT(! bd6.equals(bd5));
        TS_ASSERT(  bd6.equals(bd6));
        TS_ASSERT(! bd6.equals(bd7));
        //TS_ASSERT(  bd6.equals(bd8));

        TS_ASSERT(! bd7.equals(bd1));
        TS_ASSERT(! bd7.equals(bd2));
        TS_ASSERT(! bd7.equals(bd3));
        TS_ASSERT(! bd7.equals(bd4));
        //TS_ASSERT(  bd7.equals(bd5));
        TS_ASSERT(! bd7.equals(bd6));
        TS_ASSERT(  bd7.equals(bd7));
        TS_ASSERT(! bd7.equals(bd8));

        TS_ASSERT(! bd8.equals(bd1));
        TS_ASSERT(! bd8.equals(bd2));
        TS_ASSERT(! bd8.equals(bd3));
        TS_ASSERT(! bd8.equals(bd4));
        TS_ASSERT(! bd8.equals(bd5));
        //TS_ASSERT(  bd8.equals(bd6));
        TS_ASSERT(! bd8.equals(bd7));
        TS_ASSERT(  bd8.equals(bd8));


    }

    void test_buildTimelineRepresentation() {

        AtomSpace atomSpace;
        CompositeBehaviorDescription behaviorDescription(&atomSpace);

        Handle h0 = atomSpace.addNode(PREDICATE_NODE, "P0");
        Handle h1 = atomSpace.addNode(PREDICATE_NODE, "P1");
        Handle h2 = atomSpace.addNode(PREDICATE_NODE, "P2");
        Handle h3 = atomSpace.addNode(PREDICATE_NODE, "P3");
        Handle h4 = atomSpace.addNode(PREDICATE_NODE, "P4");
        Handle h5 = atomSpace.addNode(PREDICATE_NODE, "PX");

        Temporal t0(0, 6);
        Temporal t1(0, 4);
        Temporal t2(9, 12);
        Temporal t3(9, 16);
        Temporal t4(12, 16);
        Temporal t5(4, 4);

        behaviorDescription.addPredicate(h0, t0);
        behaviorDescription.addPredicate(h1, t1);
        behaviorDescription.addPredicate(h2, t2);
        behaviorDescription.addPredicate(h3, t3);
        behaviorDescription.addPredicate(h4, t4);
        behaviorDescription.addPredicate(h5, t5);

        if (behaviorDescription.toStringTimeline() != "{({P0,P1,PX},4),({P0,PX},2),({},3),({P2,P3},3),({P3,P4},4)}") {
            printf("Got a different string:\n%s\n", behaviorDescription.toStringTimeline().c_str());
        }
        TS_ASSERT(behaviorDescription.toStringTimeline() == "{({P0,P1,PX},4),({P0,PX},2),({},3),({P2,P3},3),({P3,P4},4)}");
    }

    void test_addpredicate() {

        AtomSpace atomSpace;
        CompositeBehaviorDescription behaviorDescription(&atomSpace);

        Handle h1 = atomSpace.addNode(PREDICATE_NODE, "P1");
        Temporal t1(0, 1);
        behaviorDescription.addPredicate(h1, t1);

        Handle h2 = atomSpace.addNode(PREDICATE_NODE, "P2");
        Temporal t2(1, 3);
        behaviorDescription.addPredicate(h2, t2);

        TS_ASSERT(behaviorDescription.toStringHandles() == "{(P1,(UNIFORM,0,1)),(P2,(UNIFORM,1,3))}");
        //printf("%s\n", behaviorDescription.toStringHandles().c_str());
    }


}; // class
