/*
 * tests/embodiment/Learning/behavior/BDRetrieverUTest.cxxtest
 *
 * Copyright (C) 2002-2009 Novamente LLC
 * All Rights Reserved
 * Author(s): Nil Geisweiller
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */


#include <opencog/atomspace/AtomSpace.h>
#include <opencog/spacetime/atom_types.h>
#include <opencog/spacetime/TimeServer.h>

#include <opencog/comboreduct/combo/vertex.h>

#include <opencog/embodiment/AtomSpaceExtensions/atom_types.h>
#include <opencog/embodiment/Learning/behavior/CompositeBehaviorDescription.h>
#include <opencog/embodiment/Learning/LearningServer/AtomSpaceWorldProvider.h>
#include <opencog/embodiment/AvatarComboVocabulary/AvatarComboVocabulary.h>
#include <opencog/embodiment/Learning/behavior/BDRetriever.h>


#define TIME_INTERVAL 100
#define BEHAVED_STR "behaved"

using namespace AvatarCombo;
using namespace std;
using namespace behavior;

class BDRetrieverUTest : public CxxTest::TestSuite
{
public:
    BDRetrieverUTest() {
        server(SpaceTimeCogServer::createInstance);
    }

    void test_retrieveLastExemplarFromAtomSpace() {
        string obj_str = "stick";
        string avatar_str = "Paul";
        //fill atomSpace with dummy_object and dummy_avatar definite object
        AtomSpace& atomSpace = atomspace();

        Handle obj_h = atomSpace.addNode(OBJECT_NODE, obj_str);
        Handle avatar_h = atomSpace.addNode(AVATAR_NODE, avatar_str);
        //fill atomSpace with behaved concept node
        Handle behaved_h = atomSpace.addNode(PREDICATE_NODE, BEHAVED_STR);
        //fill atomSpace with pet atom
        string pet_str = "Fido";
        Handle pet_h = atomSpace.addNode(PET_NODE, pet_str);
        //fill atomSpace with actions goto_obj grab and drop
        stringstream ss_goto_obj;
        ss_goto_obj << get_instance(id::goto_obj);
        Handle goto_obj_h = atomSpace.addNode(GROUNDED_SCHEMA_NODE,
                                              ss_goto_obj.str());
        stringstream ss_grab;
        ss_grab << get_instance(id::grab);
        Handle grab_h = atomSpace.addNode(GROUNDED_SCHEMA_NODE, ss_grab.str());
        //create the ListLink atoms
        //for goto_obj(dummy_object)
        HandleSeq a1_seq;
        a1_seq.push_back(pet_h);
        a1_seq.push_back(goto_obj_h);
        a1_seq.push_back(avatar_h);
        Handle a1_h = atomSpace.addLink(LIST_LINK, a1_seq);
        //for grab(dummy_object)
        HandleSeq a2_seq;
        a2_seq.push_back(pet_h);
        a2_seq.push_back(grab_h);
        a2_seq.push_back(obj_h);
        Handle a2_h = atomSpace.addLink(LIST_LINK, a2_seq);
        //create the BDs, that is atoms (EvalLink(behaved ....))
        //for goto_obj(dummy_object)
        HandleSeq b1_seq;
        b1_seq.push_back(behaved_h);
        b1_seq.push_back(a1_h);
        Handle bd1_h = atomSpace.addLink(EVALUATION_LINK, b1_seq);
        //for grab(dummy_object)
        HandleSeq b2_seq;
        b2_seq.push_back(behaved_h);
        b2_seq.push_back(a2_h);
        Handle bd2_h = atomSpace.addLink(EVALUATION_LINK, b2_seq);
        //add AtTimeLink
        //for goto_obj(dummy_object)
        Handle t1_h = timeServer().addTimeInfo(bd1_h, Temporal(0, TIME_INTERVAL));
        //for grab(obj)
        Handle t2_h = timeServer().addTimeInfo(bd2_h,
                                            Temporal(TIME_INTERVAL,
                                                     2 * TIME_INTERVAL));
        //add trick concept
        string trick_str = "snorf";
        Handle trick_h = atomSpace.addNode(CONCEPT_NODE, trick_str);
        //add AtTimeLink to it
        Handle tt_h = timeServer().addTimeInfo(trick_h, Temporal(0, 2 * TIME_INTERVAL));
        //add memberLinks to the concept node
        HandleSeq m1_seq;
        m1_seq.push_back(t1_h);
        m1_seq.push_back(tt_h);
        atomSpace.addLink(MEMBER_LINK, m1_seq);
        HandleSeq m2_seq;
        m2_seq.push_back(t2_h);
        m2_seq.push_back(tt_h);
        atomSpace.addLink(MEMBER_LINK, m2_seq);

        //Create the CompositeBehaviorDescription of it
        CompositeBehaviorDescription BD(&atomSpace);
        BD.addPredicate(bd1_h, 0, TIME_INTERVAL);
        BD.addPredicate(bd2_h, TIME_INTERVAL, 2*TIME_INTERVAL);

        //print AtomSpace
        //std::cout << "AtomSpace" << std::endl;
        //atomSpace.print();

        //print BD
        //std::cout << "Print BD" << std::endl;
        //std::cout << BD.toString() << std::endl;

        //retrieve the BD
        CompositeBehaviorDescription BDretrieved(&atomSpace);
        AtomSpaceWorldProvider wp(atomSpace);
        Temporal et(0);
        BDRetriever::retrieveLastExemplar(BDretrieved, et, wp, trick_str);

        //print BDretrieve
        //std::cout << "Print BDretrieved" << std::endl;
        //std::cout << BDretrieved.toString() << std::endl;

        TS_ASSERT(BD.equals(BDretrieved));

        std::cout << "ET : " << et << std::endl;

        TS_ASSERT_EQUALS(et, Temporal(0, 2*TIME_INTERVAL));
    }

    void test_retrieveAllExemplarFromAtomSpace() {
        string obj_str = "stick";
        string avatar_str = "Paul";
        //fill atomSpace with dummy_object and dummy_avatar definite object
        AtomSpace& atomSpace = atomspace();

        Handle obj_h = atomSpace.addNode(OBJECT_NODE, obj_str);
        Handle avatar_h = atomSpace.addNode(AVATAR_NODE, avatar_str);
        //fill atomSpace with behaved concept node
        Handle behaved_h = atomSpace.addNode(PREDICATE_NODE, BEHAVED_STR);
        //fill atomSpace with pet atom
        string pet_str = "Fido";
        Handle pet_h = atomSpace.addNode(PET_NODE, pet_str);
        //fill atomSpace with actions goto_obj grab and drop
        stringstream ss_goto_obj;
        ss_goto_obj << get_instance(id::goto_obj);
        Handle goto_obj_h = atomSpace.addNode(GROUNDED_SCHEMA_NODE,
                                              ss_goto_obj.str());
        stringstream ss_grab;
        ss_grab << get_instance(id::grab);
        Handle grab_h = atomSpace.addNode(GROUNDED_SCHEMA_NODE, ss_grab.str());
        //create the ListLink atoms
        //for goto_obj(dummy_object)
        HandleSeq a1_seq;
        a1_seq.push_back(pet_h);
        a1_seq.push_back(goto_obj_h);
        a1_seq.push_back(avatar_h);
        Handle a1_h = atomSpace.addLink(LIST_LINK, a1_seq);
        //for grab(dummy_object)
        HandleSeq a2_seq;
        a2_seq.push_back(pet_h);
        a2_seq.push_back(grab_h);
        a2_seq.push_back(obj_h);
        Handle a2_h = atomSpace.addLink(LIST_LINK, a2_seq);
        //create the BDs, that is atoms (EvalLink(behaved ....))
        //for goto_obj(dummy_object)
        HandleSeq b1_seq;
        b1_seq.push_back(behaved_h);
        b1_seq.push_back(a1_h);
        Handle bd1_h = atomSpace.addLink(EVALUATION_LINK, b1_seq);
        //for grab(dummy_object)
        HandleSeq b2_seq;
        b2_seq.push_back(behaved_h);
        b2_seq.push_back(a2_h);
        Handle bd2_h = atomSpace.addLink(EVALUATION_LINK, b2_seq);
        //add AtTimeLink
        //for goto_obj(dummy_object)
        Handle t1_h = timeServer().addTimeInfo(bd1_h, Temporal(0, TIME_INTERVAL));
        //for grab(obj)
        Handle t2_h = timeServer().addTimeInfo(bd2_h, Temporal(TIME_INTERVAL,
                                            2 * TIME_INTERVAL));

        //add trick concept
        string trick_str = "snorf";
        Handle trick_h = atomSpace.addNode(CONCEPT_NODE, trick_str);
        //add AtTimeLink to it
        Handle tt1_h = timeServer().addTimeInfo(trick_h, Temporal(0, 2 * TIME_INTERVAL));
        //add memberLinks to the concept node
        HandleSeq m1_seq;
        m1_seq.push_back(t1_h);
        m1_seq.push_back(tt1_h);
        atomSpace.addLink(MEMBER_LINK, m1_seq);
        HandleSeq m2_seq;
        m2_seq.push_back(t2_h);
        m2_seq.push_back(tt1_h);
        atomSpace.addLink(MEMBER_LINK, m2_seq);
        //add AtTimeLink to it
        Handle tt2_h = timeServer().addTimeInfo(trick_h, Temporal(10 * TIME_INTERVAL,
                                             12 * TIME_INTERVAL));

        //Create the CompositeBehaviorDescription of it
        CompositeBehaviorDescription BD1(&atomSpace);
        BD1.addPredicate(bd1_h, 0, TIME_INTERVAL);
        BD1.addPredicate(bd2_h, TIME_INTERVAL, 2*TIME_INTERVAL);

        //print AtomSpace
        //std::cout << "AtomSpace" << std::endl;
        //atomSpace.print();

        //print BD
        /*std::cout << "****** Print BD1 ******" << std::endl;
        std::cout << BD1.toString() << std::endl;
        std::cout << "****** Print BD1 timeline ******" << std::endl;
        std::cout << BD1.toStringTimeline() << std::endl;
        std::cout << "****** Print BD2 ******" << std::endl;
        std::cout << BD2.toString() << std::endl;
        std::cout << "****** Print BD2 timeline ******" << std::endl;
        std::cout << BD2.toStringTimeline() << std::endl;*/

        //retrieve the BC
        BehaviorCategory BCretrieved(&atomSpace);
        AtomSpaceWorldProvider wp(atomSpace);
        std::vector<Temporal> est;
        BDRetriever::retrieveAllExemplars(BCretrieved, est, wp, trick_str);

        //print BCretrieve
        //std::cout <<"Print BCretrieved" << std::endl;
        //std::cout << BCretrieved.toString() << std::endl;

        /*std::cout << "Print BDretrieved1" << std::endl;
        std::cout << BCretrieved.getEntries()[0].toString() << std::endl;
        std::cout << "Print timeline of BDretrieved1" << std::endl;
        std::cout << BCretrieved.getEntries()[0].getStartTime() << std::endl;
        std::cout << "Print BDretrieved2" << std::endl;
        std::cout << BCretrieved.getEntries()[1].toString() << std::endl;
        std::cout << "Print timline of BDretrieved2" << std::endl;
        std::cout << BCretrieved.getEntries()[1].getStartTime() << std::endl;*/

        TS_ASSERT(BD1.equals(BCretrieved.getEntries()[0]));
    }

};

