/*
 * tests/embodiment/Learning/behavior/BehaviorCategoryUTest.cxxtest
 *
 * Copyright (C) 2002-2009 Novamente LLC
 * All Rights Reserved
 * Author(s): Andre Senna
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */


#include <opencog/embodiment/Learning/behavior/BehaviorCategory.h>
#include <opencog/atomspace/AtomSpace.h>

using namespace behavior;

class BehaviorCategoryUTest : public CxxTest::TestSuite
{

private:

public:

    BehaviorCategoryUTest() {

    }

    void setUp() {
    }

    void tearDown() {
    }

    void test_addCompositeBehaviorDescription() {

        AtomSpace atomSpace;

        CompositeBehaviorDescription bd1(&atomSpace);
        CompositeBehaviorDescription bd2(&atomSpace);

        {
            Handle h1 = atomSpace.addNode(PREDICATE_NODE, "P1");
            Temporal t1(0, 1);
            bd1.addPredicate(h1, t1);
            Handle h2 = atomSpace.addNode(PREDICATE_NODE, "P2");
            Temporal t2(1, 3);
            bd1.addPredicate(h2, t2);
        }

        {
            Handle h1 = atomSpace.addNode(PREDICATE_NODE, "P12");
            Temporal t1(0, 12);
            bd2.addPredicate(h1, t1);
            Handle h2 = atomSpace.addNode(PREDICATE_NODE, "P22");
            Temporal t2(1, 32);
            bd2.addPredicate(h2, t2);
        }

        BehaviorCategory category(&atomSpace);
        category.addCompositeBehaviorDescription(bd1);
        category.addCompositeBehaviorDescription(bd2);

        //printf("\n%s\n", category.toStringHandles().c_str());
        TS_ASSERT(category.toStringHandles() == "{(P1,(UNIFORM,0,1)),(P2,(UNIFORM,1,3))}\n{(P12,(UNIFORM,0,12)),(P22,(UNIFORM,1,32))}");
    }


}; // class
