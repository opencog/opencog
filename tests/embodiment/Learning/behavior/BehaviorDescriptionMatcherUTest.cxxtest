/*
 * tests/embodiment/Learning/behavior/BehaviorDescriptionMatcherUTest.cxxtest
 *
 * Copyright (C) 2002-2009 Novamente LLC
 * All Rights Reserved
 * Author(s): Andre Senna
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */


#include <opencog/embodiment/Learning/behavior/BehaviorDescriptionMatcher.h>
#include <vector>
#include <opencog/atomspace/AtomSpace.h>

using namespace behavior;

class BehaviorDescriptionMatcherUTest : public CxxTest::TestSuite
{

private:

public:

    BehaviorDescriptionMatcherUTest() {

    }

    void setUp() {
    }

    void tearDown() {
    }


    void test_buildUnionOfPredicateSets() {

        AtomSpace atomSpace;

        Handle h1 = atomSpace.addNode(PREDICATE_NODE, "P1");
        Handle h2 = atomSpace.addNode(PREDICATE_NODE, "P2");
        Handle h3 = atomSpace.addNode(PREDICATE_NODE, "P3");
        Handle h4 = atomSpace.addNode(PREDICATE_NODE, "P4");

        Temporal t11(1, 3);
        Temporal t12(1, 4);

        Temporal t21(2, 5);

        Temporal t31(6, 8);
        Temporal t32(9, 10);
        Temporal t33(9, 10);
        Temporal t34(9, 10);

        Temporal t41(4, 7);
        Temporal t42(6, 8);

        CompositeBehaviorDescription bd1(&atomSpace);
        CompositeBehaviorDescription bd2(&atomSpace);
        CompositeBehaviorDescription bd3(&atomSpace);

        bd1.addPredicate(h1, t11);
        bd1.addPredicate(h2, t21);
        bd1.addPredicate(h3, t31);

        bd2.addPredicate(h1, t12);
        bd2.addPredicate(h4, t41);

        bd3.addPredicate(h4, t42);
        bd3.addPredicate(h3, t32);
        bd3.addPredicate(h1, t33);
        bd3.addPredicate(h2, t34);

        BehaviorCategory category(&atomSpace);
        category.addCompositeBehaviorDescription(bd1);
        category.addCompositeBehaviorDescription(bd2);
        category.addCompositeBehaviorDescription(bd3);

        //printf("\n%s\n", category.toString().c_str());
        //printf("\n%s\n", category.toStringTimeline().c_str());

        BehaviorDescriptionMatcher matcher;
        matcher.setAtomSpace(&atomSpace);
        //printf("\n%s\n", matcher.toStringAllSets(category).c_str());
        TS_ASSERT(matcher.toStringAllSets(category) == "{{},{P1},{P1,P2},{P1,P2,P3},{P2},{P3},{P4}}");
    }

    void test_buildMapping() {

        AtomSpace atomSpace;

        Handle h1 = atomSpace.addNode(PREDICATE_NODE, "P1");
        Handle h2 = atomSpace.addNode(PREDICATE_NODE, "P2");
        Handle h3 = atomSpace.addNode(PREDICATE_NODE, "P3");
        Handle h4 = atomSpace.addNode(PREDICATE_NODE, "P4");
        Handle h5 = atomSpace.addNode(PREDICATE_NODE, "P5");

        Temporal t11(1, 3);
        Temporal t12(1, 4);

        Temporal t21(2, 5);

        Temporal t31(6, 8);
        Temporal t32(9, 10);
        Temporal t33(9, 10);
        Temporal t34(9, 10);

        Temporal t41(4, 7);
        Temporal t42(6, 8);

        CompositeBehaviorDescription bd1(&atomSpace);
        CompositeBehaviorDescription bd2(&atomSpace);
        CompositeBehaviorDescription bd3(&atomSpace);

        bd1.addPredicate(h1, t11);
        bd1.addPredicate(h2, t21);
        bd1.addPredicate(h3, t31);

        bd2.addPredicate(h1, t12);
        bd2.addPredicate(h4, t41);

        bd3.addPredicate(h4, t42);
        bd3.addPredicate(h3, t32);
        bd3.addPredicate(h1, t33);
        bd3.addPredicate(h2, t34);

        BehaviorCategory category(&atomSpace);
        category.addCompositeBehaviorDescription(bd1);
        category.addCompositeBehaviorDescription(bd2);
        category.addCompositeBehaviorDescription(bd3);

        //printf("\n%s\n", category.toString().c_str());
        //printf("\n%s\n", category.toStringTimeline().c_str());

        Temporal t1(1, 2);
        Temporal t3(3, 4);
        Temporal t5(5, 6);
        Temporal t7(7, 8);
        Temporal t9(9, 10);
        CompositeBehaviorDescription bdtest(&atomSpace);
        bdtest.addPredicate(h2, t1);
        bdtest.addPredicate(h3, t1);
        bdtest.addPredicate(h1, t3);
        bdtest.addPredicate(h2, t3);
        bdtest.addPredicate(h2, t5);
        bdtest.addPredicate(h5, t7);
        bdtest.addPredicate(h1, t9);
        bdtest.addPredicate(h2, t9);
        bdtest.addPredicate(h4, t9);

        //printf("\n%s\n", bdtest.toString().c_str());
        //printf("\n%s\n", bdtest.toStringTimeline().c_str());

        BehaviorDescriptionMatcher matcher;
        matcher.setAtomSpace(&atomSpace);

        printf("\n%s\n", matcher.toStringMapping(category, bdtest).c_str());
        TS_ASSERT(matcher.toStringMapping(category, bdtest) == "{({}->{}),({P1,P2}->{P1,P2}),({P1,P2,P4}->{P1,P2}),({P2}->{P2}),({P2,P3}->{P1,P2,P3}),({P5}->{})}");
    }

    void test_computeSetDistribution() {

        AtomSpace atomSpace;

        Handle h1 = atomSpace.addNode(PREDICATE_NODE, "P1");
        Handle h2 = atomSpace.addNode(PREDICATE_NODE, "P2");
        Handle h3 = atomSpace.addNode(PREDICATE_NODE, "P3");
        Handle h4 = atomSpace.addNode(PREDICATE_NODE, "P4");

        Temporal t11(1, 3);
        Temporal t12(1, 4);

        Temporal t21(2, 5);

        Temporal t31(6, 8);
        Temporal t32(9, 10);
        Temporal t33(9, 11);
        Temporal t34(9, 10);

        Temporal t41(4, 7);
        Temporal t42(6, 8);

        CompositeBehaviorDescription bd1(&atomSpace);
        CompositeBehaviorDescription bd2(&atomSpace);
        CompositeBehaviorDescription bd3(&atomSpace);

        bd1.addPredicate(h1, t11);
        bd1.addPredicate(h2, t21);
        bd1.addPredicate(h3, t31);

        bd2.addPredicate(h1, t12);
        bd2.addPredicate(h4, t41);

        bd3.addPredicate(h4, t42);
        bd3.addPredicate(h3, t32);
        bd3.addPredicate(h1, t33);
        bd3.addPredicate(h2, t34);
        bd3.addPredicate(h1, t11);

        BehaviorCategory category(&atomSpace);
        category.addCompositeBehaviorDescription(bd1);
        category.addCompositeBehaviorDescription(bd2);
        category.addCompositeBehaviorDescription(bd3);

        //printf("\n%s\n", category.toString().c_str());
        //printf("\n%s\n", category.toStringTimeline().c_str());

        BehaviorDescriptionMatcher matcher;
        matcher.setAtomSpace(&atomSpace);

        printf("\n<%s>\n", matcher.toStringSetDistribution(category).c_str());
        TS_ASSERT(matcher.toStringSetDistribution(category) == "{}: {1,0,2}\n{P1}: {1,1,2}\n{P1,P2}: {1,0,0}\n{P1,P2,P3}: {0,0,1}\n{P2}: {1,0,0}\n{P3}: {1,0,0}\n{P4}: {0,1,1}\n");
    }

    void test_testMatrices() {

        AtomSpace atomSpace;

        Handle h1 = atomSpace.addNode(PREDICATE_NODE, "P1");
        Handle h2 = atomSpace.addNode(PREDICATE_NODE, "P2");
        Handle h3 = atomSpace.addNode(PREDICATE_NODE, "P3");

        Temporal t1(1, 2);
        Temporal t2(2, 3);
        Temporal t3(3, 4);
        Temporal t4(4, 5);

        CompositeBehaviorDescription bd1(&atomSpace);
        CompositeBehaviorDescription bd2(&atomSpace);
        CompositeBehaviorDescription bd3(&atomSpace);
        CompositeBehaviorDescription bd4(&atomSpace);

        bd1.addPredicate(h1, t1);
        bd1.addPredicate(h1, t2);
        bd1.addPredicate(h2, t3);
        bd1.addPredicate(h3, t4);

        bd2.addPredicate(h1, t1);
        bd2.addPredicate(h2, t2);
        bd2.addPredicate(h3, t3);
        bd2.addPredicate(h1, t4);

        bd3.addPredicate(h2, t1);
        bd3.addPredicate(h1, t2);
        bd3.addPredicate(h3, t3);
        bd3.addPredicate(h1, t4);

        bd4.addPredicate(h3, t1);
        bd4.addPredicate(h2, t2);
        bd4.addPredicate(h1, t3);
        bd4.addPredicate(h1, t4);

        BehaviorCategory category(&atomSpace);
        category.addCompositeBehaviorDescription(bd1);
        category.addCompositeBehaviorDescription(bd2);
        category.addCompositeBehaviorDescription(bd3);
        category.addCompositeBehaviorDescription(bd4);

        CompositeBehaviorDescription bdtest1(&atomSpace);
        bdtest1.addPredicate(h1, t1);

        CompositeBehaviorDescription bdtest2(&atomSpace);
        bdtest2.addPredicate(h2, t1);

        CompositeBehaviorDescription bdtest3(&atomSpace);
        bdtest3.addPredicate(h2, t4);

        CompositeBehaviorDescription bdtest4(&atomSpace);
        bdtest4.addPredicate(h1, t3);
        bdtest4.addPredicate(h1, t2);
        bdtest4.addPredicate(h2, t4);
        bdtest4.addPredicate(h3, t1);

        CompositeBehaviorDescription bdtest5(&atomSpace);
        bdtest5.addPredicate(h1, t1);
        bdtest5.addPredicate(h1, t4);

        CompositeBehaviorDescription bdtest6(&atomSpace);
        bdtest6.addPredicate(h1, t1);
        bdtest6.addPredicate(h1, t2);
        bdtest6.addPredicate(h1, t3);
        bdtest6.addPredicate(h1, t4);


        //printf("%s\n", bdtest1.toStringTimeline().c_str());
        //printf("%s\n", bdtest2.toStringTimeline().c_str());
        //printf("%s\n", bdtest3.toStringTimeline().c_str());
        //printf("%s\n", bdtest4.toStringTimeline().c_str());
        //printf("%s\n", bdtest5.toStringTimeline().c_str());
        //printf("%s\n", bdtest6.toStringTimeline().c_str());
        std::vector<CompositeBehaviorDescription> v;
        v.push_back(bdtest1);
        v.push_back(bdtest2);
        v.push_back(bdtest3);
        v.push_back(bdtest4);
        v.push_back(bdtest5);
        v.push_back(bdtest6);

        BehaviorDescriptionMatcher matcher;
        matcher.setAtomSpace(&atomSpace);

        //printf("\n%s\n", category.toStringTimeline().c_str());

        //printf("\n%s\n", matcher.toStringSetDistributionFitness(category, v).c_str());
        TS_ASSERT(matcher.toStringSetDistributionFitness(category, v) == "Relevance = 1.000000\n{({P1},1)}: 0.000000\n{({P2},1)}: 0.250000\n{({P2},1)}: 0.250000\n{({P3},1),({P1},1),({P1},1),({P2},1)}: 1.000000\n{({P1},1),({},2),({P1},1)}: 0.500000\n{({P1},1),({P1},1),({P1},1),({P1},1)}: 0.000000\n");

        //printf("\n%s\n", matcher.toStringMatrices(category).c_str());
        TS_ASSERT(matcher.toStringMatrices(category) == "{({P1},1),({P1},1),({P2},1),({P3},1)}\n1 0 0\n2 0 0\n2 1 0\n{({P1},1),({P2},1),({P3},1),({P1},1)}\n1 1 1\n1 0 0\n1 1 0\n{({P2},1),({P1},1),({P3},1),({P1},1)}\n1 2 1\n0 0 0\n1 1 0\n{({P3},1),({P2},1),({P1},1),({P1},1)}\n1 2 2\n0 0 1\n0 0 0\n");

        //printf("\n%s\n", matcher.toStringSucessorFitness(category, v).c_str());
        TS_ASSERT(matcher.toStringSucessorFitness(category, v) == "Relevance = 0.729167\n{({P1},1)}: 1.000000\n{({P2},1)}: 1.000000\n{({P2},1)}: 1.000000\n{({P3},1),({P1},1),({P1},1),({P2},1)}: 0.500000\n{({P1},1),({},2),({P1},1)}: 0.000000\n{({P1},1),({P1},1),({P1},1),({P1},1)}: 0.166667\n");
    }

    void test_computeTimeLengthBoundaries() {

        AtomSpace atomSpace;

        Handle h1 = atomSpace.addNode(PREDICATE_NODE, "P1");
        Handle h2 = atomSpace.addNode(PREDICATE_NODE, "P2");
        Handle h3 = atomSpace.addNode(PREDICATE_NODE, "P3");
        Handle h4 = atomSpace.addNode(PREDICATE_NODE, "P4");

        Temporal t1(1, 2);
        Temporal t2(2, 4);
        Temporal t3(4, 7);
        Temporal t4(7, 11);

        CompositeBehaviorDescription bd1(&atomSpace);
        CompositeBehaviorDescription bd2(&atomSpace);
        CompositeBehaviorDescription bd3(&atomSpace);
        CompositeBehaviorDescription bd4(&atomSpace);

        bd1.addPredicate(h1, t1);
        bd1.addPredicate(h1, t4);

        bd2.addPredicate(h2, t1);
        bd2.addPredicate(h2, t2);
        bd2.addPredicate(h2, t3);

        bd3.addPredicate(h3, t2);
        bd3.addPredicate(h3, t2);
        bd3.addPredicate(h3, t3);

        bd4.addPredicate(h4, t2);

        BehaviorCategory category(&atomSpace);
        category.addCompositeBehaviorDescription(bd1);
        category.addCompositeBehaviorDescription(bd2);
        category.addCompositeBehaviorDescription(bd3);
        category.addCompositeBehaviorDescription(bd4);

        //printf("\n%s\n", category.toStringTimeline().c_str());

        BehaviorDescriptionMatcher matcher;
        matcher.setAtomSpace(&atomSpace);
        //printf("\n%s\n", matcher.toStringBounds(category).c_str());
        TS_ASSERT(matcher.toStringBounds(category) == "{}: (5, 5)\n{P1}: (1, 4)\n{P2}: (1, 3)\n{P3}: (2, 3)\n{P4}: (2, 2)\n");
    }

    void test_case1() {

        AtomSpace atomSpace;

        Handle h1 = atomSpace.addNode(PREDICATE_NODE, "P1");
        Handle h2 = atomSpace.addNode(PREDICATE_NODE, "P2");
        Handle h3 = atomSpace.addNode(PREDICATE_NODE, "P3");

        Temporal t1(1, 3);
        Temporal t2(2, 5);
        Temporal t3(5, 10);
        CompositeBehaviorDescription bd1(&atomSpace);
        bd1.addPredicate(h1, t1);
        bd1.addPredicate(h2, t2);
        bd1.addPredicate(h3, t3);

        BehaviorCategory category(&atomSpace);
        category.addCompositeBehaviorDescription(bd1);
        //printf("\n%s\n", category.toStringTimeline().c_str());

        BehaviorDescriptionMatcher matcher;
        matcher.setAtomSpace(&atomSpace);

        Temporal t11(1, 2);
        Temporal t12(2, 3);
        Temporal t13(3, 4);
        Temporal t14(4, 5);
        CompositeBehaviorDescription bdTest1(&atomSpace);
        bdTest1.addPredicate(h1, t11);
        bdTest1.addPredicate(h1, t12);
        bdTest1.addPredicate(h2, t12);
        bdTest1.addPredicate(h2, t13);
        bdTest1.addPredicate(h3, t14);
        //printf("\n%s\n", bdTest1.toStringTimeline().c_str());
        //printf("\n%s", matcher.toStringTestCase(category, bdTest1).c_str());
        TS_ASSERT(matcher.toStringTestCase(category, bdTest1) == "w1 = 1.000000\nw2 = 1.000000\nw3 = 1.000000\nf1 = 1.000000\nf2 = 1.000000\nf3 = 0.500000\nfitness = 0.833333\n");

        Temporal t21(1, 6);
        Temporal t22(6, 9);
        Temporal t23(8, 10);
        CompositeBehaviorDescription bdTest2(&atomSpace);
        bdTest2.addPredicate(h3, t21);
        bdTest2.addPredicate(h2, t22);
        bdTest2.addPredicate(h1, t23);
        //printf("\n%s\n", bdTest2.toStringTimeline().c_str());
        //printf("\n%s", matcher.toStringTestCase(category, bdTest2).c_str());
        TS_ASSERT(matcher.toStringTestCase(category, bdTest2) == "w1 = 1.000000\nw2 = 1.000000\nw3 = 1.000000\nf1 = 1.000000\nf2 = 0.000000\nf3 = 1.000000\nfitness = 0.666667\n");

        Temporal t31(1, 6);
        Temporal t32(4, 10);
        Temporal t33(10, 20);
        CompositeBehaviorDescription bdTest3(&atomSpace);
        bdTest3.addPredicate(h1, t31);
        bdTest3.addPredicate(h2, t32);
        bdTest3.addPredicate(h3, t33);
        //printf("\n%s\n", bdTest3.toStringTimeline().c_str());
        //printf("\n%s", matcher.toStringTestCase(category, bdTest3).c_str());
        TS_ASSERT(matcher.toStringTestCase(category, bdTest3) == "w1 = 1.000000\nw2 = 1.000000\nw3 = 1.000000\nf1 = 1.000000\nf2 = 1.000000\nf3 = 0.000000\nfitness = 0.666667\n");

    }

    void test_case2() {

        AtomSpace atomSpace;

        Handle h1 = atomSpace.addNode(PREDICATE_NODE, "P1");
        Handle h2 = atomSpace.addNode(PREDICATE_NODE, "P2");
        Handle h3 = atomSpace.addNode(PREDICATE_NODE, "P3");
        Handle h4 = atomSpace.addNode(PREDICATE_NODE, "P4");

        Temporal t1(1, 2);
        Temporal t2(2, 3);
        Temporal t3(3, 4);
        Temporal t4(4, 5);

        CompositeBehaviorDescription bd1(&atomSpace);
        bd1.addPredicate(h1, t1);
        bd1.addPredicate(h2, t2);
        bd1.addPredicate(h3, t3);
        bd1.addPredicate(h4, t4);

        BehaviorCategory category(&atomSpace);
        category.addCompositeBehaviorDescription(bd1);
        BehaviorDescriptionMatcher matcher;
        matcher.setAtomSpace(&atomSpace);

        //printf("\n%s\n", category.toStringTimeline().c_str());
        //printf("\n%s\n", matcher.toStringMatrices(category).c_str());

        CompositeBehaviorDescription bdTest1(&atomSpace);
        bdTest1.addPredicate(h1, t1);
        bdTest1.addPredicate(h2, t2);
        bdTest1.addPredicate(h3, t3);
        bdTest1.addPredicate(h4, t4);
        //printf("\n%s\n", bdTest1.toStringTimeline().c_str());
        //printf("\n%s", matcher.toStringTestCase(category, bdTest1).c_str());
        TS_ASSERT(matcher.toStringTestCase(category, bdTest1) == "w1 = 1.000000\nw2 = 1.000000\nw3 = 1.000000\nf1 = 1.000000\nf2 = 1.000000\nf3 = 1.000000\nfitness = 1.000000\n");


        CompositeBehaviorDescription bdTest2(&atomSpace);
        bdTest2.addPredicate(h1, t1);
        bdTest2.addPredicate(h2, t2);
        bdTest2.addPredicate(h4, t3);
        bdTest2.addPredicate(h3, t4);
        //printf("\n%s\n", bdTest2.toStringTimeline().c_str());
        //printf("\n%s", matcher.toStringTestCase(category, bdTest2).c_str());
        TS_ASSERT(matcher.toStringTestCase(category, bdTest2) == "w1 = 1.000000\nw2 = 1.000000\nw3 = 1.000000\nf1 = 1.000000\nf2 = 0.833333\nf3 = 1.000000\nfitness = 0.944444\n");


        CompositeBehaviorDescription bdTest3(&atomSpace);
        bdTest3.addPredicate(h1, t1);
        bdTest3.addPredicate(h4, t2);
        bdTest3.addPredicate(h2, t3);
        bdTest3.addPredicate(h3, t4);
        //printf("\n%s\n", bdTest3.toStringTimeline().c_str());
        //printf("\n%s", matcher.toStringTestCase(category, bdTest3).c_str());
        TS_ASSERT(matcher.toStringTestCase(category, bdTest3) == "w1 = 1.000000\nw2 = 1.000000\nw3 = 1.000000\nf1 = 1.000000\nf2 = 0.666667\nf3 = 1.000000\nfitness = 0.888889\n");


        CompositeBehaviorDescription bdTest4(&atomSpace);
        bdTest4.addPredicate(h4, t1);
        bdTest4.addPredicate(h1, t2);
        bdTest4.addPredicate(h2, t3);
        bdTest4.addPredicate(h3, t4);
        //printf("\n%s\n", bdTest4.toStringTimeline().c_str());
        //printf("\n%s", matcher.toStringTestCase(category, bdTest4).c_str());
        TS_ASSERT(matcher.toStringTestCase(category, bdTest4) == "w1 = 1.000000\nw2 = 1.000000\nw3 = 1.000000\nf1 = 1.000000\nf2 = 0.500000\nf3 = 1.000000\nfitness = 0.833333\n");


        CompositeBehaviorDescription bdTest5(&atomSpace);
        bdTest5.addPredicate(h4, t1);
        bdTest5.addPredicate(h1, t2);
        bdTest5.addPredicate(h3, t3);
        bdTest5.addPredicate(h2, t4);
        //printf("\n%s\n", bdTest5.toStringTimeline().c_str());
        //printf("\n%s", matcher.toStringTestCase(category, bdTest5).c_str());
        TS_ASSERT(matcher.toStringTestCase(category, bdTest5) == "w1 = 1.000000\nw2 = 1.000000\nw3 = 1.000000\nf1 = 1.000000\nf2 = 0.333333\nf3 = 1.000000\nfitness = 0.777778\n");


        CompositeBehaviorDescription bdTest6(&atomSpace);
        bdTest6.addPredicate(h4, t1);
        bdTest6.addPredicate(h3, t2);
        bdTest6.addPredicate(h1, t3);
        bdTest6.addPredicate(h2, t4);
        //printf("\n%s\n", bdTest6.toStringTimeline().c_str());
        //printf("\n%s", matcher.toStringTestCase(category, bdTest6).c_str());
        TS_ASSERT(matcher.toStringTestCase(category, bdTest6) == "w1 = 1.000000\nw2 = 1.000000\nw3 = 1.000000\nf1 = 1.000000\nf2 = 0.166667\nf3 = 1.000000\nfitness = 0.722222\n");


        CompositeBehaviorDescription bdTest7(&atomSpace);
        bdTest7.addPredicate(h4, t1);
        bdTest7.addPredicate(h3, t2);
        bdTest7.addPredicate(h2, t3);
        bdTest7.addPredicate(h1, t4);
        //printf("\n%s\n", bdTest7.toStringTimeline().c_str());
        //printf("\n%s", matcher.toStringTestCase(category, bdTest7).c_str());
        TS_ASSERT(matcher.toStringTestCase(category, bdTest7) == "w1 = 1.000000\nw2 = 1.000000\nw3 = 1.000000\nf1 = 1.000000\nf2 = 0.000000\nf3 = 1.000000\nfitness = 0.666667\n");

    }

}; // class
