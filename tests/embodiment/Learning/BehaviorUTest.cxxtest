/*
 * tests/embodiment/Learning/BehaviorUTest.cxxtest
 *
 * Copyright (C) 2002-2009 Novamente LLC
 * All Rights Reserved
 * Author(s): Novamente team
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */
#include "AtomTable.h"
#include "Node.h"
#include <stdio.h>
#include "PredefinedProcedureNames.h"

typedef unsigned long ulong;
#include <stdio.h>
#include <map>
#include <set>

#include "AtomSpace.h"
#include "behavior/BE.h"
#include "behavior/BDTracker.h"
#include "PAI.h"

#include "RealTimeWorldProvider.h"

namespace behavior
{
extern bool behlog;
}

using namespace behavior;
using namespace opencog::pai;

int countEvLinks(AtomSpace* as, string s)
{
    int ret = 0;
    vector<Handle> es;
    as->getHandleSet(back_inserter(es), EVALUATION_LINK, true);
    for (Handle ha : es) {
        string name = as->getName(as->getOutgoing(ha, 0));
        if (name == s) {
            printf("countEvLinks got a matching link:\n%s\n", as->atomAsString(ha).c_str());
            ret++;
        }
    }

    return ret;
}

void printLinks(AtomSpace* as, Type linkType)
{
    if (!behlog)
        return;

    vector<Handle> es;
    as->getHandleSet(back_inserter(es), linkType, true);
    for (Handle ha : es)
    printf("%s\n", ha->toString().c_str());
}

void printEvLinks(AtomSpace* as)
{
    if (!behlog)
        return;

    vector<Handle> es;
    as->getHandleSet(back_inserter(es), EVALUATION_LINK, true);
    for (Handle ha : es) {
        vector<HandleTemporalPair> hhh;
        as->getTimeInfo(back_inserter(hhh), ha);

        //    printf("%s \n", ha->toString().c_str());
        for (HandleTemporalPair htp : hhh)
        printf("%s \n", htp.toString().c_str());
    }
    //NMPrinter(NMP_ALL)(ha);
}

#define rup repo.update();


#if defined( _WIN32) && !defined(__CYGWIN__)
typedef __int64 mytime_t;
#else
#include <inttypes.h> // int64_t
typedef int64_t mytime_t;
#endif

using namespace behavior;

Handle addAction(AtomSpace& atomspace)
{
    HandleSeq hs1;

    hs1.push_back(atomspace.addNode(CONCEPT_NODE, "obj55"));
    hs1.push_back(atomspace.addNode(CONCEPT_NODE, "kick"));

    Handle h0 =  atomspace.addLink(LIST_LINK, hs1);

    HandleSeq hs2;
    hs2.push_back(atomspace.addNode(PREDICATE_NODE, "actionDone"));
    hs2.push_back(h0);
    return atomspace.addLink(EVALUATION_LINK, hs2);
}

void addBasicBDTrackers(AtomSpace& atomspace, BehaviorEncoder& repo )
{
    atom_tree *footemplate = mva(EVALUATION_LINK,
                                 mva(atomspace.addNode(PREDICATE_NODE, AGISIM_POSITION_PREDICATE_NAME), NULL),
                                 mva(LIST_LINK, mva(CONCEPT_NODE, NULL), NULL), NULL);

    repo.addBETracker(*footemplate,
                      new MovementBDTracker(&atomspace));

    atom_tree *action_template = mva(EVALUATION_LINK,
                                     mva(atomspace.addNode(PREDICATE_NODE, "actionDone"), NULL),
                                     mva(LIST_LINK, mva(CONCEPT_NODE, NULL), NULL), NULL);

    repo.addBETracker(action_template,
                      new ActionBDTracker(&atomspace));
}

void BEtest(bool continuous)
{
    AtomSpace atomspace;
    Handle trickNode = atomspace.addNode(CONCEPT_NODE, "testTrick");
    Temporal exemplarInterval(0, 10);
    Handle trickExemplarAtTimeLink = atomspace.addTimeInfo(trickNode, exemplarInterval);

    // Initialize the BE with the following 3 rows:
    const int UPDATE_INTERVAL = 1;
    BehaviorEncoder repo(new RealTimeWorldProvider(&atomspace), trickExemplarAtTimeLink, UPDATE_INTERVAL);
    addBasicBDTrackers(atomspace, repo);

    // printf("now = %lu\n", PAITestUtil::getCurrentTimestamp());

    rup;

    Handle a = addAction(atomspace);

    // printf("now2 = %lu\n", PAITestUtil::getCurrentTimestamp());

    atomspace.addTimeInfo(a, PAITestUtil::getCurrentTimestamp());

    // atomspace.addTimeInfo(a, 3281934);
    HandleSeq hs1;
    hs1.push_back(atomspace.addNode(CONCEPT_NODE, "obj223"));

    hs1.push_back(atomspace.addNode(NUMBER_NODE, "5"));
    hs1.push_back(atomspace.addNode(NUMBER_NODE, "6"));
    hs1.push_back(atomspace.addNode(NUMBER_NODE, "7"));

    Handle h0 =  atomspace.addLink(LIST_LINK, hs1);

    HandleSeq hs2;
    hs2.push_back(atomspace.addNode(PREDICATE_NODE, AGISIM_POSITION_PREDICATE_NAME));
    hs2.push_back(h0);
    Handle h =  atomspace.addLink(EVALUATION_LINK, hs2);

    // getc(stdin);
    atomspace.addTimeInfo(h,  PAITestUtil::getCurrentTimestamp()); // toString().c_str());

    // printf("now3 = %lu\n", PAITestUtil::getCurrentTimestamp());

    printEvLinks(&atomspace);

    rup;

    HandleSeq hs1b;
    hs1b.push_back(atomspace.addNode(CONCEPT_NODE, "obj223"));
    hs1b.push_back(atomspace.addNode(NUMBER_NODE, "5"));
    hs1b.push_back(atomspace.addNode(NUMBER_NODE, "6"));
    hs1b.push_back(atomspace.addNode(NUMBER_NODE, "10"));
    Handle h0b =  atomspace.addLink(LIST_LINK, hs1b);

    HandleSeq hs2b;
    hs2b.push_back(atomspace.addNode(PREDICATE_NODE, AGISIM_POSITION_PREDICATE_NAME));
    hs2b.push_back(h0b);
    Handle h2 =  atomspace.addLink(EVALUATION_LINK, hs2b);

    printEvLinks(&atomspace);

    atomspace.addTimeInfo(h2, PAITestUtil::getCurrentTimestamp());
    atomspace.addTimeInfo(a, PAITestUtil::getCurrentTimestamp());

    rup;
    // if (!continuous)
    //{ rup; }

    printEvLinks(&atomspace);

    //getc(stdin);
    atomspace.addTimeInfo(h2, PAITestUtil::getCurrentTimestamp());

    if (behlog)
        puts("\nTest continuous\n\n");

    rup;

    if (!continuous) {
        sleep(1); rup; sleep(1); rup;
    }

    HandleSeq hs1c;
    hs1c.push_back(atomspace.addNode(CONCEPT_NODE, "obj223"));
    hs1c.push_back(atomspace.addNode(NUMBER_NODE, "7"));
    hs1c.push_back(atomspace.addNode(NUMBER_NODE, "11"));
    hs1c.push_back(atomspace.addNode(NUMBER_NODE, "12"));
    Handle h0c =  atomspace.addLink(LIST_LINK, hs1c);

    HandleSeq hs2c;
    hs2c.push_back(atomspace.addNode(PREDICATE_NODE, AGISIM_POSITION_PREDICATE_NAME));
    hs2c.push_back(h0c);
    Handle h3 =  atomspace.addLink(EVALUATION_LINK, hs2c);

    atomspace.addTimeInfo(h3, PAITestUtil::getCurrentTimestamp());

    sleep(1);
    rup;
    //behlog=true;
    // printEvLinks(&atomspace);
    //behlog=false;
    // printf("--- %d %d\n", countEvLinks(&atomspace, "goto"),
    //       countEvLinks(&atomspace, "behaved"));

    if (continuous) {
        //TS_ASSERT_EQUALS(countEvLinks(&atomspace, "goto"),    1);
        //TS_ASSERT_EQUALS(countEvLinks(&atomspace, "behaved"), 1);
        TS_ASSERT_EQUALS(countEvLinks(&atomspace, "behaved"), 2);
        // TODO: Check each behaved contents
    } else {
        //TS_ASSERT_EQUALS(countEvLinks(&atomspace, "goto"),    2);
        //TS_ASSERT_EQUALS(countEvLinks(&atomspace, "behaved"), 1);
        TS_ASSERT_EQUALS(countEvLinks(&atomspace, "behaved"), 3);
        // TODO: Check each behaved contents
    }

    //behlog = true;
    //printLinks(&atomspace, MEMBER_LINK);
    //printLinks(&atomspace, AT_TIME_LINK);
    //behlog = false;

    // TODO: check all AtTimeLinks that should have been added...

}
/*
   int main(int argc, char **argv) {

   AtomTable at;
   Node* node = new Node(CONCEPT_NODE, "test");
   at.add(node);
   Handle h = at.getHandle("test", CONCEPT_NODE);
   printf("Node => %s\n", node->toString().c_str());


   BEtest(true);
   BEtest(false);
   }
 */

class BehaviorUTest : public CxxTest::TestSuite
{
public:

    void test_continuous() {
        BEtest(true);
    }

    void test_non_continuous() {
        BEtest(false);
    }
};
