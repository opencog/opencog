/*
 * tests/embodiment/Learning/Filter/EntropyFilterUTest.cxxtest
 *
 * Copyright (C) 2002-2009 Novamente LLC
 * All Rights Reserved
 * Author(s): Nil Geisweiller
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */


#include <opencog/util/misc-test.h>
#include <opencog/atomspace/AtomSpace.h>

#include <opencog/comboreduct/combo/message.h>

#include <opencog/embodiment/AtomSpaceExtensions/CompareAtomTreeTemplate.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/embodiment/Learning/Filter/EntropyFilter.h>
#include <opencog/embodiment/Learning/Filter/EntityRelevanceFilter.h>
#include <opencog/embodiment/AtomSpaceExtensions/PredefinedProcedureNames.h>
#include <opencog/embodiment/Learning/LearningServer/AtomSpaceWorldProvider.h>
#include <opencog/embodiment/AvatarComboVocabulary/AvatarComboVocabulary.h>
#include <opencog/embodiment/Control/EmbodimentConfig.h>

//using namespace behavior;
using namespace std;
using namespace opencog;
using namespace AvatarCombo;
using namespace opencog::control;

#define ENTROPY_THRESHOLD 0.1

#define ACTION_DONE_TIME 200
#define TIME_INTERVAL ACTION_DONE_TIME

#define BEHAVED_STR "behaved"
#define DUMMY_ACTION "dummy_action"

#define PET_X 5.0
#define PET_Y 5.0
#define PET_Z 0.0
#define OBJ_X 3.0
#define OBJ_Y 3.0
#define OBJ_Z 0.0
#define AVATAR_X1 20.0
#define AVATAR_Y1 20.0
#define AVATAR_Z1 0.0
#define AVATAR_X2 3.5
#define AVATAR_Y2 3.5
#define AVATAR_Z2 0.0
#define AVATAR_X3 25.0
#define AVATAR_Y3 25.0
#define AVATAR_Z3 0.0
#define T1 10*TIME_INTERVAL
#define T2 T1 + ACTION_DONE_TIME/2
#define T3 T1 + 2*ACTION_DONE_TIME

#define ENTROPY_MIN 0.94
#define ENTROPY_MAX 0.96

typedef opencog::size_tree_order<vertex> combo_tree_order;
typedef std::set<combo_tree, combo_tree_order> combo_tree_ns_set;

class EntropyFilterUTest : public CxxTest::TestSuite
{
public:
    EntropyFilterUTest() {
        config(EmbodimentConfig::embodimentCreateInstance, true);
    }

    void test_computeEntropy() {

        //fill combo tree with program
        string obj_str = "stick";
        string avatar_str = "Paul";
        string trick_name = "fnorb";
        string message = "good_dog";
        string petID = "Fido";
        string dummy_action_action = string(DUMMY_ACTION) + string("_action");
        stringstream ss1("near($1 $2)");
        combo_tree tr1;
        // ss1 >> tr1;
        AvatarCombo::operator>>(ss1, tr1);

        string tr2_str = string("near($1 ") + obj_str + string(")");
        combo_tree tr2;
        stringstream ss2(tr2_str);
        // ss2 >> tr2;
        AvatarCombo::operator>>(ss2, tr2);

        string tr3_str = string("near($2 owner)");
        combo_tree tr3;
        stringstream ss3(tr3_str);
        // ss3 >> tr3;
        AvatarCombo::operator>>(ss3, tr3);

        string tr4_str = string("near(owner ") + obj_str + string(")");
        combo_tree tr4;
        stringstream ss4(tr4_str);
        // ss4 >> tr4;
        AvatarCombo::operator>>(ss4, tr4);

        combo_tree tr5;
        tr5.set_head(get_instance(id::has_said));
        combo_tree::iterator head5 = tr5.begin();
        tr5.append_child(head5, argument(1));
        tr5.append_child(head5, combo::message(string("to:") + petID + string(": ") + message));

        combo_tree tr6;
        tr6.set_head(get_instance(id::has_said));
        combo_tree::iterator head6 = tr6.begin();
        tr6.append_child(head6, combo::definite_object("owner"));
        tr6.append_child(head6, combo::message(string("to:") + petID + string(": ") + message));
        combo_tree tr7;
        string s7 = string("is_last_agent_action(owner ")
                    + dummy_action_action + string(")");
        stringstream ss7(s7);
        // ss7 >> tr7;
        AvatarCombo::operator>>(ss7, tr7);

        //fill atomSpace with dummy_object and dummy_avatar definite object
        AtomSpace atomSpace;

        Handle obj_h = atomSpace.addNode(OBJECT_NODE, obj_str);
        Handle avatar_h = atomSpace.addNode(AVATAR_NODE, avatar_str);

        //fill the atomSpace with the trick concept
        atomSpace.addNode(CONCEPT_NODE, trick_name);

        //fill the spacemap with the locations of stick and Paul
        atomSpace.getSpaceServer().addSpaceInfo(true, obj_h, T1, OBJ_X, OBJ_Y, OBJ_Z, 1, 1, 1, 0);
        atomSpace.getSpaceServer().addSpaceInfo(true, avatar_h, T1, AVATAR_X1, AVATAR_Y1, AVATAR_Z1, 1, 1, 1, 0);
        atomSpace.getSpaceServer().addSpaceInfo(true, avatar_h, T2, AVATAR_X2, AVATAR_Y2, AVATAR_Z2,1, 1, 1, 0);
        atomSpace.getSpaceServer().addSpaceInfo(true, avatar_h, T3, AVATAR_X3, AVATAR_Y3, AVATAR_Z3,1, 1, 1, 0);

        //fill atomSpace with behaved concept node
        Handle behaved_h = atomSpace.addNode(PREDICATE_NODE, BEHAVED_STR);

        //fill atomSpace with pet atom
        string pet_str = "Fido";
        Handle pet_h = atomSpace.addNode(PET_NODE, pet_str);

        //fill atomSpace with actions goto_obj grab and drop
        stringstream ss_goto_obj;
        ss_goto_obj << get_instance(id::goto_obj);
        Handle goto_obj_h = atomSpace.addNode(GROUNDED_SCHEMA_NODE,
                                              ss_goto_obj.str());
        stringstream ss_drop;
        ss_drop << get_instance(id::drop);
        Handle drop_h = atomSpace.addNode(GROUNDED_SCHEMA_NODE, ss_drop.str());

        //add has_said perception
        string sentence = string("to:") + petID + string(": ") + message;
        Handle sentence_h = atomSpace.addNode(SENTENCE_NODE, sentence);
        Handle say_h = atomSpace.addNode(GROUNDED_SCHEMA_NODE, SAY_SCHEMA_NAME);
        Handle actionDone_h = atomSpace.addNode(PREDICATE_NODE, ACTION_DONE_PREDICATE_NAME);
        atom_tree *at =
            makeVirtualAtom(EVALUATION_LINK,
                            makeVirtualAtom(actionDone_h, NULL),
                            makeVirtualAtom(LIST_LINK,
                                            makeVirtualAtom(EXECUTION_LINK,
                                                            makeVirtualAtom(say_h, NULL),
                                                            makeVirtualAtom(LIST_LINK,
                                                                            makeVirtualAtom(avatar_h, NULL),
                                                                            makeVirtualAtom(sentence_h, NULL),
                                                                            NULL
                                                                           ),
                                                            NULL
                                                           ),
                                            NULL
                                           ),
                            NULL
                           );

        Handle eval_h = addAtom(atomSpace, *at, TruthValue::DEFAULT_TV());
        atomSpace.getTimeServer().addTimeInfo(eval_h, T2);
        //add is_last_agent_action perceptions
        //for avatar (supposed to be considered by EntropyFilter)
        Handle dummy_action_h = atomSpace.addNode(GROUNDED_SCHEMA_NODE,
                                DUMMY_ACTION);
        atom_tree *dat =
            makeVirtualAtom(EVALUATION_LINK,
                            makeVirtualAtom(actionDone_h, NULL),
                            makeVirtualAtom(LIST_LINK,
                                            makeVirtualAtom(avatar_h, NULL),
                                            makeVirtualAtom(dummy_action_h, NULL),
                                            NULL
                                           ),
                            NULL
                           );

        Handle eval_da_h = addAtom(atomSpace, *dat, TruthValue::DEFAULT_TV());
        atomSpace.getTimeServer().addTimeInfo(eval_da_h, Temporal(T1, T2));
        //for pet (supposed not to be considered by EntropyFilter)
        atom_tree *dapt =
            makeVirtualAtom(EVALUATION_LINK,
                            makeVirtualAtom(actionDone_h, NULL),
                            makeVirtualAtom(LIST_LINK,
                                            makeVirtualAtom(EXECUTION_LINK,
                                                            makeVirtualAtom(pet_h, NULL),
                                                            makeVirtualAtom(dummy_action_h, NULL),
                                                            NULL
                                                           ),
                                            NULL
                                           ),
                            NULL
                           );

        Handle eval_dap_h = addAtom(atomSpace, *dapt, TruthValue::DEFAULT_TV());
        atomSpace.getTimeServer().addTimeInfo(eval_dap_h, Temporal(T1, T2));
        //create the ListLink atoms for goto_obj(stick)
        HandleSeq a1_seq;
        a1_seq.push_back(pet_h);
        a1_seq.push_back(goto_obj_h);
        a1_seq.push_back(obj_h);
        Handle a1_h = atomSpace.addLink(LIST_LINK, a1_seq);

        //for drop and goto_obj(Paul)
        HandleSeq a2_seq;
        a2_seq.push_back(pet_h);
        a2_seq.push_back(drop_h);
        Handle a2_h = atomSpace.addLink(LIST_LINK, a2_seq);

        HandleSeq a2bis_seq;
        a2bis_seq.push_back(pet_h);
        a2bis_seq.push_back(goto_obj_h);
        a2bis_seq.push_back(avatar_h);
        Handle a2bis_h = atomSpace.addLink(LIST_LINK, a2bis_seq);

        //create the BDs, that is atoms (EvalLink(behaved ....)) for goto_obj(stick)
        HandleSeq b1_seq;
        b1_seq.push_back(behaved_h);
        b1_seq.push_back(a1_h);
        Handle bd1_h = atomSpace.addLink(EVALUATION_LINK, b1_seq);

        //for drop and goto_obj(Paul)
        HandleSeq b2_seq;
        b2_seq.push_back(behaved_h);
        b2_seq.push_back(a2_h);
        Handle bd2_h = atomSpace.addLink(EVALUATION_LINK, b2_seq);

        HandleSeq b2bis_seq;
        b2bis_seq.push_back(behaved_h);
        b2bis_seq.push_back(a2bis_h);
        Handle bd2bis_h = atomSpace.addLink(EVALUATION_LINK, b2bis_seq);

        //add AtTimeLink for goto_obj(dummy_object)
        Handle t1_h = atomSpace.getTimeServer().addTimeInfo(bd1_h, Temporal(10 * TIME_INTERVAL,
                                            11 * TIME_INTERVAL));
        //for drop
        Handle t2_h = atomSpace.getTimeServer().addTimeInfo(bd2_h, Temporal(11 * TIME_INTERVAL,
                                            12 * TIME_INTERVAL));
        //for goto_obj(dummy_object)
        Handle t3_h = atomSpace.getTimeServer().addTimeInfo(bd1_h, Temporal(20 * TIME_INTERVAL,
                                            21 * TIME_INTERVAL));
        //for goto_obj(Paul)
        Handle t4_h = atomSpace.getTimeServer().addTimeInfo(bd2bis_h, Temporal(21 * TIME_INTERVAL,
                                            22 * TIME_INTERVAL));

        //add trick concept
        Handle trick_h = atomSpace.addNode(CONCEPT_NODE, trick_name);
        //add AtTimeLink to it
        Handle tt1_h = atomSpace.getTimeServer().addTimeInfo(trick_h, Temporal(10 * TIME_INTERVAL,
                                             12 * TIME_INTERVAL));

        //add memberLinks to the concept node
        HandleSeq m1_seq;
        m1_seq.push_back(t1_h);
        m1_seq.push_back(tt1_h);
        atomSpace.addLink(MEMBER_LINK, m1_seq);

        HandleSeq m2_seq;
        m2_seq.push_back(t2_h);
        m2_seq.push_back(tt1_h);
        atomSpace.addLink(MEMBER_LINK, m2_seq);

        //add AtTimeLink to it
        Handle tt2_h = atomSpace.getTimeServer().addTimeInfo(trick_h, Temporal(20 * TIME_INTERVAL,
                                             22 * TIME_INTERVAL));
        //add memberLinks to the concept node
        HandleSeq m3_seq;
        m3_seq.push_back(t3_h);
        m3_seq.push_back(tt2_h);
        atomSpace.addLink(MEMBER_LINK, m3_seq);

        HandleSeq m4_seq;
        m4_seq.push_back(t4_h);
        m4_seq.push_back(tt2_h);
        atomSpace.addLink(MEMBER_LINK, m4_seq);

        //fill elementary perceptions
        perception_set ps; //perceptions
        ps.insert(get_instance(id::near));
        ps.insert(get_instance(id::has_said));
        ps.insert(get_instance(id::is_last_agent_action));

        //fill indefinite object set
        std::set<indefinite_object> idos;

        //fill definite object set
        definite_object_set dos;
        dos.insert(obj_str);
        dos.insert(id::owner);

        //fill agent action definite object set
        agent_to_actions atas;
        definite_object_vec dov(1, dummy_action_action);
        definite_object_vec_set dovs;
        dovs.insert(dov);
        std::pair<definite_object, definite_object_vec_set> p(id::owner, dovs);
        atas.insert(p);

        //arity and argument_list
        std::vector<vertex> al;
        al.push_back(id::owner);
        al.push_back(definite_object(obj_str));

        //retrieve set of messages
        EntityRelevanceFilter filter;

        message_set messages = filter.getMessages(atomSpace,
                               Temporal(10 * TIME_INTERVAL, 12 * TIME_INTERVAL),
                               petID);

        //instanciation of EntropyFilter
        type_tree_seq atl(2, type_tree(id::definite_object_type));
        Filter::EntropyFilter ef(pet_str, avatar_str, atomSpace,
                                 ps, idos, dos, messages, atas, atl);

        //generate filtered perceptions
        ef.updatePerceptToTime(10*TIME_INTERVAL, 12*TIME_INTERVAL, al);
        ef.updatePerceptToTime(20*TIME_INTERVAL, 22*TIME_INTERVAL, al);

        combo::combo_tree_ns_set filteredPerceptions;
        ef.generateFilteredPerceptions(filteredPerceptions, ENTROPY_THRESHOLD);

        std::cout << std::endl;
        for (combo_tree tr : filteredPerceptions) {
            std::cout << "ENTROPY FILTER TEST TR : " << tr << std::endl;
        }

        std::cout << "TR1 : " << tr1 << std::endl;
        std::cout << "TR2 : " << tr2 << std::endl;
        std::cout << "TR3 : " << tr3 << std::endl;
        std::cout << "TR4 : " << tr4 << std::endl;
        std::cout << "TR5 : " << tr5 << std::endl;
        std::cout << "TR6 : " << tr6 << std::endl;
        std::cout << "TR7 : " << tr7 << std::endl;

        TS_ASSERT(filteredPerceptions.size() == 7);
        std::set<combo_tree>::iterator svi = filteredPerceptions.begin();
        TS_ASSERT_EQUALS(*svi, tr1);
        ++svi;
        TS_ASSERT_EQUALS(*svi, tr2);
        ++svi;
        TS_ASSERT_EQUALS(*svi, tr3);
        ++svi;
        TS_ASSERT_EQUALS(*svi, tr4);
        ++svi;
        TS_ASSERT_EQUALS(*svi, tr5);
        ++svi;
        TS_ASSERT_EQUALS(*svi, tr6);
        ++svi;
        TS_ASSERT_EQUALS(*svi, tr7);

    }

};

