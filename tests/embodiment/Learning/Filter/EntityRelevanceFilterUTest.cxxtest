/*
 * tests/embodiment/Learning/Filter/EntityRelevanceFilterUTest.cxxtest
 *
 * Copyright (C) 2002-2009 Novamente LLC
 * All Rights Reserved
 * Author(s): Carlos Lopes
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/atomspace/Node.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/util/misc-test.h>

/* #include "CompareAtomTreeTemplate.h" */
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/embodiment/Learning/Filter/EntityRelevanceFilter.h>
#include <opencog/embodiment/AtomSpaceExtensions/PredefinedProcedureNames.h>
#include <opencog/embodiment/AtomSpaceExtensions/makeVirtualAtom.h>
#include <opencog/embodiment/AvatarComboVocabulary/AvatarComboVocabulary.h>

#include <opencog/embodiment/Learning/LearningServer/AtomSpaceWorldProvider.h>

using namespace AvatarCombo;
using namespace opencog;

#include <string>

#define OBJ_LENGTH 0.5
#define OBJ_WIDTH 0.5
#define OBJ_HEIGHT 0.5
#define OBJ_YAW 0.0

#define T1l 100
#define T1 200
#define T1u 300
#define T2l 400
#define T2 500
#define T2u 600

class EntityRelevanceFilterUTest : public CxxTest::TestSuite
{

private:
    AtomSpace *atomSpace;
    EntityRelevanceFilter * filter;

    std::string pet;
    std::string stick;
    std::string meat;
    std::string avatar;
    std::string ball;
    std::string bone;

    Handle pet_h;
    Handle stick_h;
    Handle meat_h;
    Handle avatar_h;
    Handle ball_h;
    Handle bone_h;

    std::string sentence1;
    std::string sentence2;
    std::string str1;
    std::string str2;

    std::string saySchemaName;
    std::string actionDonePredicateName;

    std::string dummy_action;

public:

    static EntityRelevanceFilterUTest *createSuite() {
        return new EntityRelevanceFilterUTest( );
    }
    static void destroySuite( EntityRelevanceFilterUTest *suite ) {
        delete suite;
    }

    EntityRelevanceFilterUTest () {
        pet = "pet";
        stick = "stick";
        meat = "meat";
        avatar = "avatar";
        ball = "ball";
        bone = "bone";

        atomSpace = new AtomSpace();
        cout << "as and ss created" << endl;

        std::string test1 = "test1";
        std::string test2 = "test2";

        pet_h   = atomSpace->addNode(PET_NODE, "pet");
        stick_h  = atomSpace->addNode(OBJECT_NODE, "stick");
        meat_h   = atomSpace->addNode(OBJECT_NODE, "meat");
        avatar_h  = atomSpace->addNode(AVATAR_NODE, "avatar");
        ball_h   = atomSpace->addNode(OBJECT_NODE, "ball");
        bone_h   = atomSpace->addNode(OBJECT_NODE, "bone");

        dummy_action = "dummy_action";

        sentence1 = "sentence1";
        sentence2 = "sentence2";
        str1 = "to: pet : " + sentence1;
        str2 = "to: pet : " + sentence2;

        saySchemaName = SAY_SCHEMA_NAME;
        actionDonePredicateName = ACTION_DONE_PREDICATE_NAME;
    }

    ~EntityRelevanceFilterUTest () {
        printf("~EntityRelevanceFilterUTest()\n");
        delete atomSpace;
    }

    void setUp() {
        atomSpace->getSpaceServer().addSpaceInfo(true, pet_h, 0, 100, 100, 0, OBJ_LENGTH, OBJ_WIDTH, OBJ_HEIGHT, OBJ_YAW);
        atomSpace->getSpaceServer().addSpaceInfo(true, avatar_h, 0, 100, 80, 0, OBJ_LENGTH, OBJ_WIDTH, OBJ_HEIGHT, OBJ_YAW);
        atomSpace->getSpaceServer().addSpaceInfo(true, ball_h, 0, 92, 88, 0, OBJ_LENGTH, OBJ_WIDTH, OBJ_HEIGHT, OBJ_YAW);
        atomSpace->getSpaceServer().addSpaceInfo(true, meat_h, 0, 100, 90, 0, OBJ_LENGTH, OBJ_WIDTH, OBJ_HEIGHT, OBJ_YAW);

        //add say sentence1 and say sentence 2 perception
        Handle sentence1_h = atomSpace->addNode(SENTENCE_NODE, str1);
        Handle say_h = atomSpace->addNode(GROUNDED_SCHEMA_NODE, saySchemaName);
        Handle actionDone_h = atomSpace->addNode(PREDICATE_NODE, actionDonePredicateName);

        Handle avatar_h = atomSpace->addNode(AVATAR_NODE, avatar);

        //add say sentence1
        tree<Vertex> *at1 =
            makeVirtualAtom(EVALUATION_LINK,
                            makeVirtualAtom(actionDone_h, NULL),
                            makeVirtualAtom(LIST_LINK,
                                            makeVirtualAtom(EXECUTION_LINK,
                                                            makeVirtualAtom(say_h, NULL),
                                                            makeVirtualAtom(LIST_LINK,
                                                                            makeVirtualAtom(avatar_h, NULL),
                                                                            makeVirtualAtom(sentence1_h, NULL),
                                                                            NULL
                                                                           ),
                                                            NULL
                                                           ),
                                            NULL
                                           ),
                            NULL
                           );

        Handle eval1_h = addAtom(*atomSpace, *at1, TruthValue::DEFAULT_TV());
        TS_ASSERT( eval1_h != Handle::UNDEFINED );
        atomSpace->getTimeServer().addTimeInfo(eval1_h, T1);

        Handle sentence2_h = atomSpace->addNode(SENTENCE_NODE, str2);
        //add say sentence2
        tree<Vertex> *at2 =
            makeVirtualAtom(EVALUATION_LINK,
                            makeVirtualAtom(actionDone_h, NULL),
                            makeVirtualAtom(LIST_LINK,
                                            makeVirtualAtom(EXECUTION_LINK,
                                                            makeVirtualAtom(say_h, NULL),
                                                            makeVirtualAtom(LIST_LINK,
                                                                            makeVirtualAtom(avatar_h, NULL),
                                                                            makeVirtualAtom(sentence2_h, NULL),
                                                                            NULL
                                                                           ),
                                                            NULL
                                                           ),
                                            NULL
                                           ),
                            NULL
                           );

        Handle eval2_h = addAtom(*atomSpace, *at2, TruthValue::DEFAULT_TV());
        atomSpace->getTimeServer().addTimeInfo(eval2_h, T2);


        //add action done dummy_action
        Handle dummy_action_h = atomSpace->addNode(NODE, dummy_action);
        tree<Vertex> *at3 =
            makeVirtualAtom(EVALUATION_LINK,
                            makeVirtualAtom(actionDone_h, NULL),
                            makeVirtualAtom(LIST_LINK,
                                            makeVirtualAtom(avatar_h, NULL),
                                            makeVirtualAtom(dummy_action_h, NULL),
                                            NULL
                                           ),
                            NULL
                           );

        Handle eval3_h = addAtom(*atomSpace, *at3, TruthValue::DEFAULT_TV());
        atomSpace->getTimeServer().addTimeInfo(eval3_h, T1);
    }

    void tearDown() {
    }

    //void OLD_testGetEntities(){
    //    TS_ASSERT(atomSpace->getAtomTable().getSize() > 0);
    //}

    void testGetEntities() {
        filter = new EntityRelevanceFilter(atomSpace->getSpaceServer().getLatestMap(), pet, avatar);
        std::set<std::string> ent = filter->getEntities();

        TS_ASSERT(ent.size() == 4);

        TS_ASSERT(ent.count(id::self)    > 0);
        TS_ASSERT(ent.count(ball)   > 0);
        TS_ASSERT(ent.count(id::owner) > 0);

        delete filter;
    }

    void testSecondMap() {

        atomSpace->getSpaceServer().addSpaceInfo(true, pet_h, T2, 100, 80, 0, OBJ_LENGTH, OBJ_WIDTH, OBJ_HEIGHT, OBJ_YAW);
        atomSpace->getSpaceServer().addSpaceInfo(true, avatar_h, T2, 80,  90, 0, OBJ_LENGTH, OBJ_WIDTH, OBJ_HEIGHT, OBJ_YAW);
        atomSpace->getSpaceServer().addSpaceInfo(true, bone_h, T2, 85, 85, 0, OBJ_LENGTH, OBJ_WIDTH, OBJ_HEIGHT, OBJ_YAW);
        atomSpace->getSpaceServer().addSpaceInfo(true, stick_h, T2, 95, 95, 0, OBJ_LENGTH, OBJ_WIDTH, OBJ_HEIGHT, OBJ_YAW);

        filter = new EntityRelevanceFilter(atomSpace->getSpaceServer().getLatestMap(), "pet", "avatar");
        std::set<std::string> ent = filter->getEntities();

        // additive maps
        TS_ASSERT(ent.size() == 6);

        TS_ASSERT(ent.count(id::self)    > 0);
        TS_ASSERT(ent.count(id::owner) > 0);
        TS_ASSERT(ent.count(bone) > 0);
        TS_ASSERT(ent.count(stick) > 0);
        TS_ASSERT(ent.count(meat) > 0);
        TS_ASSERT(ent.count(ball) > 0);

        std::set<std::string>::const_iterator entity;
        for (entity = ent.begin(); entity != ent.end(); entity++) {
            printf("%s\n", (*entity).c_str());
        }

        delete filter;
    }

    void test_getMessages() {
        EntityRelevanceFilter filter;
        std::set<combo::message> messages1 = filter.getMessages(*atomSpace, Temporal(T1l, T1u));
        std::set<combo::message> messages2 = filter.getMessages(*atomSpace, Temporal(T2l, T2u));

        atomSpace->print();

        for (std::set<combo::message>::iterator mi = messages1.begin();
                mi != messages1.end(); ++mi) {
            std::cout << "MESSAGE1 CONTENT : " << mi->getContent() << std::endl;
        }
        for (std::set<combo::message>::iterator mi = messages2.begin();
                mi != messages2.end(); ++mi) {
            std::cout << "MESSAGE2 CONTENT : " << mi->getContent() << std::endl;
        }

        TS_ASSERT(messages1.size() == 1 && messages2.size() == 1);

        TS_ASSERT_EQUALS((messages1.begin())->getContent(), str1);
        TS_ASSERT_EQUALS((messages2.begin())->getContent(), str2);
    }

    void test_getAgentAction() {
        EntityRelevanceFilter filter;
        AtomSpaceWorldProvider wp(*atomSpace);

        agent_to_actions atas = filter.getAgentActions(wp, Temporal(T1l, T1u), "dummy_self_id", "dummy_owner_id");

        //for(definite_object_set_it doit = ados.begin(); doit != ados.end(); ++doit) {
        //  std::cout << "AGENT ACTION : " << *doit << std::endl;
        //}
        agent_to_actions_const_it atas_it = atas.begin();
        const definite_object_vec_set& ados = atas_it->second;
        definite_object_vec ado = *ados.begin();
        TS_ASSERT_EQUALS(ado[0], get_action_definite_object(dummy_action));
    }

};
