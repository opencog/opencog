/*
 * tests/embodiment/Learning/Filter/ActionFilterUTest.cxxtest
 *
 * Copyright (C) 2002-2009 Novamente LLC
 * All Rights Reserved
 * Author(s): Nil Geisweiller
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */


#include <opencog/atomspace/AtomSpace.h>
#include <opencog/embodiment/AtomSpaceExtensions/atom_types.h>

#include <opencog/embodiment/Learning/Filter/ActionFilter.h>
#include <opencog/embodiment/Learning/behavior/BDRetriever.h>
#include <opencog/embodiment/Learning/LearningServer/AtomSpaceWorldProvider.h>
#include <opencog/embodiment/AvatarComboVocabulary/AvatarComboVocabulary.h>

using namespace AvatarCombo;
using namespace std;
using namespace behavior;

#define ACTION_DONE_TIME 200
#define TIME_INTERVAL ACTION_DONE_TIME

#define BEHAVED_STR "behaved"

//Fixed pet (named Fido) position
//Note that in the SpaceMaps the pet is not moving at all
//while it is described in the behavior descriptions to move
//This has been done because it is easier to code and it is fine so far...
#define PET_X 5.0
#define PET_Y 5.0
#define PET_Z 0.0
//Fixed object (named strick) position
#define OBJ_X 3.0
#define OBJ_Y 3.0
#define OBJ_Z 0.0
//Avatar (named Paul) position at time T1
#define T1 0
#define AVATAR_X1 20.0
#define AVATAR_Y1 20.0
#define AVATAR_Z1 0.0
//Avatar (named Paul) position at time T2
#define T2 ACTION_DONE_TIME/2
#define AVATAR_X2 3.5
#define AVATAR_Y2 3.5
#define AVATAR_Z2 0.0
//Avatar (named Paul) position at time T3
#define T3 2*ACTION_DONE_TIME
#define AVATAR_X3 25.0
#define AVATAR_Y3 25.0
#define AVATAR_Z3 0.0

#define GOTO_OBJ_SPEED_STR "2.5"

class ActionFilterUTest : public CxxTest::TestSuite
{
public:
    ActionFilterUTest() {

        logger().setPrintErrorLevelStdout();
    }

    void test_computeLikelihood() {
        //first we add in the atomSpace the following 2 behavior descriptions :
        //1) goto(stick) drop, from 0 to 2*TIME_INTERVAL
        //2) goto(stick) goto(Paul), from 10*TIME_INTERVAL to 11*TIME_INTERVAL

        //fill combo tree with program
        string pet_str = "Fido";
        string obj_str = "stick";
        string avatar_str = "Paul";
        string trick_name = "fnorb";

        AtomSpace atomSpace;

        //fill atomSpace with dummy_object and dummy_avatar definite object
        Handle obj_h = atomSpace.addNode(OBJECT_NODE, obj_str);
        Handle avatar_h = atomSpace.addNode(AVATAR_NODE, avatar_str);

        //fill atomSpace with pet atom
        Handle pet_h = atomSpace.addNode(PET_NODE, pet_str);

        //fill atomSpace with number atom (for goto_obj speed)
        Handle speed_h = atomSpace.addNode(NUMBER_NODE, GOTO_OBJ_SPEED_STR);

        //fill the atomSpace with the trick concept
        atomSpace.addNode(CONCEPT_NODE, trick_name);

        //fill the spacemap with the locations of Fido, stick and Paul
        atomSpace.getSpaceServer().addSpaceInfo(true, pet_h, T1,
                               PET_X, PET_Y, PET_Z, 1, 1, 1, 0);
        atomSpace.getSpaceServer().addSpaceInfo(true, obj_h,
                               T1, OBJ_X, OBJ_Y, OBJ_Z,1, 1, 1, 0);
        atomSpace.getSpaceServer().addSpaceInfo(true, avatar_h, T1,
                               AVATAR_X1, AVATAR_Y1, AVATAR_Z1, 1, 1, 1, 0);
        atomSpace.getSpaceServer().addSpaceInfo(true, avatar_h, T2,
                               AVATAR_X2, AVATAR_Y2, AVATAR_Z2, 1, 1, 1, 0);
        atomSpace.getSpaceServer().addSpaceInfo(true, avatar_h, T3,
                               AVATAR_X3, AVATAR_Y3, AVATAR_Z3, 1, 1, 1, 0);

        FILE* mapFile = fopen( "file.bin", "wb+" );
        atomSpace.getSpaceServer().getLatestMap( ).save( mapFile );
        fclose( mapFile );

        //fill atomSpace with behaved concept node
        Handle behaved_h = atomSpace.addNode(PREDICATE_NODE, BEHAVED_STR);

        //fill atomSpace with actions goto_obj and drop
        stringstream ss_goto_obj;
        ss_goto_obj << get_instance(id::goto_obj);
        Handle goto_obj_h = atomSpace.addNode(GROUNDED_SCHEMA_NODE,
                                              ss_goto_obj.str());
        stringstream ss_drop;
        ss_drop << get_instance(id::drop);
        Handle drop_h = atomSpace.addNode(GROUNDED_SCHEMA_NODE, ss_drop.str());

        //create the ListLink atoms
        //for goto_obj(stick)
        HandleSeq a1_seq{pet_h, goto_obj_h, obj_h, speed_h};

        Handle a1_h = atomSpace.addLink(LIST_LINK, a1_seq);

        //for drop
        HandleSeq a2_seq{pet_h, drop_h};

        Handle a2_h = atomSpace.addLink(LIST_LINK, a2_seq);

        //for goto_obj(Paul)
        HandleSeq a2bis_seq{pet_h, goto_obj_h, avatar_h, speed_h};

        Handle a2bis_h = atomSpace.addLink(LIST_LINK, a2bis_seq);

        //create the BDs, that is atoms (EvalLink(behaved ....))
        //for goto_obj(stick)
        HandleSeq b1_seq{behaved_h, a1_h};

        Handle bd1_h = atomSpace.addLink(EVALUATION_LINK, b1_seq);

        //for drop
        HandleSeq b2_seq{behaved_h, a2_h};

        Handle bd2_h = atomSpace.addLink(EVALUATION_LINK, b2_seq);

        //goto_obj(Paul)
        HandleSeq b2bis_seq{behaved_h, a2bis_h};

        Handle bd2bis_h = atomSpace.addLink(EVALUATION_LINK, b2bis_seq);

        //add AtTimeLink
        //for goto_obj(stick)
        Handle t1_h = atomSpace.getTimeServer().addTimeInfo(bd1_h, Temporal(0,
                                            TIME_INTERVAL));
        //for drop
        Handle t2_h = atomSpace.getTimeServer().addTimeInfo(bd2_h, Temporal(TIME_INTERVAL,
                                            2 * TIME_INTERVAL));
        //for goto_obj(stick)
        Handle t3_h = atomSpace.getTimeServer().addTimeInfo(bd1_h, Temporal(10 * TIME_INTERVAL,
                                            11 * TIME_INTERVAL));
        //for goto_obj(Paul)
        Handle t4_h = atomSpace.getTimeServer().addTimeInfo(bd2bis_h, Temporal(11 * TIME_INTERVAL,
                                            12 * TIME_INTERVAL));

        //add trick concept
        Handle trick_h = atomSpace.addNode(CONCEPT_NODE, trick_name);

        //add AtTimeLink to trick concept for the first composite BD
        Handle tt1_h = atomSpace.getTimeServer().addTimeInfo(trick_h,
                                             Temporal(0, 2 * TIME_INTERVAL));
        //add memberLinks to the concept node
        HandleSeq m1_seq{t1_h, tt1_h};
        atomSpace.addLink(MEMBER_LINK, m1_seq);
        HandleSeq m2_seq{t2_h, tt1_h};
        atomSpace.addLink(MEMBER_LINK, m2_seq);

        //add AtTimeLink to trick concept for the second composite BD
        Handle tt2_h = atomSpace.getTimeServer().addTimeInfo(trick_h, Temporal(10 * TIME_INTERVAL,
                                             12 * TIME_INTERVAL));
        //add memberLinks to the concept node
        HandleSeq m3_seq{t3_h, tt2_h};
        atomSpace.addLink(MEMBER_LINK, m3_seq);
        HandleSeq m4_seq{t4_h, tt2_h};
        atomSpace.addLink(MEMBER_LINK, m4_seq);


        //set the data for action filter
        std::set<definite_object> dos;
        dos.insert(obj_str);
        dos.insert("owner");//avatar_str);
        dos.insert("self");//pet_str);
        std::set<indefinite_object> idos;
        idos.insert(get_instance(id::nearest_object));
        idos.insert(get_instance(id::random_object));
        builtin_action_set bas;
        bas.insert(get_instance(id::goto_obj));
        bas.insert(get_instance(id::drop));

        //retrieve BDs
        AtomSpaceWorldProvider wp(atomSpace);
        BehaviorCategory BDCat(&atomSpace);
        std::vector<Temporal> est;
        BDRetriever::retrieveAllExemplars(BDCat, est, wp, trick_name);

        //set up action filter and compute the set of action subsequences
        arity_t arity = 2;
        Filter::ActionFilter af(pet_str, avatar_str, wp, dos,
                                idos, bas, arity, true);
        Filter::ActionFilter::combo_tree_ns_set action_subs;
        //set up the arguments, $1=stick and $2=owner
        combo::argument_list al{definite_object(obj_str), id::owner};
        //set up the arguments for the first and second examplar (both the same)
        combo::argument_list_list all{al, al};


        /*******************************************************************
         *               TEST 1 (with only_min_max = false)                *
         *******************************************************************/
        af.insertActionSubseqs(action_subs, BDCat,
                               all, -1/*arbitrary max size*/);

        //build at hand the set of action subsequences that should be the result
        Filter::ActionFilter::combo_tree_ns_set action_subs_res;
        //elementary actions
        { //action seq 1
            combo_tree ass;
            string assStr = string("goto_obj($1 " GOTO_OBJ_SPEED_STR ")");
            stringstream assSS(assStr);
            // assSS >> ass;
            AvatarCombo::operator>>(assSS, ass);
            
            action_subs_res.insert(ass);
        }
        { //action seq 2
            combo_tree ass;
            string assStr = string("goto_obj($2 " GOTO_OBJ_SPEED_STR ")");
            stringstream assSS(assStr);
            // assSS >> ass;
            AvatarCombo::operator>>(assSS, ass);
            action_subs_res.insert(ass);
        }
        { //action seq 3
            combo_tree ass;
            string assStr = string("goto_obj(") + obj_str
                            + string(" " GOTO_OBJ_SPEED_STR ")");
            stringstream assSS(assStr);
            // assSS >> ass;
            AvatarCombo::operator>>(assSS, ass);
            action_subs_res.insert(ass);
        }
        { //action seq 4
            combo_tree ass;
            string assStr = string("drop");
            stringstream assSS(assStr);
            // assSS >> ass;
            AvatarCombo::operator>>(assSS, ass);
            action_subs_res.insert(ass);
        }
        { //action seq 5
            combo_tree ass;
            string assStr = string("goto_obj(") + string(id::owner)
                            + string(" " GOTO_OBJ_SPEED_STR ")");
            stringstream assSS(assStr);
            // assSS >> ass;
            AvatarCombo::operator>>(assSS, ass);
            action_subs_res.insert(ass);
        }
        { //action seq 6
            combo_tree ass;
            string assStr = string("goto_obj(random_object " GOTO_OBJ_SPEED_STR ")");
            stringstream assSS(assStr);
            // assSS >> ass;
            AvatarCombo::operator>>(assSS, ass);
            action_subs_res.insert(ass);
        }
        { //action seq 7
            combo_tree ass;
            string assStr = string("goto_obj(nearest_object " GOTO_OBJ_SPEED_STR ")");
            stringstream assSS(assStr);
            // assSS >> ass;
            AvatarCombo::operator>>(assSS, ass);
            action_subs_res.insert(ass);
        }
        //subsequence of actions
        { //action seq 8
            combo_tree ass;
            string assStr = string("and_seq(goto_obj($1 " GOTO_OBJ_SPEED_STR ") drop)");
            stringstream assSS(assStr);
            // assSS >> ass;
            AvatarCombo::operator>>(assSS, ass);
            action_subs_res.insert(ass);
        }
        { //action seq 9
            combo_tree ass;
            string assStr = string("and_seq(goto_obj(") + obj_str
                            + string(" " GOTO_OBJ_SPEED_STR ") drop)");
            stringstream assSS(assStr);
            // assSS >> ass;
            AvatarCombo::operator>>(assSS, ass);
            action_subs_res.insert(ass);
        }
        { //action seq 10
            combo_tree ass;
            string assStr = string("and_seq(goto_obj(") + obj_str
                            + string(" " GOTO_OBJ_SPEED_STR ") goto_obj($2 " GOTO_OBJ_SPEED_STR "))");
            stringstream assSS(assStr);
            // assSS >> ass;
            AvatarCombo::operator>>(assSS, ass);
            action_subs_res.insert(ass);
        }
        { //action seq 11
            combo_tree ass;
            string assStr = string("and_seq(goto_obj($1 " GOTO_OBJ_SPEED_STR ") goto_obj($2 " GOTO_OBJ_SPEED_STR "))");
            stringstream assSS(assStr);
            // assSS >> ass;
            AvatarCombo::operator>>(assSS, ass);
            action_subs_res.insert(ass);
        }
        { //action seq 12
            combo_tree ass;
            string assStr = string("and_seq(goto_obj($1 " GOTO_OBJ_SPEED_STR ") goto_obj(") + string(id::owner) + string(" " GOTO_OBJ_SPEED_STR "))");
            stringstream assSS(assStr);
            // assSS >> ass;
            AvatarCombo::operator>>(assSS, ass);
            action_subs_res.insert(ass);
        }
        { //action seq 13
            combo_tree ass;
            string assStr = string("and_seq(goto_obj(") + obj_str + string(" " GOTO_OBJ_SPEED_STR ") goto_obj(") + string(id::owner) + string(" " GOTO_OBJ_SPEED_STR "))");
            stringstream assSS(assStr);
            // assSS >> ass;
            AvatarCombo::operator>>(assSS, ass);
            action_subs_res.insert(ass);
        }
        { //action seq 14
            combo_tree ass;
            string assStr = string("and_seq(goto_obj(random_object " GOTO_OBJ_SPEED_STR ") drop)");
            stringstream assSS(assStr);
            // assSS >> ass;
            AvatarCombo::operator>>(assSS, ass);
            action_subs_res.insert(ass);
        }
        { //action seq 15
            combo_tree ass;
            string assStr = string("and_seq(goto_obj(random_object " GOTO_OBJ_SPEED_STR ") goto_obj($2 " GOTO_OBJ_SPEED_STR "))");
            stringstream assSS(assStr);
            // assSS >> ass;
            AvatarCombo::operator>>(assSS, ass);
            action_subs_res.insert(ass);
        }
        { //action seq 16
            combo_tree ass;
            string assStr = string("and_seq(goto_obj(random_object " GOTO_OBJ_SPEED_STR ") goto_obj(") + string(id::owner) + string(" " GOTO_OBJ_SPEED_STR "))");
            stringstream assSS(assStr);
            // assSS >> ass;
            AvatarCombo::operator>>(assSS, ass);
            action_subs_res.insert(ass);
        }
        { //action seq 17
            combo_tree ass;
            string assStr = string("and_seq(goto_obj(") + obj_str + string(" " GOTO_OBJ_SPEED_STR ") goto_obj(random_object " GOTO_OBJ_SPEED_STR "))");
            stringstream assSS(assStr);
            // assSS >> ass;
            AvatarCombo::operator>>(assSS, ass);
            action_subs_res.insert(ass);
        }
        { //action seq 18
            combo_tree ass;
            string assStr = string("and_seq(goto_obj(random_object " GOTO_OBJ_SPEED_STR ") goto_obj(random_object " GOTO_OBJ_SPEED_STR "))");
            stringstream assSS(assStr);
            // assSS >> ass;
            AvatarCombo::operator>>(assSS, ass);
            action_subs_res.insert(ass);
        }
        { //action seq 19
            combo_tree ass;
            string assStr = string("and_seq(goto_obj(nearest_object " GOTO_OBJ_SPEED_STR ") drop)");
            stringstream assSS(assStr);
            // assSS >> ass;
            AvatarCombo::operator>>(assSS, ass);
            action_subs_res.insert(ass);
        }
        { //action seq 20
            combo_tree ass;
            string assStr = string("and_seq(goto_obj($1 " GOTO_OBJ_SPEED_STR ") goto_obj(random_object " GOTO_OBJ_SPEED_STR "))");
            stringstream assSS(assStr);
            // assSS >> ass;
            AvatarCombo::operator>>(assSS, ass);
            action_subs_res.insert(ass);
        }
        { //action seq 21
            combo_tree ass;
            string assStr = string("and_seq(goto_obj(nearest_object " GOTO_OBJ_SPEED_STR ") goto_obj($2 " GOTO_OBJ_SPEED_STR "))");
            stringstream assSS(assStr);
            // assSS >> ass;
            AvatarCombo::operator>>(assSS, ass);
            action_subs_res.insert(ass);
        }
        { //action seq 22
            combo_tree ass;
            string assStr = string("and_seq(goto_obj(nearest_object " GOTO_OBJ_SPEED_STR ") goto_obj(random_object " GOTO_OBJ_SPEED_STR "))");
            stringstream assSS(assStr);
            // assSS >> ass;
            AvatarCombo::operator>>(assSS, ass);
            action_subs_res.insert(ass);
        }
        { //action seq 23
            combo_tree ass;
            string assStr = string("and_seq(goto_obj(nearest_object " GOTO_OBJ_SPEED_STR ") goto_obj(") + string(id::owner) + string(" " GOTO_OBJ_SPEED_STR "))");
            stringstream assSS(assStr);
            // assSS >> ass;
            AvatarCombo::operator>>(assSS, ass);
            action_subs_res.insert(ass);
        }
        //print for debug
        std::cout << "TEST 1 SUBSEQUENCE SET GENERATED BY ACTION FILTER :"
                  << std::endl;
        for (Filter::ActionFilter::combo_tree_ns_set_it asi = action_subs.begin();
                asi != action_subs.end(); ++asi) {
            std::cout << *asi << std::endl;
        }
        std::cout << "TEST 1 SUBSEQUENCE SET THAT SHOULD BE GENERATED :"
                  << std::endl;
        for (Filter::ActionFilter::combo_tree_ns_set_it asi = action_subs_res.begin();
                asi != action_subs_res.end(); ++asi) {
            std::cout << *asi << std::endl;
        }

        //compare the 2 sets
        TS_ASSERT_EQUALS(action_subs, action_subs_res);


        /*******************************************************************
         *               TEST 2 (with only_min_max = true)                 *
         *******************************************************************/
        action_subs.clear();
        af.insertActionSubseqs(action_subs, BDCat,
                               all, -1/*arbitrary max size*/, true);

        //WARNING: it happens that max is 2 so when only_min_max is true
        //the test result is the same as with only_min_max is false
        //this would not be true if the test unit is changed

        //print for debug
        std::cout << "TEST 2 SUBSEQUENCE SET GENERATED BY ACTION FILTER :"
                  << std::endl;
        for (Filter::ActionFilter::combo_tree_ns_set_it asi = action_subs.begin();
                asi != action_subs.end(); ++asi) {
            std::cout << *asi << std::endl;
        }
        std::cout << "TEST 2 SUBSEQUENCE SET THAT SHOULD BE GENERATED :"
                  << std::endl;
        for (Filter::ActionFilter::combo_tree_ns_set_it asi = action_subs_res.begin();
                asi != action_subs_res.end(); ++asi) {
            std::cout << *asi << std::endl;
        }

        //compare the 2 sets
        TS_ASSERT_EQUALS(action_subs, action_subs_res);



    }

};

