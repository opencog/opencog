/*
 * tests/embodiment/Learning/PetaverseHC/NeighborhoodGeneratorUTest.cxxtest
 *
 * Copyright (C) 2002-2009 Novamente LLC
 * All Rights Reserved
 * Author(s): Nil Geisweiller
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */


#include <opencog/embodiment/Learning/PetaverseHC/NeighborhoodGenerator.h>
#include <opencog/embodiment/AvatarComboVocabulary/AvatarComboVocabulary.h>
#include <opencog/embodiment/Learning/RewritingRules/hillclimbing_action_reduction.h>
#include <opencog/embodiment/Learning/RewritingRules/hillclimbing_full_reduction.h>
#include <iostream>

using namespace opencog;
using namespace hillclimbing;
using namespace std;
using namespace AvatarCombo;
using namespace reduct;

class NeighborhoodGeneratorUTest : public CxxTest::TestSuite
{

    typedef combo_tree::sibling_iterator sib_it;
    typedef combo_tree::iterator pre_it;

public:

    void test_precomputeCompositePerceptions() {
        //generate the compositePerceptions set
        std::set<vertex> operators;
        combo_tree_ns_set conditions;
        combo_tree_ns_set actions;

        precomputeOperators(operators);
        precomputeConditions(conditions);
        precomputeActions(actions);

        NeighborhoodGenerator<> ng(operators, conditions, actions,
                                   hillclimbing_action_reduction(),
                                   hillclimbing_full_reduction(),
                                   0, true);

        ng.precomputeCompositePerceptions();

        const combo_tree_ns_set& compositePerceptions = ng.getCompositePerceptions();

        for (combo_tree_ns_set_it i = compositePerceptions.begin();
                i != compositePerceptions.end(); ++i) {
            std::cout << "NEIGHBORHOODGENERATOR TEST COMPOSITE PERCEPTION : "
                      << *i << std::endl;
        }

        //generate the set that compositePerceptions should be
        combo_tree_ns_set cpCopyTest;
        precomputeCPCopyTest(cpCopyTest);

        for (combo_tree_ns_set_it i = cpCopyTest.begin(); i != cpCopyTest.end(); ++i) {
            std::cout << "NEIGHBORHOODGENERATOR COPY COMPOSITE PERCEPTION : " << *i << std::endl;
        }

        //check that they both have the same set of compositePerceptions
        TS_ASSERT_EQUALS(cpCopyTest, compositePerceptions);

    }

    void test_precomputeCompositeActions() {
        //generate the compositeActions set
        std::set<vertex> operators;
        combo_tree_ns_set actions;
        combo_tree_ns_set conditions;

        precomputeOperators(operators);
        precomputeActions(actions);
        precomputeConditions(conditions);

        NeighborhoodGenerator<> ng(operators, conditions, actions,
                                   hillclimbing_action_reduction(),
                                   hillclimbing_full_reduction(),
                                   0, true);

        ng.precomputeCompositePerceptions();
        ng.precomputeCompositeActions();

        const combo_tree_ns_set& compositeActions = ng.getCompositeActions();

        for (combo_tree_ns_set_it i = compositeActions.begin(); i != compositeActions.end(); ++i) {
            std::cout << "NEIGHBORHOODGENERATOR TEST COMPOSITE ACTION : " << *i << std::endl;
        }

        //generate the set that compositeActions should be
        combo_tree_ns_set caCopyTest;
        precomputeCACopyTest(caCopyTest);

        for (combo_tree_ns_set_it i = caCopyTest.begin(); i != caCopyTest.end(); ++i) {
            std::cout << "NEIGHBORHOODGENERATOR COPY COMPOSITE ACTION : " << *i << std::endl;
        }

        //check that they both have the same set of compositeActions
        TS_ASSERT_EQUALS(caCopyTest, compositeActions);
    }

    void test_populate_neighborhood() {
        //generate the compositeActions set
        std::set<vertex> operators;
        combo_tree_ns_set actions;
        combo_tree_ns_set conditions;

        precomputeOperators(operators);
        precomputeActions(actions);
        precomputeConditions(conditions);

        NeighborhoodGenerator<> ng(operators, conditions, actions,
                                   hillclimbing_action_reduction(),
                                   hillclimbing_full_reduction(),
                                   0, true);

        ng.precomputeCompositePerceptions();
        ng.precomputeCompositeActions();

        //generate the neighborhood of and_seq(jump_up)
        combo_tree_ns_set nh; //neighborhood
        combo_tree center;
        stringstream ss;
        ss << "and_seq(jump_up)";
        // ss >> center;
        AvatarCombo::operator>>(ss, center);
        OC_ASSERT(!center.empty(), "in this test center cannot be empty");
        ng.populate_neighborhood(nh, center, pre_it(center.begin()));

        for (combo_tree_ns_set_it i = nh.begin(); i != nh.end(); ++i) {
            std::cout << "NEIGHBORHOODGENERATOR TEST NEIGHBORHOOD : " << *i << std::endl;
        }

        //generate the neighborhood set as it should be
        combo_tree_ns_set nhCopyTest;
        precomputeNeighborhoodCopytest(nhCopyTest);

        for (combo_tree_ns_set_it i = nhCopyTest.begin(); i != nhCopyTest.end(); ++i) {
            std::cout << "NEIGHBORHOODGENERATOR COPY NEIGHBORHOOD : " << *i << std::endl;
        }

        //check that the 2 sets are equal
        TS_ASSERT_EQUALS(nhCopyTest, nh);
    }

private:

    void precomputeOperators(std::set<vertex>& operators) {
        operators.insert(id::sequential_and);
        operators.insert(id::action_boolean_if);
        operators.insert(id::action_action_if);
        operators.insert(id::action_while);
        operators.insert(id::boolean_while);
        operators.insert(id::action_not);
        operators.insert(id::logical_not);
    }

    void precomputeActions(combo_tree_ns_set& actions) {
        {
            stringstream ss;
            combo_tree tmp1;
            ss << "jump_up";
            AvatarCombo::operator>>(ss, tmp1);
            actions.insert(tmp1);
        }
        {
            stringstream ss;
            combo_tree tmp2;
            ss << "goto_obj(stick)";
            AvatarCombo::operator>>(ss, tmp2);
            actions.insert(tmp2);
        }
    }

    void precomputeConditions(combo_tree_ns_set& conditions) {
        {
            stringstream ss;
            combo_tree tmp1;
            ss << "exist_object";
            AvatarCombo::operator>>(ss, tmp1);
            conditions.insert(tmp1);
        }
        {
            stringstream ss;
            combo_tree tmp2;
            ss << "near(stick nearest_object)";
            AvatarCombo::operator>>(ss, tmp2);
            conditions.insert(tmp2);
        }
    }

    void precomputeCPCopyTest(combo_tree_ns_set& compositePerceptions) {
        //elementary perceptions
        {
            stringstream ss;
            combo_tree tmp1;
            ss << "exist_object";
            AvatarCombo::operator>>(ss, tmp1);
            compositePerceptions.insert(tmp1);
        }
        {
            stringstream ss;
            combo_tree tmp2;
            ss << "near(stick nearest_object)";
            AvatarCombo::operator>>(ss, tmp2);
            compositePerceptions.insert(tmp2);
        }
        //logical_not
        //elementary perceptions
        {
            stringstream ss;
            combo_tree tmp3;
            ss << "not(exist_object)";
            AvatarCombo::operator>>(ss, tmp3);
            compositePerceptions.insert(tmp3);
        }
        {
            stringstream ss;
            combo_tree tmp4;
            ss << "not(near(stick nearest_object))";
            AvatarCombo::operator>>(ss, tmp4);
            compositePerceptions.insert(tmp4);
        }

    }

    void precomputeCACopyTest(combo_tree_ns_set& compositeActions) {
        //elementary actions
        {
            stringstream ss;
            combo_tree tmp1;
            ss << "jump_up";
            AvatarCombo::operator>>(ss, tmp1);
            compositeActions.insert(tmp1);
        }
        {
            stringstream ss;
            combo_tree tmp2;
            ss << "goto_obj(stick)";
            AvatarCombo::operator>>(ss, tmp2);
            compositeActions.insert(tmp2);
        }
        //composite actions
        //action_boolean_if
        {
            stringstream ss;
            combo_tree tmp3;
            ss << "action_boolean_if(exist_object and_seq and_seq(jump_up))";
            AvatarCombo::operator>>(ss, tmp3);
            compositeActions.insert(tmp3);
        }
        {
            stringstream ss;
            combo_tree tmp4;
            ss << "action_boolean_if(exist_object and_seq(jump_up) and_seq)";
            AvatarCombo::operator>>(ss, tmp4);
            compositeActions.insert(tmp4);
        }
        {
            stringstream ss;
            combo_tree tmp5;
            ss << "action_boolean_if(exist_object and_seq and_seq(goto_obj(stick)))";
            AvatarCombo::operator>>(ss, tmp5);
            compositeActions.insert(tmp5);
        }
        {
            stringstream ss;
            combo_tree tmp6;
            ss << "action_boolean_if(exist_object and_seq(goto_obj(stick)) and_seq)";
            AvatarCombo::operator>>(ss, tmp6);
            compositeActions.insert(tmp6);
        }
        {
            stringstream ss;
            combo_tree tmp5;
            ss << "action_boolean_if(exist_object and_seq(jump_up) and_seq(goto_obj(stick)))";
            AvatarCombo::operator>>(ss, tmp5);
            compositeActions.insert(tmp5);
        }
        {
            stringstream ss;
            combo_tree tmp6;
            ss << "action_boolean_if(exist_object and_seq(goto_obj(stick)) and_seq(jump_up))";
            AvatarCombo::operator>>(ss, tmp6);
            compositeActions.insert(tmp6);
        }
        {
            stringstream ss;
            combo_tree tmp7;
            ss << "action_boolean_if(near(stick nearest_object) and_seq and_seq(jump_up))";
            AvatarCombo::operator>>(ss, tmp7);
            compositeActions.insert(tmp7);
        }
        {
            stringstream ss;
            combo_tree tmp8;
            ss << "action_boolean_if(near(stick nearest_object) and_seq(jump_up) and_seq)";
            AvatarCombo::operator>>(ss, tmp8);
            compositeActions.insert(tmp8);
        }
        {
            stringstream ss;
            combo_tree tmp9;
            ss << "action_boolean_if(near(stick nearest_object) and_seq and_seq(goto_obj(stick)))";
            AvatarCombo::operator>>(ss, tmp9);
            compositeActions.insert(tmp9);
        }
        {
            stringstream ss;
            combo_tree tmp10;
            ss << "action_boolean_if(near(stick nearest_object) and_seq(goto_obj(stick)) and_seq)";
            AvatarCombo::operator>>(ss, tmp10);
            compositeActions.insert(tmp10);
        }
        {
            stringstream ss;
            combo_tree tmp9;
            ss << "action_boolean_if(near(stick nearest_object) and_seq(jump_up) and_seq(goto_obj(stick)))";
            AvatarCombo::operator>>(ss, tmp9);
            compositeActions.insert(tmp9);
        }
        {
            stringstream ss;
            combo_tree tmp10;
            ss << "action_boolean_if(near(stick nearest_object) and_seq(goto_obj(stick)) and_seq(jump_up))";
            AvatarCombo::operator>>(ss, tmp10);
            compositeActions.insert(tmp10);
        }
        //action_action_if
        { //action_action_if(and_seq(jump_up) and_seq(jump_up) and_seq) -> and_seq(jump_up jump_up)
            stringstream ss;
            combo_tree tmp12;
            ss << "and_seq(jump_up jump_up)";
            AvatarCombo::operator>>(ss, tmp12);
            compositeActions.insert(tmp12);
        }
        { //action_action_if(and_seq(jump_up) and_seq(goto_obj(stick)) and_seq) -> and_seq(jump_up goto_obj(stick))
            stringstream ss;
            combo_tree tmp14;
            ss << "and_seq(jump_up goto_obj(stick))";
            AvatarCombo::operator>>(ss, tmp14);
            compositeActions.insert(tmp14);
        }
        {
            stringstream ss;
            combo_tree tmp15;
            ss << "action_action_if(and_seq(goto_obj(stick)) and_seq and_seq(jump_up))";
            AvatarCombo::operator>>(ss, tmp15);
            compositeActions.insert(tmp15);
        }
        {
            stringstream ss;
            combo_tree tmp15;
            ss << "action_action_if(and_seq(goto_obj(stick)) and_seq(jump_up) and_seq)";
            AvatarCombo::operator>>(ss, tmp15);
            compositeActions.insert(tmp15);
        }
        {
            stringstream ss;
            combo_tree tmp16;
            ss << "action_action_if(and_seq(goto_obj(stick)) and_seq and_seq(goto_obj(stick)))";
            AvatarCombo::operator>>(ss, tmp16);
            compositeActions.insert(tmp16);
        }
        {
            stringstream ss;
            combo_tree tmp17;
            ss << "action_action_if(and_seq(goto_obj(stick)) and_seq(goto_obj(stick)) and_seq)";
            AvatarCombo::operator>>(ss, tmp17);
            compositeActions.insert(tmp17);
        }
        //action_while
        {
            stringstream ss;
            combo_tree tmp18;
            ss << "action_while(and_seq(jump_up))";
            AvatarCombo::operator>>(ss, tmp18);
            compositeActions.insert(tmp18);
        }
        {
            stringstream ss;
            combo_tree tmp19;
            ss << "action_while(and_seq(goto_obj(stick)))";
            AvatarCombo::operator>>(ss, tmp19);
            compositeActions.insert(tmp19);
        }
        {
            stringstream ss;
            combo_tree tmp20;
            ss << "action_while(action_not(and_seq(goto_obj(stick))))";
            AvatarCombo::operator>>(ss, tmp20);
            compositeActions.insert(tmp20);
        }
        //boolean_while
        {
            stringstream ss;
            combo_tree tmp21;
            ss << "boolean_while(exist_object and_seq(jump_up))";
            AvatarCombo::operator>>(ss, tmp21);
            compositeActions.insert(tmp21);
        }
        {
            stringstream ss;
            combo_tree tmp22;
            ss << "boolean_while(exist_object and_seq(goto_obj(stick)))";
            AvatarCombo::operator>>(ss, tmp22);
            compositeActions.insert(tmp22);
        }
        {
            stringstream ss;
            combo_tree tmp23;
            ss << "boolean_while(near(stick nearest_object) and_seq(jump_up))";
            AvatarCombo::operator>>(ss, tmp23);
            compositeActions.insert(tmp23);
        }
        {
            stringstream ss;
            combo_tree tmp24;
            ss << "boolean_while(near(stick nearest_object) and_seq(goto_obj(stick)))";
            AvatarCombo::operator>>(ss, tmp24);
            compositeActions.insert(tmp24);
        }
        {
            stringstream ss;
            combo_tree tmp25;
            ss << "boolean_while(not(exist_object) and_seq(jump_up))";
            AvatarCombo::operator>>(ss, tmp25);
            compositeActions.insert(tmp25);
        }
        {
            stringstream ss;
            combo_tree tmp26;
            ss << "boolean_while(not(exist_object) and_seq(goto_obj(stick)))";
            AvatarCombo::operator>>(ss, tmp26);
            compositeActions.insert(tmp26);
        }
        {
            stringstream ss;
            combo_tree tmp27;
            ss << "boolean_while(not(near(stick nearest_object)) and_seq(jump_up))";
            AvatarCombo::operator>>(ss, tmp27);
            compositeActions.insert(tmp27);
        }
        {
            stringstream ss;
            combo_tree tmp28;
            ss << "boolean_while(not(near(stick nearest_object)) and_seq(goto_obj(stick)))";
            AvatarCombo::operator>>(ss, tmp28);
            compositeActions.insert(tmp28);
        }

    }

    void precomputeNeighborhoodCopytest(combo_tree_ns_set& nh) {
        //actions
        {
            stringstream ss;
            combo_tree tmp1;
            ss << "and_seq";
            AvatarCombo::operator>>(ss, tmp1);
            nh.insert(tmp1);
        }
        {
            stringstream ss;
            combo_tree tmp2;
            ss << "and_seq(jump_up)";
            AvatarCombo::operator>>(ss, tmp2);
            nh.insert(tmp2);
        }
        {
            stringstream ss;
            combo_tree tmp3;
            ss << "and_seq(goto_obj(stick))";
            AvatarCombo::operator>>(ss, tmp3);
            nh.insert(tmp3);
        }
        {
            stringstream ss;
            combo_tree tmp4;
            ss << "and_seq(jump_up jump_up)";
            AvatarCombo::operator>>(ss, tmp4);
            nh.insert(tmp4);
        }
        {
            stringstream ss;
            combo_tree tmp5;
            ss << "and_seq(jump_up goto_obj(stick))";
            AvatarCombo::operator>>(ss, tmp5);
            nh.insert(tmp5);
        }
        {
            stringstream ss;
            combo_tree tmp6;
            ss << "and_seq(goto_obj(stick) jump_up)";
            AvatarCombo::operator>>(ss, tmp6);
            nh.insert(tmp6);
        }
        //action_boolean_if
        {
            stringstream ss;
            combo_tree tmp7;
            ss << "and_seq(action_boolean_if(exist_object and_seq and_seq(jump_up)))";
            AvatarCombo::operator>>(ss, tmp7);
            nh.insert(tmp7);
        }
        {
            stringstream ss;
            combo_tree tmp8;
            ss << "and_seq(action_boolean_if(exist_object and_seq(jump_up) and_seq))";
            AvatarCombo::operator>>(ss, tmp8);
            nh.insert(tmp8);
        }
        {
            stringstream ss;
            combo_tree tmp9;
            ss << "and_seq(action_boolean_if(exist_object and_seq and_seq(goto_obj(stick))))";
            AvatarCombo::operator>>(ss, tmp9);
            nh.insert(tmp9);
        }
        {
            stringstream ss;
            combo_tree tmp10;
            ss << "and_seq(action_boolean_if(exist_object and_seq(goto_obj(stick)) and_seq))";
            AvatarCombo::operator>>(ss, tmp10);
            nh.insert(tmp10);
        }
        {
            stringstream ss;
            combo_tree tmp9;
            ss << "and_seq(action_boolean_if(exist_object and_seq(jump_up) and_seq(goto_obj(stick))))";
            AvatarCombo::operator>>(ss, tmp9);
            nh.insert(tmp9);
        }
        {
            stringstream ss;
            combo_tree tmp10;
            ss << "and_seq(action_boolean_if(exist_object and_seq(goto_obj(stick)) and_seq(jump_up)))";
            AvatarCombo::operator>>(ss, tmp10);
            nh.insert(tmp10);
        }
        {
            stringstream ss;
            combo_tree tmp11;
            ss << "and_seq(action_boolean_if(near(stick nearest_object) and_seq and_seq(jump_up)))";
            AvatarCombo::operator>>(ss, tmp11);
            nh.insert(tmp11);
        }
        {
            stringstream ss;
            combo_tree tmp12;
            ss << "and_seq(action_boolean_if(near(stick nearest_object) and_seq(jump_up) and_seq))";
            AvatarCombo::operator>>(ss, tmp12);
            nh.insert(tmp12);
        }
        {
            stringstream ss;
            combo_tree tmp13;
            ss << "and_seq(action_boolean_if(near(stick nearest_object) and_seq and_seq(goto_obj(stick))))";
            AvatarCombo::operator>>(ss, tmp13);
            nh.insert(tmp13);
        }
        {
            stringstream ss;
            combo_tree tmp14;
            ss << "and_seq(action_boolean_if(near(stick nearest_object) and_seq(goto_obj(stick)) and_seq))";
            AvatarCombo::operator>>(ss, tmp14);
            nh.insert(tmp14);
        }
        {
            stringstream ss;
            combo_tree tmp13;
            ss << "and_seq(action_boolean_if(near(stick nearest_object) and_seq(jump_up) and_seq(goto_obj(stick))))";
            AvatarCombo::operator>>(ss, tmp13);
            nh.insert(tmp13);
        }
        {
            stringstream ss;
            combo_tree tmp14;
            ss << "and_seq(action_boolean_if(near(stick nearest_object) and_seq(goto_obj(stick)) and_seq(jump_up)))";
            AvatarCombo::operator>>(ss, tmp14);
            nh.insert(tmp14);
        }
        {
            stringstream ss;
            combo_tree tmp15;
            ss << "and_seq(jump_up action_boolean_if(exist_object and_seq and_seq(jump_up)))";
            AvatarCombo::operator>>(ss, tmp15);
            nh.insert(tmp15);
        }
        {
            stringstream ss;
            combo_tree tmp16;
            ss << "and_seq(jump_up action_boolean_if(exist_object and_seq(jump_up) and_seq))";
            AvatarCombo::operator>>(ss, tmp16);
            nh.insert(tmp16);
        }
        {
            stringstream ss;
            combo_tree tmp17;
            ss << "and_seq(jump_up action_boolean_if(exist_object and_seq and_seq(goto_obj(stick))))";
            AvatarCombo::operator>>(ss, tmp17);
            nh.insert(tmp17);
        }
        {
            stringstream ss;
            combo_tree tmp18;
            ss << "and_seq(jump_up action_boolean_if(exist_object and_seq(goto_obj(stick)) and_seq))";
            AvatarCombo::operator>>(ss, tmp18);
            nh.insert(tmp18);
        }
        {
            stringstream ss;
            combo_tree tmp17;
            ss << "and_seq(jump_up action_boolean_if(exist_object and_seq(jump_up) and_seq(goto_obj(stick))))";
            AvatarCombo::operator>>(ss, tmp17);
            nh.insert(tmp17);
        }
        {
            stringstream ss;
            combo_tree tmp18;
            ss << "and_seq(jump_up action_boolean_if(exist_object and_seq(goto_obj(stick)) and_seq(jump_up)))";
            AvatarCombo::operator>>(ss, tmp18);
            nh.insert(tmp18);
        }
        {
            stringstream ss;
            combo_tree tmp19;
            ss << "and_seq(jump_up action_boolean_if(near(stick nearest_object) and_seq and_seq(jump_up)))";
            AvatarCombo::operator>>(ss, tmp19);
            nh.insert(tmp19);
        }
        {
            stringstream ss;
            combo_tree tmp20;
            ss << "and_seq(jump_up action_boolean_if(near(stick nearest_object) and_seq(jump_up) and_seq))";
            AvatarCombo::operator>>(ss, tmp20);
            nh.insert(tmp20);
        }
        {
            stringstream ss;
            combo_tree tmp21;
            ss << "and_seq(jump_up action_boolean_if(near(stick nearest_object) and_seq and_seq(goto_obj(stick))))";
            AvatarCombo::operator>>(ss, tmp21);
            nh.insert(tmp21);
        }
        {
            stringstream ss;
            combo_tree tmp22;
            ss << "and_seq(jump_up action_boolean_if(near(stick nearest_object) and_seq(goto_obj(stick)) and_seq))";
            AvatarCombo::operator>>(ss, tmp22);
            nh.insert(tmp22);
        }
        {
            stringstream ss;
            combo_tree tmp21;
            ss << "and_seq(jump_up action_boolean_if(near(stick nearest_object) and_seq(jump_up) and_seq(goto_obj(stick))))";
            AvatarCombo::operator>>(ss, tmp21);
            nh.insert(tmp21);
        }
        {
            stringstream ss;
            combo_tree tmp22;
            ss << "and_seq(jump_up action_boolean_if(near(stick nearest_object) and_seq(goto_obj(stick)) and_seq(jump_up)))";
            AvatarCombo::operator>>(ss, tmp22);
            nh.insert(tmp22);
        }
        {
            stringstream ss;
            combo_tree tmp23;
            ss << "and_seq(action_boolean_if(exist_object and_seq and_seq(jump_up)) jump_up)";
            AvatarCombo::operator>>(ss, tmp23);
            nh.insert(tmp23);
        }
        {
            stringstream ss;
            combo_tree tmp24;
            ss << "and_seq(action_boolean_if(exist_object and_seq(jump_up) and_seq) jump_up)";
            AvatarCombo::operator>>(ss, tmp24);
            nh.insert(tmp24);
        }
        {
            stringstream ss;
            combo_tree tmp25;
            ss << "and_seq(action_boolean_if(exist_object and_seq and_seq(goto_obj(stick))) jump_up)";
            AvatarCombo::operator>>(ss, tmp25);
            nh.insert(tmp25);
        }
        {
            stringstream ss;
            combo_tree tmp26;
            ss << "and_seq(action_boolean_if(exist_object and_seq(goto_obj(stick)) and_seq) jump_up)";
            AvatarCombo::operator>>(ss, tmp26);
            nh.insert(tmp26);
        }
        {
            stringstream ss;
            combo_tree tmp25;
            ss << "and_seq(action_boolean_if(exist_object and_seq(jump_up) and_seq(goto_obj(stick))) jump_up)";
            AvatarCombo::operator>>(ss, tmp25);
            nh.insert(tmp25);
        }
        {
            stringstream ss;
            combo_tree tmp26;
            ss << "and_seq(action_boolean_if(exist_object and_seq(goto_obj(stick)) and_seq(jump_up)) jump_up)";
            AvatarCombo::operator>>(ss, tmp26);
            nh.insert(tmp26);
        }
        {
            stringstream ss;
            combo_tree tmp27;
            ss << "and_seq(action_boolean_if(near(stick nearest_object) and_seq and_seq(jump_up)) jump_up)";
            AvatarCombo::operator>>(ss, tmp27);
            nh.insert(tmp27);
        }
        {
            stringstream ss;
            combo_tree tmp28;
            ss << "and_seq(action_boolean_if(near(stick nearest_object) and_seq(jump_up) and_seq) jump_up)";
            AvatarCombo::operator>>(ss, tmp28);
            nh.insert(tmp28);
        }
        {
            stringstream ss;
            combo_tree tmp29;
            ss << "and_seq(action_boolean_if(near(stick nearest_object) and_seq and_seq(goto_obj(stick))) jump_up)";
            AvatarCombo::operator>>(ss, tmp29);
            nh.insert(tmp29);
        }
        {
            stringstream ss;
            combo_tree tmp40;
            ss << "and_seq(action_boolean_if(near(stick nearest_object) and_seq(goto_obj(stick)) and_seq) jump_up)";
            AvatarCombo::operator>>(ss, tmp40);
            nh.insert(tmp40);
        }
        {
            stringstream ss;
            combo_tree tmp29;
            ss << "and_seq(action_boolean_if(near(stick nearest_object) and_seq(jump_up) and_seq(goto_obj(stick))) jump_up)";
            AvatarCombo::operator>>(ss, tmp29);
            nh.insert(tmp29);
        }
        {
            stringstream ss;
            combo_tree tmp40;
            ss << "and_seq(action_boolean_if(near(stick nearest_object) and_seq(goto_obj(stick)) and_seq(jump_up)) jump_up)";
            AvatarCombo::operator>>(ss, tmp40);
            nh.insert(tmp40);
        }
        //action_action_if
        { //action_action_if(and_seq(jump_up) and_seq(jump_up) and_seq) -> and_seq(jump_up jump_up)
            stringstream ss;
            combo_tree tmp41;
            ss << "and_seq(jump_up jump_up)";
            AvatarCombo::operator>>(ss, tmp41);
            nh.insert(tmp41);
        }
        { //action_action_if(and_seq(jump_up) and_seq(goto_obj(stick)) and_seq) -> and_seq(jump_up goto_obj(stick))
            stringstream ss;
            combo_tree tmp42;
            ss << "and_seq(jump_up goto_obj(stick))";
            AvatarCombo::operator>>(ss, tmp42);
            nh.insert(tmp42);
        }
        {
            stringstream ss;
            combo_tree tmp43;
            ss << "and_seq(action_action_if(and_seq(goto_obj(stick)) and_seq and_seq(jump_up)))";
            AvatarCombo::operator>>(ss, tmp43);
            nh.insert(tmp43);
        }
        {
            stringstream ss;
            combo_tree tmp44;
            ss << "and_seq(action_action_if(and_seq(goto_obj(stick)) and_seq(jump_up) and_seq))";
            AvatarCombo::operator>>(ss, tmp44);
            nh.insert(tmp44);
        }
        {
            stringstream ss;
            combo_tree tmp45;
            ss << "and_seq(action_action_if(and_seq(goto_obj(stick)) and_seq and_seq(goto_obj(stick))))";
            AvatarCombo::operator>>(ss, tmp45);
            nh.insert(tmp45);
        }
        {
            stringstream ss;
            combo_tree tmp46;
            ss << "and_seq(action_action_if(and_seq(goto_obj(stick)) and_seq(goto_obj(stick)) and_seq))";
            AvatarCombo::operator>>(ss, tmp46);
            nh.insert(tmp46);
        }
        { //and_seq(jump_up action_action_if(and_seq(jump_up) and_seq(jump_up) and_seq)) -> and_seq(jump_up jump_up jump_up)
            stringstream ss;
            combo_tree tmp47;
            ss << "and_seq(jump_up jump_up jump_up)";
            AvatarCombo::operator>>(ss, tmp47);
            nh.insert(tmp47);
        }
        { //and_seq(jump_up action_action_if(and_seq(jump_up) and_seq and_seq(goto_obj(stick)))) -> and_seq(jump_up jump_up goto_obj(stick))
            stringstream ss;
            combo_tree tmp48;
            ss << "and_seq(jump_up jump_up goto_obj(stick))";
            AvatarCombo::operator>>(ss, tmp48);
            nh.insert(tmp48);
        }
        {
            stringstream ss;
            combo_tree tmp49;
            ss << "and_seq(jump_up action_action_if(and_seq(goto_obj(stick)) and_seq and_seq(jump_up)))";
            AvatarCombo::operator>>(ss, tmp49);
            nh.insert(tmp49);
        }
        {
            stringstream ss;
            combo_tree tmp50;
            ss << "and_seq(jump_up action_action_if(and_seq(goto_obj(stick)) and_seq(jump_up) and_seq))";
            AvatarCombo::operator>>(ss, tmp50);
            nh.insert(tmp50);
        }
        {
            stringstream ss;
            combo_tree tmp51;
            ss << "and_seq(jump_up action_action_if(and_seq(goto_obj(stick)) and_seq and_seq(goto_obj(stick))))";
            AvatarCombo::operator>>(ss, tmp51);
            nh.insert(tmp51);
        }
        {
            stringstream ss;
            combo_tree tmp52;
            ss << "and_seq(jump_up action_action_if(and_seq(goto_obj(stick)) and_seq(goto_obj(stick)) and_seq))";
            AvatarCombo::operator>>(ss, tmp52);
            nh.insert(tmp52);
        }
        { //and_seq(action_action_if(and_seq(jump_up) and_seq(goto_obj(stick)) and_seq) jump_up) -> and_seq(jump_up goto_obj(stick) jump_up)
            stringstream ss;
            combo_tree tmp53;
            ss << "and_seq(jump_up goto_obj(stick) jump_up)";
            AvatarCombo::operator>>(ss, tmp53);
            nh.insert(tmp53);
        }
        {
            stringstream ss;
            combo_tree tmp54;
            ss << "and_seq(action_action_if(and_seq(goto_obj(stick)) and_seq and_seq(jump_up)) jump_up)";
            AvatarCombo::operator>>(ss, tmp54);
            nh.insert(tmp54);
        }
        {
            stringstream ss;
            combo_tree tmp55;
            ss << "and_seq(action_action_if(and_seq(goto_obj(stick)) and_seq(jump_up) and_seq) jump_up)";
            AvatarCombo::operator>>(ss, tmp55);
            nh.insert(tmp55);
        }
        {
            stringstream ss;
            combo_tree tmp56;
            ss << "and_seq(action_action_if(and_seq(goto_obj(stick)) and_seq and_seq(goto_obj(stick))) jump_up)";
            AvatarCombo::operator>>(ss, tmp56);
            nh.insert(tmp56);
        }
        {
            stringstream ss;
            combo_tree tmp57;
            ss << "and_seq(action_action_if(and_seq(goto_obj(stick)) and_seq(goto_obj(stick)) and_seq) jump_up)";
            AvatarCombo::operator>>(ss, tmp57);
            nh.insert(tmp57);
        }
        //action_while
        {
            stringstream ss;
            combo_tree tmp58;
            ss << "and_seq(action_while(and_seq(jump_up)))";
            AvatarCombo::operator>>(ss, tmp58);
            nh.insert(tmp58);
        }
        {
            stringstream ss;
            combo_tree tmp59;
            ss << "and_seq(action_while(and_seq(goto_obj(stick))))";
            AvatarCombo::operator>>(ss, tmp59);
            nh.insert(tmp59);
        }
        {
            stringstream ss;
            combo_tree tmp60;
            ss << "and_seq(jump_up action_while(and_seq(goto_obj(stick))))";
            AvatarCombo::operator>>(ss, tmp60);
            nh.insert(tmp60);
        }
        {
            stringstream ss;
            combo_tree tmp61;
            ss << "and_seq(action_while(action_not(and_seq(goto_obj(stick)))))";
            AvatarCombo::operator>>(ss, tmp61);
            nh.insert(tmp61);
        }
        {
            stringstream ss;
            combo_tree tmp62;
            ss << "and_seq(jump_up action_while(action_not(and_seq(goto_obj(stick)))))";
            AvatarCombo::operator>>(ss, tmp62);
            nh.insert(tmp62);
        }
        //boolean_while
        {
            stringstream ss;
            combo_tree tmp63;
            ss << "and_seq(boolean_while(exist_object and_seq(jump_up)))";
            AvatarCombo::operator>>(ss, tmp63);
            nh.insert(tmp63);
        }
        {
            stringstream ss;
            combo_tree tmp64;
            ss << "and_seq(boolean_while(near(stick nearest_object) and_seq(jump_up)))";
            AvatarCombo::operator>>(ss, tmp64);
            nh.insert(tmp64);
        }
        {
            stringstream ss;
            combo_tree tmp65;
            ss << "and_seq(boolean_while(exist_object and_seq(goto_obj(stick))))";
            AvatarCombo::operator>>(ss, tmp65);
            nh.insert(tmp65);
        }
        {
            stringstream ss;
            combo_tree tmp66;
            ss << "and_seq(boolean_while(near(stick nearest_object) and_seq(goto_obj(stick))))";
            AvatarCombo::operator>>(ss, tmp66);
            nh.insert(tmp66);
        }
        {
            stringstream ss;
            combo_tree tmp67;
            ss << "and_seq(jump_up boolean_while(exist_object and_seq(jump_up)))";
            AvatarCombo::operator>>(ss, tmp67);
            nh.insert(tmp67);
        }
        {
            stringstream ss;
            combo_tree tmp68;
            ss << "and_seq(jump_up boolean_while(near(stick nearest_object) and_seq(jump_up)))";
            AvatarCombo::operator>>(ss, tmp68);
            nh.insert(tmp68);
        }
        {
            stringstream ss;
            combo_tree tmp69;
            ss << "and_seq(jump_up boolean_while(exist_object and_seq(goto_obj(stick))))";
            AvatarCombo::operator>>(ss, tmp69);
            nh.insert(tmp69);
        }
        {
            stringstream ss;
            combo_tree tmp70;
            ss << "and_seq(jump_up boolean_while(near(stick nearest_object) and_seq(goto_obj(stick))))";
            AvatarCombo::operator>>(ss, tmp70);
            nh.insert(tmp70);
        }
        {
            stringstream ss;
            combo_tree tmp71;
            ss << "and_seq(boolean_while(exist_object and_seq(jump_up)) jump_up)";
            AvatarCombo::operator>>(ss, tmp71);
            nh.insert(tmp71);
        }
        {
            stringstream ss;
            combo_tree tmp72;
            ss << "and_seq(boolean_while(near(stick nearest_object) and_seq(jump_up)) jump_up)";
            AvatarCombo::operator>>(ss, tmp72);
            nh.insert(tmp72);
        }
        {
            stringstream ss;
            combo_tree tmp73;
            ss << "and_seq(boolean_while(exist_object and_seq(goto_obj(stick))) jump_up)";
            AvatarCombo::operator>>(ss, tmp73);
            nh.insert(tmp73);
        }
        {
            stringstream ss;
            combo_tree tmp74;
            ss << "and_seq(boolean_while(near(stick nearest_object) and_seq(goto_obj(stick))) jump_up)";
            AvatarCombo::operator>>(ss, tmp74);
            nh.insert(tmp74);
        }
        {
            stringstream ss;
            combo_tree tmp75;
            ss << "and_seq(boolean_while(not(exist_object) and_seq(jump_up)))";
            AvatarCombo::operator>>(ss, tmp75);
            nh.insert(tmp75);
        }
        {
            stringstream ss;
            combo_tree tmp76;
            ss << "and_seq(boolean_while(not(near(stick nearest_object)) and_seq(jump_up)))";
            AvatarCombo::operator>>(ss, tmp76);
            nh.insert(tmp76);
        }
        {
            stringstream ss;
            combo_tree tmp77;
            ss << "and_seq(boolean_while(not(exist_object) and_seq(goto_obj(stick))))";
            AvatarCombo::operator>>(ss, tmp77);
            nh.insert(tmp77);
        }
        {
            stringstream ss;
            combo_tree tmp78;
            ss << "and_seq(boolean_while(not(near(stick nearest_object)) and_seq(goto_obj(stick))))";
            AvatarCombo::operator>>(ss, tmp78);
            nh.insert(tmp78);
        }
        {
            stringstream ss;
            combo_tree tmp79;
            ss << "and_seq(jump_up boolean_while(not(exist_object) and_seq(jump_up)))";
            AvatarCombo::operator>>(ss, tmp79);
            nh.insert(tmp79);
        }
        {
            stringstream ss;
            combo_tree tmp80;
            ss << "and_seq(jump_up boolean_while(not(near(stick nearest_object)) and_seq(jump_up)))";
            AvatarCombo::operator>>(ss, tmp80);
            nh.insert(tmp80);
        }
        {
            stringstream ss;
            combo_tree tmp81;
            ss << "and_seq(jump_up boolean_while(not(exist_object) and_seq(goto_obj(stick))))";
            AvatarCombo::operator>>(ss, tmp81);
            nh.insert(tmp81);
        }
        {
            stringstream ss;
            combo_tree tmp82;
            ss << "and_seq(jump_up boolean_while(not(near(stick nearest_object)) and_seq(goto_obj(stick))))";
            AvatarCombo::operator>>(ss, tmp82);
            nh.insert(tmp82);
        }
        {
            stringstream ss;
            combo_tree tmp83;
            ss << "and_seq(boolean_while(not(exist_object) and_seq(jump_up)) jump_up)";
            AvatarCombo::operator>>(ss, tmp83);
            nh.insert(tmp83);
        }
        {
            stringstream ss;
            combo_tree tmp84;
            ss << "and_seq(boolean_while(not(near(stick nearest_object)) and_seq(jump_up)) jump_up)";
            AvatarCombo::operator>>(ss, tmp84);
            nh.insert(tmp84);
        }
        {
            stringstream ss;
            combo_tree tmp85;
            ss << "and_seq(boolean_while(not(exist_object) and_seq(goto_obj(stick))) jump_up)";
            AvatarCombo::operator>>(ss, tmp85);
            nh.insert(tmp85);
        }
        {
            stringstream ss;
            combo_tree tmp86;
            ss << "and_seq(boolean_while(not(near(stick nearest_object)) and_seq(goto_obj(stick))) jump_up)";
            AvatarCombo::operator>>(ss, tmp86);
            nh.insert(tmp86);
        }
    }

};
