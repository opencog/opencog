#include <cxxtest/TestSuite.h>

#include <iostream>
#include <algorithm>
#include "eda/scoring/bde.h"
#include "eda/packed.h"
#include <boost/bind.hpp>
#include <boost/lexical_cast.hpp>
#include <limits.h>

using namespace std;
using namespace __gnu_cxx;
using namespace boost;

using namespace Util;
using namespace eda::scoring;
using namespace eda;

class EdaUTest : public CxxTest::TestSuite {
public:
  void packing_test(int length,int arity) {
    vector<int> src(length);
    generate(src.begin(),src.end(),bind(randint,arity));
    vector<packed_t> packed;
    pack(src.begin(),src.end(),arity,back_inserter(packed));
    vector<int> tmp;
    unpack(packed.begin(),length,arity,back_inserter(tmp));
    TS_ASSERT_EQUALS(src,tmp);
  }

  void test_packing_binary_short() { 
    for (int i=0;i<=128;++i)
      packing_test(i,2);
  }
  void test_packing_binary_long() { 
    packing_test(1000,2);
    packing_test(10000,2);
    packing_test(1<<13,2);
  }

  void test_packing_ternary_short() { 
    for (int i=0;i<=128;++i)
      packing_test(i,3);
  }
  void test_packing_ternary_long() { 
    packing_test(1000,3);
    packing_test(10000,3);
    packing_test(1<<13,3);
  }

  void test_packing_quaternary_short() { 
    for (int i=0;i<=128;++i)
      packing_test(i,4);
  }
  void test_packing_quaternary_long() { 
    packing_test(1000,4);
    packing_test(10000,4);
    packing_test(1<<13,4);
  }

  void test_packing_nary_short() { 
    for (int i=0;i<=128;++i)
      packing_test(i,randint(1000));
  }
  void test_packing_nary_long() { 
    for (int i=0;i<10;++i) {
      packing_test(1000,randint(1000));
      packing_test(10000,randint(1000));
      packing_test(1<<13,randint(1000));
    }
  }
  
};
