/*
 * tests/embodiment/Learning/NoSpaceLife/NoSpaceLifeUTest.cxxtest
 *
 * Copyright (C) 2002-2009 Novamente LLC
 * All Rights Reserved
 * Author(s): Nil Geisweiller
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */


#include <opencog/util/numeric.h>

#include <opencog/comboreduct/combo/vertex.h>

#include <opencog/embodiment/Learning/NoSpaceLife/NoSpaceLife.h>
#include <opencog/embodiment/Learning/behavior/BehaviorDescriptionMatcher.h>
#include <opencog/embodiment/AvatarComboVocabulary/AvatarComboVocabulary.h>

using namespace ImaginaryLife;
using namespace behavior;
using namespace AvatarCombo;
using namespace std;

#define T1 0
#define T2 ACTION_DONE_TIME/2
#define T3 3*ACTION_DONE_TIME
#define TIMING_RELEVENT false

class NoSpaceLifeUTest : public CxxTest::TestSuite
{
public:
    NoSpaceLifeUTest() {
    }

    void test_processSequence_and() {
        //initialize random generator
        //randGen().seed(0);

        //fill combo tree with program
        string obj_str = "stick";
        string pet_str = "Fido";
        string owner_str = "Wynx";
        combo_tree tr;
        combo_tree tr_rand;
        stringstream tr_str(string("and_seq(beg stretch goto_obj(")
                            + obj_str + string("))"));
        stringstream tr_str_rand(string("and_seq(beg stretch goto_obj(random_object))"));
        // tr_str >> tr;
        // tr_str_rand >> tr_rand;
        AvatarCombo::operator>>(tr_str, tr);
        AvatarCombo::operator>>(tr_str_rand, tr_rand);

        //fill atomSpace with definite objects
        AtomSpace atomSpace;

        Handle obj_h = atomSpace.addNode(OBJECT_NODE, obj_str);
        Handle owner_h = atomSpace.addNode(AVATAR_NODE, owner_str);
        //fill add these object into a SpaceMap
        atomSpace.getSpaceServer().addSpaceInfo(false, obj_h, T1, 20, 20, 0, 1, 1, 1, 1);
        atomSpace.getSpaceServer().addSpaceInfo(false, owner_h, T1, 10, 10, 0, 1, 1, 1, 1);

        //fill atomSpace with behaved concept node
        Handle behaved_h = atomSpace.addNode(PREDICATE_NODE, BEHAVED_STR);
        //fill atomSpace with pet atom
        atomSpace.addNode(PET_NODE, pet_str);
        //fill atomSpace with actions beg, stretch and goto_obj(stick)
        stringstream ss_goto_obj;
        ss_goto_obj << get_instance(id::goto_obj);
        Handle goto_obj_h = atomSpace.addNode(SCHEMA_NODE, ss_goto_obj.str());
        stringstream ss_beg;
        ss_beg << get_instance(id::beg);
        Handle beg_h = atomSpace.addNode(SCHEMA_NODE, ss_beg.str());
        stringstream ss_stretch;
        ss_stretch << get_instance(id::stretch);
        Handle stretch_h = atomSpace.addNode(SCHEMA_NODE, ss_stretch.str());

        //fill the atomSpace with the behavior to imitate
        //for beg
        HandleSeq a1_seq;
        a1_seq.push_back(owner_h);
        a1_seq.push_back(beg_h);
        Handle a1_h = atomSpace.addLink(LIST_LINK, a1_seq);
        //for stretch
        HandleSeq a2_seq;
        a2_seq.push_back(owner_h);
        a2_seq.push_back(stretch_h);
        Handle a2_h = atomSpace.addLink(LIST_LINK, a2_seq);
        //for goto_obj(stick)
        HandleSeq a3_seq;
        a3_seq.push_back(owner_h);
        a3_seq.push_back(goto_obj_h);
        a3_seq.push_back(obj_h);
        Handle a3_h = atomSpace.addLink(LIST_LINK, a3_seq);
        //create the BDs, that is atoms (EvalLink(behaved ....))
        //for beg
        HandleSeq b1_seq;
        b1_seq.push_back(behaved_h);
        b1_seq.push_back(a1_h);
        Handle bd1_h = atomSpace.addLink(EVALUATION_LINK, b1_seq);
        //for stretch
        HandleSeq b2_seq;
        b2_seq.push_back(behaved_h);
        b2_seq.push_back(a2_h);
        Handle bd2_h = atomSpace.addLink(EVALUATION_LINK, b2_seq);
        //for goto_obj(stick)
        HandleSeq b3_seq;
        b3_seq.push_back(behaved_h);
        b3_seq.push_back(a3_h);
        Handle bd3_h = atomSpace.addLink(EVALUATION_LINK, b3_seq);

        //fill CompositeBehaviorDescriptions to imitate
        CompositeBehaviorDescription bd(&atomSpace);
        bd.addPredicate(bd1_h, 0, ACTION_DONE_TIME);
        bd.addPredicate(bd2_h,
                        ACTION_DONE_TIME + PAUSE_TIME,
                        2*ACTION_DONE_TIME + PAUSE_TIME);
        bd.addPredicate(bd3_h,
                        2*ACTION_DONE_TIME + 2*PAUSE_TIME,
                        3*ACTION_DONE_TIME + 2*PAUSE_TIME);

        //generate the first and_seq without random_object
        //and check that it fits

        NoSpaceLife nsl(atomSpace, pet_str, owner_str, owner_str, bd,
                        Temporal(0, 3*ACTION_DONE_TIME + 2*PAUSE_TIME));

        combo_tree::iterator head = tr.begin();

        nsl.processSequential_and(head.begin(), head.end());

        CompositeBehaviorDescription& genBD = nsl.getGeneratedBD();

        std::cout << std::endl;
        std::cout << "bd    : " << bd.toString() << std::endl;
        std::cout << "genBD : " << genBD.toString() << std::endl;

        BehaviorDescriptionMatcher bdm(&atomSpace);

        TS_ASSERT( bdm.computePertinenceDegree(genBD, bd, TIMING_RELEVENT) > 0.5 );

        //generate the second and_seq with random_object
        //and check that it fits too

        NoSpaceLife nsl_rand(atomSpace, pet_str, owner_str, owner_str, bd,
                             Temporal(0, 3*ACTION_DONE_TIME + 2*PAUSE_TIME));

        combo_tree::iterator head_rand = tr_rand.begin();

        nsl_rand.processSequential_and(head_rand.begin(), head_rand.end());

        CompositeBehaviorDescription& genBD_rand = nsl_rand.getGeneratedBD();

        std::cout << std::endl;
        std::cout << "bd rand    : " << bd.toString() << std::endl;
        std::cout << "genBD rand : " << genBD_rand.toString() << std::endl;

        BehaviorDescriptionMatcher bdm_rand(&atomSpace);

        TS_ASSERT(bdm_rand.computePertinenceDegree(genBD_rand,
                  bd, TIMING_RELEVENT) > 0.5);

    }
};
