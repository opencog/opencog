/*
 * tests/embodiment/Learning/SetopsUTest.cxxtest
 *
 * Copyright (C) 2002-2009 Novamente LLC
 * All Rights Reserved
 * Author(s): Novamente team
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */
#include <cxxtest/TestSuite.h>

#include <iostream>
#include <algorithm>
#include <set>
#include <functional>

#include <opencog/util/tree.h>
#include <opencog/util/algorithm.h>
#include <opencog/util/numeric.h>

#include <boost/bind.hpp>

using namespace std;
using namespace __gnu_cxx;
using namespace boost;

using namespace opencog;

class SetopsUTest : public CxxTest::TestSuite
{
public:
    void test_has_empty_intersec() {
        set<int> x, y, z;

        x.insert(1);
        x.insert(2);
        x.insert(3);

        y.insert(4);
        y.insert(5);
        y.insert(6);

        z.insert(3);
        z.insert(4);

        TS_ASSERT(has_empty_intersection(x.begin(), x.end(), y.begin(), y.end(),
                                         less<int>()));
        TS_ASSERT(has_empty_intersection(y.begin(), y.end(), x.begin(), x.end(),
                                         less<int>()));
        TS_ASSERT(!has_empty_intersection(x.begin(), x.end(), z.begin(), z.end(),
                                          less<int>()));
        TS_ASSERT(!has_empty_intersection(z.begin(), z.end(), y.begin(), y.end(),
                                          less<int>()));
    }

    struct set_eraser {
        set_eraser(set<int>& s) : se(s) { }
        set<int>& se;
        template<typename It>
        void operator()(It it) {
            se.erase(it);
        }
    };
    struct set_inserter {
        set_inserter(set<int>& s) : se(s) { }
        set<int>& se;
        template<typename It1, typename It2>
        void operator()(It1 it1,It2 it2) {
            se.insert(*it1, *it2);
        }
    };

    void test_insert_set_compl() {
        /**  set<int> x,y,z;

        x.insert(1);
        x.insert(2);
        x.insert(3);

        y.insert(4);
        y.insert(5);
        y.insert(6);

        z.insert(3);
        z.insert(4);

        set<int> tmp;

        tmp.clear();
        insert_set_complement(**/
    }
};

