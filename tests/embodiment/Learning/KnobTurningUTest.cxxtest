/*
 * tests/embodiment/Learning/KnobTurningUTest.cxxtest
 *
 * Copyright (C) 2002-2009 Novamente LLC
 * All Rights Reserved
 * Author(s): Novamente team
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */
#include <cxxtest/TestSuite.h>
#include <sstream>
#include <string>
#include <MosesEda/moses/knobs.h>

using namespace moses;
using namespace reduct;
using namespace combo;
using namespace opencog;
using namespace std;

class KnobTurningUTest : public CxxTest::TestSuite
{
public:
    combo_tree totree(string str) {
        stringstream ss(str);
        combo_tree tr;
        ss >> tr;
        return tr;
    }

    void check(combo_tree tr, string str) {
        clean_reduce(tr);
        logical_reduce(tr);

        combo_tree xx = totree(str);
        logical_reduce(xx);

        TS_ASSERT(tr == xx);
    }

    void test_logical() {
        string
        tree_str = "and($1 not($2))",

                   res00 = "and($1 not($2))",
                           res01 = "and(not($2))",
                                   res02 = "and(not($1) not($2))",

                                           res10 = "and($1 not($2))",
                                                   res11 = "and($1)",
                                                           res12 = "and($1 $2)",

                                                                   res20 = "and($1 not($2))",
                                                                           res21 = "and($1 not($2) $3)",
                                                                                   res22 = "and($1 not($2) not($3))";

        combo_tree tr = totree(tree_str);
        reduct::logical_reduce(tr);

        combo_tree t1(argument(1)), t2(argument(2)), t3(argument(3));
        logical_subtree_knob
        k1(tr, tr.begin(), t1.begin()),
        k2(tr, tr.begin(), t2.begin()),
        k3(tr, tr.begin(), t3.begin());

        k1.turn(0);
        check(tr, res00);
        k1.turn(1);
        check(tr, res01);
        k1.turn(2);
        check(tr, res02);
        k1.turn(0);

        k2.turn(0);
        check(tr, res10);
        k2.turn(1);
        check(tr, res11);
        k2.turn(2);
        check(tr, res12);
        k2.turn(0);

        k3.turn(0);
        check(tr, res20);
        k3.turn(1);
        check(tr, res21);
        k3.turn(2);
        check(tr, res22);
        k3.turn(0);
    }
};
