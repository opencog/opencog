/*
 * tests/embodimentAtomSpaceExtensions/AtomSpaceUtilUTest.cxxtest
 *
 * Copyright (C) 2002-2007 Novamente LLC
 * All Rights Reserved
 *
 * Written by Welter Silva <welter@vettalabs.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/atomspace/SimpleTruthValue.h>
#include <opencog/spacetime/SpaceTime.h>
#include <opencog/spacetime/atom_types.h>
#include <opencog/embodiment/AtomSpaceExtensions/AtomSpaceUtil.h>

using namespace opencog;

class AtomSpaceUtilUTest :  public CxxTest::TestSuite
{
private:

public:
    AtomSpaceUtilUTest() {
    }

    void setUp() {
    }

    void tearDown() {
    }

    void testAddNode() {
        AtomSpace atomSpace;
        Handle addedNode = AtomSpaceUtil::addNode(atomSpace, CONCEPT_NODE, "test1");
        Handle gotNode = atomSpace.get_handle(CONCEPT_NODE, "test1");
        TS_ASSERT(addedNode == gotNode);
        TruthValuePtr tv1 = gotNode->getTruthValue();
        TS_ASSERT_EQUALS(tv1->getMean(), TruthValue::DEFAULT_TV()->getMean());
        TS_ASSERT_EQUALS(tv1->getConfidence(), TruthValue::DEFAULT_TV()->getConfidence());
        addedNode = AtomSpaceUtil::addNode(atomSpace, CONCEPT_NODE, "test1");
        TS_ASSERT(addedNode == gotNode);
        TruthValuePtr tv2 = addedNode->getTruthValue();
        TS_ASSERT_EQUALS(tv2->getMean(), TruthValue::DEFAULT_TV()->getMean());
        TS_ASSERT_EQUALS(tv2->getConfidence(), TruthValue::DEFAULT_TV()->getConfidence());
    }

    void testAddLink() {
        AtomSpace atomSpace;
        Handle node = AtomSpaceUtil::addNode(atomSpace, CONCEPT_NODE, "test1");
        HandleSeq outgoing;
        outgoing.push_back(node);
        Handle addedLink =  AtomSpaceUtil::addLink(atomSpace, LIST_LINK, outgoing);
        Handle gotLink = atomSpace.get_handle(LIST_LINK, outgoing);
        TS_ASSERT(addedLink == gotLink);
        TruthValuePtr tv1 = gotLink->getTruthValue();
        TS_ASSERT_EQUALS(tv1->getMean(), TruthValue::TRUE_TV()->getMean());
        TS_ASSERT_EQUALS(tv1->getConfidence(), TruthValue::TRUE_TV()->getConfidence());
        addedLink = AtomSpaceUtil::addLink(atomSpace, LIST_LINK, outgoing);
        TS_ASSERT(addedLink == gotLink);
        TruthValuePtr tv2 = addedLink->getTruthValue();
        TS_ASSERT_EQUALS(tv2->getMean(), TruthValue::TRUE_TV()->getMean());
        TS_ASSERT_EQUALS(tv2->getConfidence(), TruthValue::TRUE_TV()->getConfidence());
    }

    void testAddRewardPredicate() {
        SpaceTimeCogServer srv;
        AtomSpace& atomSpace = srv.getAtomSpace();
        Handle evalLink = AtomSpaceUtil::addRewardPredicate(atomSpace, "1", 1000);
        TS_ASSERT(evalLink != Handle::UNDEFINED);
        Handle timeNode = atomSpace.get_handle(TIME_NODE, Temporal::getTimeNodeName(1000));
        TS_ASSERT(timeNode != Handle::UNDEFINED);
        Handle predNode = atomSpace.get_handle(PREDICATE_NODE, "1.+++");
        TS_ASSERT(predNode != Handle::UNDEFINED);
        HandleSeq emptyOutgoing;
        Handle listLink = atomSpace.get_handle(LIST_LINK, emptyOutgoing);
        TS_ASSERT(listLink != Handle::UNDEFINED);
        HandleSeq evalLinkOutgoing;
        evalLinkOutgoing.push_back(predNode);
        evalLinkOutgoing.push_back(listLink);
        Handle evalLink2 = atomSpace.get_handle(EVALUATION_LINK, evalLinkOutgoing);
        TS_ASSERT(evalLink2 == evalLink);
        HandleSeq atTimeLinkOutgoing;
        atTimeLinkOutgoing.push_back(timeNode);
        atTimeLinkOutgoing.push_back(evalLink);
		
        TS_ASSERT(atomSpace.get_handle(AT_TIME_LINK, atTimeLinkOutgoing) != Handle::UNDEFINED);
    }

    void testAddPunishmentPredicate() {
        SpaceTimeCogServer srv;
        AtomSpace& atomSpace = srv.getAtomSpace();
        Handle evalLink = AtomSpaceUtil::addPunishmentPredicate(atomSpace, "1", 1000);
        TS_ASSERT(evalLink != Handle::UNDEFINED);
        Handle timeNode = atomSpace.get_handle(TIME_NODE, Temporal::getTimeNodeName(1000));
        TS_ASSERT(timeNode != Handle::UNDEFINED);
        Handle predNode = atomSpace.get_handle(PREDICATE_NODE, "1.---");
        TS_ASSERT(predNode != Handle::UNDEFINED);
        HandleSeq emptyOutgoing;
        Handle listLink = atomSpace.get_handle(LIST_LINK, emptyOutgoing);
        TS_ASSERT(listLink != Handle::UNDEFINED);
        HandleSeq evalLinkOutgoing;
        evalLinkOutgoing.push_back(predNode);
        evalLinkOutgoing.push_back(listLink);
        Handle evalLink2 = atomSpace.get_handle(EVALUATION_LINK, evalLinkOutgoing);
        TS_ASSERT(evalLink2 == evalLink);
        HandleSeq atTimeLinkOutgoing;
        atTimeLinkOutgoing.push_back(timeNode);
        atTimeLinkOutgoing.push_back(evalLink);
        TS_ASSERT(atomSpace.get_handle(AT_TIME_LINK, atTimeLinkOutgoing) != Handle::UNDEFINED);
    }

    void testIsActionPredicatePresent() {
        SpaceTimeCogServer srv;
        AtomSpace& atomSpace(srv.getAtomSpace());
        TimeServer& timeServer = srv.getTimeServer();
        HandleSeq execListLinkOutgoing;
        execListLinkOutgoing.push_back(AtomSpaceUtil::addNode(atomSpace, CONCEPT_NODE, "arg1"));
        execListLinkOutgoing.push_back(AtomSpaceUtil::addNode(atomSpace, CONCEPT_NODE, "arg2"));
        Handle execListLink = AtomSpaceUtil::addLink(atomSpace, LIST_LINK, execListLinkOutgoing);
        HandleSeq execLinkOutgoing;
        execLinkOutgoing.push_back(AtomSpaceUtil::addNode(atomSpace, GROUNDED_SCHEMA_NODE, "schema"));
        execLinkOutgoing.push_back(execListLink);
        Handle execLink = AtomSpaceUtil::addLink(atomSpace, EXECUTION_LINK, execLinkOutgoing);

        TS_ASSERT(!AtomSpaceUtil::isActionPredicatePresent(atomSpace, "ActionTried", execLink, 0));
        TS_ASSERT(!AtomSpaceUtil::isActionPredicatePresent(atomSpace, "ActionTried", execLink, 100));
        TS_ASSERT(!AtomSpaceUtil::isActionPredicatePresent(atomSpace, "ActionTried", execLink, ULONG_MAX));
        TS_ASSERT(!AtomSpaceUtil::isActionPredicatePresent(atomSpace, "ActionDone", execLink, 0));
        TS_ASSERT(!AtomSpaceUtil::isActionPredicatePresent(atomSpace, "ActionDone", execLink, 100));
        TS_ASSERT(!AtomSpaceUtil::isActionPredicatePresent(atomSpace, "ActionDone", execLink, ULONG_MAX));

        HandleSeq triedEvalListLinkOutgoing;
        triedEvalListLinkOutgoing.push_back(execLink);
        Handle triedEvalListLink = AtomSpaceUtil::addLink(atomSpace, LIST_LINK, triedEvalListLinkOutgoing);
        HandleSeq triedEvalLinkOutgoing;
        triedEvalLinkOutgoing.push_back(AtomSpaceUtil::addNode(atomSpace, PREDICATE_NODE, "ActionTried"));
        triedEvalLinkOutgoing.push_back(triedEvalListLink);
        Handle triedEvalLink = AtomSpaceUtil::addLink(atomSpace, EVALUATION_LINK, triedEvalLinkOutgoing);

        TS_ASSERT(!AtomSpaceUtil::isActionPredicatePresent(atomSpace, "ActionTried", execLink, 0));
        TS_ASSERT(!AtomSpaceUtil::isActionPredicatePresent(atomSpace, "ActionTried", execLink, 100));
        TS_ASSERT(!AtomSpaceUtil::isActionPredicatePresent(atomSpace, "ActionTried", execLink, ULONG_MAX));
        TS_ASSERT(!AtomSpaceUtil::isActionPredicatePresent(atomSpace, "ActionDone", execLink, 0));
        TS_ASSERT(!AtomSpaceUtil::isActionPredicatePresent(atomSpace, "ActionDone", execLink, 100));
        TS_ASSERT(!AtomSpaceUtil::isActionPredicatePresent(atomSpace, "ActionDone", execLink, ULONG_MAX));

        HandleSeq doneEvalListLinkOutgoing;
        doneEvalListLinkOutgoing.push_back(execLink);
        Handle doneEvalListLink = AtomSpaceUtil::addLink(atomSpace, LIST_LINK, doneEvalListLinkOutgoing);
        HandleSeq doneEvalLinkOutgoing;
        doneEvalLinkOutgoing.push_back(AtomSpaceUtil::addNode(atomSpace, PREDICATE_NODE, "ActionDone"));
        doneEvalLinkOutgoing.push_back(doneEvalListLink);
        Handle doneEvalLink = AtomSpaceUtil::addLink(atomSpace, EVALUATION_LINK, doneEvalLinkOutgoing);

        TS_ASSERT(!AtomSpaceUtil::isActionPredicatePresent(atomSpace, "ActionTried", execLink, 0));
        TS_ASSERT(!AtomSpaceUtil::isActionPredicatePresent(atomSpace, "ActionTried", execLink, 100));
        TS_ASSERT(!AtomSpaceUtil::isActionPredicatePresent(atomSpace, "ActionTried", execLink, 200));
        TS_ASSERT(!AtomSpaceUtil::isActionPredicatePresent(atomSpace, "ActionDone", execLink, 0));
        TS_ASSERT(!AtomSpaceUtil::isActionPredicatePresent(atomSpace, "ActionDone", execLink, 100));
        TS_ASSERT(!AtomSpaceUtil::isActionPredicatePresent(atomSpace, "ActionDone", execLink, 200));

        timeServer.addTimeInfo(triedEvalLink, 10);

        TS_ASSERT(AtomSpaceUtil::isActionPredicatePresent(atomSpace, "ActionTried", execLink, 0));
        TS_ASSERT(!AtomSpaceUtil::isActionPredicatePresent(atomSpace, "ActionTried", execLink, 100));
        TS_ASSERT(!AtomSpaceUtil::isActionPredicatePresent(atomSpace, "ActionTried", execLink, 200));
        TS_ASSERT(!AtomSpaceUtil::isActionPredicatePresent(atomSpace, "ActionDone", execLink, 0));
        TS_ASSERT(!AtomSpaceUtil::isActionPredicatePresent(atomSpace, "ActionDone", execLink, 100));
        TS_ASSERT(!AtomSpaceUtil::isActionPredicatePresent(atomSpace, "ActionDone", execLink, 200));

        timeServer.addTimeInfo(triedEvalLink, 101);

        TS_ASSERT(AtomSpaceUtil::isActionPredicatePresent(atomSpace, "ActionTried", execLink, 0));
        TS_ASSERT(AtomSpaceUtil::isActionPredicatePresent(atomSpace, "ActionTried", execLink, 100));
        TS_ASSERT(!AtomSpaceUtil::isActionPredicatePresent(atomSpace, "ActionTried", execLink, 200));
        TS_ASSERT(!AtomSpaceUtil::isActionPredicatePresent(atomSpace, "ActionDone", execLink, 0));
        TS_ASSERT(!AtomSpaceUtil::isActionPredicatePresent(atomSpace, "ActionDone", execLink, 100));
        TS_ASSERT(!AtomSpaceUtil::isActionPredicatePresent(atomSpace, "ActionDone", execLink, 200));

        timeServer.addTimeInfo(doneEvalLink, 150);

        TS_ASSERT(AtomSpaceUtil::isActionPredicatePresent(atomSpace, "ActionTried", execLink, 0));
        TS_ASSERT(AtomSpaceUtil::isActionPredicatePresent(atomSpace, "ActionTried", execLink, 100));
        TS_ASSERT(!AtomSpaceUtil::isActionPredicatePresent(atomSpace, "ActionTried", execLink, 200));
        TS_ASSERT(AtomSpaceUtil::isActionPredicatePresent(atomSpace, "ActionDone", execLink, 0));
        TS_ASSERT(AtomSpaceUtil::isActionPredicatePresent(atomSpace, "ActionDone", execLink, 100));
        TS_ASSERT(!AtomSpaceUtil::isActionPredicatePresent(atomSpace, "ActionDone", execLink, 200));

        timeServer.addTimeInfo(doneEvalLink, 201);

        TS_ASSERT(AtomSpaceUtil::isActionPredicatePresent(atomSpace, "ActionTried", execLink, 0));
        TS_ASSERT(AtomSpaceUtil::isActionPredicatePresent(atomSpace, "ActionTried", execLink, 100));
        TS_ASSERT(!AtomSpaceUtil::isActionPredicatePresent(atomSpace, "ActionTried", execLink, 200));
        TS_ASSERT(AtomSpaceUtil::isActionPredicatePresent(atomSpace, "ActionDone", execLink, 0));
        TS_ASSERT(AtomSpaceUtil::isActionPredicatePresent(atomSpace, "ActionDone", execLink, 100));
        TS_ASSERT(AtomSpaceUtil::isActionPredicatePresent(atomSpace, "ActionDone", execLink, 200));

        timeServer.addTimeInfo(triedEvalLink, ULONG_MAX);

        TS_ASSERT(AtomSpaceUtil::isActionPredicatePresent(atomSpace, "ActionTried", execLink, 0));
        TS_ASSERT(AtomSpaceUtil::isActionPredicatePresent(atomSpace, "ActionTried", execLink, 100));
        TS_ASSERT(AtomSpaceUtil::isActionPredicatePresent(atomSpace, "ActionTried", execLink, 200));
        TS_ASSERT(AtomSpaceUtil::isActionPredicatePresent(atomSpace, "ActionDone", execLink, 0));
        TS_ASSERT(AtomSpaceUtil::isActionPredicatePresent(atomSpace, "ActionDone", execLink, 100));
        TS_ASSERT(AtomSpaceUtil::isActionPredicatePresent(atomSpace, "ActionDone", execLink, 200));

        TS_ASSERT(!AtomSpaceUtil::isActionPredicatePresent(atomSpace, "ActionTried", execLink, ULONG_MAX));
        TS_ASSERT(!AtomSpaceUtil::isActionPredicatePresent(atomSpace, "ActionDone", execLink, ULONG_MAX));
    }

};
