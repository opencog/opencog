/*
 * tests/util/ConfigUTest.cxxtest
 *
 * Copyright (C) 2008 by OpenCog Foundation
 * All Rights Reserved
 *
 * Written by Gustavo Gama <gama@vettalabs.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <cstdio>
#include <fstream>
#include <iostream>

#include <opencog/util/Config.h>
#include <opencog/util/exceptions.h>

using namespace opencog;

class ConfigUTest : public CxxTest::TestSuite
{

public:
    ConfigUTest() {}
    void setUp() {}
    void tearDown() {}

    void testDefault() {
        TS_ASSERT_THROWS(config()["INVALID_PARAM"], InvalidParamException&);
        TS_ASSERT(config()["SERVER_PORT"] == "17001");
        TS_ASSERT(config().get_int("SERVER_PORT") == 17001);
        TS_ASSERT(config().get_double("SERVER_PORT") == 17001.0);
        TS_ASSERT(config()["LOG_FILE"] == "opencog_server.log");
        TS_ASSERT(config()["LOG_LEVEL"] == "info");
        TS_ASSERT(config()["BACK_TRACE_LOG_LEVEL"] == "error"); // C++ stack traces only on error!
        TS_ASSERT(config().get_bool("LOG_TO_STDOUT"));
        TS_ASSERT(config().get_int("SERVER_CYCLE_DURATION") == 100);
        TS_ASSERT(!config().get_bool("EXTERNAL_TICK_MODE"));
        TS_ASSERT(config().get_int("STARTING_STI_FUNDS") == 10000);
        TS_ASSERT(config().get_int("STARTING_LTI_FUNDS") == 10000);
        TS_ASSERT(config().get_int("STI_FUNDS_BUFFER") == 10000);
        TS_ASSERT(config().get_int("LTI_FUNDS_BUFFER") == 10000);
        TS_ASSERT(config().get_int("MIN_STI") == -400);
        TS_ASSERT(config()["PROMPT"] == "opencog> ");
        TS_ASSERT(config()["MODULES"] == "libbuiltinreqs.so");
    }


    void testLoadFromFile() {
        // first, write the configuration file
        const char *config_file_name = "ConfigUTest.config";
        std::ofstream out(config_file_name);
        out << "# ConfigUTest file; commented initial line\n";
        out << "     # Another comment line with blank prefix\n";
        out << " PARAM1 = VALUE1\n";
        out << "    PARAM2    =    VALUE2   \n";
        out << "PARAM3=VALUE3\n";
        out << "COMPOSED PARAMETER NAME 4 = VALUE4\n";
        out << "# another comment, just for kicks\n";
        out << "PARAM5 =  COMPOSED PARAMETER VALUE 5 \n";
        out << "PARAM6 = VALUE6  # end of line comments\n";
        out << "  PARAM7  =  248 # integer parameter\n";
        out << "PARAM8  =1.2584 # double parameter\n";
        //out << "PARAM9=   -29847.167015 $&@*a786A!$alk # double parameter and useless discarded extra characters\n";
        out << "PARAM9=   -29847.167015 # double parameter\n";
        out << "STI_FUNDS_BUFFER = 200\n";
        out << "LTI_FUNDS_BUFFER = 10\n";
        out << "LOG_TO_STDOUT    = false\n";
        out.close();

        // reset configuration to default parameters
        config().reset();

        // check default parameters before and after loading file
        TS_ASSERT(config().get_int("STI_FUNDS_BUFFER") == 10000);
        TS_ASSERT(config().get_int("LTI_FUNDS_BUFFER") == 10000);
        config().load(config_file_name);
        TS_ASSERT(config().get_int("STI_FUNDS_BUFFER") == 200);
        TS_ASSERT(config().get_int("LTI_FUNDS_BUFFER") == 10);
        TS_ASSERT(!config().get_bool("LOG_TO_STDOUT"));

        // check remaining parameters from file
        TS_ASSERT(config().get("PARAM1") == "VALUE1");
        TS_ASSERT(config()["PARAM2"] == "VALUE2");
        TS_ASSERT(config()["PARAM3"] == "VALUE3");
        TS_ASSERT(config()["COMPOSED PARAMETER NAME 4"] == "VALUE4");
        TS_ASSERT(config()["PARAM5"] == "COMPOSED PARAMETER VALUE 5");
        TS_ASSERT(config()["PARAM6"] == "VALUE6");
        TS_ASSERT(config().get_int("PARAM7") == 248);
        TS_ASSERT(config().get_double("PARAM8") == 1.2584);
        TS_ASSERT(config().get_double("PARAM9") == -29847.167015);

        // finally, remove the temporary file and free the string with its name
        std::remove(config_file_name);
    }

    void testSet() {
        // reset configuration to default parameters
        config().reset();

        // check default parameters before and setting the new value
        TS_ASSERT(config().get("STI_FUNDS_BUFFER") == "10000");
        TS_ASSERT(config().get_int("STI_FUNDS_BUFFER") == 10000);
        config().set("STI_FUNDS_BUFFER", "200");
        TS_ASSERT(config().get("STI_FUNDS_BUFFER") == "200");
        TS_ASSERT(config().get_int("STI_FUNDS_BUFFER") == 200);
    }

    /**
     * Check that setting a boolean parameter and getting an int
     * raises an InvalidParamException
     */
    void testGetType() {
        config().reset();

        config().set("BOOL_PARAM1", "true");
        config().set("BOOL_PARAM2", "false");
        
        TS_ASSERT_EQUALS(config().get_bool("BOOL_PARAM1"), true);
        TS_ASSERT_THROWS(config().get_int("BOOL_PARAM2"),
                         InvalidParamException&);
        TS_ASSERT_THROWS(config().get_long("BOOL_PARAM2"),
                         InvalidParamException&);
        TS_ASSERT_THROWS(config().get_double("BOOL_PARAM2"),
                         InvalidParamException&);
    }

}; // class
