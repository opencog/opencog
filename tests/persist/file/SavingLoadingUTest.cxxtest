/*
 * tests/atomspace/SavingLoadingUTest.cxxtest
 *
 * Copyright (C) 2002-2007 Novamente LLC
 * All Rights Reserved
 *
 * Written by Welter Silva <welter@vettalabs.com>
 *            Carlos Lopes <dlopes@vettalabs.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <math.h>
#include <stdlib.h>
#include <cstdio>

#include <opencog/atomspace/AtomSpace.h>
#include <opencog/atomspace/AttentionValue.h>
#include <opencog/atomspace/CompositeTruthValue.h>
#include <opencog/atomspace/IndefiniteTruthValue.h>
#include <opencog/persist/file/SavingLoading.h>
#include <opencog/atomspace/SimpleTruthValue.h>
#include <opencog/spacetime/TimeServer.h>
#include <opencog/util/Logger.h>

#include "tests/persist/file/atom_types.definitions"

using namespace std;
using namespace opencog;

#define DUMP_FILENAME "SavingLoadingUTest.dump"

#define NUM_TVS 5
#define TV1_MEAN 0.25f
#define TV1_COUNT 0.0f
#define TV2_L 0.25f
#define TV2_U 0.75f
#define TV3_MEAN 0.75f
#define TV3_COUNT 2.0f

// Converting from confidence to count and back again using single-prcision
// float is a real accuracy killer.  In particular, 1/801 = 0.001248 but
// converting back gives 800*0.001248/(1.0-0.001248) = 2.000352 and so
// comparison tests can only be accurate to about 0.000352 or thereabouts.
#define FLOAT_ACCEPTABLE_ERROR 0.001

#define NODE1_NAME "node1"
#define NODE2_NAME "node2"
#define NODE3_NAME "node3"
#define NODE4_NAME "node4"
#define NODE5_NAME "node5"

class SavingLoadingUTest :  public CxxTest::TestSuite
{

private:

    AtomSpace* as;
    SpaceServer* ss;
    TimeServer* ts;

    TruthValuePtr tvs[NUM_TVS];

public:
    SavingLoadingUTest() {
        #include "tests/persist/file/atom_types.inheritance"
        tvs[0] = SimpleTruthValue::createTV(TV1_MEAN, TV1_COUNT);
        tvs[1] = IndefiniteTruthValue::createTV(TV2_L, TV2_U);
        tvs[2] = CompositeTruthValue::createTV(SimpleTruthValue::createTV(TV3_MEAN, TV3_COUNT), NULL_VERSION_HANDLE);
        tvs[3] = NULL;
        tvs[4] = NULL;
    }

    ~SavingLoadingUTest() {
    }

    void setUp() {
    }

    void tearDown() {
    }

    void runSaving(AtomSpace& atomSpace) {
        logger().debug("runSaving()");
        SavingLoading savingLoading;

        // Insert 3 basic concept nodes with the already declared names and tvs.
        Handle h1 = atomSpace.addNode(CONCEPT_NODE, (string)NODE1_NAME, tvs[0]);
        Handle h2 = atomSpace.addNode(CONCEPT_NODE, (string)NODE2_NAME, tvs[1]);
        Handle h3 = atomSpace.addNode(CONCEPT_NODE, (string)NODE3_NAME, tvs[2]);
        //logger().debug("runSaving() 1");

        // Insert other nodes with 2 more Composite TVs with valid handles
        //if (tvs[3] == NULL) {
        tvs[3] = tvs[2]->clone();
        CompositeTVCast(tvs[3])->setVersionedTV(tvs[0], VersionHandle(HYPOTHETICAL, h1));
        //}
        //if (tvs[4] == NULL) {
        tvs[4] = tvs[2]->clone();
        CompositeTVCast(tvs[4])->setVersionedTV(tvs[1], VersionHandle(CONTEXTUAL, h2));
        CompositeTVCast(tvs[4])->setVersionedTV(tvs[1], VersionHandle(HYPOTHETICAL, h2));
        //}
        //logger().debug("runSaving() 2");
        Handle h4 = atomSpace.addNode(CONCEPT_NODE, (string)NODE4_NAME, tvs[3]);
        Handle h5 = atomSpace.addNode(CONCEPT_NODE, (string)NODE5_NAME, tvs[4]);
        //logger().debug("runSaving() 3");

        // Insert some links
        HandleSeq outgoing;
        Handle h6 = atomSpace.addLink(LIST_LINK, outgoing);
        outgoing.push_back(h1);
        Handle h13 = atomSpace.addLink(LIST_LINK, outgoing);
        outgoing.push_back(h2);
        outgoing.push_back(h3);
        Handle h14 = atomSpace.addLink(LIST_LINK, outgoing);
        outgoing.clear();
        outgoing.push_back(h4);
        outgoing.push_back(h5);
        Handle h9 = atomSpace.addLink(LIST_LINK, outgoing);

        // Associate some timestamps to existing atoms (to check save/load of TimeServer repository)
        Handle h15 = ts->addTimeInfo(h1, Temporal(0, 0));
        Handle h16 = ts->addTimeInfo(h4, Temporal(10, 100));
        Handle h17 = ts->addTimeInfo(h6, Temporal(0, 0));
        Handle h18 = ts->addTimeInfo(h9, Temporal(0, 0));
        Handle h19 = ts->addTimeInfo(h9, Temporal(10, 100));
        Handle h20 = ts->addTimeInfo(h9, Temporal(0, 10)); // put in inverse order intentionally for testing this case too

        Handle h10 = atomSpace.addNode(NUMBER_NODE, "1");
        Handle h11 = atomSpace.addNode(CONCEPT_NODE, "fido");
        outgoing.clear();
        outgoing.push_back(h10);
        outgoing.push_back(h11);
        Handle h21 = atomSpace.addLink(LIST_LINK, outgoing);
        Handle h12 = atomSpace.addNode(CONCEPT_NODE, "fido");
        TS_ASSERT(h11 == h12);

        savingLoading.save(DUMP_FILENAME, atomSpace, *ss, *ts);

        logger().debug("runSaving() ended");
    }


    void runLoading(AtomSpace& atomSpace) {
        logger().debug("runLoading()");
        SavingLoading savingLoading;

        savingLoading.load(DUMP_FILENAME, atomSpace, *ss, *ts);
        logger().debug("loaded %s", DUMP_FILENAME);

        // Check if it loads all inserted atoms with the same attributes (specially TruthValues)

        // Check nodes
        Handle h1 = atomSpace.getHandle(CONCEPT_NODE, NODE1_NAME);
        TS_ASSERT(h1 != Handle::UNDEFINED);
        const AttentionValue& av1 = atomSpace.getAV(h1);
        TS_ASSERT(av1.getSTI()  == AttentionValue::DEFAULTATOMSTI);
        TS_ASSERT(av1.getLTI()  == AttentionValue::DEFAULTATOMLTI);
        TS_ASSERT(av1.getVLTI() == AttentionValue::DEFAULTATOMVLTI);
        TruthValuePtr tv1 = atomSpace.getTV(h1);
        TS_ASSERT(tv1->getType() == tvs[0]->getType());
        TS_ASSERT(tv1->getMean() == tvs[0]->getMean());
        TS_ASSERT(tv1->getCount() == tvs[0]->getCount());
        TS_ASSERT(fabs(tv1->getConfidence() - tvs[0]->getConfidence()) < FLOAT_ACCEPTABLE_ERROR);

        Handle h2 = atomSpace.getHandle(CONCEPT_NODE, NODE2_NAME);
        TS_ASSERT(h2 != Handle::UNDEFINED);
        const AttentionValue& av2 = atomSpace.getAV(h2);
        TS_ASSERT(av2.getSTI()  == AttentionValue::DEFAULTATOMSTI);
        TS_ASSERT(av2.getLTI()  == AttentionValue::DEFAULTATOMLTI);
        TS_ASSERT(av2.getVLTI() == AttentionValue::DEFAULTATOMVLTI);

        TruthValuePtr tv2 = atomSpace.getTV(h2);
        TS_ASSERT(tv2->getType() == tvs[1]->getType());
        TS_ASSERT(tv2->getMean() == tvs[1]->getMean());
        TS_ASSERT(tv2->getCount() == tvs[1]->getCount());
        TS_ASSERT(fabs(tv2->getConfidence() - tvs[1]->getConfidence()) < FLOAT_ACCEPTABLE_ERROR);

        Handle h3 = atomSpace.getHandle(CONCEPT_NODE, NODE3_NAME);
        TS_ASSERT(h3 != Handle::UNDEFINED);
        const AttentionValue& av3 = atomSpace.getAV(h3);
        TS_ASSERT(av3.getSTI()  == AttentionValue::DEFAULTATOMSTI);
        TS_ASSERT(av3.getLTI()  == AttentionValue::DEFAULTATOMLTI);
        TS_ASSERT(av3.getVLTI() == AttentionValue::DEFAULTATOMVLTI);

        TruthValuePtr tv3 = atomSpace.getTV(h3);
        TS_ASSERT(tv3->getType() == tvs[2]->getType());
        TS_ASSERT(fabs(tv3->getMean() - tvs[2]->getMean()) < FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(fabs(tv3->getCount() - tvs[2]->getCount()) < FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(fabs(tv3->getConfidence() - tvs[2]->getConfidence()) < FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(CompositeTVCast(tv3)->getNumberOfVersionedTVs() == CompositeTVCast(tvs[2])->getNumberOfVersionedTVs());

        Handle h4 = atomSpace.getHandle(CONCEPT_NODE, NODE4_NAME);
        TS_ASSERT(h4 != Handle::UNDEFINED);
        const AttentionValue& av4 = atomSpace.getAV(h4);
        TS_ASSERT(av4.getSTI()  == AttentionValue::DEFAULTATOMSTI);
        TS_ASSERT(av4.getLTI()  == AttentionValue::DEFAULTATOMLTI);
        TS_ASSERT(av4.getVLTI() == AttentionValue::DEFAULTATOMVLTI);

        TruthValuePtr tv4 = atomSpace.getTV(h4);
        TS_ASSERT(tv4->getType() == tvs[3]->getType());
        TS_ASSERT(fabs(tv4->getMean() - tvs[3]->getMean()) < FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(fabs(tv4->getCount() - tvs[3]->getCount()) < FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(fabs(tv4->getConfidence() - tvs[3]->getConfidence()) < FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(CompositeTVCast(tv4)->getNumberOfVersionedTVs() == CompositeTVCast(tvs[3])->getNumberOfVersionedTVs());

        TruthValuePtr versionedTv = CompositeTVCast(tv4)->getVersionedTV(VersionHandle(HYPOTHETICAL, h1));
        TS_ASSERT(not versionedTv->isNullTv());
        TS_ASSERT(versionedTv->getType() == tvs[0]->getType());
        TS_ASSERT(versionedTv->getMean() == tvs[0]->getMean());
        TS_ASSERT(versionedTv->getCount() == tvs[0]->getCount());
        TS_ASSERT(fabs(versionedTv->getConfidence() - tvs[0]->getConfidence()) < FLOAT_ACCEPTABLE_ERROR);

        Handle h5 = atomSpace.getHandle(CONCEPT_NODE, NODE5_NAME);
        TS_ASSERT(h5 != Handle::UNDEFINED);
        const AttentionValue& av5 = atomSpace.getAV(h5);
        TS_ASSERT(av5.getSTI()  == AttentionValue::DEFAULTATOMSTI);
        TS_ASSERT(av5.getLTI()  == AttentionValue::DEFAULTATOMLTI);
        TS_ASSERT(av5.getVLTI() == AttentionValue::DEFAULTATOMVLTI);

        TruthValuePtr tv5 = atomSpace.getTV(h5);
        TS_ASSERT(tv5->getType() == tvs[4]->getType());
        TS_ASSERT(fabs(tv5->getMean() - tvs[4]->getMean()) < FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(fabs(tv5->getCount() - tvs[4]->getCount()) < FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(fabs(tv5->getConfidence() - tvs[4]->getConfidence()) < FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(CompositeTVCast(tv5)->getNumberOfVersionedTVs() == CompositeTVCast(tvs[4])->getNumberOfVersionedTVs());

        TruthValuePtr versionedTv1 = CompositeTVCast(tv5)->getVersionedTV(VersionHandle(CONTEXTUAL, h2));
        TS_ASSERT(not versionedTv1->isNullTv());
        TS_ASSERT(versionedTv1->getType() == tvs[1]->getType());
        TS_ASSERT(versionedTv1->getMean() == tvs[1]->getMean());
        TS_ASSERT(versionedTv1->getCount() == tvs[1]->getCount());
        TS_ASSERT(fabs(versionedTv1->getConfidence() - tvs[1]->getConfidence()) < FLOAT_ACCEPTABLE_ERROR);
        TruthValuePtr versionedTv2 = CompositeTVCast(tv5)->getVersionedTV(VersionHandle(HYPOTHETICAL, h2));
        TS_ASSERT(not versionedTv2->isNullTv());
        TS_ASSERT(versionedTv2->getType() == tvs[1]->getType());
        TS_ASSERT(versionedTv2->getMean() == tvs[1]->getMean());
        TS_ASSERT(versionedTv2->getCount() == tvs[1]->getCount());
        TS_ASSERT(fabs(versionedTv2->getConfidence() - tvs[1]->getConfidence()) < FLOAT_ACCEPTABLE_ERROR);

        // Check links

        HandleSeq outgoing;
        Handle h6 = atomSpace.getHandle(LIST_LINK, outgoing);
        TS_ASSERT(h6 != Handle::UNDEFINED);

        outgoing.push_back(h1);
        Handle h7 = atomSpace.getHandle(LIST_LINK, outgoing);
        TS_ASSERT(h7 != Handle::UNDEFINED);

        outgoing.push_back(h2);
        outgoing.push_back(h3);
        Handle h8 = atomSpace.getHandle(LIST_LINK, outgoing);
        TS_ASSERT(h8 != Handle::UNDEFINED);

        outgoing.clear();
        outgoing.push_back(h4);
        outgoing.push_back(h5);
        Handle h9 = atomSpace.getHandle(LIST_LINK, outgoing);
        TS_ASSERT(h9 != Handle::UNDEFINED);

        // Check TimeServer entries
        vector<HandleTemporalPair> result;
        ts->getTimeInfo(back_inserter(result), h1);
        TS_ASSERT(result.size() == 1);
        TS_ASSERT(*(result[0].getTemporal()) == Temporal(0, 0));

        result.clear();
        ts->getTimeInfo(back_inserter(result), h4);
        TS_ASSERT(result.size() == 1);
        TS_ASSERT(*(result[0].getTemporal()) == Temporal(10, 100));

        result.clear();
        ts->getTimeInfo(back_inserter(result), h6);
        TS_ASSERT(result.size() == 1);
        TS_ASSERT(*(result[0].getTemporal()) == Temporal(0, 0));

        result.clear();
        ts->getTimeInfo(back_inserter(result), h9);
        TS_ASSERT(result.size() == 3);
        TS_ASSERT(*(result[0].getTemporal()) == Temporal(0, 0));
        TS_ASSERT(*(result[1].getTemporal()) == Temporal(0, 10));
        TS_ASSERT(*(result[2].getTemporal()) == Temporal(10, 100));

        Handle h10 = atomSpace.getHandle(NUMBER_NODE, "1");
        TS_ASSERT(h10 != Handle::UNDEFINED);
        Handle h11 = atomSpace.getHandle(CONCEPT_NODE, "fido");
        TS_ASSERT(h11 != Handle::UNDEFINED);
        outgoing.clear();
        outgoing.push_back(h10);
        outgoing.push_back(h11);
        TS_ASSERT(atomSpace.getHandle(LIST_LINK, outgoing) != Handle::UNDEFINED);

        Handle h12 = atomSpace.addNode(CONCEPT_NODE, "fido");
        TS_ASSERT(h11 == h12);

        logger().debug("runLoading() ended");
    }

    void testSavingLoading()
    {
        
        AtomSpace *atomSpace1 = new AtomSpace();
        ss = new SpaceServer(*atomSpace1);
        ts = new TimeServer(*atomSpace1, ss);

        runSaving(*atomSpace1);
        delete ts;
        delete ss;
        delete atomSpace1;

        // MUST delete atomspace1 before loading atomspace2,
        // otherwise atoms in the TLB, which have the same
        // handles, will end up colliding with one another.
        AtomSpace *atomSpace2 = new AtomSpace();
        ss = new SpaceServer(*atomSpace2);
        ts = new TimeServer(*atomSpace2, ss);

        runLoading(*atomSpace2);
        runSaving(*atomSpace2);
        delete ts;
        delete ss;
        delete atomSpace2;

        AtomSpace *atomSpace4 = new AtomSpace();
        ss = new SpaceServer(*atomSpace4);
        ts = new TimeServer(*atomSpace4, ss);
        runLoading(*atomSpace4);
        delete ts;
        delete ss;
        delete atomSpace4;

        if (!CxxTest::TestTracker::tracker().testFailed())
            std::remove(DUMP_FILENAME);

        // specific tests for custom atom types
        SavingLoading savingLoading;

        AtomSpace *atomSpace5 = new AtomSpace();      
        ss = new SpaceServer(*atomSpace5);
        ts = new TimeServer(*atomSpace5, ss);
        
        HandleSeq execLinkOutgoing;
        execLinkOutgoing.push_back( atomSpace5->addNode( SAVING_LOADING_TEST_NODE, "test1") );
        execLinkOutgoing.push_back( atomSpace5->addLink( SAVING_LOADING_TEST_LINK, HandleSeq() ) );
        
        HandleSeq externalLinkOutgoing;
        externalLinkOutgoing.push_back( atomSpace5->addLink( EXECUTION_LINK, execLinkOutgoing ) );

        atomSpace5->addLink( LIST_LINK, externalLinkOutgoing );

        HandleSeq frequeLink;
        frequeLink.push_back( atomSpace5->addNode( SAVING_LOADING_TEST_NODE, "currentActionRepetition" ) );
        frequeLink.push_back( atomSpace5->addNode( NUMBER_NODE, "0" ) );
        

        Handle oldLink = atomSpace5->addLink( SAVING_LOADING_TEST_LINK, frequeLink );
        TS_ASSERT( atomSpace5->removeAtom(oldLink) )

        atomSpace5->addLink( SAVING_LOADING_TEST_LINK, frequeLink );

        savingLoading.save( DUMP_FILENAME, *atomSpace5, *ss, *ts);
        delete ts;
        delete ss;
        delete atomSpace5;

        AtomSpace* atomSpace6 = new AtomSpace( );
        ss = new SpaceServer(*atomSpace6);
        ts = new TimeServer(*atomSpace6, ss);
        savingLoading.load(DUMP_FILENAME, *atomSpace6, *ss, *ts);
        delete ts;
        delete ss;
        delete atomSpace6;
        
        if (!CxxTest::TestTracker::tracker().testFailed())
            std::remove(DUMP_FILENAME);

    }

};
