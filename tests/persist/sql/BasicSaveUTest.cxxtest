/*
 * tests/persist/sql/BasicSaveUTest.cxxtest
 *
 * Most basic, simplest sniff test, saves and restores a few atoms.
 *
 * If this test is failing for you, then be sure to read the README in
 * this directory, and also ../../opencong/persist/README, and then
 * create and configure the SQL database as described there. Next,
 * edit ../../lib/test-opencog.conf to add the database credentials
 * (the username and passwd).
 *
 * Copyright (C) 2008, 2009 Linas Vepstas <linasvepstas@gmail.com>
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/atomspace/Atom.h>
#include <opencog/atomspace/Link.h>
#include <opencog/atomspace/Node.h>
#include <opencog/atomspace/SimpleTruthValue.h>
#include <opencog/atomspace/TLB.h>
#include <opencog/nlp/types/atom_types.h>
#include <opencog/persist/sql/AtomStorage.h>

#include <opencog/server/CogServer.h>
#include <opencog/util/Logger.h>
#include <opencog/util/Config.h>

#include <cstdio>

using namespace opencog;

class BasicSaveUTest :  public CxxTest::TestSuite
{
	private:
		AtomSpace *as;
		const char * dbname;
		const char * username;
		const char * passwd;

		NodePtr n1[10];
		NodePtr n2[10];
		NodePtr n3[10];
		LinkPtr l[10];
		AtomPtr a1[10];
		AtomPtr a2[10];
		AtomPtr a3[10];
		AtomPtr al[10];

	public:

		BasicSaveUTest(void)
		{
			try
			{
				config().load("opencog-test.conf");
			}
			catch (RuntimeException &e)
			{
				std::cerr << e.getMessage() << std::endl;
			}
			logger().setFilename(config()["LOG_FILE"]);
			logger().setLevel(Logger::getLevelFromString(config()["LOG_LEVEL"]));
			logger().setPrintToStdoutFlag(config().get_bool("LOG_TO_STDOUT"));

			try {
				// Get the database logins & etc from the config file.
				dbname = config()["TEST_DB_NAME"].c_str();
				username = config()["TEST_DB_USERNAME"].c_str();
				passwd = config()["TEST_DB_PASSWD"].c_str();
			}
			catch (InvalidParamException &e)
			{
				freindlyFailMessage(false);
			}
		}

		~BasicSaveUTest()
		{
			// erase the log file if no assertions failed
			if (!CxxTest::TestTracker::tracker().suiteFailed())
				std::remove(logger().getFilename().c_str());
		}

		void setUp(void);

		void freindlyFailMessage(bool ts)
		{
			const char * fail = "The BasicSaveUTest failed.\n"
				"This is probably because you do not have SQL installed\n"
				"or configured the way that OpenCog expects.\n\n"
				"SQL persistance is optional for OpenCog, so if you don't\n"
				"want it or need it, just ignore this test failure.\n"
				"Otherwise, please be sure to read opencong/persist/sql/README,\n"
				"and create/configure the SQL database as described there.\n"
				"Next, edit lib/opencog-test.conf appropriately, so as\n"
				"to indicate the location of your database. If this is\n"
				"done correctly, then this test will pass.\n";

			if (ts)
				TS_FAIL(fail);
			else
				fprintf(stderr, "%s", fail);
			exit(1);
		}

		AtomStorage *astore;
		void tearDown(void) { delete astore; }
		void single_atom_save_restore(std::string id);
		void add_to_table(int, AtomTable *, std::string id);
		void check_table(int, AtomTable *, std::string id);

		void test_single_atom(void);
		void test_table(void);
};

/*
 * This is called once before each test, for each test (!!)
 */
void BasicSaveUTest::setUp(void)
{
	CogServer& cogserve = cogserver();
	as = &cogserve.getAtomSpace();

	astore = new AtomStorage(dbname, username, passwd);
	if (!astore->connected())
	{
		logger().info("setUp: cannot connect to database");
		freindlyFailMessage(true);
		exit(1);
	}
	logger().info("Connect to \"%s\" as \"%s\" passwd \"%s\"", dbname, username, passwd);

	// Trash the contents of the database.
	astore->kill_data();
}

// ============================================================

static void atomCompare(AtomPtr a, AtomPtr b, const char* where)
{
	LinkPtr la(LinkCast(a));
	LinkPtr lb(LinkCast(b));

	printf("Testing at %s\n", where);
	TSM_ASSERT("No atom found", b != NULL);
	if (NULL == b) return;

	TSM_ASSERT_EQUALS("Type mistmatch", a->getType(), b->getType());

	// Only links can have arity
	if (la && lb)
	{
		TSM_ASSERT_EQUALS("Arity mistmatch", la->getArity(), lb->getArity());

		if (0 < la->getArity())
		{
			std::vector<Handle> outa = la->getOutgoingSet();
			std::vector<Handle> outb = lb->getOutgoingSet();
			for (int i=0; i< la->getArity(); i++)
			{
				if (outa[i] != outb[i])
				{
					TSM_ASSERT_EQUALS("outgoing set mis-match", 
						outa[i].value(), outb[i].value());
				}
			}
		}
	}

	TruthValuePtr ta = a->getTruthValue();
	TruthValuePtr tb = b->getTruthValue();
	if (ta or tb)
	{
		TSM_ASSERT("Missing truth value", ta);
		TSM_ASSERT("Missing truth value", tb);
		if (ta and tb)
		{
			TSM_ASSERT("Truth value miscompare", (*ta)==(*tb));

			if (not ((*ta) == (*tb)))
			{
				fprintf(stderr, "Error, truth value miscompare, "
					"ma=%f mb=%f ca=%f cb=%f\n",
					ta->getMean(), tb->getMean(), ta->getCount(), tb->getCount());
			}
		}
	}
}

// ============================================================
/**
 * A simple test case that tests the save and restore of 
 * a couple of nodes and a link. Does not test atomtable/atomspace at all.
 */
void BasicSaveUTest::single_atom_save_restore(std::string id)
{
	AtomStorage *store = new AtomStorage(dbname, username, passwd);
	if (!store->connected())
	{
		logger().debug("single_atom_save_restore: cannot connect to db");
		return;
	}

	// Create an atom ... 
	AtomPtr a(createNode(SCHEMA_NODE, id + "someNode"));
	TruthValuePtr stv(SimpleTruthValue::createTV(0.55, 0.6));
	a->setTruthValue(stv);
	TLB::addAtom(a);

	Handle h = a->getHandle();
	UUID uuid = h.value();

	TSM_ASSERT("Bad Handle", h != Handle::UNDEFINED);

	// Store the atom ... 
	store->storeAtom(a, true);

	// Fetch it back ...
	Handle hb(uuid);
	AtomPtr b = store->getAtom(hb);

	// Are they equal ??
	atomCompare(a, b, "Single node save-restore");

	// Create a second atom, connect it to the first
	// with a link. Save it, fetch it ... are they equal?
	AtomPtr a2(createNode(SCHEMA_NODE, id + "otherNode"));
	TLB::addAtom(a2);
	store->storeAtom(a2, true);

	std::vector<Handle> hvec;
	hvec.push_back(a->getHandle());
	hvec.push_back(a2->getHandle());

	LinkPtr l(createLink(SET_LINK, hvec));
	TLB::addAtom(l);
	store->storeAtom(l, true);

	UUID ul = l->getHandle().value();
	AtomPtr lb = store->getAtom(Handle(ul));
	atomCompare(l, lb, "Single link save-restore");

	store->kill_data();
	delete store;
}

// ============================================================

void BasicSaveUTest::add_to_table(int idx, AtomTable *table, std::string id)
{
	// Create an atom ... 
	n1[idx] = createNode(WORD_NODE, id + "fromNode");
	TruthValuePtr stv(SimpleTruthValue::createTV(0.11, 100+idx));
	n1[idx]->setTruthValue(stv);
	a1[idx] = n1[idx];
	table->add(a1[idx]);

	n2[idx] = createNode(WORD_NODE, id + "toNode");
	TruthValuePtr stv2(SimpleTruthValue::createTV(0.22, 200+idx));
	n2[idx]->setTruthValue(stv2);
	a2[idx] = n2[idx];
	table->add(a2[idx]);

	n3[idx] = createNode(WORD_NODE, id + "third wheel");
	TruthValuePtr stv3(SimpleTruthValue::createTV(0.33, 300+idx));
	n3[idx]->setTruthValue(stv3);
	a3[idx] = n3[idx];
	table->add(a3[idx]);

	std::vector<Handle> hvec;
	hvec.push_back(a1[idx]->getHandle());
	hvec.push_back(a2[idx]->getHandle());
	hvec.push_back(a3[idx]->getHandle());

	l[idx] = createLink(PARSE_LINK, hvec);
	al[idx] = l[idx];
	table->add(l[idx]);
}

void BasicSaveUTest::check_table(int idx, AtomTable *table, std::string id)
{
	Handle hb1 = table->getHandle(n1[idx]);
	atomCompare(a1[idx], hb1, "check_table hb1");

	Handle hb2 = table->getHandle(n2[idx]);
	atomCompare(a2[idx], hb2, "check_table hb2");

	Handle hb3 = table->getHandle(n3[idx]);
	atomCompare(a3[idx], hb3, "check_table hb3");

	std::vector<Handle> hvec;
	hvec.push_back(hb1);
	hvec.push_back(hb2);
	hvec.push_back(hb3);

	LinkPtr lb(createLink(PARSE_LINK, hvec));
	Handle hlb = table->getHandle(lb);
	atomCompare(al[idx], hlb, "check_table hlb");
}

// ============================================================

void BasicSaveUTest::test_single_atom(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	single_atom_save_restore("aaa ");
	single_atom_save_restore("bbb ");
	single_atom_save_restore("ccc ");
	single_atom_save_restore("ddd ");
	single_atom_save_restore("eee ");

	logger().debug("END TEST: %s", __FUNCTION__);
}

void BasicSaveUTest::test_table(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	AtomStorage *store = new AtomStorage(dbname, username, passwd);
	if (!store->connected())
	{
		logger().debug("test_table: cannot connect to db");
		return;
	}

	AtomTable *table1 = new AtomTable();
	int idx = 0;
	add_to_table(idx++, table1, "AA-aa-wow ");
	add_to_table(idx++, table1, "BB-bb-wow ");
	add_to_table(idx++, table1, "CC-cc-wow ");
	add_to_table(idx++, table1, "DD-dd-wow ");
	add_to_table(idx++, table1, "EE-ee-wow ");

	store->store(*table1);
	// table1->print();
	delete store;

	// Copy atoms; the original atoms will be blown away
	// when table1 is deleted. (they're also removed from
	// the TLB, so this indirectly tests the correctness
	// of the stored uuid's as well.)
	int mi = idx;
	for (idx=0; idx < mi; idx++)
	{
		n1[idx] = createNode(*n1[idx]); a1[idx] = n1[idx];
		n2[idx] = createNode(*n2[idx]); a2[idx] = n2[idx];
		n3[idx] = createNode(*n3[idx]); a3[idx] = n3[idx];
		l[idx]  = createLink(*l[idx]);  al[idx] = l[idx];
	}
	delete table1;

	// Reopen connection, and load the atom table.
	store = new AtomStorage(dbname, username, passwd);
	TSM_ASSERT("Not connected to database", store->connected());

	AtomTable *table2 = new AtomTable();

	store->load(*table2);
	// table2->print();

	idx = 0;
	check_table(idx++, table2, "aaa ");
	check_table(idx++, table2, "bbb ");
	check_table(idx++, table2, "ccc ");
	check_table(idx++, table2, "ddd ");
	check_table(idx++, table2, "eee ");

	store->kill_data();
	delete store;
	delete table2;
	logger().debug("END TEST: %s", __FUNCTION__);
}

/* ============================= END OF FILE ================= */
