/*
 * tests/viterbi/InitUTest.cxxtest
 *
 * Copyright (C) 2013 Linas Vepstas <linasvepstas@gmail.com>
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <link-grammar/read-dict.h>

#include <opencog/viterbi/atom_types.h>
#include <opencog/viterbi/parser.h>
#include <opencog/util/Config.h>
#include <opencog/util/Logger.h>

using namespace opencog;
using namespace viterbi;

class InitUTest: public CxxTest::TestSuite
{
	private:
		AtomSpace *as;


	public:
		InitUTest(void)
		{
			try
			{
				config().load("opencog-test.conf");
			}
			catch (RuntimeException &e)
			{
				std::cerr << e.getMessage() << std::endl;
			}
			logger().setFilename(config()["LOG_FILE"]);
			logger().setLevel(Logger::getLevelFromString(config()["LOG_LEVEL"]));
			logger().setPrintToStdoutFlag(config().get_bool("LOG_TO_STDOUT"));
		}

		~InitUTest()
		{
			// Erase the log file if no assertions failed.
			if (!CxxTest::TestTracker::tracker().suiteFailed())
				std::remove(logger().getFilename().c_str());
		}

		void setUp(void);

		void tearDown(void) { }

		void test_init(void);
		void test_hello(void);
};

void InitUTest::setUp(void)
{
	server(CogServer::createInstance);
	as = &cogserver().getAtomSpace();

	// Load the required data
	config().set("MODULES",
		"opencog/nlp/types/libnlp-types.so, "
		"opencog/query/libquery.so");

	// XXX TODO these should be loaded by the parser itself,
	// and not by the test-case.
	config().set("SCM_PRELOAD",
		"opencog/atomspace/core_types.scm, "
		"opencog/nlp/types/nlp_types.scm, "
		"opencog/viterbi/viterbi_types.scm, "
		"opencog/viterbi/parse.scm");

	// Blindly search a bunch of paths hoping to find the files
	// in one of them ...
	const char * paths[] =
	{
		"./",
		"../",
		"../../",
		"../../../",
		NULL
	};
	cogserver().loadModules();
	cogserver().loadSCMModules(paths);
}

void InitUTest::test_init(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	const char * dict_str =
		"LEFT-WALL: Wd+;"
		"Hello: Wd-;";

	Dictionary dict = dictionary_create_from_utf8(dict_str);

	Parser pars(dict);

	dictionary_delete(dict);
	logger().debug("END TEST: %s", __FUNCTION__);
}

void InitUTest::test_hello(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	const char * dict_str =
		"LEFT-WALL: Wd+;"
		"Hello: Wd-;";

	Dictionary dict = dictionary_create_from_utf8(dict_str);

	Parser pars(dict);
	pars.stream_word("Hello");

	dictionary_delete(dict);
	logger().debug("END TEST: %s", __FUNCTION__);
}

