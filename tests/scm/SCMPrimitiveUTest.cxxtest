/*
 * tests/scm/SCMPrimitiveUTest.cxxtest
 *
 * Make sure the scheme primtive extension code works
 * Copyright (C) 2009 Linas Vepstas <linasvepstas@gmail.com>
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/atomspace/AtomSpace.h>
#include <opencog/atomspace/Link.h>
#include <opencog/atomspace/Node.h>
#include <opencog/guile/SchemeEval.h>
#include <opencog/guile/SchemePrimitive.h>
#include <opencog/server/CogServer.h>
#include <opencog/util/Logger.h>
#include <opencog/util/Config.h>

using namespace opencog;

class SCMPrimitiveUTest :  public CxxTest::TestSuite
{
	private:
		AtomSpace *as;
		SchemeEval *eval;

	public:

	SCMPrimitiveUTest(void) 
	{
		try
		{
			config().load("opencog-test.conf");
		}
		catch (RuntimeException &e)
		{
			std::cerr << e.getMessage() << std::endl;
		}
		logger().setFilename(config()["LOG_FILE"]);
		logger().setLevel(Logger::getLevelFromString(config()["LOG_LEVEL"]));
		logger().setPrintToStdoutFlag(config().get_bool("LOG_TO_STDOUT"));
	}

	~SCMPrimitiveUTest()
	{
		// erase the log file if no assertions failed
		if (!CxxTest::TestTracker::tracker().suiteFailed())
			std::remove(logger().getFilename().c_str());
	}

	void setUp(void);

	void tearDown(void) { }

	void test_H_H(void);
};

// Some example class
class MyExampleClass
{
	private:
		int id;  // some value in the instance
        AtomSpace *as;
	public:

		MyExampleClass(AtomSpace *_as, int _id) {as = _as; id = _id; }

		// An example method -- accepts a handle, and wraps it 
		// with a ListLink.
		Handle my_func(Handle h)
		{
			TSM_ASSERT("Failed to get a valid handle", as->isValidHandle(h))

			logger().debug("Info: my_func instance %d received the node: %s\n", id, as->getName(h).c_str());
			Handle hlist = as->addLink(LIST_LINK, h);
			return hlist;
		}

		// Throw excpetion on purpose
		Handle my_other_func(Handle h)
		{
			throw (RuntimeException(TRACE_INFO, "Don't panic!! Threw exception %d on purpose.", id));
			return Handle::UNDEFINED;
		}
};

/*
 * This is called once before each test, for each test (!!)
 */
void SCMPrimitiveUTest::setUp(void)
{
	server(CogServer::createInstance);
	as = &cogserver().getAtomSpace();
	eval = &(SchemeEval::instance(as));
}

// ============================================================

void SCMPrimitiveUTest::test_H_H(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	// Create the example class, and define a scheme function,
	// named "bingo", that will call one of its methods
	MyExampleClass *mtc = new MyExampleClass(as,42);
	define_scheme_primitive("bingo", &MyExampleClass::my_func, mtc);

	// Now, call bingo, with a reasonable argument. Since 
	// MyExampleClass::my_func is expecting a handle, we better pass
	// bingo a handle.
	eval->eval("(define nnn (cog-new-node 'ConceptNode \"Hello World!\"))");
	eval->eval("(define yyy (bingo nnn))");

	bool eval_err = eval->eval_error();
	TSM_ASSERT ("Evaluation error defining node", !eval_err);

	// Now verify that the returned yyy is a ListLink which wraps the input node.
	Handle nnn = eval->eval_h("nnn");
	Handle yyy = eval->eval_h("yyy");
	TSM_ASSERT ("undefined node handle ", as->isValidHandle(nnn));
	TSM_ASSERT ("undefined list handle ", as->isValidHandle(yyy));

	TSM_ASSERT ("Null handle for link ", as->isValidHandle(yyy));
	TSM_ASSERT ("handle isn't a link ", !as->isNode(yyy));

	const std::vector<Handle>& oset = as->getOutgoing(yyy);

	TSM_ASSERT ("wrong outgoing set ", nnn == oset[0]);

	// Test the throw of an assertion. This should cause an evaluation
	// error. (In the shell, stuff would get printed to terminal)
	define_scheme_primitive("whoops", &MyExampleClass::my_other_func, mtc);
	eval->eval("(whoops nnn)");
	eval_err = eval->eval_error();
	TSM_ASSERT ("Failed to catch exception", eval_err);

	logger().debug("END TEST: %s", __FUNCTION__);
}

/* ============================= END OF FILE ================= */
