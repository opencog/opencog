/*
 * tests/atomspace/TemporalUTest.cxxtest
 *
 * Copyright (C) 2002-2007 Novamente LLC
 * All Rights Reserved
 *
 * Written by Welter Silva <welter@vettalabs.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <sstream>

#include <limits.h>

#include <opencog/spacetime/Temporal.h>
#include <opencog/util/Logger.h>
#include <opencog/util/exceptions.h>

using namespace opencog;

#define BIG_TIMESTAMP (OCTIME_MAX/2-1)

class TemporalUTest :  public CxxTest::TestSuite
{
private:

public:
    TemporalUTest() {
    }

    void setUp() {
    }

    void tearDown() {
    }

    void testConstructor() {
        // OK cases
        Temporal t1(0, 0);
        TS_ASSERT(t1.getLowerBound() == 0);
        TS_ASSERT(t1.getUpperBound() == 0);
        TS_ASSERT(!t1.isNormal());
        Temporal t2(0, 1);
        TS_ASSERT(t2.getLowerBound() == 0);
        TS_ASSERT(t2.getUpperBound() == 1);
        TS_ASSERT(!t2.isNormal());
        Temporal t3(5, 10, false);
        TS_ASSERT(t3.getLowerBound() == 5);
        TS_ASSERT(t3.getUpperBound() == 10);
        TS_ASSERT(!t3.isNormal());
        Temporal t4(10, 10, false);
        TS_ASSERT(t4.getLowerBound() == 10);
        TS_ASSERT(t4.getUpperBound() == 10);
        TS_ASSERT(!t4.isNormal());

        Temporal t5(0, 0, true);
        TS_ASSERT(t5.getLowerBound() == 0);
        TS_ASSERT(t5.getUpperBound() == 0);
        TS_ASSERT(t5.isNormal());
        Temporal t6(5, 0, true);
        TS_ASSERT(t6.getLowerBound() == 5);
        TS_ASSERT(t6.getUpperBound() == 5);
        TS_ASSERT(t6.isNormal());
        Temporal t7(10, 5, true);
        TS_ASSERT(t7.getLowerBound() == 5);
        TS_ASSERT(t7.getUpperBound() == 15);
        TS_ASSERT(t7.isNormal());
        Temporal t8(10, 10, true);
        TS_ASSERT(t8.getLowerBound() == 0);
        TS_ASSERT(t8.getUpperBound() == 20);
        TS_ASSERT(t8.isNormal());
        Temporal t9(OCTIME_MAX, OCTIME_MAX);
        TS_ASSERT(t9.getLowerBound() == OCTIME_MAX);
        TS_ASSERT(t9.getUpperBound() == OCTIME_MAX);
        TS_ASSERT(!t9.isNormal());
        Temporal t10(OCTIME_MAX - 1, 1, true);
        TS_ASSERT(t10.getLowerBound() == OCTIME_MAX - 2);
        TS_ASSERT(t10.getUpperBound() == OCTIME_MAX);
        TS_ASSERT(t10.isNormal());
        Temporal t11(OCTIME_MAX, 0, true);
        TS_ASSERT(t11.getLowerBound() == OCTIME_MAX);
        TS_ASSERT(t11.getUpperBound() == OCTIME_MAX);
        TS_ASSERT(t11.isNormal());

        // Exception cases
        TS_ASSERT_THROWS(Temporal(1, 0), InvalidParamException&);
        TS_ASSERT_THROWS(Temporal(5, 1, false), InvalidParamException&);
        TS_ASSERT_THROWS(Temporal(1, 5, true), InvalidParamException&);
        TS_ASSERT_THROWS(Temporal(10000, 10001, true), InvalidParamException&);
        TS_ASSERT_THROWS(Temporal(OCTIME_MAX, OCTIME_MAX, true), InvalidParamException&);
        TS_ASSERT_THROWS(Temporal(OCTIME_MAX, 1, true), InvalidParamException&);
        TS_ASSERT_THROWS(Temporal(OCTIME_MAX - OCTIME_MAX / 2, OCTIME_MAX / 2 + 1, true), InvalidParamException&);
    }

    void testGettersAndPrinters() {
        Temporal t1(3, 7);
        TS_ASSERT(!t1.isNormal());
        TS_ASSERT(t1.getA() == 3);
        TS_ASSERT(t1.getB() == 7);
        TS_ASSERT(t1.getLowerBound() == 3);
        TS_ASSERT(t1.getUpperBound() == 7);
        TS_ASSERT(!strcmp(t1.toString().c_str(), "(UNIFORM,3,7)"));
        std::ostringstream oss1;
        oss1 << t1;
        TS_ASSERT(!strcmp(oss1.str().c_str(), "(UNIFORM,3,7)"));

        Temporal t2(7, 3, true);
        TS_ASSERT(t2.isNormal());
        TS_ASSERT(t2.getA() == 7);
        TS_ASSERT(t2.getB() == 3);
        TS_ASSERT(t2.getLowerBound() == 4);
        TS_ASSERT(t2.getUpperBound() == 10);
        TS_ASSERT(!strcmp(t2.toString().c_str(), "(NORMAL,7,3)"));
        std::ostringstream oss2;
        oss2 << t2;
        TS_ASSERT(!strcmp(oss2.str().c_str(), "(NORMAL,7,3)"));

        Temporal t3(5, 5);
        TS_ASSERT(!t3.isNormal());
        TS_ASSERT(t3.getA() == 5);
        TS_ASSERT(t3.getB() == 5);
        TS_ASSERT(t3.getLowerBound() == 5);
        TS_ASSERT(t3.getUpperBound() == 5);
        TS_ASSERT(!strcmp(t3.toString().c_str(), "(UNIFORM,5,5)"));
        std::ostringstream oss3;
        oss3 << t3;
        TS_ASSERT(!strcmp(oss3.str().c_str(), "(UNIFORM,5,5)"));

        Temporal t4(5, 5, true);
        TS_ASSERT(t4.isNormal());
        TS_ASSERT(t4.getA() == 5);
        TS_ASSERT(t4.getB() == 5);
        TS_ASSERT(t4.getLowerBound() == 0);
        TS_ASSERT(t4.getUpperBound() == 10);
        TS_ASSERT(!strcmp(t4.toString().c_str(), "(NORMAL,5,5)"));
        std::ostringstream oss4;
        oss4 << t4;
        TS_ASSERT(!strcmp(oss4.str().c_str(), "(NORMAL,5,5)"));
    }

    void testCompareToAndComparisonOperators() {
        Temporal times1[] = {
            Temporal(0, 0, true), // [0,0]
            Temporal(0, 1, false), // [0,1] uniform
            Temporal(1, 1, true), // [0,2]
            Temporal(1, 0, true)  // [1,1]
        };

        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                const Temporal& t1 = times1[i];
                const Temporal& t2 = times1[j];
                if (i == j) {
                    TS_ASSERT(t1.compareTo(&t2) == 0);
                    TS_ASSERT(!(t1 < t2));
                    TS_ASSERT(!(t1 > t2));
                    TS_ASSERT(t1 <= t2);
                    TS_ASSERT(t1 >= t2);
                    TS_ASSERT(t1 == t2);
                    TS_ASSERT(!(t1 != t2));
                } else if (i > j) {
                    TS_ASSERT(t1.compareTo(&t2) > 0);
                    TS_ASSERT(!(t1 < t2));
                    TS_ASSERT(t1 > t2);
                    TS_ASSERT(!(t1 <= t2));
                    TS_ASSERT(t1 >= t2);
                    TS_ASSERT(!(t1 == t2));
                    TS_ASSERT(t1 != t2);
                } else {
                    TS_ASSERT(t1.compareTo(&t2) < 0);
                    TS_ASSERT(t1 < t2);
                    TS_ASSERT(!(t1 > t2));
                    TS_ASSERT(t1 <= t2);
                    TS_ASSERT(!(t1 >= t2));
                    TS_ASSERT(!(t1 == t2));
                    TS_ASSERT(t1 != t2);
                }
            }
        }

        Temporal times2[] = {
            Temporal(0, 0, false), // [0,0]
            Temporal(0, 1, false), // [0,1]
            Temporal(1, 0, true), // [1,1] normal (comes before the uniform with same bounds)
            Temporal(1, 1, false) // [1,1]
        };

        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                const Temporal& t1 = times2[i];
                const Temporal& t2 = times2[j];
                if (i == j) {
                    TS_ASSERT(t1.compareTo(&t2) == 0);
                    TS_ASSERT(!(t1 < t2));
                    TS_ASSERT(!(t1 > t2));
                    TS_ASSERT(t1 <= t2);
                    TS_ASSERT(t1 >= t2);
                    TS_ASSERT(t1 == t2);
                    TS_ASSERT(!(t1 != t2));
                } else if (i > j) {
                    TS_ASSERT(t1.compareTo(&t2) > 0);
                    TS_ASSERT(!(t1 < t2));
                    TS_ASSERT(t1 > t2);
                    TS_ASSERT(!(t1 <= t2));
                    TS_ASSERT(t1 >= t2);
                    TS_ASSERT(!(t1 == t2));
                    TS_ASSERT(t1 != t2);
                } else {
                    TS_ASSERT(t1.compareTo(&t2) < 0);
                    TS_ASSERT(t1 < t2);
                    TS_ASSERT(!(t1 > t2));
                    TS_ASSERT(t1 <= t2);
                    TS_ASSERT(!(t1 >= t2));
                    TS_ASSERT(!(t1 == t2));
                    TS_ASSERT(t1 != t2);
                }
            }
        }

        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                const Temporal& t1 = times1[i];
                const Temporal& t2 = times2[j];
                if (i == j) {
                    if (i == 1) {
                        // special case: they are really equals
                        TS_ASSERT(t1.compareTo(&t2) == 0);
                        TS_ASSERT(!(t1 < t2));
                        TS_ASSERT(!(t1 > t2));
                        TS_ASSERT(t1 <= t2);
                        TS_ASSERT(t1 >= t2);
                        TS_ASSERT(t1 == t2);
                        TS_ASSERT(!(t1 != t2));
                    } else {
                        TS_ASSERT(t1.compareTo(&t2) < 0);
                        TS_ASSERT(t1 < t2);
                        TS_ASSERT(!(t1 > t2));
                        TS_ASSERT(t1 <= t2);
                        TS_ASSERT(!(t1 >= t2));
                        TS_ASSERT(!(t1 == t2));
                        TS_ASSERT(t1 != t2);
                    }
                } else if (i > j) {
                    if ((i == 3) && (j == 2)) {
                        // special case: they are really equals
                        TS_ASSERT(t1.compareTo(&t2) == 0);
                        TS_ASSERT(!(t1 < t2));
                        TS_ASSERT(!(t1 > t2));
                        TS_ASSERT(t1 <= t2);
                        TS_ASSERT(t1 >= t2);
                        TS_ASSERT(t1 == t2);
                        TS_ASSERT(!(t1 != t2));
                    } else {
                        //std::cout << "times1[" << i << "] = " << t1 << ", times2[" << j << "] = " << t2 << std::endl;
                        TS_ASSERT(t1.compareTo(&t2) > 0);
                        TS_ASSERT(!(t1 < t2));
                        TS_ASSERT(t1 > t2);
                        TS_ASSERT(!(t1 <= t2));
                        TS_ASSERT(t1 >= t2);
                        TS_ASSERT(!(t1 == t2));
                        TS_ASSERT(t1 != t2);
                    }
                } else {
                    TS_ASSERT(t1.compareTo(&t2) < 0);
                    TS_ASSERT(t1 < t2);
                    TS_ASSERT(!(t1 > t2));
                    TS_ASSERT(t1 <= t2);
                    TS_ASSERT(!(t1 >= t2));
                    TS_ASSERT(!(t1 == t2));
                    TS_ASSERT(t1 != t2);
                }
            }
        }

        Temporal times3[] = {
            Temporal(0, 0),
            Temporal(1, 1, true)
        };

        TS_ASSERT(times1[0].compareTo(&(times3[0])) < 0);
        TS_ASSERT(times2[0].compareTo(&(times3[0])) == 0);
        TS_ASSERT(times1[2].compareTo(&(times3[1])) == 0);
        TS_ASSERT(times2[3].compareTo(&(times3[1])) > 0);

        // Test special case where time values are greater than OCTIME_MAX/2
        // Just does the first test with greater values:
        Temporal times4[] = {
            Temporal(0, 0, true), // [0,0]
            Temporal(0, BIG_TIMESTAMP, false), // [0,BIG_TIMESTAMP] uniform
            Temporal(BIG_TIMESTAMP, BIG_TIMESTAMP, true), // [0,2*BIG_TIMESTAMP]
            Temporal(BIG_TIMESTAMP, 0, true)  // [BIG_TIMESTAMP,BIG_TIMESTAMP]
        };

        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                const Temporal& t1 = times4[i];
                const Temporal& t2 = times4[j];
                if (i == j) {
                    TS_ASSERT(t1.compareTo(&t2) == 0);
                    TS_ASSERT(!(t1 < t2));
                    TS_ASSERT(!(t1 > t2));
                    TS_ASSERT(t1 <= t2);
                    TS_ASSERT(t1 >= t2);
                    TS_ASSERT(t1 == t2);
                    TS_ASSERT(!(t1 != t2));
                } else if (i > j) {
                    TS_ASSERT(t1.compareTo(&t2) > 0);
                    TS_ASSERT(!(t1 < t2));
                    TS_ASSERT(t1 > t2);
                    TS_ASSERT(!(t1 <= t2));
                    TS_ASSERT(t1 >= t2);
                    TS_ASSERT(!(t1 == t2));
                    TS_ASSERT(t1 != t2);
                } else {
                    TS_ASSERT(t1.compareTo(&t2) < 0);
                    TS_ASSERT(t1 < t2);
                    TS_ASSERT(!(t1 > t2));
                    TS_ASSERT(t1 <= t2);
                    TS_ASSERT(!(t1 >= t2));
                    TS_ASSERT(!(t1 == t2));
                    TS_ASSERT(t1 != t2);
                }
            }
        }

    }

    void testClone() {
        //virtual Temporal* clone() const;
        Temporal t1(0, 0);
        Temporal t2(0, 1);
        Temporal t3(1, 0, true);
        Temporal t4(1, 1, true);

        Temporal* _t1 = t1.clone();
        TS_ASSERT(*_t1 == t1);
        Temporal* _t2 = t2.clone();
        TS_ASSERT(*_t2 == t2);
        Temporal* _t3 = t3.clone();
        TS_ASSERT(*_t3 == t3);
        Temporal* _t4 = t4.clone();
        TS_ASSERT(*_t4 == t4);
    }

    void testTimeNodeNameConversionMethods() {
        Temporal times[9] = {Temporal(0, 0), Temporal(0, 1), Temporal(1, 0, true), Temporal(1, 1, true),
                             Temporal(0, 0), Temporal(0, BIG_TIMESTAMP),
                             Temporal(BIG_TIMESTAMP, 0, true), Temporal(BIG_TIMESTAMP, BIG_TIMESTAMP, true),
                             Temporal(OCTIME_MAX)
                            };
        for (int i = 0; i < 9; i++) {
            //cout << "Testing TimeNode name conversion for " << times[i].toString() << endl;
            const std::string& timeNodeName = times[i].getTimeNodeName();
            //cout << "TimeNode name = " << timeNodeName << endl;
            const Temporal& t = Temporal::getFromTimeNodeName(timeNodeName.c_str());
            TS_ASSERT(times[i] == t);
        }
        TS_ASSERT(!strcmp(Temporal(0).getTimeNodeName().c_str(), Temporal::getTimeNodeName(0).c_str()));
        TS_ASSERT(!strcmp(Temporal(5555).getTimeNodeName().c_str(), Temporal::getTimeNodeName(5555).c_str()));
        TS_ASSERT(!strcmp(Temporal(OCTIME_MAX).getTimeNodeName().c_str(), Temporal::getTimeNodeName(OCTIME_MAX).c_str()));


        // test a specific range with big timestamps
        for (octime_t timestamp = OCTIME_MAX - 1000; timestamp < OCTIME_MAX; timestamp++) {
            Temporal t1(timestamp);
            const std::string& name1 = t1.getTimeNodeName();
            const Temporal& t2 = Temporal::getFromTimeNodeName(name1.c_str());
            const std::string& name2 = t2.getTimeNodeName();
            if (t1 != t2) {
                logger().debug("t1=%s, t2=%s", t1.toString().c_str(), t2.toString().c_str());
            }
            TS_ASSERT(t1 == t2);
            if (name1 != name2) {
                logger().debug("name1=%s, name2=%s", name1.c_str(), name2.c_str());
            }
            TS_ASSERT(name1 == name2);
        }
    }

};
