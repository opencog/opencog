/*
 * tests/spatial/MathUTest.cxxtest
 *
 * Copyright (C) 2002-2009 Novamente LLC
 * All Rights Reserved
 * Author(s): Samir Araujo
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */
#include <cxxtest/TestSuite.h>
#include <string>
#include <sstream>
#include <iostream>

#include <opencog/spatial/math/BoundingBox.h>
#include <opencog/spatial/math/Dimension2.h>
#include <opencog/spatial/math/Dimension3.h>
#include <opencog/spatial/math/Face.h>
#include <opencog/spatial/math/Line.h>
#include <opencog/spatial/math/LineSegment.h>
#include <opencog/spatial/math/Matrix3.h>
#include <opencog/spatial/math/Matrix4.h>
#include <opencog/spatial/math/Plane.h>
#include <opencog/spatial/math/Quaternion.h>
#include <opencog/spatial/math/Rectangle.h>
#include <opencog/spatial/math/SquareFace.h>
#include <opencog/spatial/math/Triangle.h>
#include <opencog/spatial/math/Vector2.h>
#include <opencog/spatial/math/Vector3.h>
#include <opencog/spatial/math/Vector4.h>

#include <opencog/spatial/StaticEntity.h>
#include <opencog/spatial/SuperEntity.h>
#include <opencog/spatial/MovableEntity.h>
#include <opencog/spatial/PetAgent.h>
#include <opencog/spatial/HumanoidAgent.h>

#include <opencog/spatial/LocalSpaceMap2D.h>

using namespace opencog;
using namespace opencog::spatial;
using namespace opencog::spatial::math;

class MathUTest : public CxxTest::TestSuite
{
public:

    void test_SuperEntity( ) {



        math::Vector3 corners[] = { math::Vector3(  5.0,  0.0, 0.0 ),
                                    math::Vector3( 10.0,  0.0, 0.0 ),
                                    math::Vector3( 10.0,  0.0, 0.0 ),
                                    math::Vector3( 10.0, 10.0, 0.0 ),
                                    math::Vector3( 10.0, 10.0, 0.0 ),
                                    math::Vector3(  0.0, 10.0, 0.0 ),
                                    math::Vector3(  0.0, 10.0, 0.0 ),
                                    math::Vector3( -0.0,  5.0, 0.0 ),
                                    math::Vector3( -5.0, -5.0, 0.0 ),
                                    math::Vector3(  5.0, -5.0, 0.0 ),
                                    math::Vector3(  5.0, -5.0, 0.0 ),
                                    math::Vector3(  5.0,  0.0, 0.0 ),
                                    math::Vector3(  0.0,  5.0, 0.0 ),
                                    math::Vector3( -5.0,  5.0, 0.0 ),
                                    math::Vector3( -5.0,  5.0, 0.0 ),
                                    math::Vector3( -5.0, -5.0, 0.0 ) };

        EntityPtr petAgent( new PetAgent( 1244094484, "Fido", Vector3(5, 5, 0), Dimension3( 1, 1, 1 ), Quaternion( Vector3::Z_UNIT, 0 ), 0.25 ) );
        EntityPtr humanoidAgent( new HumanoidAgent( 1244094484, "Paul", Vector3(3.5, 3.5, 0), Dimension3( 1, 1, 1 ), Quaternion( Vector3::Z_UNIT, 0 ), 0.25 ) );



        EntityPtr s1( new StaticEntity( 1, "entity1", Vector3( 5, 5, 0 ), Dimension3( 10, 10, 10 ), Quaternion( Vector3::Z_UNIT, 0 ) ) );
        EntityPtr s2( new StaticEntity( 2, "entity2", Vector3( ), Dimension3( 10, 10, 10 ), Quaternion( Vector3::Z_UNIT, 0 ) ) );
        EntityPtr s3( new StaticEntity( 3, "entity3", Vector3( -5, -5 ), Dimension3( 10, 10, 10 ), Quaternion( Vector3::Z_UNIT, 0 ) ) );
        EntityPtr s4( new StaticEntity( 4, "entity4", Vector3( 5, 5, 0 ), Dimension3( 10, 10, 10 ), Quaternion( Vector3::Z_UNIT, 0 ) ) );
        EntityPtr s5( new StaticEntity( 5, "entity5", Vector3( 5, 5, 0 ), Dimension3( 20, 20, 20 ), Quaternion( Vector3::Z_UNIT, 0 ) ) );

//    EntityPtr s6( new StaticEntity( 6, "entity6", Vector3( 3, 3, 0 ), Dimension3( 1, 1, 1 ), Quaternion( Vector3::Z_UNIT, 0 ) ) );
//    EntityPtr s7( new StaticEntity( 7, "entity7", Vector3( 3, 3, 0 ), Dimension3( 1, 1, 1 ), Quaternion( Vector3::Z_UNIT, 0 ) ) );

        double petRadius = 0.25;
        double xMin = 0;
        double xMax = 256;
        double yMin = 0;
        double yMax = 256;
        unsigned int xDim = 1024;
        unsigned int yDim = 1024;
        spatial::LocalSpaceMap2D map( xMin, xMax, xDim, yMin, yMax, yDim, petRadius );
//    try {
        map.addObject( "entity1", ObjectMetaData( 3.0, 3.0, 0.0, 1, 1, 1, 0 ), true );
        map.addObject( "entity2", ObjectMetaData( 20.0, 20.0, 0.0, 1, 1, 1, 0 ), true );
        map.addObject( "entity3", ObjectMetaData( 3.5, 3.5, 0.0, 1, 1, 1, 0 ), true );
//    } catch( opencog::InvalidParamException& ex ) {
//        std::cout << ex.getMessage( ) << std::endl;
//    } // catch

        SuperEntity spe8( s1, s4 );

        TS_ASSERT_THROWS_ANYTHING( SuperEntity spe0( petAgent, humanoidAgent ) )
        
        std::cout << std::endl << "s1 bbox corner: " << s1->getBoundingBox().getCorner( math::BoundingBox::FAR_RIGHT_BOTTOM ).toString() << std::endl;
        std::cout << "s1 dimension: " << s1->getDimension().toString( ) << std::endl;
        std::cout << "s1 position: " << s1->getPosition().toString( ) << std::endl;

        SuperEntity spe( s1, s2 );
        spe.merge( s3 );

        spe.removeEntity( s3->getId( ) );

        const std::list<math::LineSegment>& edges = spe.getEdges( );

        unsigned int cornersCounter = 0;
        std::list<math::LineSegment>::const_iterator it;
        for ( it = edges.begin( ); it != edges.end( ); ++it ) {
            std::cout << "edge as string: " << it->toString( ) << std::endl;
            std::printf( "first endpoint of edge: %.12f %.12f %.12f\n"
                         "second endpoint of edge: %.12f %.12f %.12f\n",
                 it->pointA.x, it->pointA.y, it->pointA.z, it->pointB.x, it->pointB.y, it->pointB.z );
            std::cout << "expected first endpoint: " << corners[cornersCounter].toString( ) << std::endl;
            std::cout << "expected second endpoint: " << corners[cornersCounter+1].toString( ) << std::endl;
            std::cout << "distance from expected, A: " << ( corners[cornersCounter] - it->pointA ).length( ) << std::endl;
            std::cout << "distance from expected, B: " << ( corners[cornersCounter+1] - it->pointB ).length( ) << std::endl;
            TS_ASSERT( ( corners[cornersCounter++] - it->pointA ).length( ) < math::LineSegment::TOLERANCE_DISTANCE );
            TS_ASSERT( ( corners[cornersCounter++] - it->pointB ).length( ) < math::LineSegment::TOLERANCE_DISTANCE );
        } // for


        SuperEntity spe1( s1, s2 );

        spe1.merge( s3 );
        spe1.removeEntity( 3 );

        SuperEntity spe2( s4, s5 );
        SuperEntity spe3( s1, s4 );


        TS_ASSERT( spe.getEdges( ).size( ) == spe1.getEdges( ).size( ) )

    }

    void test_MathElements( ) {
        Vector3 p1( -1, 3, 2 );
        Vector3 p2( 1, 3, 2 );
        Vector3 p3( 0, 0, 0 );
        Vector3 p4( -1, -3, 2 );
        Vector3 p5( 1, -3, 2 );

        Vector2 vec2; // not used
        Vector3 vec3; // not used
        Vector4 vec4; // not used
        Plane plane; // not used
        Face face( p1, p2, p3 ); // not used

        Line line1( p1, p2 ); // not used
        LineSegment seg1( p2, p3 ); // not used
        LineSegment seg2( p1, p2 );
        LineSegment seg3( p1, p2 );
        TS_ASSERT( line1 == seg2 )
        TS_ASSERT( seg3 == seg2 )

        Rectangle rec1( p1, p2, p5 ); // not used
        SquareFace sqf1( p1, p2, p4, p5 ); // not used


        Quaternion quat( Vector3::X_UNIT, 0 ); // not used
        Triangle tri( p1, p2, p3 ); // not used
        Dimension2 dim2( 100, 200 ); // not used
        Dimension3 dim3( 100, 200, 300 ); // not used

        Vector3 up( 0, 1 ); // not used
        Vector3 front( 35000, -2000 );

        float agentFovReach = 2;

        spatial::math::Vector3 maximumPoint = front * agentFovReach;

        spatial::math::Line limitLine( Quaternion( spatial::math::Vector3::Z_UNIT, M_PI / 2).rotate( front ) + maximumPoint,
                                       Quaternion( spatial::math::Vector3::Z_UNIT, -M_PI / 2).rotate( front ) + maximumPoint );

        //std::cout << limitLine.toString( ) << std::endl;

        // agent fov will be 160 degrees
        // spatial::math::Vector3 leftPoint = Quaternion( spatial::math::Vector3::Z_UNIT, 80 * M_PI / 180.0).rotate(front) * agentFovReach;
        spatial::math::Vector3 rightPoint = Quaternion( spatial::math::Vector3::Z_UNIT, -80 * M_PI / 180.0).rotate(front) * agentFovReach;

        spatial::math::Vector3 intersectionPoint;

        spatial::math::LineSegment rightLine( spatial::math::Vector3( 0, 0 ), rightPoint );

        TS_ASSERT( limitLine.intersects( rightLine, &intersectionPoint ) )

        Quaternion rotation( Vector3::Z_UNIT, M_PI / 2.0f  );
        Vector3 up3( rotation.rotate( Vector3::X_UNIT ) );

        TS_ASSERT( ( up3 - Vector3::Y_UNIT ).length( ) < 0.01 )

        Line limitLine2( Vector3( 4899.16, 38086.2, 0), Vector3( 4897.18, -38086.4, 0) );
        Line leftLine2( Vector3(0, 0, 0), Vector3( 38358.3, 11437.4, 0) );

        TS_ASSERT( limitLine2.intersects( leftLine2 ) )
        
        // Testing Plane
        float sample_dist = 5, epsilon = 1e-06;
        
        Vector3 sample_normal( 0, 1, 0 ), i( 1, 0, 0 ), j( 0, 1, 0 ), 
                k( 0, 0, 1 ), zero( 0, 0, 0 );
        
        // Constructors
        Plane plane1( );
        Plane plane2( sample_normal, sample_dist );
        TS_ASSERT( ( plane2.normal - sample_normal ).isZeroLength() );
        TS_ASSERT( fabs( plane2.distanceFromOrigo + sample_dist ) < epsilon );
        Plane plane3( plane2 );
        TS_ASSERT( plane2 == plane3 );
        // Linearly independent points
        Plane plane4( i, j, k );
        TS_ASSERT( fabs( plane4.normal.length( ) - 1 ) < epsilon );
        TS_ASSERT( ( plane4.normal + plane4.distanceFromOrigo ).isZeroLength() );
        // Linearly dependent points
        Plane plane5( i, i, k );
        TS_ASSERT( ( plane5.normal ).isZeroLength() );
        TS_ASSERT( plane5.distanceFromOrigo < epsilon );
        // Test set
        plane5.set( sample_normal, sample_dist );
        TS_ASSERT( plane5.normal == sample_normal );
        TS_ASSERT( fabs( plane5.distanceFromOrigo + sample_dist ) < epsilon );
        // Test getVector4
        Vector4 v4 = plane4.getVector4();
        TS_ASSERT( v4.dot( plane4.normal ) - plane4.normal.squaredLength( ) 
                    + plane4.distanceFromOrigo < epsilon );
        // getDistance
        Vector3 plane4_middle(-plane4.distanceFromOrigo * plane4.normal);
        TS_ASSERT( fabs( plane4.getDistance( plane4_middle ) ) < epsilon );
        // getSide
        TS_ASSERT( plane4.getSide ( zero ) == Plane :: POSITIVE );
        // transformSelf
        Plane newPlane4(plane4);
        newPlane4.transformSelf( Matrix4( 1, 0, 0, 0, 
                                        0, 1, 0, 0,
                                        0, 0, 1, 0,
                                        0, 0, 0, 1 ) );
        TS_ASSERT( plane4 == newPlane4 );
        // getIntersectionPoint
        Plane vertical45( Vector3(-1, 1, 0), 0 ), horizontal( Vector3(0 , 0, 1), 1/3. );
        TS_ASSERT( plane4.getIntersectionPoint( vertical45, horizontal ) == plane4_middle );
        
    }

    void test_Entities( ) {
        StaticEntity se1( 1, "entity1", Vector3( ), Dimension3( 10, 10, 20 ), Quaternion( Vector3::X_UNIT, 0 ) );
        TS_ASSERT( se1.getType( ) == Entity::STATIC );
        TS_ASSERT( se1.getBoundingBox().getAllCorners().size() == 8 )

        MovableEntity me1( 2, "entity2", Vector3( ), Dimension3( 10, 10, 20 ), Quaternion( Vector3::X_UNIT, 0 ) );
        TS_ASSERT( me1.getType( ) == Entity::MOVABLE );

        PetAgent pa1( 3, "agent1", Vector3( ), Dimension3( 10, 10, 20 ), Quaternion( Vector3::X_UNIT, 0 ) );
        TS_ASSERT( pa1.getType( ) == Entity::PET_AGENT );

        HumanoidAgent ha1( 4, "agent2", Vector3( ), Dimension3( 10, 10, 20 ), Quaternion( Vector3::X_UNIT, 0 ) );
        TS_ASSERT( ha1.getType( ) == Entity::HUMANOID_AGENT );

        Entity* humanoid = dynamic_cast<Entity*>( &ha1 );
        TS_ASSERT( humanoid->getType( ) == Entity::HUMANOID_AGENT );

        MovableEntity* movableEntity = dynamic_cast<MovableEntity*>( &ha1 );
        TS_ASSERT( movableEntity->getType( ) == Entity::HUMANOID_AGENT );


    }
};
