#include <cxxtest/TestSuite.h>

#include <opencog/atomspace/AtomSpace.h>
#include <opencog/atomspace/Node.h>
#include <opencog/spacetime/atom_types.h>
#include <opencog/spatial/3DSpaceMap/OctomapOcTree.h>
#include <opencog/spatial/3DSpaceMap/Block3DMapUtil.h>
#include <opencog/util/Logger.h>

using namespace octomap;
using namespace opencog;
using namespace opencog::spatial;

class OctomapOcTreeUTest : public CxxTest::TestSuite
{

public:

    AtomSpace as;
    OctomapOcTree* testOctree;

    void setUp()
    {
        testOctree = new OctomapOcTree("", 1);
    }

    void tearDown()
    {
        as.clear();
        delete testOctree;
    }

    void testBinaryAddandRemove_NormalUnitBlock_AllGetFunctionWork()
    {
        BlockVector testpos1(7, 8, 9);
        Handle testHandle1(createNode(NODE, "bogus"));
        testOctree->addSolidUnitBlock(testHandle1, testpos1);
        Handle testHandle2 = testOctree->getBlock(testpos1);
        TS_ASSERT(testHandle2 == testHandle1);

        printf("Found at %s\n",
            testOctree->getBlockLocation(testHandle1).toString().c_str());
        printf("Expected %s\n", testpos1.toString().c_str());
        TS_ASSERT(testOctree->getBlockLocation(testHandle1) == testpos1);

        testOctree->removeSolidUnitBlock(testHandle1);

        Handle testHandle3 = testOctree->getBlock(testpos1);
        TS_ASSERT(testHandle3 == Handle::UNDEFINED);
        TS_ASSERT(testOctree->getBlockLocation(testHandle1) == BlockVector::ZERO);
        TS_ASSERT(testOctree->checkBlockInPos(testHandle1, testpos1) == false);
    }

    void testAddSolidUnitBlock__PositionOverBorder__GetBlockFailed()
    {
        unsigned border = 32767;
        BlockVector testpos1(border, 8, 9);
        Handle testHandle1(100);
        testOctree->addSolidUnitBlock(testHandle1, testpos1);
        Handle testHandle2 = testOctree->getBlock(testpos1);
        TS_ASSERT_EQUALS(Handle::UNDEFINED, testHandle2);
    }

    void testSetBlock_AddBlockWithProbabilityControl_GetFunctionsWorkWithProb()
    {
        BlockVector testpos1(7,8,9);
        Handle testHandle1(createNode(NODE, "yabadabadoo"));
        float logOddThreshold = testOctree->getOccupancyThresLog();

        testOctree->setUnitBlock(testHandle1, testpos1, logOddThreshold);

        logger().error("threshold %f", logOddThreshold);
        logger().error("block occupancy %f", testOctree->search(testpos1.x, testpos1.y, testpos1.z)->getLogOdds());

        //test binary getBlock
        TS_ASSERT(testOctree->getBlock(testpos1) == testHandle1);
        // test prob getBlock
        TS_ASSERT(testOctree->getBlock(testpos1, logOddThreshold) == testHandle1);
        TS_ASSERT(testOctree->getBlockLocation(testHandle1) == testpos1);
        // test prob getblocklocation
        TS_ASSERT(testOctree->getBlockLocation(testHandle1,logOddThreshold) == testpos1);

        //change the occupancy so it's small enough to make getter find nothing
        testOctree->setUnitBlock(testHandle1, testpos1, -0.1);

        TS_ASSERT(testOctree->getBlock(testpos1) == Handle::UNDEFINED);
        TS_ASSERT(testOctree->getBlock(testpos1, logOddThreshold) == Handle::UNDEFINED);
        TS_ASSERT(testOctree->getBlockLocation(testHandle1) == BlockVector::ZERO);
        TS_ASSERT(testOctree->getBlockLocation(testHandle1, logOddThreshold) == BlockVector::ZERO);

        //change the threshold, so the occupancy is large enough to find it
        testOctree->setOccupancyThres(-0.2);
        logOddThreshold = testOctree->getOccupancyThresLog();

        TS_ASSERT(testOctree->getBlock(testpos1) != Handle::UNDEFINED);
        TS_ASSERT(testOctree->getBlock(testpos1,logOddThreshold) != Handle::UNDEFINED);
        TS_ASSERT(testOctree->getBlockLocation(testHandle1) == testpos1);
        TS_ASSERT(testOctree->getBlockLocation(testHandle1, logOddThreshold) == testpos1);
    }

    void testGetBlock_NoBlockAdded_ReturnUndefinedHandle()
    {
        BlockVector testpos1(7, 8, 9);
        Handle testHandle = testOctree->getBlock(testpos1);
        TS_ASSERT_EQUALS(Handle::UNDEFINED, testHandle);
    }

    void testGetBlock__AddBlockWithBinaryOccupancy__GetBlockSuccess()
    {
        BlockVector testpos1(3, 4, 5);
        Handle testBlock1 = as.add_node(STRUCTURE_NODE, "block123");
        testOctree->addSolidUnitBlock(testBlock1, testpos1);
        TS_ASSERT(testOctree->getBlock(testpos1) == testBlock1);

        // check the near block is empty
        for(int i = 0;i != 2;i++) {
            for(int j = 0;j != 2;j++) {
                for(int k = 0;k != 2;k++) {
                    BlockVector pos(i+3, j+4, k+5);
                    if (pos != testpos1) {
                        TS_ASSERT(testOctree->getBlock(pos) == Handle::UNDEFINED);
                    }
                }
            }
        }
    }

    void testGetBlock__AddBlockWithHigherLogOddsOccupancy__GetBlockFailed()
    {
        BlockVector testpos1(3, 4, 5);
        Handle testBlock1 = as.add_node(STRUCTURE_NODE, "block123");
        testOctree->addSolidUnitBlock(testBlock1, testpos1);
        TS_ASSERT(testOctree->getBlock(testpos1, testOctree->getOccupancyThresLog()) == testBlock1);

        // check the near block is empty
        for(int i = 0;i != 2;i++)
        {
            for(int j = 0;j != 2;j++)
            {
                for(int k = 0;k != 2;k++)
                {
                    BlockVector pos(i+3, j+4, k+5);
                    if (pos != testpos1) {
                        TS_ASSERT(testOctree->getBlock(pos,testOctree->getProbHitLog()) == Handle::UNDEFINED);
                    }
                }
            }
        }
        float higherLogOddThres = testOctree->search(testpos1.x, testpos1.y, testpos1.z)->getLogOdds() + 0.1;
        TS_ASSERT((testOctree->getBlock(testpos1, higherLogOddThres) == Handle::UNDEFINED));

    }


};
