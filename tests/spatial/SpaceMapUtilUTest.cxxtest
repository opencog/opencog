#include <cxxtest/TestSuite.h>

#include <cstdlib>
#include <string>

#include <opencog/atomspace/AtomSpace.h>
#include <opencog/atomspace/Handle.h>
#include <opencog/spacetime/atom_types.h>
#include <opencog/spatial/3DSpaceMap/Octree3DMapManager.h>
#include <opencog/spatial/3DSpaceMap/SpaceMapUtil.h>
#include <opencog/spatial/3DSpaceMap/Block3DMapUtil.h>
#include <opencog/util/Logger.h>

using namespace std;
using namespace opencog;
using namespace opencog::spatial;

class SpaceMapUtilUTest:public CxxTest::TestSuite
{
public:
    void testGetPredicate_MultipleTargetNodesAndMultiplePredicates_GetPredicates()
    {
        AtomSpace as;
        Handle targetBlock1 = as.add_node(STRUCTURE_NODE,"block1");
        Handle targetBlock2 = as.add_node(STRUCTURE_NODE,"block2");
        HandleSeq targetBlocks = {targetBlock1, targetBlock2};
        Handle predicateValueNode1=as.add_node(CONCEPT_NODE,"predval1");
        Handle predicateValueNode2=as.add_node(CONCEPT_NODE,"predval2");
        Handle predicateValueNode3=as.add_node(CONCEPT_NODE,"predval3");
        Handle predicateNode=as.add_node(PREDICATE_NODE,"predicate");
        HandleSeq listLinkOutgoings;
        listLinkOutgoings.push_back(targetBlock1);
        listLinkOutgoings.push_back(targetBlock2);
        listLinkOutgoings.push_back(predicateValueNode1);
        listLinkOutgoings.push_back(predicateValueNode2);
        listLinkOutgoings.push_back(predicateValueNode3);
        Handle listLink1=as.add_link(LIST_LINK, listLinkOutgoings);
        HandleSeq evalLinkOutgoings;
        evalLinkOutgoings.push_back(predicateNode);
        evalLinkOutgoings.push_back(listLink1);
        Handle EvalLink1=as.add_link(EVALUATION_LINK, evalLinkOutgoings);
        vector<string> predicateValues=getPredicate(as,"predicate",targetBlocks,3);
        TS_ASSERT_EQUALS("predval1",predicateValues[0]);
        TS_ASSERT_EQUALS("predval2",predicateValues[1]);
        TS_ASSERT_EQUALS("predval3",predicateValues[2]);
    }

    void testGetBoundingBox_CommonUseCase_GetCorrectBox()
    {
        AtomSpace as;
        Octree3DMapManager spaceMap(&as,"testmap",1,-255,1);
        Handle entity = as.add_node(ENTITY_NODE,"block1");
        //prepare entity location
        BlockVector entityPos(12,13,14);
        spaceMap.addNoneBlockEntity(entity,entityPos,false,false,123456);
        //prepare entity size
        HandleSeq targetBlocks = {entity};
        Handle length = as.add_node(NUMBER_NODE,"2");
        Handle width = as.add_node(NUMBER_NODE,"3");
        Handle height = as.add_node(NUMBER_NODE,"4");
        Handle predicateNode = as.add_node(PREDICATE_NODE,"size");
        HandleSeq listLinkOutgoings;
        listLinkOutgoings.push_back(entity);
        listLinkOutgoings.push_back(length);
        listLinkOutgoings.push_back(width);
        listLinkOutgoings.push_back(height);
        Handle listLink1=as.add_link(LIST_LINK, listLinkOutgoings);
        HandleSeq evalLinkOutgoings;
        evalLinkOutgoings.push_back(predicateNode);
        evalLinkOutgoings.push_back(listLink1);
        Handle EvalLink1 = as.add_link(EVALUATION_LINK, evalLinkOutgoings);

        AxisAlignedBox box = getBoundingBox(as, spaceMap, entity);

        TS_ASSERT_EQUALS(box.nearLeftBottomConer, entityPos);
        TS_ASSERT_EQUALS(box.size_x, 2);
        TS_ASSERT_EQUALS(box.size_y, 3);
        TS_ASSERT_EQUALS(box.size_z, 4);
    }
	
};
