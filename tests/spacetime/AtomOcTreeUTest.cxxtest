/*
 *
 * Copyright (c) 2016, Mandeep Singh Bhatia, OpenCog Foundation
 * All rights reserved.
 * License: AGPL
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the University of Freiburg nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

//TestAtomOcTree.cpp
#include <cxxtest/TestSuite.h>
#include <opencog/atomspace/AtomSpace.h>
#include "opencog/spacetime/octomap/AtomOcTree.h"

using namespace std;
using namespace opencog;
using namespace octomap;

class SpaceServerUTest : public CxxTest::TestSuite
{
public:
    AtomSpace testatomspace;
    Handle testHandle;

    void setUp()
    {
        testHandle=testatomspace.add_node(NUMBER_NODE,"21");
    }

    void tearDown()
    {
    }

    void print_query_info(point3d query, OcTreeNode* node)
    {
        if (node != nullptr) {
            opencog::Handle i=(static_cast<AtomOcTreeNode<Handle>*>(node))->getData();
            cout << "occupancy probability at " << query << ":\t " << node->getOccupancy() << ";"<< endl;
        }
        else
            cout << "occupancy probability at " << query << ":\t is unknown" << endl;
    }

    void test_AtomOCTree()
    {
        cout << endl;
        cout << "generating example map" << endl;

        AtomOcTree<Handle> tree (0.1);  // create empty tree with resolution 0.1


        // insert some measurements of occupied cells

        for (int x=-20; x<20; x++) {
            for (int y=-20; y<20; y++) {
                for (int z=-20; z<20; z++) {
                    point3d endpoint ((float) x*0.05f, (float) y*0.05f, (float) z*0.05f);
                    tree.updateNode(endpoint, true); // integrate 'occupied' measurement
                    tree.setNodeData(endpoint, testHandle);//if omitted prune value of 0 is assigned?
                }
            }
        }

        // insert some measurements of free cells

        for (int x=-30; x<30; x++) {
            for (int y=-30; y<30; y++) {
                for (int z=-30; z<30; z++) {
                    point3d endpoint ((float) x*0.02f-1.0f, (float) y*0.02f-1.0f, (float) z*0.02f-1.0f);
                    tree.updateNode(endpoint, false);  // integrate 'free' measurement
                }
            }
        }

        cout << endl;
        cout << "performing some queries:" << endl;

        point3d query (0., 0., 0.);
        OcTreeNode* result = tree.search (query);
        print_query_info(query, result);
        TS_ASSERT_DIFFERS(result,(OcTreeNode*)nullptr);
        TS_ASSERT_EQUALS((static_cast<AtomOcTreeNode<Handle>*>(result))->getData(),testHandle);

        query = point3d(-1.,-1.,-1.);
        result = tree.search (query);
        print_query_info(query, result);
        //TS_ASSERT_EQUALS(result,0);

        query = point3d(100.,1.,1.);
        result = tree.search (query);
        print_query_info(query, result);
        TS_ASSERT_EQUALS(result,(OcTreeNode*)nullptr);


        cout << endl;

    }

};
