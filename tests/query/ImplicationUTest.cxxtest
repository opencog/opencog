/*
 * tests/query/ImplicationUTest.cxxtest
 *
 * Copyright (C) 2009 Linas Vepstas <linasvepstas@gmail.com>
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/guile/SchemeEval.h>
#include <opencog/guile/SchemeSmob.h>
#include <opencog/query/DefaultPatternMatchCB.h>
#include <opencog/query/PatternMatch.h>
#include <opencog/server/CogServer.h>
#include <opencog/util/Config.h>
#include <opencog/util/Logger.h>

using namespace opencog;

class ImplicationUTest :  public CxxTest::TestSuite
{
	private:
		PatternMatch pm;
		AtomSpace *as;
		Handle varscope, restrict, restrict2;
		Handle implication, implication2;

	public:

		ImplicationUTest(void)
		{
			try
			{
				config().load("opencog-test.conf");
			}
			catch (RuntimeException &e)
			{
				std::cerr << e.getMessage() << std::endl;
			}
			logger().setFilename(config()["LOG_FILE"]);
			logger().setLevel(Logger::getLevelFromString(config()["LOG_LEVEL"]));
			logger().setPrintToStdoutFlag(config().get_bool("LOG_TO_STDOUT"));

			// logger().setLevel(Logger::DEBUG);
			// logger().setPrintToStdoutFlag(true);
		}

		~ImplicationUTest()
		{
			// erase the log file if no assertions failed
			if (!CxxTest::TestTracker::tracker().suiteFailed())
				std::remove(logger().getFilename().c_str());
		}

		void setUp(void);

		void tearDown(void) { }

		void test_exec(void);
};

/*
 * This function sets up an implication link, and some data.
 *
 * Note: although raw ImplicationLinks occuring outside of a
 * BindLink are now deprecated, this test still tests that
 * function, since there's a fair amount of existing code that
 * still uses it.  At any rate, under the covers, both share a
 * code path, so its a good test no matter what.
 *
 * Several subsystems and functions are tested here:
 * 1) Use of scheme for specifying hypergraphs.
 * 2) Use of the scheme apply() method.
 * 3) Validation of the pattern-matching clauses, which are not
 *    supposed to contain constants (this tests explicitly includes
 *    some constants)
 * 4) Crisp-logic implication.
 * 5) Single-clause implications.
 * 6) Use of BindLink
 * 7) Restrictions on matching variable types.
 */
#define an as->addNode
#define al as->addLink
void ImplicationUTest::setUp(void)
{
	server(CogServer::createInstance);
	as = &cogserver().getAtomSpace();
	pm.set_atomspace(as);
	SchemeEval::instance(as);

	// Load the atom types
	config().set("MODULES",
		"opencog/nlp/types/libnlp-types.so");

	config().set("SCM_PRELOAD",
      "opencog/atomspace/core_types.scm, "
      "opencog/nlp/types/nlp_types.scm");

	// Blindly search a bunch of paths hoping to find the files
	// in one of them ...
	const char * paths[] = 
	{
		"./",
		"../",
		"../../",
		"../../../",
		NULL
	};
	cogserver().loadModules(paths);
	cogserver().loadSCMModules(paths);


	// Create initialzation
	const char * setup = 
	"(define (stv mean conf) (cog-new-stv mean conf))\n"
	"(define (AndLink . x)\n"
	"   (apply cog-new-link (append (list 'AndLink) x)))\n"
	"(define (ListLink . x)\n"
	"   (apply cog-new-link (append (list 'ListLink) x)))\n"
	"(define (InheritanceLink . x)\n"
	"   (apply cog-new-link (append (list 'InheritanceLink) x)))\n"
	"(define (ImplicationLink . x)\n"
	"   (apply cog-new-link (append (list 'ImplicationLink) x)))\n"
	"(define (DefinedFrameNode . x)\n"
	"   (apply cog-new-node (append (list 'DefinedFrameNode) x)))\n"
	"(define (ConceptNode . x)\n"
	"   (apply cog-new-node (append (list 'ConceptNode) x)))\n"
	"(define (PredicateNode . x)\n"
	"   (apply cog-new-node (append (list 'PredicateNode) x)))\n"
	"(define (VariableNode . x)\n"
	"   (apply cog-new-node (append (list 'VariableNode) x)))\n"
	"(define (VariableTypeNode . x)\n"
	"   (apply cog-new-node (append (list 'VariableTypeNode) x)))\n"
	"(define (TypedVariableLink . x)\n"
	"   (apply cog-new-link (append (list 'TypedVariableLink) x)))\n"
	"(define (BindLink . x)\n"
	"   (apply cog-new-link (append (list 'BindLink) x)))\n";
	SchemeEval::instance().eval(setup);

	// Create an implication link that will be tested.
	const char * imp = 
	"(define (imp)\n"
	"(ImplicationLink\n"
	"   (AndLink\n"
	"      (InheritanceLink\n"
	"         (PredicateNode \"grab@a6460c2d-b5f8-4287-8882-028d12de42d2_Manipulation\")\n"
	"         (DefinedFrameNode \"#Manipulation\")\n"
	"      )\n"
	"      (InheritanceLink (stv 1 1)\n"
	"         (VariableNode \"$predNode\")\n"
	"         (DefinedFrameNode \"#Manipulation\")\n"
	"      )\n"
	"   )\n"
	"   (VariableNode \"$predNode\")\n"
	")\n"
	")\n";
	SchemeEval::instance( ).eval(imp);
	implication = SchemeEval::instance( ).apply("imp", Handle::UNDEFINED);

	// Create an implication link without the conjunction (AndLink)
	const char * imp2 =
	"(define (imp2)\n"
	"(ImplicationLink\n"
	"   (InheritanceLink (stv 1 1)\n"
	"      (VariableNode \"$predNode\")\n"
	"      (DefinedFrameNode \"#Manipulation\")\n"
	"   )\n"
	"   (VariableNode \"$predNode\")\n"
	")\n"
	")\n";
	SchemeEval::instance( ).eval(imp2);
	implication2 = SchemeEval::instance( ).apply("imp2", Handle::UNDEFINED);

	// Create a varscope link with just one variable
	const char * scope =
	"(define (varscope)\n"
	"(BindLink\n"
	"   (VariableNode \"$predNode\")\n"
	"   (ImplicationLink\n"
	"      (InheritanceLink (stv 1 1)\n"
	"         (VariableNode \"$predNode\")\n"
	"         (DefinedFrameNode \"#Manipulation\")\n"
	"      )\n"
	"      (VariableNode \"$predNode\")\n"
	"   )\n"
	")\n"
	")\n";
	SchemeEval::instance( ).eval(scope);
	varscope = SchemeEval::instance( ).apply("varscope", Handle::UNDEFINED);

	// Create a varscope link with a type restriction
	const char * strict =
	"(define (restricto)\n"
	"(BindLink\n"
	"   (TypedVariableLink\n"
	"      (VariableNode \"$predNode\")\n"
	"      (VariableTypeNode \"PredicateNode\")\n"
	"   )\n"
	"   (ImplicationLink\n"
	"      (InheritanceLink (stv 1 1)\n"
	"         (VariableNode \"$predNode\")\n"
	"         (DefinedFrameNode \"#Manipulation\")\n"
	"      )\n"
	"      (VariableNode \"$predNode\")\n"
	"   )\n"
	")\n"
	")\n";
	SchemeEval::instance( ).eval(strict);
	restrict = SchemeEval::instance( ).apply("restricto", Handle::UNDEFINED);

	// Create a varscope link with a type restriction
	const char * strict2 =
	"(define (restrict2)\n"
	"(BindLink\n"
	"   (ListLink\n"
	"      (TypedVariableLink\n"
	"         (VariableNode \"$predNode\")\n"
	"         (VariableTypeNode \"PredicateNode\")\n"
	"      )\n"
	"      (TypedVariableLink\n"
	"         (VariableNode \"$framNode\")\n"
	"         (VariableTypeNode \"DefinedFrameNode\")\n"
	"      )\n"
	"   )\n"
	"   (ImplicationLink\n"
	"      (AndLink\n"
	"         (InheritanceLink (stv 1 1)\n"
	"            (VariableNode \"$predNode\")\n"
	"            (DefinedFrameNode \"#Manipulation\")\n"
	"         )\n"
	"         (InheritanceLink (stv 1 1)\n"
	"            (VariableNode \"$framNode\")\n"
	"            (DefinedFrameNode \"#Manipulation\")\n"
	"         )\n"
	"      )\n"
	"      (ListLink\n"
	"         (VariableNode \"$predNode\")\n"
	"         (VariableNode \"$framNode\")\n"
	"      )\n"
	"   )\n"
	")\n"
	")\n";
	SchemeEval::instance( ).eval(strict2);
	restrict2 = SchemeEval::instance( ).apply("restrict2", Handle::UNDEFINED);

	// Create data on which the above pattern should match
	const char * str = 
	"(InheritanceLink (stv 1.0 1.0) (cog-new-av 1 0 0)\n"
	"   (DefinedFrameNode \"#Ingestion\")\n"
	"   (DefinedFrameNode \"#Manipulation\")\n"
	")\n"
	"(InheritanceLink (stv 1.0 1.0) (cog-new-av 1 0 0)\n"
	"   (PredicateNode \"grab@a6460c2d-b5f8-4287-8882-028d12de42d2_Manipulation\")\n"
	"   (DefinedFrameNode \"#Manipulation\")\n"
	")\n";
	SchemeEval::instance( ).eval(str);
}

/*
 * Basic implication link test.
 *
 * Expect to get the following result, given the above data:
 *
 *    ListLink
 *       DefinedFrameNode #Ingestion
 *       PredicateNode grab@a6460c2d-b5f8-4287-8882-028d12de42d2_Manipulation
 */
#define getlink(hand,pos) as->getOutgoing(hand,pos)
#define getarity(hand) as->getArity(hand)

void ImplicationUTest::test_exec(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	// Result should be a ListLink
	Handle result = pm.crisp_logic_imply(implication);
	logger().debug("result is %s\n", SchemeSmob::to_string(result).c_str());

	// There should be two solutions: 
	TSM_ASSERT_EQUALS("wrong number of solutions found", 2, getarity(result));

	// Result should be a ListLink w/ two solutions
	result = pm.crisp_logic_imply(implication2);
	logger().debug("result is %s\n", SchemeSmob::to_string(result).c_str());
	TSM_ASSERT_EQUALS("wrong number of solutions found", 2, getarity(result));

	// Result should be a ListLink w/ two solutions
	result = pm.bindlink(varscope);
	logger().debug("result is %s\n", SchemeSmob::to_string(result).c_str());
	TSM_ASSERT_EQUALS("wrong number of solutions found", 2, getarity(result));

	// Result should be a ListLink w/ one solution
	result = pm.bindlink(restrict);
	logger().debug("result is %s\n", SchemeSmob::to_string(result).c_str());
	TSM_ASSERT_EQUALS("wrong number of solutions found", 1, getarity(result));

	// Result should be a ListLink w/ one solution
	result = pm.bindlink(restrict2);
	logger().debug("result is %s\n", SchemeSmob::to_string(result).c_str());
	TSM_ASSERT_EQUALS("wrong number of solutions found", 1, getarity(result));

	logger().debug("END TEST: %s", __FUNCTION__);
}
