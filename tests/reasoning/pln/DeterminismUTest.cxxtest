/*
 * Copyright (C) 2010 OpenCog Foundation
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/server/CogServer.h>

#include <opencog/reasoning/pln/PLN.h>
#include <opencog/reasoning/pln/Testing.h>
#include <opencog/reasoning/pln/rules/Rules.h>

#include <opencog/reasoning/pln/AtomSpaceWrapper.h>
#include <opencog/reasoning/pln/BackInferenceTreeNode.h>
#include <opencog/reasoning/pln/ForwardChainer.h>

#include <opencog/reasoning/pln/rules/RuleApp.h>

#include <opencog/util/Config.h>
#include <opencog/util/exceptions.h>

// We must use the PROJECT_SOURCE_DIR var supplied by the CMake script to
// ensure we find the files whether or not we're building using a separate build
// dir
#define PLN_TEST_DIR PROJECT_SOURCE_DIR"/tests/reasoning/pln/"

using namespace test;
using namespace opencog::pln;
using namespace opencog;
using namespace std;

namespace test {
    extern int allTestsInferenceNodes;
    extern vector< vector<vector<int> > >  INstatsVT;
    extern vector<vector<int> > INstatsV;
    extern vector<int> INstats;
    extern FitnessEvaluatorT testFitnessEvaluator;
}

class DeterminismUTest :  public CxxTest::TestSuite {

private:
    AtomSpaceWrapper *asw;

    static const int testRepeats = 2;
    int t;


    //! @todo have a setup method in PLNModule that is also used in PLNUTest
    void initPLNTests()
    {
        try
        {
            config().load("pln-test.conf");
        }
        catch (RuntimeException &e)
        {
            std::cerr << e.getMessage() << std::endl;
        }

#if LOG_ON_FILE
        test::logfile=fopen("pln.log","wt");
        cout << "LOGGING TO FILE pln.log!\n";
#endif
        currentDebugLevel = config().get_int("PLN_LOG_LEVEL");
    }

public:
    DeterminismUTest()
    {
        // Initialize PLN test environment
        try {        
            logger().info("Initializing PLN test env...");
            asw = ASW(&cogserver().getAtomSpace());                                  
        }
        catch(std::string s) {
            logger().error("at root level while initializing.");
        }
        catch(PLNexception e)
        {
            logger().error("at root level while initializing.");
        }
        catch(...)
        {
            logger().error("Unknown exception at root level while initializing. ");
        }
        
        // Initialize PLN tests as such
        initPLNTests();

#ifdef HAVE_GUILE
        // Necessary if you use test data and/or targets in Scheme.
        logger().debug("Loading Scheme modules");
        config().set("SCM_PRELOAD",
                "opencog/scm/type_constructors.scm,"
                "opencog/scm/utilities.scm");
        // Blindly search a bunch of paths hoping to find the files
        // in one of them ...
        const char * paths[] = 
        {
                "./",
                "../",
                "../../",
                "../../../",
                "../../../..",
                NULL
        };
        cogserver().loadSCMModules(paths);
#endif

        allTestsInferenceNodes = 0;

    }
    
    ~DeterminismUTest()
    {
    }

    void testDummy() {
    }
    
    // test forward chainer on all targets defined as conf file
    void DISABLEtestForwardChainingDeterminism() {
        AtomSpaceWrapper *asw = GET_ASW;
        asw->reset();
        asw->allowFWVarsInAtomSpace = true;

        for (int i=0; i < 2; i++) {
            std::cout << "== DOING REPEAT 1 ==" << endl;
            asw->reset();
            HybridForwardChainer fc1;
            Btr<PLNTest> test1 = findSCMTarget("AnotBdemo", false);

            pHandle eh1=PHANDLE_UNDEFINED; // expected target handle
            eh1 = fc1.fwdChainToTarget(1, test1->target);
            Type t1 = asw->getType(eh1);
            TruthValuePtr tv1 = asw->getTV(eh1);
            int lr1 = fc1.thisLevelResults->size();

            std::cout << "== DOING REPEAT 2 ==" << endl;
            asw->reset();
            HybridForwardChainer fc2;
            Btr<PLNTest> test2 = findSCMTarget("AnotBdemo", false);
            pHandle eh2=PHANDLE_UNDEFINED; // expected target handle
            eh2 = fc2.fwdChainToTarget(1, test2->target);
            Type t2 = asw->getType(eh2);
            TruthValuePtr tv2 = asw->getTV(eh2);
            int lr2 = fc2.thisLevelResults->size();

            TS_ASSERT_EQUALS(t1, t2);
            if (t1 == t2) {
                TS_ASSERT_EQUALS(fc1.level, fc2.level);
                TS_ASSERT_EQUALS(tv1->getMean(), tv2->getMean());
                TS_ASSERT_EQUALS(lr1, lr2);
            }
        }

    }

};
