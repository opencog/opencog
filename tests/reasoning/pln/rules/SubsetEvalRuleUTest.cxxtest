/*
 * tests/reasoning/pln/rules/SubsetEvalRuleUTest.cxxtest
 *
 * Copyright (C) 2009 Novamente LLC
 * All Rights Reserved
 *
 * Author Nil Geisweiller
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/reasoning/pln/rules/auxiliary/SubsetEvalRule.h>
#include <opencog/reasoning/pln/AtomSpaceWrapper.h>
#include <opencog/util/foreach.h>
#include <opencog/util/numeric.h>

#include <boost/lexical_cast.hpp>
#include <boost/assign/list_of.hpp>

using namespace opencog;
using namespace pln;

using boost::lexical_cast;
using boost::assign::list_of;
using std::string;
using std::cout;
using std::endl;
using std::pair;

//number of elements used in the test
const unsigned int ne = 10;

//member link strength of some elements of sub
const strength_t e0_sub_s = 0.1;
const strength_t e2_sub_s = 0.5;
const strength_t e4_sub_s = 0.2;
const strength_t e5_sub_s = 0.9;
const strength_t e7_sub_s = 1.0;
const strength_t e8_sub_s = 0.4;

//member link strength of some elements of super
const strength_t e1_super_s = 0.2;
const strength_t e2_super_s = 0.9;
const strength_t e3_super_s = 0.8;
const strength_t e6_super_s = 0.4;
const strength_t e8_super_s = 0.6;
const strength_t e9_super_s = 0.0;

//e9_super_s is null so it is not included in ne_non_null
const unsigned int ne_non_null = 9;

class SubsetEvalRuleUTest : public CxxTest::TestSuite {
private:
    AtomSpace* _as;
    AtomSpaceWrapper* _asw;
    pHandle _sub_h;
    pHandle _super_h;
    strength_t f(strength_t s1, strength_t s2) {
        return std::min(s1, s2);
    }

public:

    // initialize the atom space wrapper with 2 concepts, sub and super,
    // and elements connected to them by member links
    SubsetEvalRuleUTest() {

        //set flag to print only OC_ASSERT and other ERROR level logs on stdout
        opencog::logger().setPrintErrorLevelStdout();

        //instantiate the atom space
        _as = new AtomSpace;
        
        //instantiate the atom space wrapper
        _asw = static_cast<AtomSpaceWrapper*>(ASW(_as));

        cout << "AFTER GETTING ATOMSPACE INSTANCE" << endl;
        _as->print();

        //add the 2 concept nodes sub and super to compute Subset(sub super)
        _sub_h = _asw->addNode(CONCEPT_NODE, "sub", TruthValue::DEFAULT_TV());

        cout << "CHECK NAME of sub: " << _asw->getName(_sub_h) << endl;

        cout << "AFTER ADDING sub" << endl;

        _as->print();

        _super_h = _asw->addNode(CONCEPT_NODE, "super",
                                 TruthValue::DEFAULT_TV());

	cout << "AFTER ADDING super" << endl;
        _as->print();

        //add the members
        pHandleSeq ehv;
        for(unsigned int i = 0; i < ne; i++) {
            string e_name = string("e") + lexical_cast<string>(i);
            pHandle e_h = _asw->addNode(NODE, e_name, TruthValue::DEFAULT_TV());
            ehv.push_back(e_h);
        }

        //add members of sub
        pHandle h0 = _asw->addLink(MEMBER_LINK, ehv[0], _sub_h,
                      SimpleTruthValue(e0_sub_s, 1.0));

        _asw->addLink(MEMBER_LINK, ehv[2], _sub_h,
                      SimpleTruthValue(e2_sub_s, 1.0));
        _asw->addLink(MEMBER_LINK, ehv[4], _sub_h,
                      SimpleTruthValue(e4_sub_s, 1.0));
        _asw->addLink(MEMBER_LINK, ehv[5], _sub_h,
                      SimpleTruthValue(e5_sub_s, 1.0));
        _asw->addLink(MEMBER_LINK, ehv[7], _sub_h,
                      SimpleTruthValue(e7_sub_s, 1.0));
        _asw->addLink(MEMBER_LINK, ehv[8], _sub_h,
                      SimpleTruthValue(e8_sub_s, 1.0));

        //add members of super
        _asw->addLink(MEMBER_LINK, ehv[1], _super_h,
                      SimpleTruthValue(e1_super_s, 1.0));
        _asw->addLink(MEMBER_LINK, ehv[2], _super_h,
                      SimpleTruthValue(e2_super_s, 1.0));
        _asw->addLink(MEMBER_LINK, ehv[3], _super_h,
                      SimpleTruthValue(e3_super_s, 1.0));
        _asw->addLink(MEMBER_LINK, ehv[6], _super_h,
                      SimpleTruthValue(e6_super_s, 1.0));
        _asw->addLink(MEMBER_LINK, ehv[8], _super_h,
                      SimpleTruthValue(e8_super_s, 1.0));
        _asw->addLink(MEMBER_LINK, ehv[9], _super_h,
                      SimpleTruthValue(e9_super_s, 1.0));

        cout << "_asw->vhmapToString(): " << _asw->vhmapToString() << endl;

        cout << "AFTER ADDING ALL ATOMS" << endl;
        _as->print();

        cout << "CHECK NAME of sub: " << _asw->getName(_sub_h) << endl;

    }

    void testSubsetEvalRule() {
        // calculate result using SubsetEvalRule
        SubsetEvalRule sser(_asw, CONCEPT_NODE);
        BoundVertex bv = sser.compute(list_of(_sub_h)(_super_h));
        pHandle res_h = _v2h(bv.GetValue());
        TruthValuePtr res_tv = _asw->getTV(res_h);
        cout << "res = " << _asw->pHandleToString(res_h) << endl;

        // build the TV result manually
        strength_t numerator =
            f(e2_sub_s, e2_super_s) + f(e8_sub_s, e8_super_s);
        strength_t denominator =
            e0_sub_s + e2_sub_s + e4_sub_s + e5_sub_s + e7_sub_s + e8_sub_s;
        strength_t expected_strength = numerator / denominator;
        count_t expected_count = ne_non_null;

        // check strength
        TS_ASSERT(isApproxEq(res_tv->getMean(), expected_strength));
        
        // check count
        TS_ASSERT(isApproxEq(res_tv->getCount(), expected_count));

        // check that first child is sub_h and second child is super_h
        TS_ASSERT(_asw->getOutgoing(res_h, 0) == _sub_h);
        TS_ASSERT(_asw->getOutgoing(res_h, 1) == _super_h);
    }
};
