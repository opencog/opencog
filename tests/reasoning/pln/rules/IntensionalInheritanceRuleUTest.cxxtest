/*
 * tests/reasoning/pln/rules/SubsetEvalRuleUTest.cxxtest
 *
 * Copyright (C) 2009 Novamente LLC
 * All Rights Reserved
 *
 * Author Nil Geisweiller
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */


#include <algorithm>
#include <boost/assign/list_of.hpp>
#include <opencog/util/numeric.h>
#include <opencog/reasoning/pln/rules/auxiliary/IntensionalInheritanceRule.h>

using namespace opencog;
using namespace pln;

using std::max;
using std::cout;
using std::endl;
using boost::assign::list_of;

const count_t properties = 5;

const strength_t null_s = 0;
const strength_t lion_mammal_s = 1;
const strength_t lion_carnivor_s = 1;
const strength_t lion_striped_s = 0.0;
const strength_t lion_predator_s = 1;
const strength_t lion_facingExtincion_s = 0.8;

const strength_t not_lion_mammal_s = 0.2;
const strength_t not_lion_carnivor_s = 0.1;
const strength_t not_lion_striped_s = 0.17;
const strength_t not_lion_predator_s = 0.3;
const strength_t not_lion_facingExtincion_s = 0.4;

const strength_t mammal_lion_ASSOC_s =
    max(lion_mammal_s - not_lion_mammal_s, null_s);
const strength_t carnivor_lion_ASSOC_s =
    max(lion_carnivor_s - not_lion_carnivor_s, null_s);
const strength_t striped_lion_ASSOC_s =
    max(lion_striped_s - not_lion_striped_s, null_s);
const strength_t predator_lion_ASSOC_s =
    max(lion_predator_s - not_lion_predator_s, null_s);
const strength_t facingExtincion_lion_ASSOC_s =
    max(lion_facingExtincion_s - not_lion_facingExtincion_s, null_s);

const strength_t tiger_mammal_s = 1;
const strength_t tiger_carnivor_s = 1;
const strength_t tiger_striped_s = 0.9;
const strength_t tiger_predator_s = 1;
const strength_t tiger_facingExtincion_s = 1;

const strength_t not_tiger_mammal_s = 0.2;
const strength_t not_tiger_carnivor_s = 0.1;
const strength_t not_tiger_striped_s = 0.15;
const strength_t not_tiger_predator_s = 0.3;
const strength_t not_tiger_facingExtincion_s = 0.37;

const strength_t mammal_tiger_ASSOC_s =
    max(tiger_mammal_s - not_tiger_mammal_s, null_s);
const strength_t carnivor_tiger_ASSOC_s =
    max(tiger_carnivor_s - not_tiger_carnivor_s, null_s);
const strength_t striped_tiger_ASSOC_s =
    max(tiger_striped_s - not_tiger_striped_s, null_s);
const strength_t predator_tiger_ASSOC_s =
    max(tiger_predator_s - not_tiger_predator_s, null_s);
const strength_t facingExtincion_tiger_ASSOC_s =
    max(tiger_facingExtincion_s - not_tiger_facingExtincion_s, null_s);

class IntensionalInheritanceRuleUTest : public CxxTest::TestSuite {
private:
    AtomSpace* _as;
    AtomSpaceWrapper* _asw;
    pHandle _lion_h;
    pHandle _not_lion_h;
    pHandle _tiger_h;
    pHandle _not_tiger_h;

    pHandle _mammal_h;
    pHandle _carnivor_h;
    pHandle _striped_h;
    pHandle _predator_h;
    pHandle _facingExtincion_h;

    pHandle _subset_lion_mammal_h;
    pHandle _subset_lion_carnivor_h;
    pHandle _subset_lion_striped_h;
    pHandle _subset_lion_predator_h;
    pHandle _subset_lion_facingExtincion_h;

    pHandle _subset_not_lion_mammal_h;
    pHandle _subset_not_lion_carnivor_h;
    pHandle _subset_not_lion_striped_h;
    pHandle _subset_not_lion_predator_h;
    pHandle _subset_not_lion_facingExtincion_h;

    pHandle _subset_tiger_mammal_h;
    pHandle _subset_tiger_carnivor_h;
    pHandle _subset_tiger_striped_h;
    pHandle _subset_tiger_predator_h;
    pHandle _subset_tiger_facingExtincion_h;

    pHandle _subset_not_tiger_mammal_h;
    pHandle _subset_not_tiger_carnivor_h;
    pHandle _subset_not_tiger_striped_h;
    pHandle _subset_not_tiger_predator_h;
    pHandle _subset_not_tiger_facingExtincion_h;

    strength_t f(strength_t s1, strength_t s2) {
        return std::min(s1, s2);
    }
public:
    
    IntensionalInheritanceRuleUTest() {

        // set flag to print only OC_ASSERT and other ERROR level logs on stdout
        opencog::logger().setPrintErrorLevelStdout();

        // instantiate the atom space
        _as = new AtomSpace;
        
        // instantiate the atom space wrapper
        _asw = static_cast<AtomSpaceWrapper*>(ASW(_as));

        // add the 2 concept nodes lion and tiger and their negations
        // to compute IntensionalInheritance(lion tiger)
        _lion_h = _asw->addNode(CONCEPT_NODE, "Lion",
                                TruthValue::DEFAULT_TV());
        _not_lion_h = _asw->addLink(NOT_LINK, _lion_h,
                                    TruthValue::DEFAULT_TV());
        _tiger_h = _asw->addNode(CONCEPT_NODE, "Tiger",
                                 TruthValue::DEFAULT_TV());
        _not_tiger_h = _asw->addLink(NOT_LINK, _tiger_h,
                                     TruthValue::DEFAULT_TV());

        // add super concepts
        _mammal_h = _asw->addNode(CONCEPT_NODE, "Mammal",
                                  TruthValue::DEFAULT_TV());
        _carnivor_h = _asw->addNode(CONCEPT_NODE, "Carnivor",
                                    TruthValue::DEFAULT_TV());
        _striped_h = _asw->addNode(CONCEPT_NODE, "Stiped",
                                   TruthValue::DEFAULT_TV());
        _predator_h = _asw->addNode(CONCEPT_NODE, "Predator",
                                    TruthValue::DEFAULT_TV());
        _facingExtincion_h = _asw->addNode(CONCEPT_NODE, "FacingExtincion",
                                           TruthValue::DEFAULT_TV());
        
         //add SubSet Lion X relationships
        _subset_lion_mammal_h =
            _asw->addLink(SUBSET_LINK, _lion_h, _mammal_h,
                          SimpleTruthValue(lion_mammal_s, 1));
        _subset_lion_carnivor_h =
            _asw->addLink(SUBSET_LINK, _lion_h, _carnivor_h,
                          SimpleTruthValue(lion_carnivor_s, 1));
        _subset_lion_striped_h =
            _asw->addLink(SUBSET_LINK, _lion_h, _striped_h,
                          SimpleTruthValue(lion_striped_s, 1));
        _subset_lion_predator_h =
            _asw->addLink(SUBSET_LINK, _lion_h, _predator_h,
                          SimpleTruthValue(lion_predator_s, 1));
        _subset_lion_facingExtincion_h =
            _asw->addLink(SUBSET_LINK, _lion_h, _facingExtincion_h,
                          SimpleTruthValue(lion_facingExtincion_s, 1));
        //add SubSet NOT Lion X relationships
        _subset_not_lion_mammal_h =
            _asw->addLink(SUBSET_LINK, _not_lion_h, _mammal_h,
                          SimpleTruthValue(not_lion_mammal_s, 1));
        _subset_not_lion_carnivor_h =
            _asw->addLink(SUBSET_LINK, _not_lion_h, _carnivor_h,
                          SimpleTruthValue(not_lion_carnivor_s, 1));
        _subset_not_lion_striped_h =
            _asw->addLink(SUBSET_LINK, _not_lion_h, _striped_h,
                      SimpleTruthValue(not_lion_striped_s, 1));
        _subset_not_lion_predator_h =
            _asw->addLink(SUBSET_LINK, _not_lion_h, _predator_h,
                          SimpleTruthValue(not_lion_predator_s, 1));
        _subset_not_lion_facingExtincion_h =
            _asw->addLink(SUBSET_LINK, _not_lion_h, _facingExtincion_h,
                          SimpleTruthValue(not_lion_facingExtincion_s, 1));
       
         //add SubSet Tiger X relationships
        _subset_tiger_mammal_h =
            _asw->addLink(SUBSET_LINK, _tiger_h, _mammal_h,
                          SimpleTruthValue(tiger_mammal_s, 1));
        _subset_tiger_carnivor_h =
            _asw->addLink(SUBSET_LINK, _tiger_h, _carnivor_h,
                          SimpleTruthValue(tiger_carnivor_s, 1));
        _subset_tiger_striped_h =
            _asw->addLink(SUBSET_LINK, _tiger_h, _striped_h,
                          SimpleTruthValue(tiger_striped_s, 1));
        _subset_tiger_predator_h =
            _asw->addLink(SUBSET_LINK, _tiger_h, _predator_h,
                          SimpleTruthValue(tiger_predator_s, 1));
        _subset_tiger_facingExtincion_h =
            _asw->addLink(SUBSET_LINK, _tiger_h, _facingExtincion_h,
                          SimpleTruthValue(tiger_facingExtincion_s, 1));
        //add SubSet NOT Tiger X relationships
        _subset_not_tiger_mammal_h =
            _asw->addLink(SUBSET_LINK, _not_tiger_h, _mammal_h,
                          SimpleTruthValue(not_tiger_mammal_s, 1));
        _subset_not_tiger_carnivor_h =
            _asw->addLink(SUBSET_LINK, _not_tiger_h, _carnivor_h,
                          SimpleTruthValue(not_tiger_carnivor_s, 1));
        _subset_not_tiger_striped_h =
            _asw->addLink(SUBSET_LINK, _not_tiger_h, _striped_h,
                      SimpleTruthValue(not_tiger_striped_s, 1));
        _subset_not_tiger_predator_h =
            _asw->addLink(SUBSET_LINK, _not_tiger_h, _predator_h,
                          SimpleTruthValue(not_tiger_predator_s, 1));
        _subset_not_tiger_facingExtincion_h =
            _asw->addLink(SUBSET_LINK, _not_tiger_h, _facingExtincion_h,
                          SimpleTruthValue(not_tiger_facingExtincion_s, 1));
    }

    void testIntensionalInheritanceRule() {
        IntensionalInheritanceRule iir(_asw, CONCEPT_NODE);
        const VertexSeq vv = list_of(_tiger_h)(_lion_h);
        BoundVertex bv = iir.compute(vv);
        pHandle res_h = _v2h(bv.GetValue());
        TruthValuePtr res_tv = _asw->getTV(res_h);
        count_t res_s = res_tv->getMean();
        count_t res_c = res_tv->getCount();
        cout << "res = " << _asw->pHandleToString(res_h) << endl;

        // calculate the expected mean of IntensionalInheritance Tiger Lion
        strength_t expected_intinh_tiger_lion_s =
            (f(mammal_lion_ASSOC_s, mammal_tiger_ASSOC_s)
             + f(carnivor_lion_ASSOC_s, carnivor_tiger_ASSOC_s)
             + f(striped_lion_ASSOC_s, striped_tiger_ASSOC_s)
             + f(predator_lion_ASSOC_s, predator_tiger_ASSOC_s)
             + f(facingExtincion_lion_ASSOC_s, facingExtincion_tiger_ASSOC_s)
             )
            /
            (mammal_tiger_ASSOC_s + carnivor_tiger_ASSOC_s + striped_tiger_ASSOC_s
             + predator_tiger_ASSOC_s + facingExtincion_tiger_ASSOC_s);
        
        // check that the mean and count of the expected and result are equal
        TS_ASSERT(isApproxEq(expected_intinh_tiger_lion_s, res_s));
        TS_ASSERT(isApproxEq(properties, res_c));
    }
};

