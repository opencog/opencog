/*
 * tests/reasoning/pln/rules/StrictImplicationBreakdownRule.cxxtest
 *
 * Copyright (C) 2009 Novamente LLC
 * All Rights Reserved
 *
 * Author Nil Geisweiller
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/reasoning/pln/rules/implication/StrictImplicationBreakdownRule.h>
#include <opencog/reasoning/pln/AtomSpaceWrapper.h>
#include <opencog/atomspace/SimpleTruthValue.h>

#include <opencog/util/Config.h>
#include <opencog/util/foreach.h>
#include <opencog/util/numeric.h>

#include <boost/assign/list_of.hpp>

using namespace opencog;
using namespace pln;

using boost::assign::list_of;
using std::string;
using std::cout;
using std::endl;
using std::pair;
using std::min;
using std::max;

// TV of A
const strength_t A_s = 0.9;
const count_t A_n = 100;
// initial truth value of B, will be changed after applying implication rule
const strength_t init_B_s = 0.2;
const count_t init_B_n = 5;
// TV of A->B
const strength_t AB_s = 0.9;
const count_t AB_n = 100;

class StrictImplicationBreakdownRuleUTest : public CxxTest::TestSuite {
private:
    AtomSpace* _as;
    AtomSpaceWrapper* _asw;
    pHandle _A_h;
    pHandle _B_h;
    pHandle _AB_h;

public:
    
    StrictImplicationBreakdownRuleUTest() {
        // set flag to print only OC_ASSERT and other ERROR level logs on stdout
        opencog::logger().setPrintErrorLevelStdout();

        // add "PLN_PRINT_REAL_ATOMS" = "true" parameter to config()
        opencog::config().set("PLN_PRINT_REAL_ATOMS", "true");

        // instantiate the atom space
        _as = new AtomSpace;
        
        // instantiate the atom space wrapper
        _asw = static_cast<AtomSpaceWrapper*>(ASW(_as));

        // add ConceptNode A, B
        _A_h = _asw->addNode(CONCEPT_NODE, "A", SimpleTruthValue(A_s, A_n));
        _B_h = _asw->addNode(CONCEPT_NODE, "B",
                             SimpleTruthValue(init_B_s, init_B_n));
        
        // add ImplicationLink A->B
        _AB_h = _asw->addLink(IMPLICATION_LINK, _A_h, _B_h, 
                              SimpleTruthValue(AB_s, AB_n));
    }

    void testStrictImplicationBreakdownRule() {
        // calculate result using StrictImplicationBreakdownRule
        StrictImplicationBreakdownRule sibr(_asw);
        
        BoundVertex bv = sibr.compute(list_of(_AB_h)(_A_h));
        pHandle res_h = _v2h(bv.GetValue());

        TruthValuePtr res_tv = _asw->getTV(res_h);
        cout << "res = " << _asw->pHandleToString(res_h) << endl;

        // build the TV result manually
        count_t n2 = std::min(AB_n, A_n);
        strength_t expected_s =
            (AB_s * A_s * n2 + init_B_s * (1 - A_s) * init_B_n)
            / (n2 + init_B_n);
        count_t expected_n = max(n2, init_B_n);

        cout << "expected_s: " << expected_s << endl;
        cout << "expected_n: " << expected_n << endl;

        // check strength
        TS_ASSERT(isApproxEq(res_tv->getMean(), expected_s));
        // check count
        TS_ASSERT(isApproxEq(res_tv->getCount(), expected_n));
    }
};
