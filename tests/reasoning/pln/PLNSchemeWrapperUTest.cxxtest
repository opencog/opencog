/*
 * Copyright (C) 2010 OpenCog Foundation
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <fstream>
#include <iterator>

#include <opencog/util/Config.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/atomspace/TruthValue.h>
#include <opencog/atomspace/SimpleTruthValue.h>
#include <opencog/atomspace/IndefiniteTruthValue.h>
#include <opencog/atomspace/CompositeTruthValue.h>

#include <opencog/guile/SchemeEval.h>
#include <opencog/reasoning/pln/AtomSpaceWrapper.h>

using namespace std;
using namespace opencog;

class PLNSchemeWrapperUTest :  public CxxTest::TestSuite {

private:
    AtomSpace *as;
    SchemeEval *eval;    
    string inferenceFilePrefix;

public:

    PLNSchemeWrapperUTest(void)
    {
        try
        {
            config().load("pln-test.conf");
        }
        catch (RuntimeException &e)
        {
            std::cerr << e.getMessage() << std::endl;
        }
        logger().setFilename(config()["LOG_FILE"]);
        logger().setLevel(Logger::getLevelFromString(config()["LOG_LEVEL"]));
        // logger().setPrintToStdoutFlag(config().get_bool("LOG_TO_STDOUT"));

        // Necessary if you use test data and/or targets in Scheme.
        logger().debug("Loading Scheme modules");
        // config().set("SCM_PRELOAD",
        //              "opencog/scm/type_constructors.scm,"
        //              "opencog/scm/utilities.scm,"
        //              "opencog/reasoning/pln/scm/pln-rules.scm");
        // Blindly search a bunch of paths hoping to find the files
        // in one of them ...
        const char * paths[] = 
        {
                "./",
                "../",
                "../../",
                "../../../",
                "../../../..",
                NULL
        };
        cogserver().loadModules(); 
        cogserver().loadSCMModules(paths);

        as = &cogserver().getAtomSpace();
        eval = &SchemeEval::instance(as);

        // Proper UTF-8 behaviour requires the right locale.
        // Do not use LC_ALL, as otherwise the printing of the numeric
        // quantities (immediately below) get commas, not decimal points,
        // in the majority of European locales. Unfortunately, guile number
        // parsing is not locale dependent...
        // eval->eval("(setlocale LC_ALL \"\")");
        eval->eval("(setlocale LC_CTYPE \"\")");
        eval->clear_pending();

        std::string PLN_TEST_DIR = PROJECT_SOURCE_DIR"/tests/reasoning/pln/";
        inferenceFilePrefix = PLN_TEST_DIR+"scm/new/";
    }

    ~PLNSchemeWrapperUTest() {
        // erase the log file if no assertions failed
        if (!CxxTest::TestTracker::tracker().suiteFailed())
            std::remove(logger().getFilename().c_str());
    }

    string read_file(string schemeFile) {
        ifstream in((inferenceFilePrefix + schemeFile).c_str());
        string res((istreambuf_iterator<char>(in)), istreambuf_iterator<char>());
        return res;
    }

    // check that a given Scheme file returns the truth value tv
    void check_inference(string schemeFile, const TruthValue& tv,
                         const VersionHandle vh = NULL_VERSION_HANDLE) {
        Handle h = eval->eval_h(read_file(schemeFile));
        std::cout << "H = " << as->atomAsString(h, false) << std::endl;
        std::cout << "ATOMSPACE:" << std::endl;
        as->print();
        std::cout << std::endl;
        std::cout << "GETTV = " << (*as->getTV(h, vh)) << std::endl;
        std::cout << "TV    = " << tv << std::endl;
        areEqualTV(*as->getTV(h, vh), tv, 0.0001);
    }

    void areEqualTV(const TruthValue& tv1, const TruthValue& tv2, float delta) {
        TS_ASSERT_DELTA(tv1.getMean(),tv2.getMean(),delta);
        TS_ASSERT_DELTA(tv1.getCount(),tv2.getCount(),delta);
    }

    void test_inference() {
        check_inference("aboutGreaterThan.scm",
                        SimpleTruthValue(0.2, SimpleTruthValue::confidenceToCount(0.56)));
        check_inference("marsMath.scm",
                        SimpleTruthValue(0.91, SimpleTruthValue::confidenceToCount(0.5)));
        check_inference("jumpingMoon.scm",
                        SimpleTruthValue(0.3, SimpleTruthValue::confidenceToCount(0.5)));
        check_inference("cheeseMaking.scm",
                        SimpleTruthValue(0.95, 959.707703));
        check_inference("niceWeather.scm",
                        SimpleTruthValue(0.5, SimpleTruthValue::confidenceToCount(0.5)));
        check_inference("DecontextualizePredicate.scm",
                        SimpleTruthValue(0.7, SimpleTruthValue::confidenceToCount(0.8)));
        check_inference("ContextualizePredicate.scm",
                        SimpleTruthValue(0.7, SimpleTruthValue::confidenceToCount(0.8)));
        check_inference("Not.scm",
                        SimpleTruthValue(0.9, SimpleTruthValue::confidenceToCount(0.3)));
        check_inference("InheritanceSubst.scm",
                        SimpleTruthValue(0.6, 324.000031));
#ifdef CONTEXTUAL_INFERENCE
        Handle cx = as->addNode(CONCEPT_NODE, "mathematics");
        std::cout << "cx = " << cx.value() << std::endl;
        check_inference("nerd.scm", SimpleTruthValue(0.66, 3200.000244),
                        VersionHandle(CONTEXTUAL, cx));
        check_inference("ClarkLogTrafficking.scm", SimpleTruthValue(0.243, 300.906616));
#endif
    }
};
