/*
 * Copyright (C) 2002-2007 Novamente LLC
 * Copyright (C) 2008-2009 by OpenCog Foundation
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/server/CogServer.h>
#include <opencog/reasoning/pln/PLN.h>
#include <opencog/reasoning/pln/Testing.h>
#include <opencog/reasoning/pln/rules/Rules.h>

#define BackInferenceTreeRootT BITNodeRoot

#include <opencog/reasoning/pln/AtomSpaceWrapper.h>
#include <opencog/reasoning/pln/BackInferenceTreeNode.h>
#include <opencog/reasoning/pln/ForwardChainer.h>

#include <opencog/reasoning/pln/rules/RuleApp.h>

#include <stdlib.h>
#include <time.h>
#include <sys/time.h>

#if defined(WIN32)
#include <windows.h>
#include <Mmsystem.h>

#if defined(_MSC_VER) || defined(__MINGW32__)
#include <time.h>
#ifndef _TIMEVAL_DEFINED /* also in winsock[2].h */
#define _TIMEVAL_DEFINED
struct timeval {
    long tv_sec;
    long tv_usec;
};
#endif /* _TIMEVAL_DEFINED */

int gettimeofday(struct timeval* tp, void* tzp) {
    unsigned long t;
    t = timeGetTime();
    tp->tv_sec = t / 1000;
    tp->tv_usec = t % 1000;
    /* 0 indicates that the call succeeded. */
    return 0;
}
#endif
#endif /* defined(WIN32) */

#include "opencog/reasoning/pln/rules/RuleProvider.h"

#include <opencog/util/Config.h>
#include <opencog/util/exceptions.h>
#include <opencog/guile/SchemeEval.h>

using namespace test;
using namespace opencog::pln;
using namespace opencog;
using namespace std;

#include <boost/filesystem.hpp>

using namespace boost::filesystem;

#define RUN_FAILURE_TESTS 0 // enable some tests which are supposed to fail.
#define WAIT_KEY_ON_FAILURE 0

// We must use the PROJECT_SOURCE_DIR var supplied by the CMake script to
// ensure we find the files whether or not we're building using a separate build
// dir
#define PLN_TEST_DIR PROJECT_SOURCE_DIR"/tests/reasoning/pln/"

const strength_t EPSILON_S = 0.001;
const confidence_t EPSILON_C = 0.001;

namespace test
{
    extern FILE *logfile;
    extern double custom_duration;
    extern double custom_duration2;
}

namespace opencog {
namespace pln {
    extern unsigned long now_interval_len   ;
}}

namespace test {
    extern int allTestsInferenceNodes;
    extern vector< vector<vector<int> > >  INstatsVT;
    extern vector<vector<int> > INstatsV;
    extern vector<int> INstats;
    extern FitnessEvaluatorT testFitnessEvaluator;
}

// Make the debug level high during infer steps (only)
//bool foo42=false;

// used for heuristic tests
const float temperatures[] = {
    0.00005, 0.00007, 10,
    0.0001, 0.0003, 0.0005,
    0.001, 0.003, 0.005,
    0.01, 0.03, 0.05,
    0.1, 0.3, 0.5,
    1, 3, 5 };

class PLNUTest :  public CxxTest::TestSuite {

private:
    AtomSpaceWrapper *asw;
    FILE *f;

    // stuff for running tests multiple times,
    // for non-deterministic heuristic functions
    static const int TestRepeats = 1;
    int seed;
    int tempi; // temporature index
    // test repeat #
    int t;
    
    float temperature;
    static const int temperaturesN = 7; //3*5;
    
    // Only runs some tests relevant to testing heuristic functions
    void runPLNTestsOnce() {
        // if you want to disable some of these tests,
        // comment out the content in their implementation
        // (so that they won't be run outside of testHeuristic either)
        testSCMTargetsBC();
        testTVChecksWork();
        testRandomTVsTooHigh();
        testSymmetricRelationFails();
//        testInverseBinding();
        DISABLEtestBasicSpawning();
/*        testMultipleRootsSpawning();
        testGeneralizationForBindLink();
        testGeneralizationForForAllLink();
        testInheritanceOsamaAbu();
        testInheritanceMuhummadTerrorist();
        testAnotBdemo();
        testFetchDemo5();
        testFetchDemo5_alt();
        testWoaDemo();*/

        INstatsV.push_back(INstats);
    }
    
    /**
     * If a nondeterministic function is used for fitness evaluator
     * then try running all the tests with different temperatures/seeds.
     */
    void setupHeuristicTestRun() {
        if (testFitnessEvaluator == BEST)
            return;
    
        INstatsV.clear();

        temperature = temperatures[tempi];

        //time_t seconds;
        //time(&seconds);
        int seconds = 1;
        srand((unsigned int) seconds+(seed++));
        allTestsInferenceNodes = 0;
    }

    //! @todo have a setup method in PLNModule that is also used in PLNUTest
    void initPLNTests()
    {
        try
        {
            config().load("pln-test.conf");
            
            logger().setFilename(config()["LOG_FILE"]);
            logger().setLevel(Logger::getLevelFromString(config()["LOG_LEVEL"]));
            logger().setBackTraceLevel(Logger::getLevelFromString(config()["BACK_TRACE_LOG_LEVEL"]));
            logger().setPrintToStdoutFlag(config().get_bool("LOG_TO_STDOUT"));
            logger().info("Initializing PLN test env...");
        }
        catch (RuntimeException &e)
        {
            std::cerr << e.getMessage() << std::endl;
        }

#if LOG_ON_FILE
        test::logfile=fopen("pln.log","wt");
        cout << "LOGGING TO FILE pln.log!\n";
#endif
        currentDebugLevel = config().get_int("PLN_LOG_LEVEL");

        // Call to initialise rule provider
        referenceRuleProvider();
    }

public:

    static PLNUTest* createSuite() { return new PLNUTest(); }
    static void destroySuite(PLNUTest* suite) { delete suite; }

    PLNUTest()
    {
        // initial values for running tests multiple times
        seed = 11111;
        tempi=0;
        // test repeat #
        t = 0;
        temperature = 0.1f;
        testFitnessEvaluator = BEST;
    
        // Initialize PLN test environment
        try {
            f = fopen("results.txt","a");

            asw = ASW(&cogserver().getAtomSpace());                                  
        }
        catch(std::string s) {
            logger().error("at root level while initializing.");
        }
        catch(PLNexception e)
        {
            logger().error("at root level while initializing.");
        }
        catch(...)
        {
            logger().error("Unknown exception at root level while initializing. ");
        }
        
        // Initialize PLN tests as such
        initPLNTests();

#ifdef HAVE_GUILE
        // Necessary if you use test data and/or targets in Scheme.
        logger().debug("Loading Scheme modules");
        config().set("SCM_PRELOAD",
                "opencog/scm/type_constructors.scm,"
                "opencog/scm/utilities.scm");
        // Blindly search a bunch of paths hoping to find the files
        // in one of them ...
        const char * paths[] = 
        {
                "./",
                "../",
                "../../",
                "../../../",
                "../../../..",
                NULL
        };
        cogserver().loadSCMModules(paths);
#endif

        cogserver().loadModule("libPythonModule.so");

        allTestsInferenceNodes = 0;

        INstats.clear();

//        if(RUN_FAILURE_TESTS)
//            puts("NOTE! 3 first tests are supposed to fail.");
    }
    
    ~PLNUTest()
    {
        // t = test repeat #
        // f = results.txt
        // TestRepeats
        
//        uint t = 0;
//        uint TestRepeats = 1;
    
        // some stats stuff
        INstatsV.push_back(INstats);
    
        INstatsV[t].push_back(allTestsInferenceNodes);
        INstatsVT.push_back(INstatsV);

        for (uint v=0; v < INstatsV[0].size(); v++)
        {
            fprintf(f, "\n");
            for (int t=0; t < ( (testFitnessEvaluator!=BEST) ? TestRepeats : 1); t++)
                fprintf(f, "%d ", INstatsV[t][v]);
        }

        fclose(f);
    }
    
/*    static PLNUTest* DISABLEcreateSuite()
    {
        PLNUTest* test = new PLNUTest();
        test->multipleTestRunsForHeuristic();
        return test;
    }
    
    
    static void DISABLEdestroySuite(PLNUTest* suite) { delete suite; }*/
    
    void setUp()
    {
    }
    
    void tearDown()
    {
    }

//    // test forward chainer on all targets defined as conf file
//    void DISABLEtestSCMTargetsFC() {
//        runSCMTargets(PLN_TEST_DIR, false);
//    }

    // A meta-level test that can run all of the tests multiple times;
    // necessary if you use a non-deterministic heuristic for the BIT
    // search.
    void testHeuristic() {
        if (testFitnessEvaluator == BEST)
        return;

        for (int t=0; t < TestRepeats; t++)
        {
            setupHeuristicTestRun();
        
            // run all of the relevant tests
            runPLNTestsOnce();

            INstatsV[t].push_back(allTestsInferenceNodes);

            if (testFitnessEvaluator != SOFTMAX)
            {
                //No need to play with temperatures or multiple test repeats.
                if (testFitnessEvaluator != RANDOM)
                    t = TestRepeats;
                tempi = temperaturesN;
            }

            INstatsVT.push_back(INstatsV);
        }
        exit(0);
    }
    
    // Tries to combine several RuleApps into a "macro rule", which takes one
    // argument but applies several different rules
    void DISABLEtestMacroRuleTest()
    {
        RulePtr invR(new InversionRule(asw, INHERITANCE_LINK));
        //DeductionRule<DeductionSimpleFormula> *deduR = new DeductionRule<DeductionSimpleFormula>(asw, INHERITANCE_LINK);
        RulePtr deduR(new DeductionRule<DeductionSimpleFormula>(asw, INHERITANCE_LINK));

        printf("v0\n");
        vtree v0(mva((pHandle)INHERITANCE_LINK,
                        mva(asw->addNode(CONCEPT_NODE, "Abu", SimpleTruthValue(0.05, 0.01))),
                        mva(asw->addNode(CONCEPT_NODE, "Osama",  SimpleTruthValue(0.01, 0.01)))
                        ));
        printf("v1\n");
        vtree v1(mva((pHandle)INHERITANCE_LINK,
                        mva(asw->addNode(CONCEPT_NODE, "Osama",  SimpleTruthValue(0.01, 0.01))),
                        mva(asw->addNode(CONCEPT_NODE, "AlQaeda",  SimpleTruthValue(0.1, 0.01)))
                        ));
        printf("v2\n");
        vtree v2(mva((pHandle)INHERITANCE_LINK,
                        mva(asw->addNode(CONCEPT_NODE, "AlQaeda",  SimpleTruthValue(0.1, 0.01))),
                        mva(asw->addNode(CONCEPT_NODE, "terrorist",  SimpleTruthValue(0.2, 0.01)))));

        printf("h0\n");
        pHandle h0 = asw->addAtom(v0, 
                                  SimpleTruthValue(0.40f, getCount(0.80f)));
        printf("h1\n");
        pHandle h1 = asw->addAtom(v1,
                                  SimpleTruthValue(0.60f, getCount(0.90f)));
        printf("h2\n");
        pHandle h2 = asw->addAtom(v2,
                                  SimpleTruthValue(0.98f, getCount(0.95f)));

        RuleApp* top    = new RuleApp(deduR);
        RuleApp* child1a= new RuleApp(deduR);

        child1a->Bind(0, new VtreeProviderWrapper(Vertex(h0)));
        child1a->Bind(1, new VtreeProviderWrapper(Vertex(h1)));
        child1a->compute();

        top->Bind(0, child1a);
        top->Bind(1, new VtreeProviderWrapper(Vertex(h2)));

        BoundVertex res1a = top->compute();
        TruthValuePtr tvA = asw->getTV(_v2h(res1a.value));
        TS_ASSERT(tvA->getMean() > 0.01);
        TS_ASSERT(tvA->getConfidence() > 0.01);

        RuleApp* topb   = new RuleApp(deduR);
    //  RuleApp* child1b= vtree(Vertex(h0));
        RuleApp* child2b= new RuleApp(deduR);

        child2b->Bind(0, new VtreeProviderWrapper(Vertex(h1)));
        child2b->Bind(1, new VtreeProviderWrapper(Vertex(h2)));
        topb->Bind(0, new VtreeProviderWrapper(Vertex(h0)));
        topb->Bind(1, child2b);

        BoundVertex res1b = topb->compute();
        // Checks that they have the same pHandles, which is wrong
        //TS_ASSERT_EQUALS(res1a.value, res1b.value);

        TruthValuePtr tvB = asw->getTV(_v2h(res1a.value));
        TS_ASSERT(isApproxEq(tvB->getMean(), tvA->getMean(), EPSILON_S));
        TS_ASSERT(isApproxEq(tvB->getConfidence(), tvA->getConfidence(),
                  EPSILON_C));

        RuleApp* top2 = new RuleApp(invR);
        top2->Bind(0, topb);
        RuleApp* top3 = new RuleApp(invR);
        top3->Bind(0, top2);

        TruthValuePtr tv2 = asw->getTV(_v2h(top2->compute().value));
        TS_ASSERT(!isApproxEq(tvB->getMean(), tv2->getMean(), EPSILON_S));
    //  assert(!isApproxEq(tvB->getConfidence(), tv2->getConfidence(), EPSILON_C));

        TruthValuePtr tv3 = asw->getTV(_v2h(top3->compute().value));
        // segfaults in this next line
        TS_ASSERT(isApproxEq(tvB->getMean(), tv3->getMean(), EPSILON_S));
        TS_ASSERT(isApproxEq(tvB->getConfidence(), tv3->getConfidence(),
                  EPSILON_C));


        vector<VtreeProvider*> args;
        args.push_back(new VtreeProviderWrapper(Vertex(h0)));
        args.push_back(new VtreeProviderWrapper(Vertex(h1)));
        args.push_back(new VtreeProviderWrapper(Vertex(h2)));

        RuleApp* topc   = new RuleApp(deduR);
        RuleApp* child2c= new RuleApp(deduR);

        topc->Bind(1, child2c);

        BoundVertex resC = topc->compute(args.begin(), args.end());

        TS_ASSERT(resC.value == res1b.value);
        TruthValuePtr tvC = asw->getTV(_v2h(resC.value));
        TS_ASSERT(isApproxEq(tvB->getMean(), tvC->getMean(), EPSILON_S));
        TS_ASSERT(isApproxEq(tvB->getConfidence(), tvC->getConfidence(),
                  EPSILON_C));


        RuleApp* topd   = new RuleApp(deduR);
        RuleApp* child1d= new RuleApp(deduR);

        topd->Bind(0, child1d);

        BoundVertex resD = topd->compute(args.begin(), args.end());

        TS_ASSERT(resD.value == res1b.value);
        TruthValuePtr tvD = asw->getTV(_v2h(resD.value));
        TS_ASSERT(isApproxEq(tvB->getMean(), tvD->getMean(), EPSILON_S));
        TS_ASSERT(isApproxEq(tvB->getConfidence(), tvD->getConfidence(),
                  EPSILON_C));
        printf("finish MacroRuleTest\n");
    }

    //! The failure tests do still work (but are disabled because they make
    //! PLNUTest fail!)
    void testTVChecksWork() {
        /// The test which is supposed to fail
        if(RUN_FAILURE_TESTS) {
            initAxiomSet(PLN_TEST_DIR"scm/bigdemo.scm");

            puts("\nShould fail. The test for whether TV checks work.\n");

            TS_ASSERT(!
            maketest(makemeta(mva((pHandle)INHERITANCE_LINK,
                                  NewNode(CONCEPT_NODE, "AlQaeda"),
                                  NewNode(CONCEPT_NODE, "terrorist")
                                  )),
                     new SimpleTruthValue(0.95f, getCount(0.90f)),
                     new SimpleTruthValue(0.999f, getCount(0.999f)),
                     50,0,
                     true // it's being test for the backward chainer
                     ));
        }
    }

    void testRandomTVsTooHigh() {
        if(RUN_FAILURE_TESTS) {
            initAxiomSet(PLN_TEST_DIR"scm/smalldemo.scm");

            puts("\nShould fail. The test for whether random TVs come out too high:\n");
            
            TS_ASSERT(!
            maketest(makemeta(mva((pHandle)EVALUATION_LINK,
                                  NewNode(PREDICATE_NODE, "killed"),
                                  mva((pHandle)LIST_LINK,
                                      NewNode(FW_VARIABLE_NODE, "$killeri"),
                                      NewNode(CONCEPT_NODE, "Osama")
                                      )
                                  )),
                     new SimpleTruthValue(0.5f, getCount(0.5f)),
                     new SimpleTruthValue(0.51f, getCount(0.51f)),
                     10,0));
        }
    }

    void testSymmetricRelationFails() {
        if(RUN_FAILURE_TESTS) {
            puts("\nShould fail.");
            initAxiomSet(PLN_TEST_DIR"scm/smalldemo.scm");

            TS_ASSERT(!
            maketest(makemeta(mva((pHandle)EVALUATION_LINK,
                                  NewNode(PREDICATE_NODE, "symmetricRelation"),
                                  mva((pHandle)LIST_LINK,
                                      NewNode(CONCEPT_NODE, "Amir"),
                                      NewNode(CONCEPT_NODE, "Osama")
                                      )
                                  )),
                     new SimpleTruthValue(0.0f, getCount(0.0f)),
                     new SimpleTruthValue(0.01f, getCount(0.01f)),
                     10,0));
        }
    }

    //! Involves friendOf being a symmetricRelation
    void DISABLEtestBasicSpawning()
    {
        for (int i = 0; i < 5; i++) {
            printf("\nBasic spawning test %d\n", i);
            /// Basic spawning test
            initAxiomSet(PLN_TEST_DIR"scm/smalldemo.scm");

            TS_ASSERT(
            maketest(makemeta(mva((pHandle)EVALUATION_LINK,
                                  NewNode(PREDICATE_NODE, "friendOf"),
                                  mva((pHandle)LIST_LINK,
                                      NewNode(CONCEPT_NODE, "Britney"),
                                      NewNode(CONCEPT_NODE, "Amir")
                                      ))),
                     new SimpleTruthValue(0.78f, getCount(0.39f)),
                     new SimpleTruthValue(1.001f, getCount(0.999f)),
                     200,0));
        }
    }

    // Test that targets with childless links or ATOM still match.
    void DISABLEtestForAll() {
        initAxiomSet(PLN_TEST_DIR"scm/new/BasicForAllDemo_And.scm");

        TS_ASSERT(
        maketest(makemeta(mva((pHandle)EVALUATION_LINK,
                //NewNode(PREDICATE_NODE, "friendOf"),
                //mva((pHandle)ATOM),
                //NewNode(PREDICATE_NODE, "is_axiom"),
                NewNode(FW_VARIABLE_NODE, "R001"),
                mva((pHandle)LIST_LINK,
                    //mva((pHandle)ATOM)
                    NewNode(CONCEPT_NODE, "fact_6")
                    ))),
                 new SimpleTruthValue(0.0f, getCount(0.0f)),
                 new SimpleTruthValue(0.01f, getCount(0.01f)),
                 10,0));
    }

    void DISABLEtestFingerPrint(vtree& v)
    {
        BoundVTree bvt(v);
        printf("Finger print: %lu\n", bvt.getFingerPrint());
    }
    
    // test backward chainer on all targets defined as conf file
    void testSCMTargetsBC() {
        TS_ASSERT(runSCMTargets(PLN_TEST_DIR, true));
    }
};

// this has basically been reduced to a repository of commented out tests
#if 0
void runPLNTestsOnce()
{
// These are some of the targets in TestTargets.h, but telling you the file you
// need too.
/*  /// Untested with current PLN implementation:

    maketest(makemeta(mva((Handle)EVALUATION_LINK,
                    NewNode(PREDICATE_NODE, "friendOf"),
                    mva((Handle)LIST_LINK,
                                NewNode(CONCEPT_NODE, "Amir"),
                                NewNode(CONCEPT_NODE, "Osama")
                            )
            )),
            new SimpleTruthValue(0.01f, getCount(0.01f)),
            new SimpleTruthValue(1.01f, getCount(1.01f)),
            "bigdemo.xml",
            10,0);

    maketest(makemeta(mva((Handle)EVALUATION_LINK,
                    NewNode(PREDICATE_NODE, "wasKilled"),
                    mva((Handle)LIST_LINK,
                                NewNode(CONCEPT_NODE, "Osama")
                            )
            )),
            new SimpleTruthValue(0.01f, getCount(0.01f)),
            new SimpleTruthValue(1.01f, getCount(1.01f)),
            "bigdemo.xml",
            10,0);
*/
/*      initAxiomSet("bigdemo.xml");
        maketest(makemeta(mva((Handle)EVALUATION_LINK,
                    NewNode(PREDICATE_NODE, "friendOf"),
                    mva((Handle)LIST_LINK,
                                NewNode(FW_VARIABLE_NODE, "$OsamaFriend"),
                                NewNode(CONCEPT_NODE, "Osama")
                            ))),
            new SimpleTruthValue(0.01f, getCount(0.01f)),
            new SimpleTruthValue(1.01f, getCount(1.01f)),
            10,0);*/
/*  maketest(makemeta(mva((Handle)INHERITANCE_LINK,
                    NewNode(CONCEPT_NODE, "Osama"),
                    NewNode(CONCEPT_NODE, "AlQaeda")
            )),
            new SimpleTruthValue(0.01f, getCount(0.01f)),
            new SimpleTruthValue(1.01f, getCount(1.01f)),
            "bigdemo.xml",
            10,0);
    maketest(makemeta(mva((Handle)EVALUATION_LINK,
                    NewNode(PREDICATE_NODE, "killed"),
                    mva((Handle)LIST_LINK,
                                NewNode(FW_VARIABLE_NODE, "$killeri"),
                                NewNode(CONCEPT_NODE, "Osama")
                            )
            )),
            new SimpleTruthValue(0.01f, getCount(0.01f)),
            new SimpleTruthValue(1.01f, getCount(1.01f)),
            "bigdemo.xml",
            10,0);
    maketest(makemeta(mva((Handle)EVALUATION_LINK,
                        NewNode(PREDICATE_NODE, "do"),
                        mva((Handle)LIST_LINK,
                            mva((Handle)EVALUATION_LINK,
                                NewNode(SCHEMA_NODE, "give"),
                                mva((Handle)LIST_LINK,
                                    NewNode(CONCEPT_NODE, "ball"),
                                    NewNode(CONCEPT_NODE, "teacher")
                                )
                            )                                       
                        )
            )),
            new SimpleTruthValue(0.01f, getCount(0.01f)),
            new SimpleTruthValue(1.01f, getCount(1.01f)),
            "fetchdemo4.xml",
            10,0);
    maketest(makemeta(mva((Handle)EVALUATION_LINK,
                    NewNode(PREDICATE_NODE, "+++")
            )),
            new SimpleTruthValue(0.01f, getCount(0.01f)),
            new SimpleTruthValue(1.01f, getCount(1.01f)),
            "fetchdemo4.xml",
            10,0);
    maketest(makemeta(mva((Handle)EVALUATION_LINK,
                        NewNode(PREDICATE_NODE, "near"),
                        mva((Handle)LIST_LINK,
                                NewNode(CONCEPT_NODE, "teacher")
                        )
                    )
            ),
            new SimpleTruthValue(0.01f, getCount(0.01f)),
            new SimpleTruthValue(1.01f, getCount(1.01f)),
            "fetchdemo4.xml",
            10,0);
    maketest(makemeta(mva((Handle)IMPLICATION_LINK,
                NewNode(FW_VARIABLE_NODE, "$1"),
                mva((Handle)EVALUATION_LINK,
                    NewNode(PREDICATE_NODE, "+++")
                )
            )),
            new SimpleTruthValue(0.01f, getCount(0.01f)),
            new SimpleTruthValue(1.01f, getCount(1.01f)),
            "fetchdemo4.xml",
            10,0);
*/
/*  maketest(makemeta(mva(
            )),
            new SimpleTruthValue(0.01f, getCount(0.01f)),
            new SimpleTruthValue(1.01f, getCount(1.01f)),
            "fetchdemo4.xml",
            10,0);
    maketest(makemeta(mva(
            )),
            new SimpleTruthValue(0.01f, getCount(0.01f)),
            new SimpleTruthValue(1.01f, getCount(1.01f)),
            "bigdemo.xml",
            10,0);
*/

    INstatsV.push_back(INstats);
}
#endif
