/*
 * Copyright (C) 2002-2007 Novamente LLC
 * Copyright (C) 2008 by OpenCog Foundation
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/server/CogServer.h>
#include <opencog/atomspace/SimpleTruthValue.h>

#include <opencog/reasoning/pln/PLN.h>
#include <opencog/reasoning/pln/AtomSpaceWrapper.h>

using namespace opencog;
using namespace opencog::pln;
using namespace std;

#define ONE_PHANDLE_PER_ATOM

/// @todo Check truth values and other functions in the AtomSpaceWrapper
class AtomSpaceWrapperUTest :  public CxxTest::TestSuite {
private:

    AtomSpaceWrapper* asw;

public:

    AtomSpaceWrapperUTest() {
        cout << "Initializing AtomSpaceWrapper test env..." << endl;

        // This access is required to initialise CogServer.
        cout << "Initializing CogServer" << endl;
        CogServer& cogserver = static_cast<CogServer&>(server());

        // This is also necessary to make sure that the ASW is initialized
        // at the right time.
        asw = ASW(&cogserver.getAtomSpace());
    }

    void setUp()
    {
    }
    
    void tearDown()
    {
        asw->reset();
    }

    void testFakeToRealHandle() {
        pHandle h1 = asw->addNode(CONCEPT_NODE, "x",
                                  SimpleTruthValue(0.001f,1.0f), false);
        TS_ASSERT_THROWS(asw->fakeToRealHandle(CONCEPT_NODE), RuntimeException);

    }

    void testAtomIdentity() {
        // Test node identity works
        pHandle h1 = asw->addNode(CONCEPT_NODE, "x",
                                  SimpleTruthValue(0.001f,1.0f), false);
        pHandle h2 = asw->addNode(CONCEPT_NODE, "x",
                                  SimpleTruthValue(0.001f,1.0f), false);
        TS_ASSERT(h1 == h2);
        
        // Test FW node identity works
        pHandle h3 = asw->addNode(FW_VARIABLE_NODE, "filler",
                                  SimpleTruthValue(0.001f,1.0f), false);
        pHandle h4 = asw->addNode(FW_VARIABLE_NODE, "filler",
                                  SimpleTruthValue(0.001f,1.0f), false);
        TS_ASSERT(h3 == h4);
        
    }

    void testAddDuplicateNode() {
        SimpleTruthValue tv(0.8, 0.9);
        SimpleTruthValue tv2(0.4, 0.9);
        pHandle h1 = asw->addNode(CONCEPT_NODE, "test1", tv);
        pHandle h2 = asw->addNode(CONCEPT_NODE, "test2", tv);

        pHandle h3 = asw->addNode(CONCEPT_NODE, "test1", tv, true);
        pHandle h4 = asw->addNode(CONCEPT_NODE, "test2", tv, true);

#ifndef ONE_PHANDLE_PER_ATOM
        TS_ASSERT(h1 != h3);
#endif
        TS_ASSERT(h1 != h4);

        // Check that more than just one lot of duplicates can be stored
        pHandle h5 = asw->addNode(CONCEPT_NODE, "test1", tv, true);
        pHandle h6 = asw->addNode(CONCEPT_NODE, "test2", tv, true);

#ifndef ONE_PHANDLE_PER_ATOM
        TS_ASSERT(h5 != h3);
        TS_ASSERT(h6 != h4);
#endif
    }

    void testAddLinkWithNullVersionHandle() {
        SimpleTruthValue tv(0.8, 0.9);
        SimpleTruthValue tv2(0.4, 0.9);
        pHandle h1 = asw->addNode(CONCEPT_NODE, "test1", tv);
        pHandle h2 = asw->addNode(CONCEPT_NODE, "test2", tv);

        pHandleSeq outgoing;
        outgoing.push_back(h1);
        outgoing.push_back(h2);

        pHandle l1 = asw->addLink(LINK, outgoing, tv);

        vhpair rh1 = asw->fakeToRealHandle(h1);
        vhpair rh2 = asw->fakeToRealHandle(h2);
        vhpair rl1 = asw->fakeToRealHandle(l1);

        CogServer& cogserver = static_cast<CogServer&>(server());
        HandleSeq realIncoming_h1 = cogserver.getAtomSpace().getIncoming(rh1.first);
        HandleSeq realOutgoing_l1 = cogserver.getAtomSpace().getOutgoing(rl1.first);

        pHandleSeq plnIn_h1 = asw->getIncoming(h1);
        pHandleSeq plnOut_l1 = asw->getOutgoing(l1);

        TS_ASSERT(realOutgoing_l1.size() == plnOut_l1.size());
        /*cout << "REAL: ";
        foreach (Handle realH,realIncoming_h1) {
            cout << realH << " ";
        }
        cout << endl;
        cout << "FAKE: ";
        foreach (pHandle fakeH,plnIn_h1) {
            cout << fakeH << " ";
        }
        cout << endl;*/
        TS_ASSERT(realIncoming_h1.size() == plnIn_h1.size());

        pHandleSeq pOutgoing = asw->getOutgoing(l1);

        vhpair vhFromLink = asw->fakeToRealHandle(pOutgoing[0]);
        TS_ASSERT(vhFromLink.first == rh1.first);
        TS_ASSERT(vhFromLink.second == NULL_VERSION_HANDLE);
        TS_ASSERT(rh1.second == NULL_VERSION_HANDLE);

        vhFromLink = asw->fakeToRealHandle(pOutgoing[1]);
        TS_ASSERT(vhFromLink.first == rh2.first);
        TS_ASSERT(vhFromLink.second == NULL_VERSION_HANDLE);
        TS_ASSERT(rh2.second == NULL_VERSION_HANDLE);

        // check the returned truth values
    }

    void testAddLinkToOneVersionedNode() {
        SimpleTruthValue tv(0.8, 0.9);
        SimpleTruthValue tv2(0.4, 0.9);
        pHandle h1 = asw->addNode(CONCEPT_NODE, "test1", tv);
        pHandle h2 = asw->addNode(CONCEPT_NODE, "test2", tv);

        pHandleSeq outgoing;
        outgoing.push_back(h1);
        outgoing.push_back(h2);

        pHandle l1 = asw->addLink(LINK, outgoing, tv);

        pHandle h3 = asw->addNode(CONCEPT_NODE, "test1", tv2, true);
        pHandle h4 = asw->addNode(CONCEPT_NODE, "test2", tv2, true);

        outgoing.clear();
        outgoing.push_back(h1);
        outgoing.push_back(h4);
        pHandle l2 = asw->addLink(LINK, outgoing, tv, true);

        pHandleSeq pOutgoing = asw->getOutgoing(l2);
        TS_ASSERT(outgoing.size() == pOutgoing.size());

        // Check nodes
        int i = 0;
        vhpair vhFromLink = asw->fakeToRealHandle(pOutgoing[i]);
        vhpair vhFromNode = asw->fakeToRealHandle(outgoing[i]);
        TS_ASSERT(vhFromLink.first == vhFromNode.first);
        TS_ASSERT(vhFromLink.second == NULL_VERSION_HANDLE);
        TS_ASSERT(vhFromNode.second == NULL_VERSION_HANDLE);

        i=1;
        vhFromLink = asw->fakeToRealHandle(pOutgoing[i]);
        vhFromNode = asw->fakeToRealHandle(outgoing[i]);
        TS_ASSERT(vhFromLink.first == vhFromNode.first);
        TS_ASSERT(vhFromLink.second == vhFromNode.second);

        // Check links
        vhFromLink = asw->fakeToRealHandle(l1);
        TS_ASSERT(vhFromLink.second == NULL_VERSION_HANDLE);
        vhFromLink = asw->fakeToRealHandle(l2);
#ifndef ONE_PHANDLE_PER_ATOM
        TS_ASSERT(vhFromLink.second != NULL_VERSION_HANDLE);
#endif
        
        // check the returned truth values
    }

    void testAddLinkBothVersionedNodes() {
        SimpleTruthValue tv(0.8, 0.9);
        SimpleTruthValue tv2(0.4, 0.9);
        pHandle h1 = asw->addNode(CONCEPT_NODE, "test1", tv);
        pHandle h2 = asw->addNode(CONCEPT_NODE, "test2", tv);

        pHandleSeq outgoing;
        outgoing.push_back(h1);
        outgoing.push_back(h2);

        pHandle l1 = asw->addLink(LINK, outgoing, tv);

        pHandle h3 = asw->addNode(CONCEPT_NODE, "test1", tv2, true);
        pHandle h4 = asw->addNode(CONCEPT_NODE, "test2", tv2, true);

        outgoing.clear();
        outgoing.push_back(h3);
        outgoing.push_back(h4);
        pHandle l2 = asw->addLink(LINK, outgoing, tv, true);

        pHandleSeq pOutgoing = asw->getOutgoing(l2);
        TS_ASSERT(outgoing.size() == pOutgoing.size());
            
        // Check nodes
        int i = 0;
        vhpair vhFromLink = asw->fakeToRealHandle(pOutgoing[i]);
        vhpair vhFromNode = asw->fakeToRealHandle(outgoing[i]);
        TS_ASSERT(vhFromLink.first == vhFromNode.first);
        TS_ASSERT(vhFromLink.second == vhFromNode.second);

        i=1;
        vhFromLink = asw->fakeToRealHandle(pOutgoing[i]);
        vhFromNode = asw->fakeToRealHandle(outgoing[i]);
        TS_ASSERT(vhFromLink.first == vhFromNode.first);
        TS_ASSERT(vhFromLink.second == vhFromNode.second);

        // Check link
        vhFromLink = asw->fakeToRealHandle(l2);
#ifndef ONE_PHANDLE_PER_ATOM
        TS_ASSERT(vhFromLink.second != NULL_VERSION_HANDLE);
#endif
        // check the returned truth values
    }

    void testAddFWVar() {
        SimpleTruthValue tv(0.8, 0.9);
        std::string varName = "$testfwvar";
        pHandle fw1 = asw->addNode(FW_VARIABLE_NODE, varName, tv);
        // Check we got a proper pHandle back
        TS_ASSERT(fw1 != PHANDLE_UNDEFINED);
        // Check that we can the name back
        TS_ASSERT(asw->getName(fw1) == varName);
        // Check that we CANNOT add a link to this node
        // ^Only without FWVars in AtomSpace
        // currently this isn't complete but in a separate branch
        pHandleSeq outgoing;
        outgoing.push_back(fw1);
        pHandle l1 = asw->addLink(LIST_LINK, outgoing, tv);
        //TS_ASSERT(l1 == PHANDLE_UNDEFINED);

        // Check the arity is 0
        //TS_ASSERT(asw->getArity(fw1) == 0);

        // Check the incoming set size is 0
        //TS_ASSERT(asw->getIncoming(fw1).size() == 0);

        // Check that the outgoing set size is 0
        TS_ASSERT(asw->getOutgoing(fw1).size() == 0);

    }
    
    /*
     * PLN needs to be refactored to allow the AtomSpace to be changed after
     * module initialisation
    void notestASW() {
        AtomSpace* test = new AtomSpace();
        CogServer& cogserver = static_cast<CogServer&>(server());
        // test that the atomspace currently matches that of
        // the cogserver
        TS_ASSERT(asw->getAtomSpace() == cogserver.getAtomSpace());
        // check that we can replace the AtomSpace ptr
        asw = (AtomSpaceWrapper*) ASW(test);
        TS_ASSERT(asw->atomspace == test);
        asw = (AtomSpaceWrapper*) ASW(cogserver.getAtomSpace());
        TS_ASSERT(asw->atomspace == cogserver.getAtomSpace());
        // check that we get a result with NULL
        TS_ASSERT(((AtomSpaceWrapper*)ASW())->atomspace == cogserver.getAtomSpace());
        delete test;
    }*/

    void testInheritsType() {
        // Test with immediate inheritance 
        TS_ASSERT(asw->inheritsType(ORDERED_LINK, LINK));
        // Test non-inheritance 
        TS_ASSERT(!asw->inheritsType(CONCEPT_NODE, LINK));
        // Test with extended inheritance 
        TS_ASSERT(asw->inheritsType(AND_LINK, LINK));
    }

    void testIsSubType() {
        SimpleTruthValue tv(0.8, 0.9);
        pHandleSeq outgoing;
        pHandle h1 = asw->addNode(CONCEPT_NODE, "magneto", tv);
        outgoing.push_back(h1);
        pHandle l1 = asw->addLink(LIST_LINK, outgoing, tv);
        // Test with immediate inheritance 
        TS_ASSERT(asw->isSubType(l1, ORDERED_LINK));
        // Test with extended inheritance 
        TS_ASSERT(asw->isSubType(l1, LINK));
        // Test non-inheritance 
        TS_ASSERT(!asw->isSubType(l1, FORALL_LINK));
        // Test with FWVarNode
        std::string varName = "$testfwvar";
        pHandle fw1 = asw->addNode(FW_VARIABLE_NODE, varName, tv);
        TS_ASSERT(asw->isSubType(fw1, FW_VARIABLE_NODE));
        TS_ASSERT(!asw->isSubType(fw1, FORALL_LINK));
    }

    void testOutgoing() {
        // nothing to add to the initial tests with versioning
        // check the returned truth values

    }

    void testOutgoingAt() {
        // add the initial tests a check for a specific index

        // test that the right TV is retrieved
    }

    void testGetIncoming() {
        SimpleTruthValue tv(0.8, 0.9);
        // check for both node and link

        // check with FWVar
        std::string varName = "$testfwvar";
        pHandle fw1 = asw->addNode(FW_VARIABLE_NODE, varName, tv);
        TS_ASSERT(asw->getIncoming(fw1).size() == 0);
    }

    void testGetNextPHandle() {
        // From unmerged changes from the FWVars removal from AtomSpace
        // branch.
        /*
        SimpleTruthValue tv(0.8, 0.9);
        pHandleSeq outgoing;
        pHandle h1 = asw->addNode(CONCEPT_NODE, "magneto", tv);
        pHandle nextp = asw->getNextPHandle();
        TS_ASSERT(h1 != nextp);
        outgoing.push_back(h1);
        pHandle l1 = asw->addLink(LIST_LINK, outgoing, tv);
        TS_ASSERT(l1 == nextp);
        // add some nodes and FWvars then check that the new handle isn't in
        // either variableShadowMap or vhmap
        std::string varName = "$testfwvar";
        nextp = asw->getNextPHandle();
        pHandle fw1 = asw->addNode(FW_VARIABLE_NODE, varName, tv);
        TS_ASSERT(fw1 == nextp);
        nextp = asw->getNextPHandle();
        // Check nextp isn't in either fw var shadow map
        std::map<pHandle,std::string>::iterator i =
            asw->reverseVariableShadowMap.find(nextp);
        TS_ASSERT(i == asw->reverseVariableShadowMap.end());
        // ... or in the version handle map to a real Handle
        AtomSpaceWrapper::vhmap_t::iterator vi = asw->vhmap.find(nextp);
        TS_ASSERT(vi == asw->vhmap.end());
        */
    }

    void testGetTV() {
        // check node, link, fwvar, and PHANDLE_UNDEFINED
        SimpleTruthValue tv1(0.8, 0.9);
        SimpleTruthValue tv2(0.2, 0.3);
        SimpleTruthValue tv3(0.4, 0.2);
        pHandleSeq outgoing;
        pHandle h1 = asw->addNode(CONCEPT_NODE, "magneto", tv1);
        TS_ASSERT(*asw->getTV(h1) == tv1);
        outgoing.push_back(h1);
        pHandle l1 = asw->addLink(LIST_LINK, outgoing, tv2);
        TS_ASSERT(*asw->getTV(l1) == tv2);

        // FWVar can't store a TV, it always returns a TRIVIAL_TV
        // ^only without FWVar in AS
        std::string varName = "$testfwvar";
        pHandle fw1 = asw->addNode(FW_VARIABLE_NODE, varName, tv3);
        //TS_ASSERT(asw->getTV(fw1) == TruthValue::TRIVIAL_TV());

        // ... so does an undefined pHandle
        TS_ASSERT(*asw->getTV(PHANDLE_UNDEFINED) == TruthValue::TRIVIAL_TV());

        asw->setTV(h1,tv2);
        TS_ASSERT(*asw->getTV(h1) == tv2);

        asw->setTV(h1,tv2);
        pHandle h1_1 = asw->addNode(CONCEPT_NODE, "magneto", tv3);

        TS_ASSERT_EQUALS(h1, asw->getPrimaryFakeHandle(h1_1));
        // TVs get merged in current incarnation of AtomSpaceWrapper and
        // merge method keeps highest confidence... i.e. tv2
        TS_ASSERT(*asw->getTV(h1_1) != tv3);
        TS_ASSERT(*asw->getTV(h1) == tv2);

    }

};

