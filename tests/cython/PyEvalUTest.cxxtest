#include <string>
#include <cstdio>

#include <opencog/server/CogServer.h>
#include <opencog/server/RequestResult.h>
#include <opencog/util/Config.h>
#include <opencog/modules/python/PyMindAgent.h>

using std::string;

using namespace opencog;

class StringRequestResult : public RequestResult
{
public:
    string result;
    StringRequestResult(): RequestResult ("text/plain"){};
    ~StringRequestResult(){};
    virtual void SendResult(const std::string& res) {
        result = res;
    }
    virtual void OnRequestComplete() {
    }
};

class TestCogServer : public CogServer
{
    int tickCount;
    bool tickBased;
    int maxCount;
    public: 

        static BaseServer* createInstance() {
            return new TestCogServer();
        }

        TestCogServer() : tickCount(1), tickBased(false), maxCount(1000) {}

        void setTickBased(bool _tickBased) {
            tickBased = _tickBased;
        }

        void setMaxCount(int _maxCount) {
            maxCount = _maxCount;
        }

        bool customLoopRun() {
            bool runCycle  = tickBased?(tickCount % 100 == 0):true; 
            if (++tickCount > maxCount) stop();
            return runCycle;
        }
};

class PyEvalUTest :  public CxxTest::TestSuite
{

private:


public:

    PyEvalUTest() {
        logger().setLevel(Logger::DEBUG);
        logger().setPrintToStdoutFlag(true);

        // Load special config file for the test
        string configFile = PROJECT_BINARY_DIR"/tests/cython/pyeval.conf";
        try {
            config().load(configFile.c_str(), false);
        } catch (RuntimeException &e) {
            std::cerr << e.getMessage() << std::endl;
            exit(1);
        }
        // Setup global logger
        logger().setFilename(config()["LOG_FILE"]);
        logger().setLevel(Logger::getLevelFromString(config()["LOG_LEVEL"]));
        logger().setBackTraceLevel(Logger::getLevelFromString(config()["BACK_TRACE_LOG_LEVEL"]));
        logger().setPrintToStdoutFlag(config().get_bool("LOG_TO_STDOUT"));

        // Set cycle duration to a smaller value so that this test does not take too long.
        config().set("SERVER_CYCLE_DURATION", "10");  // in milliseconds
        TestCogServer& cogserver = static_cast<TestCogServer&>(server(TestCogServer::createInstance)); 

        config().set("MODULES", "opencog/shell/libpy-shell.so");
        cogserver.loadModules();
    }

    ~PyEvalUTest() {
        TestCogServer& cogserver = static_cast<TestCogServer&>(server(TestCogServer::createInstance)); 
	    // erase the log file if no assertions failed
	    if (!CxxTest::TestTracker::tracker().suiteFailed())
            std::remove(logger().getFilename().c_str());
        cogserver.unloadModule("opencog::py-shell");
    }

    void setUp() {
    }

    void tearDown() {
    }

    void testPyEvalScript() {
        TestCogServer& cogserver = static_cast<TestCogServer&>(server(TestCogServer::createInstance));

        //  Create the py-eval request.
        Request* pythonEvalRequest = cogserver.createRequest("py-eval");
        TS_ASSERT_DIFFERS(pythonEvalRequest, (Request*) NULL);
        pythonEvalRequest->addParameter("print 'Hello'");
        StringRequestResult *pythonEvalRequestResult = new StringRequestResult();
        pythonEvalRequest->setRequestResult(pythonEvalRequestResult);

        // Add request to queue.
        cogserver.pushRequest(pythonEvalRequest);

        // Process this request.
        cogserver.runLoopStep();

        // Make sure we get a "Hello" back.
        TS_ASSERT_DIFFERS(pythonEvalRequestResult->result.find("Hello"), std::string::npos)
    }

};
