#include <string>
#include <cstdio>

#include <opencog/util/Config.h>
#include <opencog/cogserver/server/CogServer.h>
#include <opencog/cogserver/server/RequestResult.h>
#include <opencog/cogserver/modules/python/PyMindAgent.h>

using std::string;

using namespace opencog;

class StringRequestResult : public RequestResult
{
public:
    string result;
    StringRequestResult(): RequestResult ("text/plain"){};
    ~StringRequestResult(){};
    virtual void SendResult(const std::string& res) {
        result = res;
    }
    virtual void OnRequestComplete() {
    }
};

class TestCogServer : public CogServer
{
    int tickCount;
    bool tickBased;
    int maxCount;
    public:

        static BaseServer* createInstance(AtomSpace* as) {
            return new TestCogServer();
        }

        TestCogServer() : tickCount(1), tickBased(false), maxCount(1000) {}

        void setTickBased(bool _tickBased) {
            tickBased = _tickBased;
        }

        void setMaxCount(int _maxCount) {
            maxCount = _maxCount;
        }

        bool customLoopRun() {
            bool runCycle  = tickBased?(tickCount % 100 == 0):true;
            if (++tickCount > maxCount) stop();
            return runCycle;
        }
};

class PythonModuleUTest :  public CxxTest::TestSuite
{

private:


public:

    PythonModuleUTest() {
        logger().set_level(Logger::DEBUG);
        logger().set_print_to_stdout_flag(true);

        // setup global logger
        logger().set_filename(config()["LOG_FILE"]);
        logger().set_level(Logger::get_level_from_string(config()["LOG_LEVEL"]));
        logger().set_backtrace_level(Logger::get_level_from_string(config()["BACK_TRACE_LOG_LEVEL"]));
        logger().set_print_to_stdout_flag(config().get_bool("LOG_TO_STDOUT"));

        // set cycle duration to a smaller value so that this test do not take too long.
        config().set("SERVER_CYCLE_DURATION", "10");  // in milliseconds
        TestCogServer& cogserver = static_cast<TestCogServer&>(server(TestCogServer::createInstance));

        config().set("MODULES", "opencog/cogserver/modules/python/libPythonModule.so");
        cogserver.loadModules();
    }

    ~PythonModuleUTest() {
        TestCogServer& cogserver = static_cast<TestCogServer&>(server(TestCogServer::createInstance));
	    // erase the log file if no assertions failed
	    if (!CxxTest::TestTracker::tracker().suiteFailed())
            std::remove(logger().get_filename().c_str());
        cogserver.unloadModule("opencog::PythonModule");
    }

    void setUp() {
    }

    void tearDown() {
    }

    void testLoadExceptionAgent() {
        TestCogServer& cogserver = static_cast<TestCogServer&>(server(TestCogServer::createInstance));
        // test loading a module
        Request* loadpyRequest = cogserver.createRequest("loadpy");
        TS_ASSERT(loadpyRequest != NULL);
        loadpyRequest->addParameter("test_agent_w_load_exception");
        StringRequestResult *srr = new StringRequestResult();
        loadpyRequest->setRequestResult(srr);
        // add request to queue
        cogserver.pushRequest(loadpyRequest);
        // process request
        cogserver.runLoopStep();
        // ensure that the exception is reported
        TS_ASSERT_DIFFERS(srr->result.find("TypeError"), std::string::npos);
    }

    void testAgentWithRunException() {
        TestCogServer& cogserver = static_cast<TestCogServer&>(server(TestCogServer::createInstance));

        // test loading a module
        Request* loadpyRequest = cogserver.createRequest("loadpy");
        TS_ASSERT(loadpyRequest != NULL);
        loadpyRequest->addParameter("test_agent_w_run_exception");

        // add request to queue
        cogserver.pushRequest(loadpyRequest);

        // process request
        cogserver.runLoopStep();

        // create agent
        AgentPtr pythonTestAgent = cogserver.createAgent("test_agent_w_run_exception.TestRunExceptionAgent", false);
        TS_ASSERT(pythonTestAgent != NULL);

        // run agent with test exception
        TS_ASSERT_THROWS_ANYTHING(pythonTestAgent->run());
    }

    void testPreloadAgent () {
        TestCogServer& cogserver = static_cast<TestCogServer&>(server(TestCogServer::createInstance));
        // agent is actually loaded from python module in test constructor
        // just check it actually can be created though
        Request* loadpyRequest = cogserver.createRequest("loadpy");
        TS_ASSERT(loadpyRequest != NULL);
        loadpyRequest->addParameter("preload_test");
        cogserver.pushRequest(loadpyRequest);
        cogserver.runLoopStep();

        AgentPtr pythonTestAgent = cogserver.createAgent("preload_test.PreloadTestAgent");
        TS_ASSERT(pythonTestAgent != NULL);
    }

    void testProcessAgents() {
        TestCogServer& cogserver = static_cast<TestCogServer&>(server(TestCogServer::createInstance));

        // test loading a module
        Request* loadpyRequest = cogserver.createRequest("loadpy");
        TS_ASSERT(loadpyRequest != NULL);
        loadpyRequest->addParameter("test_agent");
        cogserver.pushRequest(loadpyRequest);
        cogserver.runLoopStep();

        // create agent
        AgentPtr pythonTestAgent = cogserver.createAgent("test_agent.TestAgent",true);
        TS_ASSERT(pythonTestAgent != NULL);

        cogserver.runLoopStep();
        cogserver.runLoopStep();

        // test setting properties
        TS_ASSERT(pythonTestAgent->frequency() == 1);
        pythonTestAgent->setFrequency(2);
        TS_ASSERT(pythonTestAgent->frequency() == 2);

        //TS_ASSERT(pythonTestAgent->count() == 50);

        //SystemActivityTable &sat = cogserver.systemActivityTable();
        //AgentActivityTable &aat = sat.agentActivityTable();
        //TS_ASSERT(aat[pythonTestAgent].size() == 50);

        /* for (size_t j = 0; j < aat[a[i]].size(); j++)
            {
                Activity *act = aat[a[i]][j];
                // check nothing takes zero time
                TS_ASSERT(act->elapsedTime > 0);
                // or memory (disabled: current implementation not accurate).
                //TS_ASSERT(act->memUsed > 0);
                // or atoms
                TS_ASSERT(act->atomsUsed > 0);
                // each should have 1 utilized handle set
                TS_ASSERT(act->utilizedHandleSets.size() == 1);
                // and one handle in the set
                TS_ASSERT(act->utilizedHandleSets[0]->getSize() == 1);
            }
            */
    }

};
