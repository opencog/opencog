/*
 * tests/server/AgentUTest.cxxtest
 *
 * Copyright (C) 2008 by OpenCog Foundation
 * All Rights Reserved
 *
 * Written by Jared Wigmore <jared.wigmore@gmail.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <string>
#include <iostream>
#include <fstream>

#include <opencog/server/CogServer.h>
#include <opencog/util/Config.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/atomspace/Node.h>
#include <opencog/atomspace/SimpleTruthValue.h>

using namespace opencog;
using namespace std;

#define AV1_STI 20000
#define AV2_STI 500
#define AV3_STI 0
#define AV1_LTI 0
#define AV2_LTI 30000
#define AV3_LTI 700

vector<Handle> createSimpleGraph(AtomSpace* atomSpace, const char* baseName)
{
    char buf[256];
    vector<Handle> testAtoms;
    int baseNameLength;

    memset(buf, 0, 256);
    baseNameLength = strlen(baseName);
    strcpy(buf, baseName);

    TruthValuePtr tv1 = SimpleTruthValue::createTV(0.001f, 0.00001f);
    TruthValuePtr tv2 = SimpleTruthValue::createTV(0.001f, 0.00001f);
    TruthValuePtr tv3 = SimpleTruthValue::createTV(0.5f, 0.99f);
    buf[baseNameLength] = '1';
    Handle h1 = atomSpace->addNode(CONCEPT_NODE, buf, tv1);
    atomSpace->setSTI(h1, AV1_STI);
    atomSpace->setLTI(h1, AV1_LTI);
    buf[baseNameLength] = '2';
    Handle h2 = atomSpace->addNode(CONCEPT_NODE, buf, tv2);
    atomSpace->setSTI(h2, AV2_STI);
    atomSpace->setLTI(h2, AV2_LTI);
    buf[baseNameLength] = '3';
    Handle h3 = atomSpace->addNode(CONCEPT_NODE, buf, tv3);
    atomSpace->setSTI(h3, AV3_STI);
    atomSpace->setLTI(h3, AV3_LTI);

    HandleSeq outgoing1;
    outgoing1.push_back(h2);
    outgoing1.push_back(h3);
    Handle l1 = atomSpace->addLink(LIST_LINK, outgoing1, tv1);
    HandleSeq outgoing2;
    outgoing2.push_back(h1);
    outgoing2.push_back(l1);
    Handle l2 = atomSpace->addLink(EVALUATION_LINK, outgoing2, tv2);

    testAtoms.push_back(h1);
    testAtoms.push_back(h2);
    testAtoms.push_back(h3);
    testAtoms.push_back(l1);
    testAtoms.push_back(l2);

    return testAtoms;
}

class MyAgentWithDefaults : public Agent
{

private:

    std::string  _name;
    unsigned int _count;

public:

    virtual const ClassInfo& classinfo() const { return info(); }
    static const ClassInfo& info() {
        static const ClassInfo _ci("opencog::MyAgentWithDefaults");
        return _ci;
    }
    
    MyAgentWithDefaults(CogServer& cs) : Agent(cs) {
        _count = 0;
     
        static const std::string defaultConfig[] = {
        
            "MYAGENT_USE_BAYES", "true",
            "MYAGENT_ENERGY", "12345",
            "MYAGENT_ENTHUSIASM", "1000",
            "MYAGENT_MOOD", "happy",
            "",""
        };
        setParameters(defaultConfig);
     }
    ~MyAgentWithDefaults() {}
    void setFrequency(int f) { _frequency = f; }
    void setName(const std::string& n) { _name = n; }
    unsigned int count() { return _count; }
    virtual void run() {
        logger().debug("%ld: executed %s", _cogserver.getCycleCount(), _name.c_str());
        _count++;
    }
};

typedef std::shared_ptr<MyAgentWithDefaults> MyAgentWithDefaultsPtr;

class AgentUTest :  public CxxTest::TestSuite
{

private:

    Factory<MyAgentWithDefaults, Agent> factory;

public:

    AgentUTest() {
        logger().setLevel(Logger::DEBUG);
        //logger().setPrintToStdoutFlag(true);
    }

    ~AgentUTest() {
	    // erase the log file if no assertions failed
	    if (!CxxTest::TestTracker::tracker().suiteFailed())
            std::remove(logger().getFilename().c_str());
    }

    void setUp() {    
        CogServer& cogserver = static_cast<CogServer&>(server(CogServer::createInstance));
        cogserver.registerAgent(MyAgentWithDefaults::info().id, &factory);
    }

    void tearDown() {
        CogServer& cogserver = static_cast<CogServer&>(server());
        cogserver.unregisterAgent(MyAgentWithDefaults::info().id);
    }

    // tests that MyAgentWithDefaults sets Config's parameters to its defaults
    void testDefault() {
        logger().debug("BEGIN TEST: Agent default parameters");

        CogServer& cogserver = static_cast<CogServer&>(server());

        // create a MyAgentWithDefaults instance
        MyAgentWithDefaultsPtr agent;
        agent = cogserver.createAgent<MyAgentWithDefaults>();
        
        logger().debug(config().to_string());
        // the first endl is to put this on a line after "Running 2 tests"
        cout << endl << agent->to_string() << endl;

        TS_ASSERT(config()["MYAGENT_USE_BAYES"] == "true");
        TS_ASSERT(config()["MYAGENT_ENERGY"] == "12345");
        TS_ASSERT(config()["MYAGENT_ENTHUSIASM"] == "1000");
        TS_ASSERT(config()["MYAGENT_MOOD"] == "happy");

        // destroy the MyAgentWithDefaults instance
        cogserver.destroyAllAgents(MyAgentWithDefaults::info().id);

        logger().debug("END TEST: Agent default parameters");
    }

    // tests MyAgentWithDefaults' settings, in combination with a cogServer
    // and its configuration file
    void testCogserverAndDefaultSettings() {
        logger().debug("BEGIN TEST: Agent default and specified parameters");

        CogServer& cogserver = static_cast<CogServer&>(server());

        // first, write the configuration file
        const char *config_file_name = "AgentUTest.config";
        std::ofstream out(config_file_name);
        out << "# auto-generated by AgentUTest\n";
        out << "MYAGENT_MOOD = sad\n";
        out << "MYAGENT_USE_BAYES = false\n";
        out.close();

        // reset configuration to default parameters
        config().reset();

        config().load(config_file_name);

        logger().debug(config().to_string());

        // Check that the config object has loaded those settings
        TS_ASSERT(config().has("MYAGENT_USE_BAYES"));
        TS_ASSERT(config()["MYAGENT_USE_BAYES"] == "false");
        TS_ASSERT(config().has("MYAGENT_MOOD"));
        TS_ASSERT(config()["MYAGENT_MOOD"] == "sad");

        // create a MyAgentWithDefaults instance
        MyAgentWithDefaultsPtr agent;
        agent = cogserver.createAgent<MyAgentWithDefaults>();

        logger().debug(config().to_string());
        cout << endl << agent->to_string() << endl;

        // Check that the defaults haven't overriden the specified values!
        TS_ASSERT(config()["MYAGENT_USE_BAYES"] == "false");
        TS_ASSERT(config()["MYAGENT_ENERGY"] == "12345");
        TS_ASSERT(config()["MYAGENT_ENTHUSIASM"] == "1000");
        TS_ASSERT(config()["MYAGENT_MOOD"] == "sad");

        // destroy the MyAgentWithDefaults instance
        cogserver.destroyAllAgents(MyAgentWithDefaults::info().id);

        // finally, remove the temporary file and free the string with its name
        std::remove(config_file_name);
        
        logger().debug("END TEST: Agent default and specified parameters");
    }

    /**
     * Method tested:
     *
     * Stimulate a Handle's atom.
     *
     * @param atom handle
     * @param amount of stimulus to give.
     * @return total stimulus given since last reset.
     */
    void testStimulateAtom() {
        stim_t stimValue;
        vector<Handle> atoms;
        logger().debug("BEGIN TEST: stimulateAtom");
        CogServer& cogserver = static_cast<CogServer&>(server());
        MyAgentWithDefaultsPtr agent =
                    cogserver.createAgent<MyAgentWithDefaults>();
        AtomSpace *atomSpace = &cogserver.getAtomSpace();
        atoms = createSimpleGraph(atomSpace, "stim_atom\0");

        stimValue = 10;

        for (unsigned int i = 0; i < atoms.size(); i++) {
            agent->stimulateAtom(atoms[i], stimValue);
            //av = (EconomicAttentionValue) atoms[i]->getAttentionValue();
            TS_ASSERT(agent->getAtomStimulus(atoms[i]) == stimValue);
        }
        TS_ASSERT(agent->getTotalStimulus() ==  (stimValue * (stim_t) atoms.size()));
        logger().debug("END TEST: stimulateAtom");
    }

    /**
     * Method tested:
     *
     * Stimulate all atoms in HandleEntry list.
     *
     * @param linked list of atoms to spread stimulus across.
     * @param amount of stimulus to share.
     * @return remainder stimulus after equal spread between atoms.
     */
    void testStimulateList() {
        stim_t stimValue;
        vector<Handle> atoms;
        logger().debug("BEGIN TEST: stimulateList");
        CogServer& cogserver = static_cast<CogServer&>(server());
        MyAgentWithDefaultsPtr agent = 
                cogserver.createAgent<MyAgentWithDefaults>();
        AtomSpace *atomSpace = &cogserver.getAtomSpace();
        atoms = createSimpleGraph(atomSpace, "stim_list");
        stimValue = 100;

        agent->stimulateAtom(atoms, stimValue);
        for (unsigned int i = 0; i < atoms.size(); i++) {
            TS_ASSERT(agent->getAtomStimulus(atoms[i]) == 20);
        }

        TS_ASSERT(agent->getTotalStimulus() == stimValue);

        logger().debug("END TEST: stimulateList");
    }

    /**
     * Method tested:
     *
     * Reset stimulus.
     *
     * @return new stimulus since reset, usually zero unless another
     * thread adds more.
     */
    void testResetStimulus() {
        stim_t stimValue;
        vector<Handle> atoms;
        logger().debug("BEGIN TEST: resetStimulus");
        CogServer& cogserver = static_cast<CogServer&>(server());
        MyAgentWithDefaultsPtr agent = 
                cogserver.createAgent<MyAgentWithDefaults>();
        AtomSpace *atomSpace = &cogserver.getAtomSpace();
        atoms = createSimpleGraph(atomSpace, "stim_reset");

        stimValue = 100;

        agent->stimulateAtom(atoms, stimValue);
        agent->resetStimulus();
        for (unsigned int i = 0; i < atoms.size(); i++) {
            TS_ASSERT(agent->getAtomStimulus(atoms[i]) == 0);
        }

        logger().debug("END TEST: resetStimulus");
    }
};
