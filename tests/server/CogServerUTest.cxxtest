/*
 * tests/server/CogServerUTest.cxxtest
 *
 * Copyright (C) 2002-2007 Novamente LLC
 * All Rights Reserved
 *
 * Written by Andre Senna <senna@vettalabs.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <string>
#include <cstdio>

#include <opencog/server/CogServer.h>
#include <opencog/util/Config.h>

using namespace opencog;

class MyAgent : public Agent
{

private:

    std::string  _name;
    unsigned int _count;

public:

    virtual const ClassInfo& classinfo() const { return info(); }
    static const ClassInfo& info() {
        static const ClassInfo _ci("opencog::MyAgent");
        return _ci;
    }

    MyAgent(CogServer& cs) : Agent(cs) { _count = 0; }
    void setFrequency(int f) { _frequency = f; }
    void setName(const std::string& n) { _name = n; }
    unsigned int count() { return _count; }
    virtual void run()
    {
        logger().debug("%ld: executed %s", _cogserver.getCycleCount(), _name.c_str());
        _count++;

        // add some nodes to test the SystemActivityTable
        char tmp[100];
        sprintf(tmp, "%s%d", _name.c_str(), _count);
        Handle h = _cogserver.getAtomSpace().add_node(NODE, tmp);
        UnorderedHandleSet s;
        s.insert(h);
        _utilizedHandleSets.push_back(s);
        // Random loop doing random things so that agent's take more than one
        // cpu tick to complete
        for (int i=0; i < 1000; i++) {
            int j = i * 100 / 200;
            sprintf(tmp, "%d", j);
        }
    }
};

typedef std::shared_ptr<MyAgent> MyAgentPtr;

class CustomCogServer : public CogServer
{
    int tickCount;
    bool tickBased;
    int maxCount;
    public: 

        static BaseServer* createInstance() {
            return new CustomCogServer();
        }

        CustomCogServer() : tickCount(1), tickBased(false), maxCount(1000) {}

        void setTickBased(bool _tickBased) {
            tickBased = _tickBased;
        }

        void setMaxCount(int _maxCount) {
            maxCount = _maxCount;
        }

        bool customLoopRun() {
            bool runCycle  = tickBased?(tickCount % 100 == 0):true; 
            if (++tickCount > maxCount) stop();
            return runCycle;
        }
};

class CogServerUTest :  public CxxTest::TestSuite
{

private:


public:

    CogServerUTest() {
        logger().setLevel(Logger::DEBUG);
        //logger().setPrintToStdoutFlag(true);
    }

    ~CogServerUTest() {
	    // erase the log file if no assertions failed
	    if (!CxxTest::TestTracker::tracker().suiteFailed())
            std::remove(logger().getFilename().c_str());
    }

    void setUp() {
    }

    void tearDown() {
    }

    void testProcessAgents() {
        // set cycle duration to a smaller value so that this test do not take too long.
        config().set("SERVER_CYCLE_DURATION", "10");  // in milliseconds
        Factory<MyAgent, Agent> factory;
        CustomCogServer cogserver;
        cogserver.setTickBased(false);
        cogserver.setMaxCount(50);
        cogserver.registerAgent(MyAgent::info().id, &factory);

        MyAgentPtr a[5];
        for (int i = 0; i < 5; ++i) {
            a[i] = cogserver.createAgent<MyAgent>();
            std::ostringstream oss; oss << "Agent" << i;
            a[i]->setName(oss.str());
            a[i]->setFrequency(i+1);
            cogserver.startAgent(a[i]);
        }

        cogserver.serverLoop();

        TS_ASSERT(a[0]->count() == 50);
        TS_ASSERT(a[1]->count() == 25);
        TS_ASSERT(a[2]->count() == 16);
        TS_ASSERT(a[3]->count() == 12);
        TS_ASSERT(a[4]->count() == 10);

        SystemActivityTable &sat = cogserver.systemActivityTable();
        AgentActivityTable &aat = sat.agentActivityTable();
        TS_ASSERT(aat[a[0]].size() == 50);
        TS_ASSERT(aat[a[1]].size() == 25);
        TS_ASSERT(aat[a[2]].size() == 16);
        TS_ASSERT(aat[a[3]].size() == 12);
        TS_ASSERT(aat[a[4]].size() == 10);

        for (int i = 0; i < 5; i++)
            for (size_t j = 0; j < aat[a[i]].size(); j++)
            {
                Activity *act = aat[a[i]][j];
                // check nothing takes zero time
                TS_ASSERT(act->elapsedTime.tv_usec > 0 || act->elapsedTime.tv_sec > 0);
                // or memory (disabled: current implementation not accurate).
                //TS_ASSERT(act->memUsed > 0);
                // or atoms
                TS_ASSERT(act->atomsUsed > 0);
                // each should have 1 utilized handle set
                TS_ASSERT(act->utilizedHandleSets.size() == 1);
                // and one handle in the set
                TS_ASSERT(act->utilizedHandleSets[0].size() == 1);
            }

        // removing a handle from the atom space should also remove it from
        // the sets in the activity tables.
        Activity *firstAct = aat[a[0]][0];
        Handle h = *firstAct->utilizedHandleSets[0].begin();
        cogserver.getAtomSpace().remove_atom(h);
        TS_ASSERT(firstAct->utilizedHandleSets[0].size() == 0);

        // test max size of activity seq
        sat.setMaxAgentActivityTableSeqSize(13);
        TS_ASSERT(aat[a[0]].size() == 13);
        TS_ASSERT(aat[a[1]].size() == 13);
        TS_ASSERT(aat[a[2]].size() == 13);
        TS_ASSERT(aat[a[3]].size() == 12);
        TS_ASSERT(aat[a[4]].size() == 10);

        // Destroy all the agents.
        for (int i = 0; i < 5; ++i) {
            cogserver.destroyAgent(a[i]);
        }

    } // testProcessAgents

    /* test tick-based server */
    void testTickBasedCogServer() {
        // Make it use external tick so that it does not call
        // sleep inside serverLoop
        // Ahem cough cough. The external tick code was
        // commented out and removed from cogserver maybe 5-10 years
        // ago.  So this test doesn't do what it claims to do.
        config().set("EXTERNAL_TICK_MODE", "true");
        CustomCogServer cogserver;
        cogserver.setTickBased(true);
        cogserver.setMaxCount(9);
        cogserver.serverLoop();
        printf("Got %ld ticks\n", cogserver.getCycleCount());
        TS_ASSERT(cogserver.getCycleCount() == 10);
    }

};
