/*
 * tests/server/ShellUTest.cxxtest
 *
 * Copyright (C) 2016 Linas Vepstas
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <thread>
#include <unistd.h>

#include <sys/types.h>
#include <sys/socket.h>
#include <time.h>

#include <opencog/util/Config.h>
#include <opencog/cogserver/server/CogServer.h>

using namespace opencog;

std::string cmd_exec(const char* cmd)
{
#define BUFSZ 1000
	char buf[1000];
	std::string result;
	std::shared_ptr<FILE> pope(popen(cmd, "r"), pclose);
	if (!pope) throw std::runtime_error("popen() failed!");
	while (!feof(pope.get())) {
		if (fgets(buf, BUFSZ, pope.get()) != NULL)
			result += buf;
	}
	return result;
}

void gargleblast(int tid, int reps)
{
	for (int i=0; i<reps; i++)
	{
		int j = i + 10 + (tid+10)*1000;
		char buf[1000];
		sprintf(buf, "echo '(Evaluation (Predicate \"visible face\") (List (Number %d)))\n' | nc -q 1 localhost 17333", j);

		std::string reso = cmd_exec(buf);

		// The current reply message is exactly:
		// opencog> Entering scheme shell; use ^D or a single . on a line by itself to exit.
		// guile> (EvaluationLink
		//   (PredicateNode "visible face")
		//   (ListLink
		//      (NumberNode "28010.000000")
		//   )
		// )
		//
		// guile> 
		// guile> ; note blank space here
		// Which is exactly 282 chars long.
		// If the greeting changes, then adjust for the correct size.
		//
		// Hmm. Seems that sometimes some trailing newline gets cut,
		// and so the reply might be short by one byte. Seems harmless.
#define CUR_MSG_SZ 281
		TS_ASSERT_LESS_THAN_EQUALS(CUR_MSG_SZ, reso.size());
		TS_ASSERT_LESS_THAN_EQUALS(reso.size(), CUR_MSG_SZ+1);
		if (reso.size() < CUR_MSG_SZ or (CUR_MSG_SZ+1) < reso.size())
			printf("Error: Create rep %d of %d in thread %d failed\n"
			       "\tGot: %lu >>>%s<<<\n",
			       i, reps, tid, reso.size(), reso.c_str());
		usleep(50000);

		if (20 <= i)
		{
			sprintf(buf, "echo '(cog-delete (Evaluation (Predicate \"visible face\") (List (Number %d))))\n' | nc -q 1 localhost 17333", j-20);
			std::string delo = cmd_exec(buf);

#define CUR_DEL_SZ 178
			TS_ASSERT_LESS_THAN_EQUALS(CUR_DEL_SZ, delo.size());
			TS_ASSERT_LESS_THAN_EQUALS(delo.size(), CUR_DEL_SZ+1);
			if (delo.size() < CUR_DEL_SZ or (CUR_DEL_SZ+1) < delo.size())
				printf("Error: Delete rep %d of %d in thread %d failed\n"
				       "\tGot: %lu >>>%s<<<\n",
				       i, reps, tid, delo.size(), delo.c_str());
		}
		usleep(50000);
	}
}

// Test sending and receiving multiple commands on the same socket.
void tik_tik_tik(int tid, int reps)
{
	static bool already_printed = false;

	// Open a socket to the server.
	int sock = socket(AF_INET, SOCK_STREAM, 0);
	TS_ASSERT(0 < sock);

	struct sockaddr_in server;
	server.sin_addr.s_addr = inet_addr("127.0.0.1");
	server.sin_family = AF_INET;
	server.sin_port = htons(17333);

	int rc = connect(sock, (struct sockaddr *)&server, sizeof(server));
	TS_ASSERT(0 == rc);

	// Put the shell into scheme-mode.
	rc = send(sock, "scm\n", strlen("scm\n"), 0);
	TS_ASSERT(4 == rc);
	char srep[200];
	rc = recv(sock, srep, sizeof(srep), 0);
	TS_ASSERT(0 < rc);

	// A send+receive loop, reusing the above socket.
	for (int i=0; i<reps; i++)
	{
		char buf[200];
		sprintf(buf, "(function-1 \"TICKET-%d-%d\")\n", tid+5000, i+8000);

		rc = send(sock, buf, strlen(buf), 0);

		// Receive loop. Stalls until all of the answer has been
		// received. We know that we got all of it, if the string
		// "finished" appears in the answer.
		int count = 0;
		std::string reply;
		while (1) {
			char rep[1000];
			rc = recv(sock, rep, sizeof(rep), MSG_DONTWAIT);
			int norr = errno;
			if (rc < 0 and EAGAIN != norr and EWOULDBLOCK != norr)
			{
				printf("Ohhh Nooo! %d %s\n", norr, strerror(norr));
				TS_ASSERT(0);
				break;
			}
			if (0 < rc) { rep[rc] = 0; reply += rep; }

			// Oops. Fatty boom boom.
			TS_ASSERT(reply.npos == reply.find("ERROR"));
			if (reply.npos != reply.find("ERROR"))
			{
				printf("Failure on thread-id=%d rep=%d\n", tid, i);
				if (not already_printed)
					printf("Shell reply is: %s\n", reply.c_str());
				already_printed = true;
				close(sock);
				return;
			}

			// Look for zef side.
			if (reply.npos != reply.find("-finished")) break;
			count ++;
			if (10 < count) break;
			sleep(1);
		}

		char exp[200];
		sprintf(exp, "return-1-TICKET-%d-%d-finished", tid+5000, i+8000);

		if (reply.npos == reply.find(exp))
			printf("Failed to get expected reply; \n"
					"expected: >>%s<<\n"
					"got >>%s<<\n", exp, reply.c_str());

		TS_ASSERT(reply.npos != reply.find(exp));
	}

	// Be polite, and close up shop.
	close(sock);
}

class ShellUTest :  public CxxTest::TestSuite
{
private:
	CogServer* csrv;
	std::thread* main_loop;

public:

	ShellUTest()
	{
		logger().set_level(Logger::DEBUG);
		//logger().set_print_to_stdout_flag(true);
	}

	~ShellUTest()
	{
		// erase the log file if no assertions failed
		if (!CxxTest::TestTracker::tracker().suiteFailed())
			std::remove(logger().get_filename().c_str());
	}

	void setUp()
	{
		csrv = new CogServer();
		csrv->loadModules();
		csrv->loadModule("libscheme-shell.so");
		csrv->enableNetworkServer(17333);
		main_loop = new std::thread(&CogServer::serverLoop, csrv);

		// Wait for the cogserver to finish initializing.
		sleep(1);
	}

	void tearDown()
	{
		csrv->stop();
		main_loop->join();
		delete main_loop;
		delete csrv;
	}

	void testControlD()
	{
		logger().debug("BEGIN TEST: %s", __FUNCTION__);
		int rc = system("echo '(Concept \"42\")\n' | nc -q 0 localhost 17333");
		if (rc != 0) printf("Error: first call failed\n");
		TS_ASSERT_EQUALS(rc, 0);
		usleep(50000);

		// The hexadecimal \x4 is ctrl-D.
		rc = system("echo 'scm\n(+ 2 2)\n\x4\n' | nc -q 0 localhost 17333");
		if (rc != 0) printf("Error: second call failed\n");
		TS_ASSERT_EQUALS(rc, 0);
		usleep(50000);

		rc = system("echo 'scm\n(Concept \"42\")\n' | nc -q 0 localhost 17333");
		if (rc != 0) printf("Error: third call failed\n");
		TS_ASSERT_EQUALS(rc, 0);
		usleep(50000);

		rc = system("echo '(+ 2 2)\n.\n' | nc -q 0 localhost 17333");
		if (rc != 0) printf("Error: fourth call failed\n");
		TS_ASSERT_EQUALS(rc, 0);
		usleep(50000);
		logger().debug("END TEST: %s", __FUNCTION__);
	}

	void testControlC()
	{
		logger().debug("BEGIN TEST: %s", __FUNCTION__);

		time_t start = time(0);

		// The hexadecimal \x16 is ctrl-C.
		// The interrupt should kill the sleep immediately.
		// Elapsed time should be well under a second.
		int rc = system("echo '(sleep 42)\n\x16' | nc -q 0 localhost 17333");
		if (rc != 0) printf("Error: first call failed\n");
		TS_ASSERT_EQUALS(rc, 0);

		time_t end = time(0);
		TS_ASSERT_LESS_THAN (end - start, 2);
		printf("Elapsed: %ld\n", end-start);

		start = time(0);
		// The hexadecimal \x18 is ctrl-X aka "cancel"
		rc = system("echo '(sleep 42)\n\x18' | nc -q 0 localhost 17333");
		if (rc != 0) printf("Error: first call failed\n");
		TS_ASSERT_EQUALS(rc, 0);

		end = time(0);
		TS_ASSERT_LESS_THAN (end - start, 2);
		printf("First elapsed: %ld\n", end-start);

		start = time(0);
		// The hexadecimal \x1b is ctrl-[ aka "escape"
		rc = system("echo '(sleep 42)\n\x1b' | nc -q 0 localhost 17333");
		if (rc != 0) printf("Error: second call failed\n");
		TS_ASSERT_EQUALS(rc, 0);

		end = time(0);
		TS_ASSERT_LESS_THAN (end - start, 2);
		printf("Second elapsed: %ld\n", end-start);

		logger().debug("END TEST: %s", __FUNCTION__);
	}

	// Test draining of the shell command queue, before the shell is
	// closed. Here, net-cat sends some long-running commands, but
	// then closes the socket immediately. All of the commands should
	// still run to completion, however.
	void testDrain()
	{
		logger().debug("BEGIN TEST: %s", __FUNCTION__);
		cmd_exec(
			"echo 'scm\n (Concept \"A\")\n (sleep 1)\n (Concept \"B\")\n"
			"(sleep 1)\n (Concept \"C\")\n' | nc -q 0 localhost 17333");

		// Wait for above to finish
		sleep(4);

		// nc -q 1 means "wait for a reply, doofus"
		std::string ply = cmd_exec(
			"echo 'scm\n (cog-prt-atomspace)' | nc -q 1 localhost 17333");

		// Actually, we expect exactly 205 bytes, these days....
		printf("Received %lu bytes: %s\n", ply.size(), ply.c_str());
		TS_ASSERT_LESS_THAN(200, ply.size());

		// Expect to get all three atoms.
		TS_ASSERT(ply.npos != ply.find("(ConceptNode \"A\")"));
		TS_ASSERT(ply.npos != ply.find("(ConceptNode \"B\")"));
		TS_ASSERT(ply.npos != ply.find("(ConceptNode \"C\")"));

		logger().debug("END TEST: %s", __FUNCTION__);
	}

	void testMessaging()
	{
		logger().debug("BEGIN TEST: %s", __FUNCTION__);
#define NT 20
		std::thread* pangalactic[NT];
		int j;
		for (j=0; j<NT; j++)
		{
			pangalactic[j] = new std::thread(&gargleblast, j, 30);
		}
		for (j=0; j<NT; j++)
		{
			pangalactic[j]->join();
			delete pangalactic[j];
		}
		logger().debug("END TEST: %s", __FUNCTION__);
	}

	// Test streaming commands onto shared sockets.
	// Unlike the above test, here the socket is kept open
	// indefinitely.
	void testMultiStream()
	{
		logger().debug("BEGIN TEST: %s", __FUNCTION__);
		std::string ply = cmd_exec("echo 'scm\n"
			// "(add-to-load-path \"/usr/local/share/opencog/scm\")\n"
			// "(use-modules (opencog) (opencog logger))"
			"(define (function-1 ticket) "
			// "    (cog-logger-info \"CALLED function-1 ~s\" ticket)"
			"    (string-append \"return-1-\" ticket \"-finished\"))\n"
			"(define (function-2 ticket) "
			// "    (cog-logger-info \"CALLED function-2 ~s\" ticket)"
			"    (string-append \"return-2-\" ticket \"-finished\"))\n"
			"(display \"Finished creating definitions\n\")"
			"\n.\n' | nc -q 2 localhost 17333");

		// The -q2 on `nc` should be enough for the above to finish up.
		TS_ASSERT (0 < ply.size());

		std::thread* max_normal[NT];
		int j;
		for (j=0; j<NT; j++)
		{
			max_normal[j] = new std::thread(&tik_tik_tik, j, 60);
		}
		for (j=0; j<NT; j++)
		{
			max_normal[j]->join();
			delete max_normal[j];
		}

		logger().debug("END TEST: %s", __FUNCTION__);
	}
};
