/*
 * @file tests/planning/OpenPsiUTest.cxxtest
 *
 * Copyright (C) 2016 OpenCog Foundation
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <cxxtest/TestSuite.h>

#include <opencog/atomspace/AtomSpace.h>
#include <opencog/guile/SchemeEval.h>
#include <opencog/util/Logger.h>
#include <opencog/truthvalue/TruthValue.h>

using namespace opencog;

#define OPENPSI_TEST_PATH PROJECT_SOURCE_DIR "/tests/openpsi"
#define CHKERR \
    TSM_ASSERT("Caught scm error during eval", \
        (false == _scm->eval_error()));

class OpenPsiUTest : public CxxTest::TestSuite
{
private:
    AtomSpace* _as;
    SchemeEval* _scm;

public:
    OpenPsiUTest(): _as(nullptr), _scm(nullptr)
    {
        logger().set_level(Logger::DEBUG);
        logger().set_print_level_flag(true);
        logger().set_print_to_stdout_flag(true);
    }

    ~OpenPsiUTest()
    {
        // Clean Up
        delete _as;
        _as = nullptr;
        delete _scm;
        _scm = nullptr;

        // Erase the log file if no assertions failed
        if(!CxxTest::TestTracker::tracker().suiteFailed())
            std::remove(logger().get_filename().c_str());
    }

    void setUp()
    {
        // The scheme environment is reset between each test.
        _as = new AtomSpace();
        _scm = new SchemeEval(_as);

        // Configure scheme load-paths that are common for all tests.
        _scm->eval("(add-to-load-path \"/usr/local/share/opencog/scm\")");
        CHKERR

        _scm->eval("(setenv \"LTDL_LIBRARY_PATH\" \"/usr/local/lib/opencog\")");
        // Load require modules to be tested and populate the atomspace
        _scm->eval("(use-modules (opencog))");
        CHKERR
        // NOTE: Using  module (opencog openpsi) after running
        // ```
        // _scm->eval("(add-to-load-path \"" PROJECT_BINARY_DIR
        //            "/opencog/scm\")");
        // ```
        // will get test_psi_action__predicate to fail. Since psi-action? is
        // core part of the other functions, that are tested, most tests fail
        // as a result. That is why main.scm is loaded here instead of running
        // (use-modules (opencog openpsi)).
        _scm->eval("(use-modules (opencog openpsi))");
        CHKERR
        _scm->eval("(load \"" OPENPSI_TEST_PATH "/rules.scm\")");
        CHKERR
    }

    void tearDown()
    {
        delete _as;
        _as = nullptr;
        delete _scm;
        _scm = nullptr;
    }

    // Check the scheme function `psi-satisfiable?`` and `satisfiable?`
    // NOTE: The name of the test function uses `__predicate` in place of `?`
    void test_psi_satisfiable_and_satisfiable__predicate()
    {
        logger().info("BEGIN TEST: %s", __FUNCTION__);
        // Load the file to get access to update-satisfiablity-alist procedure
        // as it isn't exported.
        _scm->eval("(load \"" PROJECT_SOURCE_DIR
                   "/opencog/openpsi/rule.scm\")");

        // Test 1:
        // Test unsatisfaiability
        auto result_1_1 = _scm->eval_tv("(psi-satisfiable? (rule-1))");
        CHKERR
        TSM_ASSERT_EQUALS("Expected (stv 0 1)", TruthValue::FALSE_TV(), result_1_1);

        // Check result from cache is consistent with that of the actual
        // execution.
        auto result_1_2 = _scm->eval_tv("(satisfiable? (rule-1))");
        CHKERR
        TSM_ASSERT_EQUALS("Expected (stv 0 1)", TruthValue::FALSE_TV(), result_1_2);

        // Test 2:
        // Test satisfaiability
        _scm->eval("(groundable-content-1)");
        CHKERR
        auto result_2_1 = _scm->eval_tv("(psi-satisfiable? (rule-1))");
        CHKERR
        TSM_ASSERT_EQUALS("Expected (stv 1 1)", TruthValue::TRUE_TV(), result_2_1);

        // Check result from cache is consistent with that of the actual
        // execution.
        auto result_2_2 = _scm->eval_tv("(satisfiable? (rule-1))");
        CHKERR
        TSM_ASSERT_EQUALS("Expected (stv 1 1)", TruthValue::TRUE_TV(), result_2_2);

        logger().info("END TEST: %s", __FUNCTION__);
    }

    // Check the scheme function `psi-select-rules`
    void xtest_psi_select_rules()
    {
        logger().info("BEGIN TEST: %s", __FUNCTION__);

        // Add the rules
        auto rule_1 = _scm->eval_h("(rule-1)");
        CHKERR
        auto rule_2 = _scm->eval_h("(rule-2)");
        CHKERR

        // Test 1:
        auto result_1 = _scm->eval("(psi-select-rules)");
        CHKERR
        TSM_ASSERT_EQUALS("Expected ()", "()\n", result_1);

        // Test 2:
        _scm->eval("(groundable-content-1)");
        CHKERR
        auto result_2_1 = _scm->eval("(length (psi-select-rules))");
        CHKERR
        TSM_ASSERT_EQUALS("Expected a single rule", "1\n" , result_2_1);

        auto result_2_2 = _scm->eval_h("(car (psi-select-rules))");
        CHKERR
        TSM_ASSERT_EQUALS("Expected the same psi-rule", rule_1, result_2_2);
        CHKERR

        // Test 3:
        // Test that only one rule is selected when running in default mode,
        // eventhough multiple rules are satisfiable.
        _scm->eval("(groundable-content-2)");
        CHKERR
        auto result_3 = _scm->eval("(length (psi-select-rules))");
        CHKERR
        TSM_ASSERT_EQUALS("Expected a single rule", "1\n" , result_3);

        logger().info("END TEST: %s", __FUNCTION__);
    }

    // Check the scheme function `psi-select-rules-per-demand`
    void test_psi_select_rules_per_demand()
    {
        logger().info("BEGIN TEST: %s", __FUNCTION__);

        // Add the rules
        auto rule_1 = _scm->eval_h("(rule-1)");
        CHKERR
        auto rule_2 = _scm->eval_h("(rule-2)");
        CHKERR

        // Test 1:
        auto result_1_1 = _scm->eval("(psi-select-rules-per-demand demand-1)");
        CHKERR
        TSM_ASSERT_EQUALS("Expected ()", "()\n", result_1_1);

        auto result_1_2 = _scm->eval("(psi-select-rules-per-demand demand-2)");
        CHKERR
        TSM_ASSERT_EQUALS("Expected ()", "()\n", result_1_2);

        // Test 2:
        _scm->eval("(groundable-content-1)");
        CHKERR
        auto result_2_1 = \
            _scm->eval_h("(car (psi-select-rules-per-demand demand-1))");
        CHKERR
        TSM_ASSERT_EQUALS("Expected a single rule", rule_1 , result_2_1);

        auto result_2_2 = _scm->eval("(psi-select-rules-per-demand demand-2)");
        CHKERR
        TSM_ASSERT_EQUALS("Expected ()", "()\n", result_2_2);
        CHKERR

        // Test 3:
        // Double checking
        _scm->eval("(groundable-content-2)");
        CHKERR
        auto result_3_1 = \
            _scm->eval_h("(car (psi-select-rules-per-demand demand-1))");
        CHKERR
        TSM_ASSERT_EQUALS("Expected a single rule", rule_1 , result_3_1);

        auto result_3_2 = \
            _scm->eval_h("(car (psi-select-rules-per-demand demand-2))");
        CHKERR
        TSM_ASSERT_EQUALS("Expected a single rule", rule_2 , result_3_2);

        logger().info("END TEST: %s", __FUNCTION__);
    }

    // Check the scheme function `psi-related-goals`
    void test_psi_related_goals()
    {
        logger().info("BEGIN TEST: %s", __FUNCTION__);

        // Add the rules
        _scm->eval_h("(rule-1) (rule-2) (rule-3)");
        CHKERR

        // Test 1:
        auto result_1 = _scm->eval("(test_psi_related_goals_1)");
        CHKERR
        TSM_ASSERT_EQUALS("Expected `#t`", "#t\n" , result_1);

        // Test 2:
        auto result_2 = _scm->eval("(test_psi_related_goals_2)");
        CHKERR
        TSM_ASSERT_EQUALS("Expected `#t`", "#t\n" , result_2);

        logger().info("END TEST: %s", __FUNCTION__);
    }

    // Check the scheme function `psi-get-satisfiable-rules`
    // NOTE The function being tested isn't being used
    void test_psi_get_satisfiable_rules()
    {
        logger().info("BEGIN TEST: %s", __FUNCTION__);

        // Add the rules and contents
        _scm->eval_h("(rule-1) (rule-2) (rule-3)");
        CHKERR

        // Test 1:
        _scm->eval("(groundable-content-1)");
        CHKERR
        auto result_1_1 = _scm->eval("(length \
                            (psi-get-satisfiable-rules demand-1))");
        CHKERR
        TSM_ASSERT_EQUALS("Expected `1`", "1\n" , result_1_1);
        auto result_1_2 =_scm->eval("(length \
                            (psi-get-satisfiable-rules demand-2))");
        CHKERR
        TSM_ASSERT_EQUALS("Expected `0`", "0\n" , result_1_2);

        // Test 2:
        _scm->eval("(groundable-content-2)");
        CHKERR
        auto result_2_1 = _scm->eval("(length \
                            (psi-get-satisfiable-rules demand-1))");
        CHKERR
        TSM_ASSERT_EQUALS("Expected `2`", "2\n" , result_2_1);
        auto result_2_2 =_scm->eval("(length \
                            (psi-get-satisfiable-rules demand-2))");
        CHKERR
        TSM_ASSERT_EQUALS("Expected `1`", "1\n" , result_2_2);

        // Test 3:
        _scm->eval("(map cog-delete (groundable-content-1))");
        CHKERR
        auto result_3_1 = _scm->eval("(length \
                            (psi-get-satisfiable-rules demand-1))");
        CHKERR
        TSM_ASSERT_EQUALS("Expected `1`", "1\n" , result_3_1);
        auto result_3_2 =_scm->eval("(length \
                            (psi-get-satisfiable-rules demand-2))");
        CHKERR
        TSM_ASSERT_EQUALS("Expected `1`", "1\n" , result_3_2);

        logger().info("END TEST: %s", __FUNCTION__);
    }


    // Check the scheme function `psi-step`. There are multiple tests
    // so as to use tearDown function to clean the atomspace.
    // Test 1:
    // Test that actions and goals are not evaluated.
    void test_psi_step_1()
    {
        // NOTE: The demand-value checks are commented out because the
        // psi-step default behavior of evaluating goals is being refactored
        // out.
        logger().info("BEGIN TEST: %s", __FUNCTION__);

        _scm->eval("(setup_test_psi_step_1)");
        CHKERR

        // For rule-1
        auto result_1_1 = _scm->eval("(cog-node 'ConceptNode \"act-1\")");
        CHKERR
        TSM_ASSERT_EQUALS("Expected ()", "()\n", result_1_1);
        // auto result_1_2 = _scm->eval("(demand-value demand-1)");
        // CHKERR
        // TSM_ASSERT_EQUALS("Expected `1.0`", "1.0\n", result_1_2);

        // For rule-2
        auto result_1_3 = _scm->eval("(cog-node 'ConceptNode \"act-2\")");
        CHKERR
        TSM_ASSERT_EQUALS("Expected ()", "()\n", result_1_3);
        // auto result_1_4 = _scm->eval("(demand-value demand-2)");
        // CHKERR
        // TSM_ASSERT_EQUALS("Expected `1.0`", "1.0\n", result_1_4);

        logger().info("END TEST: %s", __FUNCTION__);
    }

    // Continue checking the scheme function `psi-step`.
    // Test 2:
    // Test that action-1 and goal-1 are not evaluated.
    void test_psi_step_2()
    {
        // NOTE: The demand-value checks are commented out because the
        // psi-step default behavior of evaluating goals is being refactored
        // out.
        logger().info("BEGIN TEST: %s", __FUNCTION__);

        _scm->eval("(setup_test_psi_step_2)");
        CHKERR

        // For rule-1
        auto result_2_1 = _scm->eval("(test_psi_step_2_1)");
        CHKERR
        TSM_ASSERT_EQUALS("Expected #t", "#t\n", result_2_1);
        // auto result_2_2 = _scm->eval("(demand-value demand-1)");
        // CHKERR
        // TSM_ASSERT_EQUALS("Expected `0.5`", "0.5\n", result_2_2);

        // For rule-2
        auto result_2_3 = _scm->eval("(cog-node 'ConceptNode \"act-2\")");
        CHKERR
        TSM_ASSERT_EQUALS("Expected ()", "()\n", result_2_3);
        // auto result_2_4 = _scm->eval("(demand-value demand-2)");
        // CHKERR
        // TSM_ASSERT_EQUALS("Expected `1.0`", "1.0\n", result_2_4);

        logger().info("END TEST: %s", __FUNCTION__);
    }

    // Continue checking the scheme function `psi-step`.
    // Test 3:
    // Test that action-2, goal-1 and goal-2 are evaluated.
    void test_psi_step_3()
    {
        // NOTE: The demand-value checks are commented out because the
        // psi-step default behavior of evaluating goals is being refactored
        // out.
        logger().info("BEGIN TEST: %s", __FUNCTION__);

        _scm->eval("(setup_test_psi_step_3)");
        CHKERR

        // For rule-2 or rule-3
        auto result_3_1 = _scm->eval("(test_psi_step_3_1)");
        CHKERR
        TSM_ASSERT_EQUALS("Expected #t", "#t\n", result_3_1);
        // auto result_3_2 = _scm->eval("(demand-value demand-2)");
        // CHKERR
        // TSM_ASSERT_EQUALS("Expected `0.5`", "0.5\n", result_3_2);

        // For rule-1
        auto result_3_3 = _scm->eval("(test_psi_step_2_1)");
        CHKERR
        TSM_ASSERT_EQUALS("Expected #f", "#f\n", result_3_3);
        // auto result_3_4 = _scm->eval("(demand-value demand-1)");
        // CHKERR
        // TSM_ASSERT_EQUALS("Expected `0.5`", "0.5\n", result_3_4);

        logger().info("END TEST: %s", __FUNCTION__);
    }

    // Continue checking the scheme function `psi-step`.
    // Test 4:
    // Test that action-4 and goal-4 are evaluated. This tests that evaluatable
    // contexts are handled properly.
    void test_psi_step_4()
    {
        // NOTE: The demand-value checks are commented out because the
        // psi-step default behavior of evaluating goals is being refactored
        // out.
        logger().info("BEGIN TEST: %s", __FUNCTION__);

        _scm->eval("(setup_test_psi_step_4)");
        CHKERR

        // For rule-4 only
        auto result_3_1 = _scm->eval("(test_psi_step_4)");
        CHKERR
        TSM_ASSERT_EQUALS("Expected #t", "#t\n", result_3_1);
        // auto result_3_2 = _scm->eval("(demand-value demand-4)");
        // CHKERR
        // TSM_ASSERT_EQUALS("Expected `0.5`", "0.5\n", result_3_2);

        logger().info("END TEST: %s", __FUNCTION__);
    }

    // Check the scheme function `psi-get-dual-rules`
    // NOTE: The function `psi-get-dual-rules` has been removed but something
    // similar will be added. This test is not removed as the test may come in
    // handy.
    void psi_get_dual_rules()
    {
        logger().info("BEGIN TEST: %s", __FUNCTION__);

        // Test 1:
        // Test for finding psi-rules with context without variable in them,
        // aka canned rules.
        _scm->eval_h("(rule-1)(rule-2)(rule-3)(rule-4)");
        CHKERR
        auto result_1_1 = _scm->eval("(test_psi_get_dual_rules_1_1)");
        CHKERR
        TSM_ASSERT_EQUALS("Expected `#t`", "#t\n" , result_1_1);
        auto result_1_2 = _scm->eval("(test_psi_get_dual_rules_1_2)");
        CHKERR
        TSM_ASSERT_EQUALS("Expected `#t`", "#t\n" , result_1_2);

        // Test 2:
        // Test for finding psi-rules using DualLink for contexts that have
        // variables in them.
        _scm->eval_h("(rule-5)");
        CHKERR
        auto result_2_1 = _scm->eval("(test_psi_get_dual_rules_2_1)");
        CHKERR
        TSM_ASSERT_EQUALS("Expected `2`", "2\n" , result_2_1);
        auto result_2_2 = _scm->eval("(test_psi_get_dual_rules_2_2)");
        CHKERR
        TSM_ASSERT_EQUALS("Expected `#t`", "#t\n" , result_2_2);

        logger().info("END TEST: %s", __FUNCTION__);
    }

    // Check the scheme function `psi-action?`
    // NOTE: The name of the test function uses `__predicate` in place of `?`
    void test_psi_action__predicate()
    {
        logger().info("BEGIN TEST: %s", __FUNCTION__);

        auto result_1 = _scm->eval("(psi-action? action-1) ");
        TSM_ASSERT_EQUALS("Expected `#f`", "#f\n" , result_1);

        // Use the executable term `action-1` in defining a rule, that results
        // in the term being converted to a psi recognizable action.
        _scm->eval_h("(rule-1)");
        CHKERR

        auto result_2 = _scm->eval("(psi-action? action-1) ");
        CHKERR
        TSM_ASSERT_EQUALS("Expected `#t`", "#t\n" , result_2);

        logger().info("END TEST: %s", __FUNCTION__);

    }

    // Check the scheme function `psi-demand-skip` and
    // `psi-get-all-enabled-demands`.
    void test_psi_demand_skip_and_psi_get_all_valid_demands()
    {
        logger().info("BEGIN TEST: %s", __FUNCTION__);

        auto result_1_1 = _scm->eval("(length (psi-get-all-enabled-demands))");
        CHKERR
        TSM_ASSERT_EQUALS("Expected `3`", "3\n", result_1_1);

        // Test 1:
        // Skip a demand.
        _scm->eval("(psi-demand-skip demand-1)");

        // Test 2:
        // The set of enabled demands should now have one less demand.
        auto result_2_1 = _scm->eval("(length \
            (psi-get-all-enabled-demands))");
        CHKERR
        TSM_ASSERT_EQUALS("Expected `2`", "2\n", result_2_1);

        auto result_2_2 = _scm->eval("(member demand-1 \
            (psi-get-all-enabled-demands))");
        CHKERR
        TSM_ASSERT_EQUALS("Expected `#f`", "#f\n", result_2_2);
        logger().info("END TEST: %s", __FUNCTION__);
    }
};
