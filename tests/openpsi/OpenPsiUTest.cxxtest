/*
 * @file tests/planning/OpenPsiUTest.cxxtest
 *
 * Copyright (C) 2016 OpenCog Foundation
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <cxxtest/TestSuite.h>

#include <opencog/atomspace/AtomSpace.h>
#include <opencog/guile/load-file.h>
#include <opencog/guile/SchemeEval.h>
#include <opencog/util/Logger.h>
#include <opencog/util/Config.h>

using namespace opencog;

#define OPENPSI_TEST_PATH PROJECT_SOURCE_DIR "/tests/openpsi"
#define CHKERR \
    TSM_ASSERT("Caught scm error during eval", \
        (false == _scm->eval_error()));

class OpenPsiUTest : public CxxTest::TestSuite
{
private:
    AtomSpace* _as;
    SchemeEval* _scm;

public:
    OpenPsiUTest(): _as(NULL), _scm(NULL)
    {
        logger().set_level(Logger::DEBUG);
        logger().set_print_level_flag(true);
        logger().set_print_to_stdout_flag(true);
    }

    ~OpenPsiUTest()
    {
        delete _as;
        delete _scm;

        // Erase the log file if no assertions failed
        if(!CxxTest::TestTracker::tracker().suiteFailed())
            std::remove(logger().get_filename().c_str());
    }

    void setUp()
    {
        // The scheme environment is reset between each test.
        _as = new AtomSpace();
        _scm = new SchemeEval(_as);

        // Configure scheme load-paths that are common for all tests.
        _scm->eval("(add-to-load-path \"/usr/local/share/opencog/scm\")");
        CHKERR
        _scm->eval("(add-to-load-path \"" PROJECT_BINARY_DIR  "\")");
        CHKERR
        _scm->eval("(add-to-load-path \"" PROJECT_BINARY_DIR
                   "/opencog/scm\")");
        CHKERR
        // TODO: Replace with use-modules when openpsi is modularized
        _scm->eval("(add-to-load-path \"" PROJECT_SOURCE_DIR  "/opencog\")");
        CHKERR

        // This is a copy of development.conf SCM_PRELOAD section after
        // removing files not associated with scheme  modules that are not
        // in use.
        config().set("SCM_PRELOAD",
                    "scm/opencog.scm,"
                    "scm/core_types.scm,"
                    "scm/core-docs.scm,"
                    "scm/utilities.scm,"
                    "scm/apply.scm,"
                    "scm/file-utils.scm,"
                    "scm/config.scm,"
                    "scm/repl-shell.scm,"
                    "scm/av-tv.scm,"
                    "scm/rule-engine-utils.scm");

        load_scm_files_from_config(*_as);
        _as->clear();

        // Load function definition to be tested and populate the atomspace
        _scm->eval("(load-from-path \"openpsi/active-schema-pool.scm\")");
        CHKERR
        _scm->eval("(load \"" OPENPSI_TEST_PATH "/action-rules.scm\")");
        CHKERR
    }

    void tearDown()
    {
        _as = nullptr;
        _scm = nullptr;
    }

    void test_psi_get_action_rules()
    {
        logger().info("BEGIN TEST: %s", __FUNCTION__);

        // Test for `psi-get-action-rules` for the 3 psi-effect-types
        TSM_ASSERT_EQUALS("Not the expected 'Default' action-rule", \
            _scm->eval_h("(test-def)"), _scm->eval_h("(test-def-result)"));
        TSM_ASSERT_EQUALS("Not the expected 'Increase' action-rules", \
            _scm->eval_h("(test-inc)"), _scm->eval_h("(test-inc-result)"));
        TSM_ASSERT_EQUALS("Not the expected 'Decrease' action-rules", \
            _scm->eval_h("(test-dec)"), _scm->eval_h("(test-dec-result)"));

        logger().info("END TEST: %s", __FUNCTION__);
    }

    void test_psi_get_demands()
    {
        logger().info("BEGIN TEST: %s", __FUNCTION__);

        TSM_ASSERT_EQUALS("Not the expected set of openpsi demands", \
            _scm->eval_h("(test-select-all)"), \
            _scm->eval_h("(test-select-all-result)"));
        logger().info("END TEST: %s", __FUNCTION__);
    }

};
