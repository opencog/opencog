/*
 * @file tests/planning/OpenPsiUTest.cxxtest
 *
 * Copyright (C) 2016 OpenCog Foundation
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <cxxtest/TestSuite.h>

#include <opencog/atomspace/AtomSpace.h>
#include <opencog/guile/load-file.h>
#include <opencog/guile/SchemeEval.h>
#include <opencog/util/Logger.h>
#include <opencog/util/Config.h>

using namespace opencog;

#define OPENPSI_TEST_PATH PROJECT_SOURCE_DIR "/tests/openpsi"
#define CHKERR \
    TSM_ASSERT("Caught scm error during eval", \
        (false == _scm->eval_error()));

class OpenPsiUTest : public CxxTest::TestSuite
{
private:
    AtomSpace* _as;
    SchemeEval* _scm;

public:
    OpenPsiUTest(): _as(nullptr), _scm(nullptr)
    {
        logger().set_level(Logger::DEBUG);
        logger().set_print_level_flag(true);
        logger().set_print_to_stdout_flag(true);
    }

    ~OpenPsiUTest()
    {
        // Clean Up
        delete _as;
        delete _scm;

        // Erase the log file if no assertions failed
        if(!CxxTest::TestTracker::tracker().suiteFailed())
            std::remove(logger().get_filename().c_str());
    }

    void setUp()
    {
        // The scheme environment is reset between each test.
        _as = new AtomSpace();
        _scm = new SchemeEval(_as);

        // Configure scheme load-paths that are common for all tests.
        _scm->eval("(add-to-load-path \"/usr/local/share/opencog/scm\")");
        CHKERR
        _scm->eval("(add-to-load-path \"" PROJECT_BINARY_DIR  "\")");
        CHKERR
        _scm->eval("(add-to-load-path \"" PROJECT_BINARY_DIR
                   "/opencog/scm\")");
        CHKERR
        // TODO: Replace with use-modules when openpsi is modularized
        _scm->eval("(add-to-load-path \"" PROJECT_SOURCE_DIR  "/opencog\")");
        CHKERR

        // Load function definition to be tested and populate the atomspace
        _scm->eval("(load-from-path \"openpsi/active-schema-pool.scm\")");
        CHKERR
        _scm->eval("(load \"" OPENPSI_TEST_PATH "/action-rules.scm\")");
        CHKERR
    }

    void tearDown()
    {
        _as = nullptr;
        _scm = nullptr;
    }

    // Check that scheme function `psi-satisfiable?``
    void test_psi_satisfiable()
    {
        logger().info("BEGIN TEST: %s", __FUNCTION__);

        // Test unsatisfaiability
        auto result_1 = _scm->eval("(psi-satisfiable? (rule-1))");
        CHKERR
        TSM_ASSERT_EQUALS("Expected (stv 0 1)", "(stv 0 1)\n", result_1);

        // Test satisfaiability
        _scm->eval("(groundable-content-1)");
        CHKERR
        auto result_2 = _scm->eval("(psi-satisfiable? (rule-1))");
        CHKERR
        TSM_ASSERT_EQUALS("Expected (stv 1 1)", "(stv 1 1)\n", result_2);
        logger().info("END TEST: %s", __FUNCTION__);
    }

    // Check that scheme function `psi-select-rules`
    void test_psi_select_rules()
    {
        logger().info("BEGIN TEST: %s", __FUNCTION__);

        // Add the rules
        auto rule_1 = _scm->eval_h("(rule-1)");
        CHKERR
        auto rule_2 = _scm->eval_h("(rule-2)");
        CHKERR

        // Test 1
        auto result_1 = _scm->eval("(psi-select-rules)");
        CHKERR
        TSM_ASSERT_EQUALS("Expected ()", "()\n", result_1);

        // Test 2
        _scm->eval("(groundable-content-1)");
        CHKERR
        auto result_2_1 = _scm->eval("(length (psi-select-rules))");
        CHKERR
        TSM_ASSERT_EQUALS("Expected a single rule", "1\n" , result_2_1);

        auto result_2_2 = _scm->eval_h("(car (psi-select-rules))");
        CHKERR
        TSM_ASSERT_EQUALS("Expected the same psi-rule", rule_1, result_2_2);
        CHKERR

        // Test 3
        _scm->eval("(groundable-content-2)");
        CHKERR
        auto result_3 = _scm->eval("(length (psi-select-rules))");
        CHKERR
        TSM_ASSERT_EQUALS("Expected a two rules", "2\n" , result_3);

        logger().info("END TEST: %s", __FUNCTION__);
    }

};
