/*
 * tests/scm/SuRealUTest.cxxtest
 *
 * Copyright (C) 2015 OpenCog Foundation
 * All Rights Reserved
 *
 * Author: William Ma <https://github.com/williampma>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/util/Config.h>
#include <opencog/util/Logger.h>
#include <opencog/guile/SchemeEval.h>
#include <opencog/guile/SchemeSmob.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/nlp/sureal/SuRealCache.h>

using namespace opencog;

class SuRealUTest :  public CxxTest::TestSuite
{
private:
    AtomSpace* _as;
    SchemeEval* _evaluator;

public:

    SuRealUTest(void)
    {
        try
        {
            config().load("opencog-test.conf");
        }
        catch (RuntimeException &e)
        {
            std::cerr << e.get_message() << std::endl;
        }

        // XXX FIXME This unit test fails, if multiple atomspaces
        // are used, instead of re-using the same atomspace (and
        // clearing it.) Something is majorly wrong with this, but
        // I can't figure it out...
        _as = new AtomSpace();

        _evaluator = new SchemeEval(_as);

        // need this for loading LG dictionary
        _evaluator->eval("(setlocale LC_CTYPE \"\")");
        _evaluator->clear_pending();

        _evaluator->eval("(use-modules (opencog))");
        _evaluator->eval("(use-modules (opencog nlp))");
        _evaluator->eval("(use-modules (opencog nlp lg-dict))");
        // MUST load spacetime types, before loading relex2logic,
        // else the libspacetime-types.so won't be found.
        // _evaluator->eval("(use-modules (opencog spacetime))");

        _evaluator->eval("(use-modules (opencog nlp relex2logic))");
        _evaluator->eval("(use-modules (opencog nlp sureal))");
        _evaluator->clear_pending();
    }

    ~SuRealUTest()
    {
        // erase the log file if no assertions failed
        if (!CxxTest::TestTracker::tracker().suiteFailed())
            std::remove(logger().get_filename().c_str());
    }

    void setUp(void);
    void tearDown(void);

    void test_basic(void);
    void test_complex(void);
    void test_disconnected(void);
    void test_multiconn(void);
    void test_negative(void);
    void test_good_enough(void);
    void test_tense(void);
};

void SuRealUTest::setUp(void)
{
    // XXX Do not create an atomspace here, see comments above.
    //_as = new AtomSpace();
}

void SuRealUTest::tearDown(void)
{
    // delete _evaluator;
    // _evaluator = NULL;

    // SuReal keeps a cache of atoms!  Aiiieee This needs fixing!!!
    nlp::SuRealCache::instance().reset();
    _as->clear();
    // XXX Deleting the _as causes weird malloc pool corruption!
    // delete _as;
}

void SuRealUTest::test_basic(void)
{
    logger().debug("BEGIN TEST: %s", __FUNCTION__);

    _evaluator->eval("(load  \"" PROJECT_SOURCE_DIR
                 "/tests/nlp/sureal/r2l-atomspace1.scm\")");

    // Sentences in r2l-atomspace1.scm
    // - He runs.

    // add the needed WordNode not yet in the testing atomspace
    _evaluator->eval_h(R"( (WordNode "she") )");
    _evaluator->eval_h(R"( (WordNode "eats") )");

    // test sureal with short sentence
    std::string rv = _evaluator->eval(R"( (define s-result (sureal (SetLink (EvaluationLink (PredicateNode "eats") (ListLink (ConceptNode "she")))))) )");
    bool eval_err = _evaluator->eval_error();
    if (eval_err) printf("got %s\n", rv.c_str());
    _evaluator->clear_pending();
    TSM_ASSERT("Failed to run sureal!", !eval_err);

    std::string result = _evaluator->eval(R"( (equal? s-result (list (list "she" "eats" "."))) )");
    TSM_ASSERT("Failed on basic short sentence sureal!", result == "#t\n");

    logger().debug("END TEST: %s", __FUNCTION__);
}

void SuRealUTest::test_complex(void)
{
    logger().debug("BEGIN TEST: %s", __FUNCTION__);

    _evaluator->eval("(load  \"" PROJECT_SOURCE_DIR
                 "/tests/nlp/sureal/r2l-atomspace3.scm\")");

    // Sentences in r2l-atomspace3.scm
    // - The yellow dog hates the cat.

    _evaluator->eval(R"( (WordNode "green") )");
    _evaluator->eval(R"( (WordNode "loves") )");

    // test more complex sentence
    _evaluator->eval(R"(
                     (define s-result
                      (sureal
                       (SetLink
                        (EvaluationLink
                         (PredicateNode "loves")
                         (ListLink (ConceptNode "cat") (ConceptNode "dog")))
                        (InheritanceLink (ConceptNode "cat") (ConceptNode "green")))))
                     )");
    std::string sent = _evaluator->eval(R"( s-result  )");
    printf("got %s\n", sent.c_str());
    std::string result = _evaluator->eval(R"( (equal? s-result (list (list "the" "green" "cat" "loves" "the" "dog" "."))) )");
    printf("equality?  %s\n", result.c_str());
    TSM_ASSERT("Failed to sureal complex sentence!", result == "#t\n");

    logger().debug("END TEST: %s", __FUNCTION__);
}

void SuRealUTest::test_disconnected(void)
{
    logger().debug("BEGIN TEST: %s", __FUNCTION__);

    _evaluator->eval("(load  \"" PROJECT_SOURCE_DIR
                 "/tests/nlp/sureal/r2l-atomspace4.scm\")");

    // Sentences in r2l-atomspace4.scm
    // - He walked slowly and she ran quickly.

    // test with disconnected components
    _evaluator->eval(R"(
                     (define s-result
                      (sureal
                       (SetLink
                        (EvaluationLink
                         (PredicateNode "walked")
                         (ListLink (ConceptNode "she")))
                        (EvaluationLink
                         (PredicateNode "ran")
                         (ListLink (ConceptNode "he"))))))
                     )");

    std::string result = _evaluator->eval("(equal? 2 (length s-result))");
    TSM_ASSERT("Failed to get the correct number of realization!", result == "#t\n");

    result = _evaluator->eval(R"(
                              (not
                               (equal?
                                #f
                                (member (list "he" "ran" "slowly" "and" "she" "walked" "quickly" ".") s-result)))
                              )");
    TSM_ASSERT("Failed to get the first expected result!", result == "#t\n");

    result = _evaluator->eval(R"(
                              (not
                               (equal?
                                #f
                                (member (list "she" "walked" "slowly" "and" "he" "ran" "quickly" ".") s-result)))
                              )");
    TSM_ASSERT("Failed to get the second expected result!", result == "#t\n");

    logger().debug("END TEST: %s", __FUNCTION__);
}

void SuRealUTest::test_multiconn(void)
{
    logger().debug("BEGIN TEST: %s", __FUNCTION__);

    _evaluator->eval("(load  \"" PROJECT_SOURCE_DIR
                 "/tests/nlp/sureal/r2l-atomspace5.scm\")");

    // Sentences in r2l-atomspace5.scm
    // - He ate a big round olive.

    _evaluator->eval(R"( (WordNode "apple") )");

    // test with disconnected components
    _evaluator->eval(R"(
                     (define s-result
                      (sureal
                       (SetLink
                        (EvaluationLink
                         (PredicateNode "ate")
                         (ListLink (ConceptNode "he") (ConceptNode "apple"))))))
                     )");
    std::string result = _evaluator->eval(R"(
                                          (equal? s-result
                                                  (list (list "he" "ate" "a" "big" "round" "apple" ".")))
                                          )");
    TSM_ASSERT("Failed to sureal on multi-connectors!", result == "#t\n");

    logger().debug("END TEST: %s", __FUNCTION__);
}

void SuRealUTest::test_negative(void)
{
    logger().debug("BEGIN TEST: %s", __FUNCTION__);

    _evaluator->eval(R"( (WordNode "he") )");
    _evaluator->eval(R"( (WordNode "ate") )");
    _evaluator->eval(R"( (WordNode "apples") )");

    // test with disconnected components
    _evaluator->eval(R"(
                     (define s-result
                      (sureal
                       (SetLink
                        (EvaluationLink
                         (PredicateNode "ate")
                         (ListLink (ConceptNode "he") (ConceptNode "apples"))))))
                     )");
    std::string result = _evaluator->eval(R"( (null? s-result) )");
    TSM_ASSERT("Failed to have sureal return '() on bad matches!", result == "#t\n");

    logger().debug("END TEST: %s", __FUNCTION__);
}

void SuRealUTest::test_good_enough(void)
{
    logger().debug("BEGIN TEST: %s", __FUNCTION__);

    _evaluator->eval("(load  \"" PROJECT_SOURCE_DIR
                 "/tests/nlp/sureal/r2l-atomspace1.scm\")");
    _evaluator->eval("(load  \"" PROJECT_SOURCE_DIR
                 "/tests/nlp/sureal/r2l-atomspace6.scm\")");

    // Sentences in r2l-atomspace1.scm and r2l-atomspace6.scm
    // - He runs.
    // - She eats quickly.

    // add the needed WordNode not yet in the testing atomspace
    _evaluator->eval(R"( (WordNode "it") )");
    _evaluator->eval(R"( (WordNode "jumps") )");

    _evaluator->eval(R"( (define s-result (sureal (SetLink (EvaluationLink (PredicateNode "jumps") (ListLink (ConceptNode "it")))))) )");
    bool eval_err = _evaluator->eval_error();
    _evaluator->clear_pending();
    TSM_ASSERT("Failed to run sureal!", !eval_err);

    std::string result = _evaluator->eval(R"( (equal? s-result (list (list "it" "jumps" "."))) )");
    TSM_ASSERT("Failed to return the best/good enough result!", result == "#t\n");

    logger().debug("END TEST: %s", __FUNCTION__);
}

void SuRealUTest::test_tense(void)
{
    logger().debug("BEGIN TEST: %s", __FUNCTION__);

    _evaluator->eval("(load  \"" PROJECT_SOURCE_DIR
                 "/tests/nlp/sureal/r2l-atomspace7.scm\")");

    // Sentences in r2l-atomspace7.scm
    // - "John drinks and she spoke."
    // - "He ate the cakes."

    _evaluator->eval(R"( (define s-result (sureal (SetLink (EvaluationLink (PredicateNode "eat") (ListLink (ConceptNode "he")))
                            (InheritanceLink (PredicateNode "eat") (DefinedLinguisticConceptNode "past"))
                            (EvaluationLink (PredicateNode "drink") (ListLink (ConceptNode "she")))
                            (InheritanceLink (PredicateNode "drink") (DefinedLinguisticConceptNode "present"))))))) )");
    bool eval_err = _evaluator->eval_error();
    _evaluator->clear_pending();
    TSM_ASSERT("Failed to run sureal!", !eval_err);

    std::string result = _evaluator->eval(R"( (equal? s-result (list (list "she" "drinks" "and" "he" "ate" "."))) )");
    TSM_ASSERT("Failed to return the correct result on tense!", result == "#t\n");

    logger().debug("END TEST: %s", __FUNCTION__);
}
