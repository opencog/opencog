/*
 * tests/scm/SuRealUTest.cxxtest
 *
 * Copyright (C) 2015 OpenCog Foundation
 * All Rights Reserved
 *
 * Author: William Ma <https://github.com/williampma>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/guile/SchemeEval.h>
#include <opencog/guile/SchemeSmob.h>
#include <opencog/server/CogServer.h>
#include <opencog/util/Config.h>
#include <opencog/util/Logger.h>

using namespace opencog;

class SuRealUTest :  public CxxTest::TestSuite
{
private:
    SchemeEval* _evaluator;

public:

    SuRealUTest(void)
    {
        try
        {
            config().load("opencog-test.conf");
        }
        catch (RuntimeException &e)
        {
            std::cerr << e.getMessage() << std::endl;
        }
        logger().setFilename(config()["LOG_FILE"]);
        logger().setLevel(Logger::getLevelFromString(config()["LOG_LEVEL"]));
        logger().setPrintToStdoutFlag(config().get_bool("LOG_TO_STDOUT"));
    }

    ~SuRealUTest()
    {
        // erase the log file if no assertions failed
        if (!CxxTest::TestTracker::tracker().suiteFailed())
            std::remove(logger().getFilename().c_str());
    }

    void setUp(void);
    void tearDown(void);

    void test_basic(void);
    void test_complex(void);
    void test_disconnected(void);
    void test_multiconn(void);
    void test_negative(void);
};

void SuRealUTest::setUp(void)
{
    server(CogServer::createInstance);
    cogserver().getAtomSpace().clear();

    _evaluator = new SchemeEval(&cogserver().getAtomSpace());

    // need this for loading LG dictionary
    _evaluator->eval("(setlocale LC_CTYPE \"\")");
    _evaluator->clear_pending();

    // Load the required data
    config().set("MODULES",
                 "opencog/nlp/types/libnlp-types.so,"
                 "opencog/modules/libLGDictModule.so,"
                 "opencog/modules/libSuRealModule.so");

    cogserver().loadModules();

    config().set("SCM_PRELOAD",
                 "opencog/scm/core_types.scm,"
                 "opencog/scm/utilities.scm,"
                 "opencog/nlp/types/nlp_types.scm,"
                 "opencog/nlp/scm/nlp-utils.scm,"
                 "opencog/nlp/relex2logic/r2l-utilities.scm,"
                 "opencog/nlp/sureal/surface-realization.scm");
    cogserver().loadSCMModules();
}

void SuRealUTest::tearDown(void)
{
    delete _evaluator;
    _evaluator = NULL;
}

void SuRealUTest::test_basic(void)
{
    logger().debug("BEGIN TEST: %s", __FUNCTION__);

    config().set("SCM_PRELOAD",
                 "tests/nlp/sureal/r2l-atomspace1.scm");
    cogserver().loadSCMModules();

    // Sentences in r2l-atomspace1.scm
    // - He runs.

    // add the needed WordNode not yet in the testing atomspace
    _evaluator->eval(R"( (WordNode "she") )");
    _evaluator->eval(R"( (WordNode "feeds") )");

    // test sureal with short sentence
    _evaluator->eval(R"( (define s-result (sureal (SetLink (EvaluationLink (PredicateNode "feeds") (ListLink (ConceptNode "she")))))) )");
    bool eval_err = _evaluator->eval_error();
    _evaluator->clear_pending();
    TSM_ASSERT("Failed to run sureal!", !eval_err);

    std::string result = _evaluator->eval(R"( (equal? s-result (list (list "she" "feeds" "."))) )");
    TSM_ASSERT("Failed on basic short sentence sureal!", result == "#t\n");

    logger().debug("END TEST: %s", __FUNCTION__);
}

void SuRealUTest::test_complex(void)
{
    logger().debug("BEGIN TEST: %s", __FUNCTION__);

    config().set("SCM_PRELOAD",
                 "tests/nlp/sureal/r2l-atomspace3.scm");
    cogserver().loadSCMModules();

    // Sentences in r2l-atomspace3.scm
    // - The yellow dog hates the cat.

    _evaluator->eval(R"( (WordNode "green") )");
    _evaluator->eval(R"( (WordNode "loves") )");

    // test more complex sentence
    _evaluator->eval(R"(
                     (define s-result
                      (sureal
                       (SetLink
                        (EvaluationLink
                         (PredicateNode "loves")
                         (ListLink (ConceptNode "cat") (ConceptNode "dog")))
                        (InheritanceLink (ConceptNode "cat") (ConceptNode "green")))))
                     )");
    std::string result = _evaluator->eval(R"( (equal? s-result (list (list "the" "green" "cat" "loves" "the" "dog" "."))) )");
    TSM_ASSERT("Failed to sureal complex sentence!", result == "#t\n");

    logger().debug("END TEST: %s", __FUNCTION__);
}

void SuRealUTest::test_disconnected(void)
{
    logger().debug("BEGIN TEST: %s", __FUNCTION__);

    config().set("SCM_PRELOAD",
                 "tests/nlp/sureal/r2l-atomspace4.scm");
    cogserver().loadSCMModules();

    // Sentences in r2l-atomspace4.scm
    // - He walked slowly and she ran quickly.

    // test with disconnected components
    _evaluator->eval(R"(
                     (define s-result
                      (sureal
                       (SetLink
                        (EvaluationLink
                         (PredicateNode "walked")
                         (ListLink (ConceptNode "she")))
                        (EvaluationLink
                         (PredicateNode "ran")
                         (ListLink (ConceptNode "he"))))))
                     )");

    std::string result = _evaluator->eval("(equal? 2 (length s-result))");
    TSM_ASSERT("Failed to get the correct number of realization!", result == "#t\n");

    result = _evaluator->eval(R"(
                              (not
                               (equal?
                                #f
                                (member (list "he" "ran" "slowly" "and" "she" "walked" "quickly" ".") s-result)))
                              )");
    TSM_ASSERT("Failed to get the first expected result!", result == "#t\n");

    result = _evaluator->eval(R"(
                              (not
                               (equal?
                                #f
                                (member (list "she" "walked" "slowly" "and" "he" "ran" "quickly" ".") s-result)))
                              )");
    TSM_ASSERT("Failed to get the second expected result!", result == "#t\n");

    logger().debug("END TEST: %s", __FUNCTION__);
}

void SuRealUTest::test_multiconn(void)
{
    logger().debug("BEGIN TEST: %s", __FUNCTION__);

    config().set("SCM_PRELOAD",
                 "tests/nlp/sureal/r2l-atomspace5.scm");
    cogserver().loadSCMModules();

    // Sentences in r2l-atomspace5.scm
    // - He ate a big round olive.

    _evaluator->eval(R"( (WordNode "apple") )");

    // test with disconnected components
    _evaluator->eval(R"(
                     (define s-result
                      (sureal
                       (SetLink
                        (EvaluationLink
                         (PredicateNode "ate")
                         (ListLink (ConceptNode "he") (ConceptNode "apple"))))))
                     )");
    std::string result = _evaluator->eval(R"(
                                          (equal? s-result
                                                  (list (list "he" "ate" "a" "big" "round" "apple" ".")))
                                          )");
    TSM_ASSERT("Failed to sureal on multi-connectors!", result == "#t\n");

    logger().debug("END TEST: %s", __FUNCTION__);
}

void SuRealUTest::test_negative(void)
{
    logger().debug("BEGIN TEST: %s", __FUNCTION__);

    _evaluator->eval(R"( (WordNode "he") )");
    _evaluator->eval(R"( (WordNode "ate") )");
    _evaluator->eval(R"( (WordNode "apples") )");

    // test with disconnected components
    _evaluator->eval(R"(
                     (define s-result
                      (sureal
                       (SetLink
                        (EvaluationLink
                         (PredicateNode "ate")
                         (ListLink (ConceptNode "he") (ConceptNode "apples"))))))
                     )");
    std::string result = _evaluator->eval(R"( (null? s-result) )");
    TSM_ASSERT("Failed to have sureal return '() on bad matches!", result == "#t\n");

    logger().debug("END TEST: %s", __FUNCTION__);
}
