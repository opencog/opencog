/*
 * tests/scm/MicroplanningUTest.cxxtest
 *
 * Copyright (C) 2015 OpenCog Foundation
 * All Rights Reserved
 *
 * Author: William Ma <https://github.com/williampma>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/util/Config.h>
#include <opencog/util/Logger.h>
#include <opencog/guile/SchemeEval.h>
#include <opencog/guile/SchemeSmob.h>
#include <opencog/atomspace/AtomSpace.h>

using namespace opencog;

class MicroplanningUTest :  public CxxTest::TestSuite
{
private:
    AtomSpace* _as;
    SchemeEval* _evaluator;

public:

    MicroplanningUTest(void)
    {
        try
        {
            config().load("opencog-test.conf");
        }
        catch (RuntimeException &e)
        {
            std::cerr << e.get_message() << std::endl;
        }
        logger().set_timestamp_flag(false);
        _as = new AtomSpace();
        _evaluator = new SchemeEval(_as);

        // need this for loading LG dictionary
        _evaluator->eval("(setlocale LC_CTYPE \"\")");
        _evaluator->clear_pending();


        std::string rv;
        rv = _evaluator->eval("(use-modules (opencog))");
        printf("setup opencog=%s", rv.c_str());
        rv = _evaluator->eval("(use-modules (opencog nlp))");
        printf("setup nlp=%s", rv.c_str());
        rv = _evaluator->eval("(use-modules (opencog nlp lg-dict))");
        printf("setup lg-dict=%s", rv.c_str());
        rv = _evaluator->eval("(use-modules (opencog spacetime))");
        printf("setup spacetime=%s", rv.c_str());
        rv = _evaluator->eval("(use-modules (opencog nlp relex2logic))");
        printf("setup r2l=%s", rv.c_str());
        rv = _evaluator->eval("(use-modules (opencog nlp sureal))");
        printf("setup sureal=%s", rv.c_str());
        rv = _evaluator->eval("(use-modules (opencog nlp microplanning))");
        printf("setup micropanning=%s", rv.c_str());
    }

    ~MicroplanningUTest()
    {
        // erase the log file if no assertions failed
        if (!CxxTest::TestTracker::tracker().suiteFailed())
            std::remove(logger().get_filename().c_str());
    }

    void setUp(void);
    void tearDown(void);

    void test_declarative(void);
    void test_interrogative(void);
};

void MicroplanningUTest::setUp(void)
{
    _evaluator->eval("(load  \"" PROJECT_SOURCE_DIR
                 "/tests/nlp/microplanning/r2l-atomspace.scm\")");
    _evaluator->eval("(load  \"" PROJECT_SOURCE_DIR
                 "/tests/nlp/microplanning/test-atomspace.scm\")");
    _evaluator->eval("(load  \"" PROJECT_SOURCE_DIR
                 "/tests/nlp/microplanning/test-results.scm\")");
}

void MicroplanningUTest::tearDown(void)
{
    _as->clear();
}

void MicroplanningUTest::test_declarative(void)
{
    logger().debug("BEGIN TEST: %s", __FUNCTION__);

    std::string mdef = _evaluator->eval(
        "(define m-result (microplanning test-declarative-sal \"declarative\" *default_chunks_option* #f))");
    printf("test_declarative default m-result=%s\n", mdef.c_str());
    bool eval_err = _evaluator->eval_error();
    _evaluator->clear_pending();
    TSM_ASSERT("Failed to run microplanning without anaphora!", !eval_err);

    std::string got = _evaluator->eval("m-result");
    std::string exp = _evaluator->eval("(declarative-without-anaphora)");
    printf("got=%s expected=%s\n", got.c_str(), exp.c_str());

    std::string result = _evaluator->eval(
        "(equal? m-result (declarative-without-anaphora))");
    printf("equality result=%s\n", result.c_str());
    TSM_ASSERT("Failed to generate the correct result without anaphora!",
        result == "#t\n");

    std::string mres = _evaluator->eval(
        "(define m-result (microplanning test-declarative-sal \"declarative\"))");
    printf("test_declarative m-result=%s\n", mres.c_str());
    eval_err = _evaluator->eval_error();
    _evaluator->clear_pending();
    TSM_ASSERT("Failed to run microplanning with anaphora!", !eval_err);

    result = _evaluator->eval("(equal? m-result (declarative-with-anaphora))");
    TSM_ASSERT("Failed to generate the correct result with anaphora!", result == "#t\n");

    logger().debug("END TEST: %s", __FUNCTION__);
}

void MicroplanningUTest::test_interrogative(void)
{
    logger().debug("BEGIN TEST: %s", __FUNCTION__);

    _evaluator->eval("(define m-result (microplanning test-interrogative-sal \"interrogative\" *default_chunks_option* #f))");
    bool eval_err = _evaluator->eval_error();
    _evaluator->clear_pending();
    TSM_ASSERT("Failed to run microplanning on interrogative!", !eval_err);

    std::string result = _evaluator->eval("(equal? m-result (interrogative-v1))");
    TSM_ASSERT("Failed to generate the correct result on interrogative!", result == "#t\n");

    _evaluator->eval("(define m-result (microplanning test-interrogative-sal \"interrogative\"))");
    eval_err = _evaluator->eval_error();
    _evaluator->clear_pending();
    TSM_ASSERT("Failed to run microplanning with lexical noun alternative!", !eval_err);

    result = _evaluator->eval("(or (equal? m-result (interrogative-v1)) (equal? m-result (interrogative-v2)))");
    TSM_ASSERT("Failed to generate the correct result with lexical noun alternative!", result == "#t\n");

    logger().debug("END TEST: %s", __FUNCTION__);
}
