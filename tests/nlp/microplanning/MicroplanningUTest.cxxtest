/*
 * tests/scm/MicroplanningUTest.cxxtest
 *
 * Copyright (C) 2015 OpenCog Foundation
 * All Rights Reserved
 *
 * Author: William Ma <https://github.com/williampma>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/util/Config.h>
#include <opencog/util/Logger.h>
#include <opencog/guile/SchemeEval.h>
#include <opencog/guile/SchemeSmob.h>
#include <opencog/cogserver/server/CogServer.h>

using namespace opencog;

class MicroplanningUTest :  public CxxTest::TestSuite
{
private:
    SchemeEval* _evaluator;

public:

    MicroplanningUTest(void)
    {
        try
        {
            config().load("opencog-test.conf");
        }
        catch (RuntimeException &e)
        {
            std::cerr << e.get_message() << std::endl;
        }
        logger().set_timestamp_flag(false);
        logger().set_filename(config()["LOG_FILE"]);
        logger().set_level(Logger::get_level_from_string(config()["LOG_LEVEL"]));
        logger().set_print_to_stdout_flag(config().get_bool("LOG_TO_STDOUT"));
    }

    ~MicroplanningUTest()
    {
        // erase the log file if no assertions failed
        if (!CxxTest::TestTracker::tracker().suiteFailed())
            std::remove(logger().get_filename().c_str());
    }

    void setUp(void);
    void tearDown(void);

    void test_declarative(void);
    void test_interrogative(void);
};

void MicroplanningUTest::setUp(void)
{
    server(CogServer::createInstance);
    _evaluator = new SchemeEval(&cogserver().getAtomSpace());

    // need this for loading LG dictionary
    _evaluator->eval("(setlocale LC_CTYPE \"\")");
    _evaluator->clear_pending();

    _evaluator->eval("(use-modules (opencog))");

    // Bunch of fucked up library path because circle-jenkins-fucking-ci
    // is too brain-de-fucking-dead to be able to run unit tests
    // correctly.  Its a piece of bro-fucking-ken technology.
    _evaluator->eval("(add-to-load-path \"" PROJECT_BINARY_DIR "/opencog/\")");
    _evaluator->eval("(add-to-load-path \"" PROJECT_BINARY_DIR "/opencog/scm/\")");
    _evaluator->eval("(setenv \"LTDL_LIBRARY_PATH\" "
         "\"/usr/local/lib/opencog:/usr/local/lib/opencog/modules:"
         PROJECT_BINARY_DIR "/opencog/spacetime:"
         PROJECT_BINARY_DIR "/opencog/attention:"
         PROJECT_BINARY_DIR "/opencog/embodiment:"
         PROJECT_BINARY_DIR "/opencog/nlp/sureal:"
         PROJECT_BINARY_DIR "/opencog/nlp/lg-dict"
         "\")");

    _evaluator->eval("(use-modules (opencog atom-types))");
    _evaluator->eval("(use-modules (opencog nlp))");
    _evaluator->eval("(use-modules (opencog nlp lg-dict))");
    _evaluator->eval("(use-modules (opencog nlp microplanning))");
    _evaluator->eval("(use-modules (opencog nlp relex2logic))");
    _evaluator->eval("(use-modules (opencog nlp sureal))");

    config().set("SCM_PRELOAD",
                 "tests/nlp/microplanning/r2l-atomspace.scm,"
                 "tests/nlp/microplanning/test-atomspace.scm,"
                 "tests/nlp/microplanning/test-results.scm");

    cogserver().loadSCMModules();
}

void MicroplanningUTest::tearDown(void)
{
    delete _evaluator;
    _evaluator = NULL;
}

void MicroplanningUTest::test_declarative(void)
{
    logger().debug("BEGIN TEST: %s", __FUNCTION__);

    std::string mdef = _evaluator->eval(
        "(define m-result (microplanning test-declarative-sal \"declarative\" *default_chunks_option* #f))");
    printf("test_declarative default m-result=%s\n", mdef.c_str());
    bool eval_err = _evaluator->eval_error();
    _evaluator->clear_pending();
    TSM_ASSERT("Failed to run microplanning without anaphora!", !eval_err);

    std::string got = _evaluator->eval("m-result");
    std::string exp = _evaluator->eval("(declarative-without-anaphora)");
    printf("got=%s expected=%s\n", got.c_str(), exp.c_str());

    std::string result = _evaluator->eval(
        "(equal? m-result (declarative-without-anaphora))");
    printf("equality result=%s\n", result.c_str());
    TSM_ASSERT("Failed to generate the correct result without anaphora!",
        result == "#t\n");

    std::string mres = _evaluator->eval(
        "(define m-result (microplanning test-declarative-sal \"declarative\"))");
    printf("test_declarative m-result=%s\n", mres.c_str());
    eval_err = _evaluator->eval_error();
    _evaluator->clear_pending();
    TSM_ASSERT("Failed to run microplanning with anaphora!", !eval_err);

    result = _evaluator->eval("(equal? m-result (declarative-with-anaphora))");
    TSM_ASSERT("Failed to generate the correct result with anaphora!", result == "#t\n");

    logger().debug("END TEST: %s", __FUNCTION__);
}

void MicroplanningUTest::test_interrogative(void)
{
    logger().debug("BEGIN TEST: %s", __FUNCTION__);

    _evaluator->eval("(define m-result (microplanning test-interrogative-sal \"interrogative\" *default_chunks_option* #f))");
    bool eval_err = _evaluator->eval_error();
    _evaluator->clear_pending();
    TSM_ASSERT("Failed to run microplanning on interrogative!", !eval_err);

    std::string result = _evaluator->eval("(equal? m-result (interrogative-v1))");
    TSM_ASSERT("Failed to generate the correct result on interrogative!", result == "#t\n");

    _evaluator->eval("(define m-result (microplanning test-interrogative-sal \"interrogative\"))");
    eval_err = _evaluator->eval_error();
    _evaluator->clear_pending();
    TSM_ASSERT("Failed to run microplanning with lexical noun alternative!", !eval_err);

    result = _evaluator->eval("(or (equal? m-result (interrogative-v1)) (equal? m-result (interrogative-v2)))");
    TSM_ASSERT("Failed to generate the correct result with lexical noun alternative!", result == "#t\n");

    logger().debug("END TEST: %s", __FUNCTION__);
}
