/** metapopulationUTest.cxxtest ---
 *
 * Copyright (C) 2011 OpenCog Foundation
 *
 * Author: Nil Geisweiller
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <cxxtest/TestSuite.h>

#include <opencog/util/mt19937ar.h>

#include <opencog/comboreduct/combo/vertex.h>
#include <opencog/comboreduct/reduct/reduct.h>
#include <opencog/learning/moses/metapopulation/metapopulation.h>
#include <opencog/learning/moses/scoring/scoring.h>
#include <opencog/learning/moses/optimization/optimization.h>

using namespace opencog;
using namespace combo;
using namespace reduct;
using namespace moses;

// For testing only
struct dummy_cscore : public cscore_base
{
    composite_score operator()(const combo_tree& tr) const {
        return composite_score(0,0,0);
    }
};

// For testing only
struct dummy_bscore : public bscore_base
{
    penalized_bscore operator()(const combo_tree& tr) const
    {
        penalized_bscore pbs;
        pbs.second = 0;
        return pbs;
    }
    behavioral_score best_possible_bscore() const
    {
        return {0.0};
    }
};

struct dummy_optimization : public optimizer_base
{
    unsigned operator()(instance_set<composite_score>& deme,
                        const iscorer_base& iscorer, unsigned max_evals,
                        time_t max_time)
    { return 0; }
};


class metapopulationUTest : public CxxTest::TestSuite
{
    dummy_cscore _dcsc;
    dummy_bscore _dbsc;
    vertex_set ignore_ops;
    logical_reduction lred;
    dummy_optimization _do;
    metapopulation _metapopulation;

public:
    metapopulationUTest()
        : _dcsc(), _dbsc(), ignore_ops(),
          lred(ignore_ops),
          _do(),
          _metapopulation(combo_tree(), type_tree(),
                          lred.operator()(2), _dcsc, _dbsc,
                          _do)
    {
        logger().setPrintToStdoutFlag(true);
        logger().setLevel(Logger::FINE);
        randGen().seed(1);
    }

    // test metapopulation::remove_dominated
    void test_remove_dominated()
    {
        // a set of pbscored_combo_tree, the combo_tree themselves are
        // dummy (1, 2, ...) as only their bscore matter
        pbscored_combo_tree_set bcs;
        // 1
        penalized_bscore pbs1;
        pbs1.first = {-1, 0, -1, 0};
        pbs1.second = 0;
        composite_score csc1(-2, -1, pbs1.second);
        composite_penalized_bscore cbs1(pbs1, csc1);
        combo_tree tr1(1.0);
        cpbscore_demeID cbs1_demeID(cbs1, demeID_t());
        pbscored_combo_tree bct1(tr1, cbs1_demeID);
        bcs.insert(bct1);
        // 2
        penalized_bscore pbs2;
        pbs2.first = {-1, -1, -1, 0};
        pbs1.second = 0;
        composite_score csc2(-3, -1, pbs2.second);
        composite_penalized_bscore cbs2(pbs2, csc2);
        combo_tree tr2(2.0);
        cpbscore_demeID cbs2_demeID(cbs2, demeID_t());
        pbscored_combo_tree bct2(tr2, cbs2_demeID);
        bcs.insert(bct2);
        // 3
        penalized_bscore pbs3;
        pbs3.first = {-1, 0, -1, 0};
        pbs3.second = 0;
        composite_score csc3(-2, -1, pbs3.second);
        composite_penalized_bscore cbs3(pbs3, csc3);
        combo_tree tr3(3.0);
        cpbscore_demeID cbs3_demeID(cbs3, demeID_t());
        pbscored_combo_tree bct3(tr3, cbs3_demeID);
        bcs.insert(bct3);
        // 4
        penalized_bscore pbs4;
        pbs4.first = {0, -1, 0, -1};
        pbs4.second = 0;
        composite_score csc4(-2, -1, pbs4.second);
        composite_penalized_bscore cbs4(pbs4, csc4);
        combo_tree tr4(4.0);
        cpbscore_demeID cbs4_demeID(cbs4, demeID_t());
        pbscored_combo_tree bct4(tr4, cbs4_demeID);
        bcs.insert(bct4);
        // 5
        penalized_bscore pbs5;
        pbs5.first = {0, -1, -1, -1};
        pbs5.second = 0;
        composite_score csc5(-3, -1, pbs5.second);
        composite_penalized_bscore cbs5(pbs5, csc5);
        combo_tree tr5(5.0);
        cpbscore_demeID cbs5_demeID(cbs5, demeID_t());
        pbscored_combo_tree bct5(tr5, cbs5_demeID);
        bcs.insert(bct5);

        _metapopulation.remove_dominated(bcs);

        // 2 is dominated
        TS_ASSERT_EQUALS(bcs.size(), 3);             // 2 are removed
        TS_ASSERT_EQUALS(bcs.find(bct2), bcs.end()); // bct2
        TS_ASSERT_EQUALS(bcs.find(bct5), bcs.end()); // and bct5
    }

    // test metapopulation::merge_nondominated_rec
    void test_merge_nondominated_rec()
    {
        // a set of pbscored_combo_tree, the combo_tree themselves are
        // dummy (1, 2, ...) as only their bscore matter
        pbscored_combo_tree_set bcs1, bcs2;
        // 4
        penalized_bscore pbs4;
        pbs4.first = {0, -1, 0, -1};
        pbs4.second = 0;
        composite_score csc4(-2, -1, pbs4.second);
        composite_penalized_bscore cbs4(pbs4, csc4);
        cpbscore_demeID cbs4_demeID(cbs4, demeID_t());
        combo_tree tr4(4.0);
        pbscored_combo_tree bct4(tr4, cbs4_demeID);
        bcs1.insert(bct4);
        // 5
        penalized_bscore pbs5;
        pbs5.first = {0, -1, -1, -1};
        pbs5.second = 0;
        composite_score csc5(-3, -1, pbs5.second);
        composite_penalized_bscore cbs5(pbs5, csc5);
        cpbscore_demeID cbs5_demeID(cbs5, demeID_t());
        combo_tree tr5(5.0);
        pbscored_combo_tree bct5(tr5, cbs5_demeID);
        bcs2.insert(bct5);
        // 2
        penalized_bscore pbs2;
        pbs2.first = {-1, -1, -1, 0};
        pbs2.second = 0;
        composite_score csc2(-3, -1, pbs2.second);
        composite_penalized_bscore cbs2(pbs2, csc2);
        cpbscore_demeID cbs2_demeID(cbs2, demeID_t());
        combo_tree tr2(2.0);
        pbscored_combo_tree bct2(tr2, cbs2_demeID);
        bcs2.insert(bct2);

        metapopulation::pbscored_combo_tree_set_pair res_p =
            _metapopulation.get_nondominated_disjoint(bcs1, bcs2);
        pbscored_combo_tree_set res = set_union(res_p.first, res_p.second);
        // 2 is dominated
        TS_ASSERT_EQUALS(res.size(), 2);             // 1 is removed
        TS_ASSERT_EQUALS(res.find(bct5), res.end()); // bct5
    }

};
