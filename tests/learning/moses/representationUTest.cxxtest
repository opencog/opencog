/*
 * tests/learning/moses/representationUTest.cxxtest
 *
 * Copyright (C) 2010 Novamente LLC
 * All Rights Reserved
 *
 * Written by Nil Geisweiller
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <cxxtest/TestSuite.h>
#include <sstream>
#include <string>

#include <opencog/learning/moses/representation/representation.h>
#include <opencog/comboreduct/reduct/reduct.h>
#include <opencog/util/mt19937ar.h>
#include <opencog/util/Logger.h>

using namespace opencog;
using namespace moses;
using namespace reduct;
using namespace combo;
using namespace std;

class representationUTest : public CxxTest::TestSuite {
private:
    combo_tree totree(string str) {
        stringstream ss(str);
        combo_tree tr;
        ss >> tr;
        return tr;
    }

    MT19937RandGen rng;
public:
    representationUTest() : rng(1)
    {
        logger().setPrintToStdoutFlag(true);
        logger().setLevel(Logger::DEBUG);
    }

    // these tests are just here to check that the representation
    // building does not crash, for now at least

    void test_contin_rep()
    {
        int reduct_effort = 2;
        string tr_str = "+(*(+(*(+(*(+(*($1 1.75) 1.875) $1) 0.75) 0.75) 1.375) 0.75) -1.25)";
        combo_tree tr = totree(tr_str);
        type_tree tt = infer_type_tree(tr);
        vertex_set ignore_ops{id::div, id::exp, id::log, id::sin};
        representation rep(contin_reduction(reduct_effort, ignore_ops),
                           contin_reduction(reduct_effort, ignore_ops),
                           tr, tt, ignore_ops,
                           NULL, NULL, false);

        TS_ASSERT_LESS_THAN(0, rep.fields().raw_size());

        rep.ostream_prototype(std::cout << "Prototype = ") << std::endl;

        std::stringstream ss;
        string expected_str("+(*(+(*(+(*(+(*(+(*($1 +([1.75] *([0] $1))) [1.875] *([0] $1)) $1 +([1] *([0] $1))) [0.75] *([0] $1)) +([0.75] *([0] $1))) [1.375] *([0] $1)) +([0.75] *([0] $1))) [0] *([0] $1)) [1]) [-1.25])");
        rep.ostream_prototype(ss);
        TS_ASSERT_EQUALS(ss.str(), expected_str);
    }

    void test_linear_rep()
    {
        int reduct_effort = 2;
        string tr_str = "+(*(+(*(+(*(+(*($1 1.75) 1.875) $1) 0.75) 0.75) 1.375) 0.75) -1.25)";
        combo_tree tr = totree(tr_str);
        type_tree tt = infer_type_tree(tr);
        vertex_set ignore_ops{id::div, id::exp, id::log, id::sin};
        representation rep(contin_reduction(reduct_effort, ignore_ops),
                           contin_reduction(reduct_effort, ignore_ops),
                           tr, tt, ignore_ops,
                           NULL, NULL, true);

        TS_ASSERT_LESS_THAN(0, rep.fields().raw_size());

        rep.ostream_prototype(std::cout << "Prototype = ") << std::endl;

        std::stringstream ss;
        string expected_str("+(*(+(*(+(*(+(*(+(*($1 [1.75]) [1.875]) $1) [0.75]) [0.75]) [1.375]) [0.75]) [0] *([0] $1)) [1]) [-1.25])");
        rep.ostream_prototype(ss);
        TS_ASSERT_EQUALS(ss.str(), expected_str);
    }

    void test_boolean_rep1()
    {
        string tr_str = "and";
        combo_tree tr = totree(tr_str);
        type_tree tt = gen_signature(id::boolean_type, 3);

        const vertex_set ignore_ops;
        logical_reduction r(ignore_ops);
        const rule& r2 = r.operator()(2);
        const rule& r3 = r.operator()(3);

        representation rep(r2, r3, tr, tt, vertex_set(),
                           nullptr, nullptr, false,
                           1.0 /* all permutation are generated, that
                                  way we avoid sampling */);

        TS_ASSERT_LESS_THAN(0, rep.fields().raw_size());

        rep.ostream_prototype(std::cout << "Prototype = ") << std::endl;

        string expected_str("or(and([nil $1 !$1] [nil $2 !$2] [nil $3 !$3] [nil or !or]($1 $2) [nil or !or](!$2 $3) [nil or !or](!$1 $2) [nil or !or]($2 $3) [nil or !or](!$1 $3) [nil or !or]($1 $3) or([nil $1 !$1] [nil $2 !$2] [nil $3 !$3] [nil and !and](!$1 $3) [nil and !and]($2 $3) [nil and !and](!$1 $2) [nil and !and]($1 $2) [nil and !and](!$2 $3) [nil and !and]($1 $3))) [nil $1 !$1] [nil $2 !$2] [nil $3 !$3] [nil and !and](!$1 $3) [nil and !and]($1 $2) [nil and !and](!$1 $2) [nil and !and](!$2 $3) [nil and !and]($1 $3) [nil and !and]($2 $3) and([nil $1 !$1] [nil $2 !$2] [nil $3 !$3] [nil or !or]($1 $2) [nil or !or]($2 $3) [nil or !or]($1 $3) [nil or !or](!$1 $2) [nil or !or](!$1 $3) [nil or !or](!$2 $3)))");

        std::stringstream ss;
        rep.ostream_prototype(ss);
        
        TS_ASSERT_EQUALS(ss.str(), expected_str);
    }

    void test_boolean_rep2()
    {
        string tr_str = "or(and(or($1 $2) or($1 $3) or($2 $3)) and($1 $3))";
        combo_tree tr = totree(tr_str);
        type_tree tt = infer_type_tree(tr);

        const vertex_set ignore_ops;
        logical_reduction r(ignore_ops);
        const rule& r2 = r.operator()(2);

        representation rep(r2, r2, tr, tt, vertex_set());

        TS_ASSERT_LESS_THAN(0, rep.fields().raw_size());
    }

    void test_boolean_rep3()
    {
        string tr_str = "or(and(!$1 !$2 !$3) and($1 $2) and($1 $3) and($2 $3))";
        combo_tree tr = totree(tr_str);
        type_tree tt = infer_type_tree(tr);

        const vertex_set ignore_ops;
        logical_reduction r(ignore_ops);
        const rule& r2 = r.operator()(2);

        representation rep(r2, r2, tr, tt, vertex_set());

        TS_ASSERT_LESS_THAN(0, rep.fields().raw_size());
    }

    void test_boolean_rep4()
    {
        string tr_str = "or(and(or(and(or(!$1 $3) !$2) $3) or(and(!$2 $3) !$1) or($2 !$3)) and(or($1 $2) $3) and(or($1 $3) $2))";
        combo_tree tr = totree(tr_str);
        type_tree tt = infer_type_tree(tr);

        const vertex_set ignore_ops;
        logical_reduction r(ignore_ops);
        const rule& r2 = r.operator()(2);

        representation rep(r2, r2, tr, tt, vertex_set());

        TS_ASSERT_LESS_THAN(0, rep.fields().raw_size());
    }

    void test_boolean_rep5()
    {
        string tr_str = "or(and(!$2 !$3 or($3 !$2) or(!$1 $3)) and($3 $2) and($3 $1) and($1 $2 or($3 $1)))";
        combo_tree tr = totree(tr_str);
        type_tree tt = infer_type_tree(tr);

        const vertex_set ignore_ops;
        logical_reduction r(ignore_ops);
        const rule& r2 = r.operator()(2);
        const rule& r0 = r.operator()(0);

        representation rep(r2, r0, tr, tt, vertex_set());

        TS_ASSERT_LESS_THAN(0, rep.fields().raw_size());
    }
};
