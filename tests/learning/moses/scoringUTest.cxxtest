/** scoringUTest.cxxtest ---
 *
 * Copyright (C) 2011 OpenCog Foundation
 *
 * Author: Nil Geisweiller
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <cxxtest/TestSuite.h>

#include <opencog/learning/moses/scoring/scoring.h>
#include <opencog/comboreduct/table/table.h>
#include <opencog/comboreduct/table/table_io.h>

using namespace opencog;
using namespace combo;
using namespace moses;

const string mosesUTest_dir=string(PROJECT_SOURCE_DIR) + "/tests/learning/moses/";
const string target_feature = "target";

class scoringUTest : public CxxTest::TestSuite
{
public:
    scoringUTest() {
        logger().setPrintToStdoutFlag(true);
        logger().setLevel(Logger::FINE);
        randGen().seed(1);
    }
    
    void test_precision_bscore_best_possible_bscore() {
        Table tt = loadTable(mosesUTest_dir + "precision.csv", target_feature);
        CTable ct = tt.compressed();

        float penalty = 1.0, nim_act = 0.5, max_act = 1.0;
        precision_bscore pbsc(ct, penalty, nim_act, max_act);

        behavioral_score bsc = pbsc.best_possible_bscore();
        score_t precision = 5.f/7.f, act_penalty = 0.f;
        TS_ASSERT_EQUALS(bsc.front(), precision + act_penalty);
    }

    // disabled till we fix best_possible_bscore
    // void test_precision2_bscore_best_possible_bscore() {
    //     CTable ct = loadCTable(mosesUTest_dir + "precision2.ctable");

    //     cout << "ct =" << ct;

    //     float penalty = 1.0, nim_act = 0.1, max_act = 1.0;
    //     precision_bscore pbsc(ct, penalty, nim_act, max_act, false);

    //     behavioral_score bsc = pbsc.best_possible_bscore();
    //     score_t precision = 5.f/7.f, act_penalty = 0.f;
    //     TS_ASSERT_EQUALS(bsc.front(), precision + act_penalty);
    // }
};
