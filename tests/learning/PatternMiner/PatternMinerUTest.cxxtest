/*
 * opencog/tests/learning/PatternMiner/PatternMiner.cxxtest
 *
 * Copyright (C) 2016 by OpenCog Foundation
 * All Rights Reserved
 *
 * Written by Shujing Ke, Nil Geisweiller
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <cxxtest/TestSuite.h>

#include <opencog/util/Config.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/learning/PatternMiner/PatternMiner.h>
#include <opencog/guile/SchemeEval.h>

#include <vector>

using namespace opencog;
using namespace opencog::PatternMining;
using namespace std;

#define al _as.add_link
#define an _as.add_node

class PatternMinerUTest : public CxxTest::TestSuite
{
private:
	AtomSpace _as;
	SchemeEval _scm;

	string top3gramPatternStr;

public:
	PatternMinerUTest();
	~PatternMinerUTest();

	void setUp();
	void tearDown();

	// Tests auxiliary methods
	void test__UnifyPatternOrder();
	void test_partitionBySharedVariables();
	void test_containsLoopVariable();

	// Simple pattern miner tests
	void test_PatternMiner_AB_AC();
	// void test_PatternMiner_AB_ABC(); // will probably not be supported
	// void test_PatternMiner_ABCD(); // will probably not be supported

	// Complex pattern miner tests
	// void test_PatternMiner_InferenceControl(); // will probably not be supported
	// void test_PatternMiner_SodaDrinker();
};

PatternMinerUTest::PatternMinerUTest() : _scm(&_as)
{
	logger().set_level(Logger::DEBUG);
	logger().set_timestamp_flag(false);
	logger().set_print_to_stdout_flag(true);
}
PatternMinerUTest::~PatternMinerUTest() {}

void PatternMinerUTest::setUp()
{
	// Configure Pattern Miner parameters
	config().set("Pattern_Max_Gram", "4");
	config().set("Enable_Frequent_Pattern", "true");
	config().set("Enable_Interesting_Pattern", "true");
	config().set("Enable_surprisingness", "true");
	config().set("enable_filter_leaves_should_not_be_vars", "true");
	config().set("enable_filter_links_should_connect_by_vars", "true");
	config().set("enable_filter_not_inheritant_from_same_var", "true");
	config().set("enable_filter_not_same_var_from_same_predicate", "true");
	config().set("enable_filter_not_all_first_outgoing_const", "true");
	config().set("enable_filter_first_outgoing_evallink_should_be_var", "true");
	config().set("enable_filter_node_types_should_not_be_vars", "true");
	config().set("node_types_should_not_be_vars", "PredicateNode");
	config().set("Pattern_mining_mode", "Depth_First");
	config().set("Max_thread_num", "4");

	// Configure scheme load-paths that are common for all tests.
	_scm.eval("(add-to-load-path \"" PROJECT_SOURCE_DIR
	          "/opencog/learning/PatternMiner\")");
	_scm.eval("(add-to-load-path \"" PROJECT_SOURCE_DIR
	          "/tests/learning/PatternMiner\")");

	string link1 = "(InheritanceLink )\n  (VariableNode $var_1)\n  (ConceptNode man)\n\n";
	string link2 = "(InheritanceLink )\n  (VariableNode $var_1)\n  (ConceptNode soda drinker)\n\n";
	string link3 = "(InheritanceLink )\n  (VariableNode $var_1)\n  (ConceptNode ugly)\n\n";
	top3gramPatternStr = link1 + link2 + link3;
}

void PatternMinerUTest::tearDown() 
{
	_as.clear();
}

void PatternMinerUTest::test__UnifyPatternOrder()
{
	Handle C1 = an(CONCEPT_NODE, "C1"),
		C2 = an(CONCEPT_NODE, "C2"),
		P = an(PREDICATE_NODE, "P"),
		X1 = an(PATTERN_VARIABLE_NODE, "$X1"),
		X2 = an(PATTERN_VARIABLE_NODE, "$X2"),
		X3 = an(PATTERN_VARIABLE_NODE, "$X3"),
		h1 = al(INHERITANCE_LINK, X1, C1),
		h2 = al(INHERITANCE_LINK, X2, X1),
		h3 = al(INHERITANCE_LINK, X3, X2),
		h4 = al(EVALUATION_LINK, P, al(LIST_LINK, X3, C2));

	PatternMiner pm(_as);

	unsigned int unifiedIndex;
	HandleSeq result = pm._UnifyPatternOrder({h1, h2, h3, h4}, unifiedIndex),
		expected = {h4, h1, h2, h3};

	std::cout << "result = " << oc_to_string(result);
	std::cout << "expected = " << oc_to_string(expected);

	TS_ASSERT_EQUALS(result, expected);
	TS_ASSERT_EQUALS(unifiedIndex, 0);
}

void PatternMinerUTest::test_partitionBySharedVariables()
{
	Handle C = an(CONCEPT_NODE, "C"),
		X1 = an(PATTERN_VARIABLE_NODE, "$X1"),
		X2 = an(PATTERN_VARIABLE_NODE, "$X2"),
		X3 = an(PATTERN_VARIABLE_NODE, "$X3"),
		X4 = an(PATTERN_VARIABLE_NODE, "$X4"),
		h1 = al(INHERITANCE_LINK, C, X1),
		h2 = al(INHERITANCE_LINK, X1, X2),
		h3 = al(INHERITANCE_LINK, X2, X3),
		h4 = al(INHERITANCE_LINK, C, X4);

	PatternMiner pm(_as);

	HandleSeq links{h1, h2, h3, h4};
	HandleSeqSeq result;
	pm.partitionBySharedVariables(links, result);
	HandleSeqSeq expected = HandleSeqSeq{HandleSeq{h1, h2, h3}, HandleSeq{h4}};

	std::cout << "result = " << oc_to_string(result);
	std::cout << "expected = " << oc_to_string(expected);

	TS_ASSERT_EQUALS(result, expected);
}

void PatternMinerUTest::test_containsLoopVariable()
{
	Handle Broccoli = an(CONCEPT_NODE, "Broccoli"),
		dragonfruit = an(CONCEPT_NODE, "dragonfruit"),
		var_1 = an(PATTERN_VARIABLE_NODE, "$var_1"),
		var_2 = an(PATTERN_VARIABLE_NODE, "$var_2"),
		var_3 = an(PATTERN_VARIABLE_NODE, "$var_3"),
		h1 = al(INHERITANCE_LINK, Broccoli, var_1),
		h2 = al(INHERITANCE_LINK, dragonfruit, var_2),
		h3 = al(INHERITANCE_LINK, var_2, var_3),
		h4 = al(INHERITANCE_LINK, var_1, var_3);

	PatternMiner pm(_as);

	HandleSeq pattern1{h1, h2};
	bool result1 = pm.containLoopVariable(pattern1),
		expected1 = false;
	TS_ASSERT_EQUALS(result1, expected1);

	HandleSeq pattern2{h1, h2, h3};
	bool result2 = pm.containLoopVariable(pattern2),
		expected2 = true;
	TS_ASSERT_EQUALS(result2, expected2);

	HandleSeq pattern3{h1, h2, h3, h4};
	bool result3 = pm.containLoopVariable(pattern3),
		expected3 = true;
	TS_ASSERT_EQUALS(result3, expected3);

	HandleSeq pattern4{h2, h3, h4};
	bool result4 = pm.containLoopVariable(pattern4),
		expected4 = true;
	TS_ASSERT_EQUALS(result4, expected4);

	HandleSeq pattern5{h3, h4};
	bool result5 = pm.containLoopVariable(pattern5),
		expected5 = true;
	TS_ASSERT_EQUALS(result5, expected5);

	HandleSeq pattern6{h4};
	bool result6 = pm.containLoopVariable(pattern6),
		expected6 = true;
	TS_ASSERT_EQUALS(result6, expected6);
}

void PatternMinerUTest::test_PatternMiner_AB_AC()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	Handle A = an(CONCEPT_NODE, "A"),
		B = an(CONCEPT_NODE, "B"),
		C = an(CONCEPT_NODE, "C"),
		AB = al(INHERITANCE_LINK, A, B),
		AC = al(INHERITANCE_LINK, A, C);

	PatternMiner pm(_as);
	pm.runPatternMiner(false);

	vector<HTreeNode*>& top1gramPatterns = pm.getFinalPatternsForGram(1);

	string patternStr = pm.unifiedPatternToKeyString(top1gramPatterns[0]->pattern),
		expectedStr =
		"(InheritanceLink )\n"
		"  (ConceptNode A)\n"
		"  (PatternVariableNode $var_1)\n\n";

	logger().info("The result top 1-gram pattern: \n%s", patternStr.c_str());

	TS_ASSERT_EQUALS(patternStr, expectedStr);
}

// void PatternMinerUTest::test_PatternMiner_AB_ABC()
// {
// 	logger().info("BEGIN TEST: %s", __FUNCTION__);

// 	Handle A = an(CONCEPT_NODE, "A"),
// 		B = an(CONCEPT_NODE, "B"),
// 		C = an(CONCEPT_NODE, "C"),
// 		AB = al(INHERITANCE_LINK, A, B),
// 		ABC = al(INHERITANCE_LINK, A, al(AND_LINK, B, C));

// 	PatternMiner pm(_as);
// 	pm.runPatternMiner(false);  // NTODO set count threshold >= 2

// 	vector<HTreeNode*>& top1gramPatterns = pm.getFinalPatternsForGram(1);

// 	string patternStr = pm.unifiedPatternToKeyString(top1gramPatterns[0]->pattern);

// 	logger().info("The result top 1-gram pattern: \n%s", patternStr.c_str());

// 	TS_WARN("TODO");
// }

// void PatternMinerUTest::test_PatternMiner_ABCD()
// {
// 	logger().info("BEGIN TEST: %s", __FUNCTION__);

// 	Handle A = an(CONCEPT_NODE, "A"),
// 		B = an(CONCEPT_NODE, "B"),
// 		C = an(CONCEPT_NODE, "C"),
// 		D = an(CONCEPT_NODE, "C"),
// 		AB = al(INHERITANCE_LINK, A, B),
// 		AC = al(INHERITANCE_LINK, A, C),
// 		ABCD = al(INHERITANCE_LINK, A, al(SET_LINK, B, C, D));

// 	PatternMiner pm(_as);
// 	pm.runPatternMiner(false);  // NTODO set count threshold >= 2

// 	vector<HTreeNode*>& top1gramPatterns = pm.getFinalPatternsForGram(1);

// 	string patternStr = pm.unifiedPatternToKeyString(top1gramPatterns[0]->pattern);

// 	logger().info("The result top 1-gram pattern: \n%s", patternStr.c_str());

// 	TS_WARN("TODO");
// }

// void PatternMinerUTest::test_PatternMiner_InferenceControl()
// {
// 	logger().info("BEGIN TEST: %s", __FUNCTION__);
// 	// Load inference-control-corpus.scm
// 	std::string rs =
// 		_scm.eval("(load-from-path \"inference-control-corpus.scm\")");

// 	std::cout << "rs = " << rs << std::endl;

// 	// Run the pattern miner
// 	PatternMiner pm(_as);
// 	pm.runPatternMiner(false);

// 	vector<HTreeNode*>& top3gramPatterns = pm.getFinalPatternsForGram(3);

// 	string patternStr = pm.unifiedPatternToKeyString(top3gramPatterns[0]->pattern);
// 	logger().info("The result top 3-gram pattern: \n%s", patternStr.c_str());

// 	// The main pattern of interest should look like
// 	//
// 	// Execution
// 	//   Schema "expand"
// 	//   List
// 	//     PatternMiningVariable "$k"
// 	//     Inheritance
// 	//       ConceptNode "A"
// 	//       PatternMiningVariable "$x"
// 	//     GroundedSchemaNode "scm: conditional-full-instantiation-scope-formula"
// 	//   PatternMiningVariable "$r"
// 	//
// 	// Evaluation
// 	//   Predicate "preproof
// 	//   PatternMiningVariable "$k"
// 	//
// 	// Evaluation
// 	//   Predicate "preproof
// 	//   PatternMiningVariable "$r"

// 	TS_WARN("TODO");

// 	logger().info("End TEST: %s", __FUNCTION__);
// }

// void PatternMinerUTest::test_PatternMiner_SodaDrinker()
// {
// 	logger().info("BEGIN TEST: %s", __FUNCTION__);
// 	// Load ugly_male_soda-drinker_corpus.scm
// 	_scm.eval("(load-from-path \"ugly_male_soda-drinker_corpus.scm\")");

// 	// Run the pattern miner
// 	PatternMiner pm(_as);
// 	pm.runPatternMiner(false);

// 	// Test the result: check the final top 3-gram pattern

// 	vector<HTreeNode*>& top3gramPatterns = pm.getFinalPatternsForGram(3);

// 	string patternStr = pm.unifiedPatternToKeyString(top3gramPatterns[0]->pattern);
// 	logger().info("The result top 3-gram pattern: \n%s", patternStr.c_str());

// 	if (patternStr != top3gramPatternStr)
// 	{
// 		logger().info("Failed: The result top 3-gram pattern is wrong! The right one should be:\n%s", top3gramPatternStr.c_str());
// 		TS_FAIL("The result top 3-gram pattern is wrong!");
// 	}

// 	if (top3gramPatterns[0]->count != 5)
// 	{
// 		logger().info("Failed: The result top 3-gram pattern count is wrong!");
// 		TS_FAIL("The result top 3-gram pattern count is wrong!");
// 	}

// 	logger().info("End TEST: %s", __FUNCTION__);
// }

#undef al
#undef an
