/*
 * opencog/tests/learning/statistics/StatisticsUTest.cxxtest
 *
 * Copyright (C) 2015 by OpenCog Foundation
 * All Rights Reserved
 *
 * Written by DongMin Kim <kim135797531@naver.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <cxxtest/TestSuite.h>

#include <opencog/learning/statistics/DataProvider.h>
#include <opencog/learning/statistics/Entropy.h>
#include <opencog/learning/statistics/InteractionInformation.h>
#include <opencog/learning/statistics/Probability.h>
#include <opencog/util/Logger.h>

using namespace std;
using namespace opencog;
using namespace statistics;

class StatisticsTestSuite : public CxxTest::TestSuite
{
private:
    const bool DEBUG = false;

    const int N_GRAMS = 3;
    const bool ORDERED = false;
    vector<std::string> test_case = {"aaa", "bbb", "ccc", "ddd", "eee", "fff"};
    DataProvider<std::string> *provider;

    template<typename T>
    void print_detail(DataProvider<T> *provider)
    {
        logger().info(provider->mDataSet->print_meta_data_set());
        logger().info(provider->print_data_map());
    }

public:
    void setUp()
    {
        if(this->DEBUG)
            logger().set_print_to_stdout_flag(true);
        provider = new DataProvider<std::string>(N_GRAMS, ORDERED);
    }
    void tearDown()
    {
        if(this->DEBUG)
            print_detail(provider);
        delete provider;
    }

    void test_data_provider()
    {
        logger().info("Statistics> test_data_provider");
        // Add one data
        bool is_first_insert;
        is_first_insert = provider->addOneMetaData("aaa");
        TS_ASSERT(is_first_insert)

        // Re-add one data
        is_first_insert = provider->addOneMetaData("aaa");
        TS_ASSERT(!is_first_insert);

        // Add multiple data
        for (unsigned long i = 0; i < test_case.size(); i++)
            provider->addOneMetaData(test_case[i]);
        TS_ASSERT_EQUALS(provider->mDataSet->size(), 6);

        // Add data's count (n_gram = 2)
        vector<std::string> arr_2_gram_1 = {"aaa", "bbb"};
        vector<std::string> arr_2_gram_2 = {"aaa", "ccc"};
        provider->addOneRawDataCount(arr_2_gram_1, 2);
        provider->addOneRawDataCount(arr_2_gram_2, 1);

        // Add data's count (n_gram = 3)
        vector<std::string> arr_3_gram_1 = {"aaa", "bbb", "ccc"};
        provider->addOneRawDataCount(arr_3_gram_1, 1);

        // Test key vector
        std::vector<long> key_vector_1 = provider->makeKeyFromData(test_case);
        TS_ASSERT_EQUALS(key_vector_1.size(), 6);

        // Test key vector
        bool combination_array[6] = {true, false, true, false, true, false};
        std::vector<long> key_vector_2 = provider->makeKeyFromData(
                combination_array, test_case);
        TS_ASSERT_EQUALS(key_vector_2.size(), 3);

        // Test data vector
        std::vector<std::string> value_vector =
                provider->makeDataFromKey(key_vector_1);
        TS_ASSERT_EQUALS(value_vector.size(), 6);
    }

    void test_probabilities()
    {
        logger().info("Statistics> test_probabilities");
        // Add multiple data
        for (unsigned long i = 0; i < test_case.size(); i++)
            provider->addOneMetaData(test_case[i]);

        // Add data's count (n_gram = 2)
        vector<std::string> arr_2_gram_1 = {"aaa", "bbb"};
        vector<std::string> arr_2_gram_2 = {"aaa", "ccc"};
        vector<std::string> arr_3_gram_1 = {"aaa", "bbb", "ccc"};
        provider->addOneRawDataCount(arr_2_gram_1, 2);
        provider->addOneRawDataCount(arr_2_gram_2, 1);
        provider->addOneRawDataCount(arr_3_gram_1, 1);

        // Calculate probabilities
        Probability::calculateProbabilities(*provider);

        std::map<std::vector<long>, StatisticData>::iterator it;
        const std::vector<long> arr_2_gram_1_index = {0, 1};
        it = provider->mDataMaps[2].find(arr_2_gram_1_index);
        TS_ASSERT_DELTA(it->second.probability, 0.666, 0.01);
        const std::vector<long> arr_2_gram_2_index = {0, 2};
        it = provider->mDataMaps[2].find(arr_2_gram_2_index);
        TS_ASSERT_DELTA(it->second.probability, 0.333, 0.01);
        const std::vector<long> arr_3_gram_1_index = {0, 1, 2};
        it = provider->mDataMaps[3].find(arr_3_gram_1_index);
        TS_ASSERT_DELTA(it->second.probability, 1.0, 0.01);
    }

    void test_entropies()
    {
        logger().info("Statistics> test_entropies");
        // Add multiple data
        for (unsigned long i = 0; i < test_case.size(); i++)
            provider->addOneMetaData(test_case[i]);

        // Add data's count (n_gram = 2)
        vector<std::string> arr_2_gram_1 = {"aaa", "bbb"};
        vector<std::string> arr_2_gram_2 = {"aaa", "ccc"};
        vector<std::string> arr_3_gram_1 = {"aaa", "bbb", "ccc"};
        provider->addOneRawDataCount(arr_2_gram_1, 2);
        provider->addOneRawDataCount(arr_2_gram_2, 1);
        provider->addOneRawDataCount(arr_3_gram_1, 1);

        // Calculate entropies
        Probability::calculateProbabilities(*provider);
        Entropy::calculateEntropies(*provider);

        std::map<std::vector<long>, StatisticData>::iterator it;
        const std::vector<long> arr_2_gram_1_index = {0, 1};
        it = provider->mDataMaps[2].find(arr_2_gram_1_index);
        TS_ASSERT_DELTA(it->second.entropy, 0.389, 0.01);
        const std::vector<long> arr_2_gram_2_index = {0, 2};
        it = provider->mDataMaps[2].find(arr_2_gram_2_index);
        TS_ASSERT_DELTA(it->second.entropy, 0.528, 0.01);
    }

    void test_interaction_information()
    {
        logger().info("Statistics> test_interaction_information");
        // Add multiple data
        for (unsigned long i = 0; i < test_case.size(); i++)
            provider->addOneMetaData(test_case[i]);

        // Add data's count (n_gram = 2)
        vector<std::string> arr_2_gram_1 = {"aaa", "bbb"};
        vector<std::string> arr_2_gram_2 = {"aaa", "ccc"};
        vector<std::string> arr_3_gram_1 = {"aaa", "bbb", "ccc"};
        provider->addOneRawDataCount(arr_2_gram_1, 2);
        provider->addOneRawDataCount(arr_2_gram_2, 1);
        provider->addOneRawDataCount(arr_3_gram_1, 1);

        // Calculate interaction information
        Probability::calculateProbabilities(*provider);
        Entropy::calculateEntropies(*provider);
        InteractionInformation::calculateInteractionInformations(*provider);

        std::map<std::vector<long>, StatisticData>::iterator it;
        const std::vector<long> arr_2_gram_1_index = {0, 1};
        it = provider->mDataMaps[2].find(arr_2_gram_1_index);
        TS_ASSERT_DELTA(it->second.interactionInformation, -0.389, 0.01);
        const std::vector<long> arr_2_gram_2_index = {0, 2};
        it = provider->mDataMaps[2].find(arr_2_gram_2_index);
        TS_ASSERT_DELTA(it->second.interactionInformation, -0.528, 0.01);
        const std::vector<long> arr_3_gram_1_index = {0, 1, 2};
        it = provider->mDataMaps[3].find(arr_3_gram_1_index);
        TS_ASSERT_DELTA(it->second.interactionInformation, -0.918, 0.01);
    }
};
