/*
 * opencog/tests/learning/xpattern-miner/ure-based/UREPatternMiner.cxxtest
 *
 * Copyright (C) 2018 by OpenCog Foundation
 * All Rights Reserved
 *
 * Written by Nil Geisweiller
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <cxxtest/TestSuite.h>

#include <opencog/util/Config.h>
#include <opencog/util/algorithm.h>
#include <opencog/truthvalue/SimpleTruthValue.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/query/BindLinkAPI.h>
#include <opencog/rule-engine/forwardchainer/ForwardChainer.h>
#include <opencog/rule-engine/backwardchainer/BackwardChainer.h>
#include <opencog/rule-engine/URELogger.h>
#include <opencog/guile/SchemeEval.h>

#include <vector>

using namespace opencog;
using namespace std;

#define al _as.add_link
#define an _as.add_node
#define tmp_al _tmp_as.add_link
#define tmp_an _tmp_as.add_node

class UREPatternMinerUTest : public CxxTest::TestSuite
{
private:
	AtomSpace _as;
	AtomSpace _tmp_as;
	SchemeEval _scm;
	SchemeEval _tmp_scm;

	// Variables
	Handle X, Y, Z, W;

	// Constants
	Handle A, B, C, D, E, F, G, H;

	// Pattern miner rule base
	Handle pm_rb;

	// Concept holding the texts
	Handle texts_cpt;

	// minsup predicate
	Handle minsup_prd;

	// Top abstraction (Lambda X X)
	Handle top;

	/**
	 * Make
	 *
	 * (Evaluation
	 *   (Predicate "minsup")
	 *   (List pattern (Concept "texts") minsup))
	 */
	Handle mk_minsup_eval(int minsup,
	                      const Handle& pattern,
	                      TruthValuePtr tv=TruthValue::DEFAULT_TV());
	Handle mk_minsup_evals(int minsup,
	                       const HandleSeq& patterns,
	                       TruthValuePtr tv=TruthValue::DEFAULT_TV());

	/**
	 * Make
	 *
	 * (Evaluation
	 *   (GroundedPredicate "scm: absolutely-true")
	 *   h)
	 */
	Handle mk_abs_true_eval(const Handle& h);

	/**
	 * Make
	 *
	 * (Lambda
	 *   (VariableList X1 ... Xn)
	 *   (And X1 ... Xn))
	 */
	Handle mk_nconjunct(unsigned n);
	
	/**
	 * Make a URE query to mine patterns over texts with a given
	 * minsup and a maximum of URE iterations.
	 */
	Handle mk_query(const HandleSeq& texts, int minsup,
	                int depth, Handle initpat=Handle::UNDEFINED);

	/**
	 * Generate a variable (VariableNode <prefix-i>)
	 */
	Handle gen_variable(const std::string& prefix, int i);

	/**
	 * Generate variables (VariableNode <prefix-0>) ... (VariableNode <prefix-n-1>)
	 */
	HandleSeq gen_variables(const std::string& prefix, int n);

	/**
	 * Return whether if a pattern has enough support.
	 */
	bool enough_support(const Handle& pat, int ms);

	/**
	 * Generate a query, run the URE forward to generate patterns,
	 * then backward to gather the results, and output them.
	 */
	Handle run_pm(const HandleSeq& texts, int minsup,
	              int max_iter, Handle initpat=Handle::UNDEFINED);

public:
	UREPatternMinerUTest();
	~UREPatternMinerUTest();

	void setUp();
	void tearDown();

	// Pattern miner
	void test_A();
	void test_AB();
	void test_AB_AC();
	void test_AB_AC_BC();
	void test_AB_ABC();
	void test_ABCD();
	void test_ABAB();
	void test_AAAA();
	void test_2conjuncts_1();
	void test_2conjuncts_2();
	void test_2conjuncts_3();
	void test_2conjuncts_4();
	// Disable for now as we do not have the corresponding heuristic
	// void test_2conjuncts_5();
	void test_InferenceControl();
	void test_SodaDrinker();
};

Handle UREPatternMinerUTest::mk_minsup_eval(int minsup,
                                            const Handle& pattern,
                                            TruthValuePtr tv)
{
	Handle minsup_eval_h = al(EVALUATION_LINK,
	                          minsup_prd,
	                          al(LIST_LINK,
	                             pattern,
	                             texts_cpt,
	                             an(NUMBER_NODE, to_string(minsup))));
	// Warning: if minsup_eval_h existed, this may erase its TV
	minsup_eval_h->setTruthValue(tv);
	return minsup_eval_h;
}

Handle UREPatternMinerUTest::mk_minsup_evals(int minsup,
                                             const HandleSeq& patterns,
                                             TruthValuePtr tv)
{
	HandleSeq minsup_evals;
	for (const Handle& pat : patterns)
		minsup_evals.push_back(mk_minsup_eval(2, pat, tv));
	return al(SET_LINK, minsup_evals);
}

Handle UREPatternMinerUTest::mk_abs_true_eval(const Handle& h)
{
	return al(EVALUATION_LINK,
	          an(GROUNDED_PREDICATE_NODE, "scm: absolutely-true"),
	          h);
}

Handle UREPatternMinerUTest::mk_nconjunct(unsigned n)
{
	return al(LAMBDA_LINK, al(AND_LINK, gen_variables("$X-", n)));
}

Handle UREPatternMinerUTest::gen_variable(const std::string& prefix, int i)
{
	return an(VARIABLE_NODE, prefix + std::to_string(i));
}

HandleSeq UREPatternMinerUTest::gen_variables(const std::string& prefix, int n)
{
	HandleSeq vars;
	for (int i = 0; i < n; i++)
		vars.push_back(gen_variable(prefix, i));
	return vars;
}

bool UREPatternMinerUTest::enough_support(const Handle& pat, int minsup)
{
	std::string support_query_str("(support\n");
	support_query_str += pat->to_string();
	support_query_str += texts_cpt->to_string();
	support_query_str += std::to_string(minsup) + ")";
	std::string rs = _scm.eval(support_query_str);
	int freq = std::stoi(rs);
	return minsup <= freq;
}

Handle UREPatternMinerUTest::run_pm(const HandleSeq& texts, int minsup,
                                    int maxiter, Handle initpat)
{
	// Make (Member text (Concept "texts)) links
	for (const Handle& text : texts)
		al(MEMBER_LINK, text, texts_cpt);

	// If init is not defined then use top
	if (not initpat)
		initpat = top;

	// Add the axiom that initpat has enough support, and use it as
	// source for the forward chainer
	bool es = enough_support(initpat, minsup);
	// If it doesn't have enough support return the empty solution
	if (not es)
		return al(SET_LINK);
	TruthValuePtr tv = SimpleTruthValue::createTV(es ? 1.0 : 0.0, 1.0);
	Handle source = mk_minsup_eval(minsup, initpat, tv);

	// Run the foward chainer from the initial pattern
	ForwardChainer fc(_as, pm_rb, source);
	fc.get_config().set_maximum_iterations(maxiter);
	fc.get_config().set_retry_sources(false);
	fc.do_chain();

	// Run the pattern matcher query to gather the knowledge of
	// interest, i.e. patterns reaching the minimum support, and
	// return the results.
	Handle patvar = an(VARIABLE_NODE, "$patvar"),
		target = mk_minsup_eval(minsup, patvar),
		vardecl = al(TYPED_VARIABLE_LINK, patvar, an(TYPE_NODE, "LambdaLink")),
		abs_true = mk_abs_true_eval(target),
		bl = al(BIND_LINK, vardecl, al(AND_LINK, target, abs_true), target),
		results = bindlink(&_as, bl);

	return results;
}

UREPatternMinerUTest::UREPatternMinerUTest() : _scm(&_as), _tmp_scm(&_tmp_as)
{
	// Main logger
	logger().set_level(Logger::INFO);
	logger().set_timestamp_flag(false);
	// logger().set_sync_flag(true);
	logger().set_print_to_stdout_flag(true);

	// URE logger
	ure_logger().set_level(Logger::INFO);
	ure_logger().set_timestamp_flag(false);
	// ure_logger().set_sync_flag(true);
	ure_logger().set_print_to_stdout_flag(true);

	// Configure scheme load-paths that are common for all tests.
	_scm.eval("(add-to-load-path \"" PROJECT_SOURCE_DIR
	          "/tests/learning/xpattern-miner/scm\")");
	_scm.eval("(add-to-load-path \"" PROJECT_SOURCE_DIR
	          "/opencog/learning/xpattern-miner/ure-based\")");
}

UREPatternMinerUTest::~UREPatternMinerUTest() {}

void UREPatternMinerUTest::setUp()
{
	// Load URE-based pattern miner
	std::string rs = _scm.eval("(load-from-path \"pm-config.scm\")");
	logger().debug() << "rs = " << rs;

	X = an(VARIABLE_NODE, "$X");
	Y = an(VARIABLE_NODE, "$Y");
	Z = an(VARIABLE_NODE, "$Z");
	W = an(VARIABLE_NODE, "$W");
	A = an(CONCEPT_NODE, "A");
	B = an(CONCEPT_NODE, "B");
	C = an(CONCEPT_NODE, "C");
	D = an(CONCEPT_NODE, "D");
	E = an(CONCEPT_NODE, "E");
	F = an(CONCEPT_NODE, "F");
	G = an(CONCEPT_NODE, "G");
	H = an(CONCEPT_NODE, "H");
	pm_rb = _scm.eval_h("pm-rbs");
	texts_cpt = an(CONCEPT_NODE, "texts");
	minsup_prd = an(PREDICATE_NODE, "minsup");
	top = al(LAMBDA_LINK, X, X);
}

void UREPatternMinerUTest::tearDown()
{
	_as.clear();
	_tmp_as.clear();
}

void UREPatternMinerUTest::test_A()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	Handle results = run_pm({A}, 2, 10),
		expected = al(SET_LINK);

	logger().debug() << "results = " << oc_to_string(results);
	logger().debug() << "expected = " << oc_to_string(expected);

	TS_ASSERT(content_eq(results, expected));
}

void UREPatternMinerUTest::test_AB()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	Handle results = run_pm({A, B}, 2, 10),
		expected = mk_minsup_evals(2, {top});

	logger().debug() << "results = " << oc_to_string(results);
	logger().debug() << "expected = " << oc_to_string(expected);

	TS_ASSERT(content_eq(results, expected));
}

void UREPatternMinerUTest::test_AB_AC()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	// Define texts
	Handle AB = al(INHERITANCE_LINK, A, B),
		AC = al(INHERITANCE_LINK, A, C);
	HandleSeq texts{AB, AC};

	// Run pattern miner
	Handle results = run_pm(texts, 2, 10),
		VarXY = al(VARIABLE_LIST, X, Y),
		InhXY = al(INHERITANCE_LINK, X, Y),
		InhAY = al(INHERITANCE_LINK, A, Y),
		expected = mk_minsup_evals(2,
		                           { top,
					                 al(LAMBDA_LINK, VarXY, InhXY),
			                         al(LAMBDA_LINK, Y, InhAY) });

	logger().debug() << "results = " << oc_to_string(results);
	logger().debug() << "expected = " << oc_to_string(expected);

	TS_ASSERT(content_eq(results, expected));
}

void UREPatternMinerUTest::test_AB_AC_BC()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	// Define texts
	Handle InhAB = al(INHERITANCE_LINK, A, B),
		InhAC = al(INHERITANCE_LINK, A, C),
		InhBC = al(INHERITANCE_LINK, B, C);
	HandleSeq texts{A, B, C, InhAB, InhAC, InhBC};

	// Run pattern miner
	Handle results = run_pm(texts, 2, 100),
		VarXY = al(VARIABLE_LIST, X, Y),
		InhXY = al(INHERITANCE_LINK, X, Y),
		InhAY = al(INHERITANCE_LINK, A, Y),
		InhXC = al(INHERITANCE_LINK, X, C),
		expected = mk_minsup_evals(2,
		                           { top,
				                     al(LAMBDA_LINK, VarXY, InhXY),
				                     al(LAMBDA_LINK, Y, InhAY),
				                     al(LAMBDA_LINK, X, InhXC) });

	logger().debug() << "results = " << oc_to_string(results);
	logger().debug() << "expected = " << oc_to_string(expected);

	TS_ASSERT(content_eq(results, expected));
}

void UREPatternMinerUTest::test_AB_ABC()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	// Define texts
	Handle InhAB = al(INHERITANCE_LINK, A, B),
		InhABC = al(INHERITANCE_LINK, A, al(AND_LINK, B, C));
	HandleSeq texts{A, B, C, InhAB, InhABC};

	// Run pattern miner
	Handle results = run_pm(texts, 2, 100),
		VarXY = al(VARIABLE_LIST, X, Y),
		AndXY = al(AND_LINK, X, Y),
		InhXY = al(INHERITANCE_LINK, X, Y),
		InhAY = al(INHERITANCE_LINK, A, Y),
		expected = mk_minsup_evals(2,
		                           { top,
				                     al(LAMBDA_LINK, VarXY, InhXY),
				                     al(LAMBDA_LINK, Y, InhAY) });

	logger().debug() << "results = " << oc_to_string(results);
	logger().debug() << "expected = " << oc_to_string(expected);

	TS_ASSERT(content_eq(results, expected));
}

void UREPatternMinerUTest::test_ABCD()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	// Define texts
	Handle InhAB = al(INHERITANCE_LINK, A, B),
		InhCD = al(INHERITANCE_LINK, C, D),
		InhEF = al(INHERITANCE_LINK, E, F),
		InhGH = al(INHERITANCE_LINK, G, H),
		ImpABCD = al(IMPLICATION_LINK, InhAB, InhCD),
		ImpEFGH = al(IMPLICATION_LINK, InhEF, InhGH),
		InhXY = al(INHERITANCE_LINK, X, Y),
		InhZW = al(INHERITANCE_LINK, Z, W),
		ImpXY = al(IMPLICATION_LINK, X, Y);
	HandleSeq texts{InhAB, InhCD, InhEF, InhGH, ImpABCD, ImpEFGH};

	// Define initpat
	Handle initpat = al(LAMBDA_LINK, ImpXY);

	// Run pattern miner
	Handle results = run_pm(texts, 2, 100, initpat),
		expected = mk_minsup_evals(2,
		                           { al(LAMBDA_LINK, ImpXY),
				                     al(LAMBDA_LINK,
				                        al(IMPLICATION_LINK, Z, InhXY)),
				                     al(LAMBDA_LINK,
				                        al(IMPLICATION_LINK, InhXY, Z)),
				                     al(LAMBDA_LINK,
				                        al(IMPLICATION_LINK, InhZW, InhXY)) });

	logger().debug() << "results = " << oc_to_string(results);
	logger().debug() << "expected = " << oc_to_string(expected);

	TS_ASSERT(content_eq(expected, results));
}

void UREPatternMinerUTest::test_ABAB()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	// Define texts
	Handle AB = al(INHERITANCE_LINK, A, B),
		BC = al(INHERITANCE_LINK, B, C),
		ABAB = al(IMPLICATION_LINK, AB, AB),
		BCBC = al(IMPLICATION_LINK, BC, BC);
	HandleSeq texts{ABAB, BCBC};

	// Define initpat
	Handle initpat = al(LAMBDA_LINK,
	                    al(IMPLICATION_LINK, X, Y));

	// Run pattern miner
	Handle results = run_pm(texts, 2, 100, initpat),
		VarXY = al(VARIABLE_LIST, X, Y),
		InhXY = al(INHERITANCE_LINK, X, Y),
		expected = mk_minsup_eval(2,
		                          al(LAMBDA_LINK,
		                             VarXY,
		                             al(IMPLICATION_LINK, InhXY, InhXY)));

	logger().debug() << "results = " << oc_to_string(results);
	logger().debug() << "expected = " << oc_to_string(expected);

	TS_ASSERT(is_in(expected, results->getOutgoingSet()));
}

void UREPatternMinerUTest::test_AAAA()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	// Define texts
	Handle AA = al(INHERITANCE_LINK, A, A),
		BB = al(INHERITANCE_LINK, B, B),
		AAAA = al(IMPLICATION_LINK, AA, AA),
		BBBB = al(IMPLICATION_LINK, BB, BB);
	HandleSeq texts{AAAA, BBBB};

	// Define initpat
	Handle initpat = al(LAMBDA_LINK,
	                    al(IMPLICATION_LINK, X, Y));

	// Run pattern miner
	Handle results = run_pm(texts, 2, 100, initpat),
		InhXX = al(INHERITANCE_LINK, X, X),
		expected = mk_minsup_eval(2,
		                          al(LAMBDA_LINK,
		                             al(IMPLICATION_LINK,
		                                InhXX,
		                                InhXX)));

	logger().debug() << "results = " << oc_to_string(results);
	logger().debug() << "expected = " << oc_to_string(expected);

	TS_ASSERT(is_in(expected, results->getOutgoingSet()));
}

void UREPatternMinerUTest::test_2conjuncts_1()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	// Define texts
	Handle C1 = an(CONCEPT_NODE, "C1"),
		C2 = an(CONCEPT_NODE, "C2"),
		AB = al(INHERITANCE_LINK, A, B),
		BC1 = al(INHERITANCE_LINK, B, C1),
		BC2 = al(INHERITANCE_LINK, B, C2);
	HandleSeq texts{AB, BC1, BC2};

	// Define initpat
	Handle XY = al(VARIABLE_LIST, X, Y),
		initpat = al(LAMBDA_LINK,
		             XY,
		             al(AND_LINK,
		                al(INHERITANCE_LINK, X, A),
		                al(INHERITANCE_LINK, A, Y)));

	// Run pattern miner
	Handle results = run_pm(texts, 2, 10, initpat);

	logger().debug() << "results = " << oc_to_string(results);

	TS_ASSERT(results->getOutgoingSet().empty());
}

void UREPatternMinerUTest::test_2conjuncts_2()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	// Define texts
	Handle C1 = an(CONCEPT_NODE, "C1"),
		C2 = an(CONCEPT_NODE, "C2"),
		AB = al(INHERITANCE_LINK, A, B),
		BC1 = al(INHERITANCE_LINK, B, C1),
		BC2 = al(INHERITANCE_LINK, B, C2);
	HandleSeq texts{AB, BC1, BC2};

	// Define initpat
	Handle XYZ = al(VARIABLE_LIST, X, Y, Z),
		XYZW = al(VARIABLE_LIST, X, Y, Z, W),
		initpat = al(LAMBDA_LINK,
		             XYZW,
		             al(AND_LINK,
		                al(INHERITANCE_LINK, X, Y),
		                al(INHERITANCE_LINK, Z, W)));

	// Run pattern miner
	Handle results = run_pm(texts, 2, 100, initpat);
	Handle expected_pattern = mk_minsup_eval(2,
	                                         al(LAMBDA_LINK,
	                                            XYZ,
	                                            al(AND_LINK,
	                                               al(INHERITANCE_LINK, X, Y),
	                                               al(INHERITANCE_LINK, Y, Z))));

	logger().debug() << "results = " << oc_to_string(results);
	logger().debug() << "expected_pattern = " << oc_to_string(expected_pattern);

	TS_ASSERT(is_in(expected_pattern, results->getOutgoingSet()));
}

void UREPatternMinerUTest::test_2conjuncts_3()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	// Define texts
	Handle C1 = an(CONCEPT_NODE, "C1"),
		C2 = an(CONCEPT_NODE, "C2"),
		AB = al(INHERITANCE_LINK, A, B),
		BC1 = al(INHERITANCE_LINK, B, C1),
		BC2 = al(INHERITANCE_LINK, B, C2);
	HandleSeq texts{AB, BC1, BC2};

	// Run pattern miner
	Handle results = run_pm(texts, 2, 500, mk_nconjunct(2)),
		XYZ = al(VARIABLE_LIST, X, Y, Z),
		expected_pattern = mk_minsup_eval(2,
		                                  al(LAMBDA_LINK,
		                                     XYZ,
		                                     al(AND_LINK,
		                                        al(INHERITANCE_LINK, X, Y),
		                                        al(INHERITANCE_LINK, Y, Z))));

	logger().debug() << "results = " << oc_to_string(results);
	logger().debug() << "expected_pattern = " << oc_to_string(expected_pattern);

	TS_ASSERT(is_in(expected_pattern, results->getOutgoingSet()));
}

void UREPatternMinerUTest::test_2conjuncts_4()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	// Define texts
	Handle A1 = an(CONCEPT_NODE, "A1"),
		A2 = an(CONCEPT_NODE, "A2"),
		B = an(CONCEPT_NODE, "B"),
		C1 = an(CONCEPT_NODE, "C1"),
		C2 = an(CONCEPT_NODE, "C2"),
		A1B = al(INHERITANCE_LINK, A1, B),
		A2B = al(INHERITANCE_LINK, A2, B),
		BC1 = al(INHERITANCE_LINK, B, C1),
		BC2 = al(INHERITANCE_LINK, B, C2);
	HandleSeq texts{A1B, A2B, BC1, BC2};

	// Run pattern miner
	Handle results = run_pm(texts, 4, 500, mk_nconjunct(2)),
		VarXYZ = al(VARIABLE_LIST, X, Y, Z),
		expected_pattern = mk_minsup_eval(4,
		                                  al(LAMBDA_LINK,
		                                     VarXYZ,
		                                     al(AND_LINK,
		                                        al(INHERITANCE_LINK, X, Y),
		                                        al(INHERITANCE_LINK, Y, Z))));

	logger().debug() << "results = " << oc_to_string(results);
	logger().debug() << "expected_pattern = " << oc_to_string(expected_pattern);

	TS_ASSERT(is_in(expected_pattern, results->getOutgoingSet()));
}

// void UREPatternMinerUTest::test_2conjuncts_5()
// {
// 	logger().info("BEGIN TEST: %s", __FUNCTION__);

// 	Handle
// 		A1 = an(CONCEPT_NODE, "A1"),
// 		A2 = an(CONCEPT_NODE, "A2"),
// 		A3 = an(CONCEPT_NODE, "A3"),
// 		B = an(CONCEPT_NODE, "B"),
// 		C1 = an(CONCEPT_NODE, "C1"),
// 		C2 = an(CONCEPT_NODE, "C2"),
// 		C3 = an(CONCEPT_NODE, "C3"),
// 		A1B = al(INHERITANCE_LINK, A1, B),
// 		A2B = al(INHERITANCE_LINK, A2, B),
// 		A3B = al(INHERITANCE_LINK, A3, B),
// 		BC1 = al(INHERITANCE_LINK, B, C1),
// 		BC2 = al(INHERITANCE_LINK, B, C2),
// 		BC3 = al(INHERITANCE_LINK, B, C3);

// 	Handle
// 		X = tmp_an(VARIABLE_NODE, "$X"),
// 		Y = tmp_an(VARIABLE_NODE, "$Y"),
// 		Z = tmp_an(VARIABLE_NODE, "$Z"),
// 		W = tmp_an(VARIABLE_NODE, "$W"),
// 		XYZ = tmp_al(VARIABLE_LIST, X, Y, Z),
// 		XYZW = tmp_al(VARIABLE_LIST, X, Y, Z, W);

// 	Handle initpat = tmp_al(LAMBDA_LINK,
// 	                        XYZW,
// 	                        tmp_al(AND_LINK,
// 	                               tmp_al(INHERITANCE_LINK, X, Y),
// 	                               tmp_al(INHERITANCE_LINK, Z, W)));

// 	// Like test_2conjuncts_2 but setting the info heuristic to 1,
// 	// meaning that the frequency of a conjunction of strongly
// 	// connected components will be equal to the minimum frequency of
// 	// each component. For that reason it should be able to discover
// 	// the desired pattern.
// 	XPMParameters param(9/*minsup*/, 2/*nconjuncts*/, initpat, -1/*maxdepth*/, 1/*info*/);
// 	XPatternMiner pm(_as, param);
// 	HandleTree results = pm();
// 	Handle non_expected_pattern = tmp_al(LAMBDA_LINK,
// 	                                     XYZ,
// 	                                     tmp_al(AND_LINK,
// 	                                            tmp_al(INHERITANCE_LINK, X, Y),
// 	                                            tmp_al(INHERITANCE_LINK, Y, Z)));

// 	logger().debug() << "results = " << oc_to_string(results);
// 	logger().debug() << "non_expected_pattern = " << oc_to_string(non_expected_pattern);

// 	TS_ASSERT(not content_is_in(non_expected_pattern, results));
// }

void UREPatternMinerUTest::test_InferenceControl()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	// Define texts
	// Load inference-control-corpus.scm to _tmp_as
	std::string rs =
		_tmp_scm.eval("(load-from-path \"inference-control-corpus.scm\")");
	logger().debug() << "rs = " << rs;
	HandleSeq texts;
	_tmp_as.get_all_atoms(texts);

	// Define initpat
	Handle expand = an(SCHEMA_NODE, "URE:BC:expand-and-BIT"),
		preproof = an(PREDICATE_NODE, "URE:BC:preproof-of"),
		rule = an(DEFINED_SCHEMA_NODE,
		          "conditional-full-instantiation-implication-scope-meta-rule"),
		de_rule = al(DONT_EXEC_LINK, rule),
		VarT = an(VARIABLE_NODE, "$T"),
		VarA = an(VARIABLE_NODE, "$A"),
		VarL = an(VARIABLE_NODE, "$L"),
		VarB = an(VARIABLE_NODE, "$B"),
		vardecl = al(VARIABLE_LIST, VarT, VarA, VarL, VarB),
		clauses = al(AND_LINK,
		             al(EXECUTION_LINK,
		                expand,
		                al(LIST_LINK, VarA, VarL, de_rule),
		                VarB),
		             al(EVALUATION_LINK,
		                preproof,
		                al(LIST_LINK, VarA, VarT)),
		             al(EVALUATION_LINK,
		                preproof,
		                al(LIST_LINK, VarB, VarT))),
		initpat = al(LAMBDA_LINK, vardecl, clauses);

	// Run pattern miner
	Handle results = run_pm(texts, 2, 1000, initpat);

	// The pattern of interest looks like
	//
	// Lambda
	//   T A X B
	// And
	//   Execution
	//     Schema "expand"
	//     List
	//       A
	//       Inheritance
	//         ConceptNode "a"
	//         X
	//       GroundedSchemaNode "scm: conditional-full-instantiation-scope-formula"
	//     B
	//   Evaluation
	//     Predicate "preproof-of"
	//     List
	//       A
	//       T
	//   Evaluation
	//     Predicate "preproof-of"
	//     List
	//       B
	//       T
	Handle a = an(CONCEPT_NODE, "a"),
		expected_vardecl = al(VARIABLE_LIST, VarT, VarA, X, VarB),
		expected_clauses = al(AND_LINK,
		                      al(EXECUTION_LINK,
		                         expand,
		                         al(LIST_LINK,
		                            VarA,
		                            al(INHERITANCE_LINK, a, X),
		                            de_rule),
		                         VarB),
		                      al(EVALUATION_LINK,
		                         preproof,
		                         al(LIST_LINK, VarA, VarT)),
		                      al(EVALUATION_LINK,
		                         preproof,
		                         al(LIST_LINK, VarB, VarT))),
		expected_pattern = mk_minsup_eval(2,
		                                  al(LAMBDA_LINK,
		                                     expected_vardecl,
		                                     expected_clauses));

	logger().debug() << "results = " << oc_to_string(results);
	logger().debug() << "expected_pattern = " << oc_to_string(expected_pattern);

	TS_ASSERT(is_in(expected_pattern, results->getOutgoingSet()));
}

void UREPatternMinerUTest::test_SodaDrinker()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	// Define texts
	// Load ugly-male-soda-drinker-corpus.scm
	std::string rs =
		_tmp_scm.eval("(load-from-path \"ugly-male-soda-drinker-corpus.scm\")");
	logger().debug() << "rs = " << rs;
	HandleSeq texts;
	_tmp_as.get_all_atoms(texts);

	// Define initial pattern (to speed up mining)
	Handle XYZW = al(VARIABLE_LIST, X, Y, Z, W),
		clauses = al(AND_LINK,
		             al(INHERITANCE_LINK, X, Y),
		             al(INHERITANCE_LINK, X, Z),
		             al(INHERITANCE_LINK, X, W)),
		initpat = al(LAMBDA_LINK, XYZW, clauses);

	// Run the pattern miner
	Handle results = run_pm(texts, 5, 1000, initpat);

	// The pattern of interest looks like
	//
	// Lambda
	//   X
	// And
	//   Inheritance
	//     X
	//     Concept "man"
	//   Inheritance
	//     X
	//     Concept "soda drinker"
	//   Inheritance
	//     X
	//     Concept "ugly"
	Handle man = an(CONCEPT_NODE, "man"),
		soda_drinker = an(CONCEPT_NODE, "soda drinker"),
		ugly = an(CONCEPT_NODE, "ugly"),
		is_man = al(INHERITANCE_LINK, X, man),
		is_soda_drinker = al(INHERITANCE_LINK, X, soda_drinker),
		is_ugly = al(INHERITANCE_LINK, X, ugly),
		expected_pattern = mk_minsup_eval(5,
		                                  al(LAMBDA_LINK,
		                                     X,
		                                     al(AND_LINK,
		                                        is_man,
		                                        is_soda_drinker,
		                                        is_ugly)));

	logger().debug() << "results = " << oc_to_string(results);
	logger().debug() << "expected_pattern = " << oc_to_string(expected_pattern);

	TS_ASSERT(is_in(expected_pattern, results->getOutgoingSet()));
}

#undef al
#undef an
#undef tmp_al
#undef tmp_an
